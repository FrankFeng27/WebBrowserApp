/*! For license information please see bundle.js.LICENSE.txt */
!function(){var e={110:function(e,t,n){"use strict";var r=n(309),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?i:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!==typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var i=s(n);f&&(i=i.concat(f(n)));for(var l=u(t),m=u(n),v=0;v<i.length;++v){var y=i[v];if(!a[y]&&(!r||!r[y])&&(!m||!m[y])&&(!l||!l[y])){var g=d(n,y);try{c(t,y,g)}catch(b){}}}}return t}},746:function(e,t){"use strict";var n="function"===typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,s=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,v=n?Symbol.for("react.lazy"):60116,y=n?Symbol.for("react.block"):60121,g=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function S(e){if("object"===typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case s:case f:case a:case l:case i:case p:return e;default:switch(e=e&&e.$$typeof){case c:case d:case v:case m:case u:return e;default:return t}}case o:return t}}}function k(e){return S(e)===f}t.AsyncMode=s,t.ConcurrentMode=f,t.ContextConsumer=c,t.ContextProvider=u,t.Element=r,t.ForwardRef=d,t.Fragment=a,t.Lazy=v,t.Memo=m,t.Portal=o,t.Profiler=l,t.StrictMode=i,t.Suspense=p,t.isAsyncMode=function(e){return k(e)||S(e)===s},t.isConcurrentMode=k,t.isContextConsumer=function(e){return S(e)===c},t.isContextProvider=function(e){return S(e)===u},t.isElement=function(e){return"object"===typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return S(e)===d},t.isFragment=function(e){return S(e)===a},t.isLazy=function(e){return S(e)===v},t.isMemo=function(e){return S(e)===m},t.isPortal=function(e){return S(e)===o},t.isProfiler=function(e){return S(e)===l},t.isStrictMode=function(e){return S(e)===i},t.isSuspense=function(e){return S(e)===p},t.isValidElementType=function(e){return"string"===typeof e||"function"===typeof e||e===a||e===f||e===l||e===i||e===p||e===h||"object"===typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===m||e.$$typeof===u||e.$$typeof===c||e.$$typeof===d||e.$$typeof===g||e.$$typeof===b||e.$$typeof===w||e.$$typeof===y)},t.typeOf=S},309:function(e,t,n){"use strict";e.exports=n(746)},463:function(e,t,n){"use strict";var r=n(791),o=n(296);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,l={};function u(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(l[e]=t,e=0;e<t.length;e++)i.add(t[e])}var s=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function g(e){return e[1].toUpperCase()}function b(e,t,n,r){var o=v.hasOwnProperty(t)?v[t]:null;(null!==o?0!==o.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null===t||"undefined"===typeof t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!f.call(h,e)||!f.call(p,e)&&(d.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,g);v[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,g);v[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,g);v[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,S=Symbol.for("react.element"),k=Symbol.for("react.portal"),x=Symbol.for("react.fragment"),E=Symbol.for("react.strict_mode"),_=Symbol.for("react.profiler"),C=Symbol.for("react.provider"),P=Symbol.for("react.context"),O=Symbol.for("react.forward_ref"),T=Symbol.for("react.suspense"),N=Symbol.for("react.suspense_list"),A=Symbol.for("react.memo"),L=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var R=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var z=Symbol.iterator;function j(e){return null===e||"object"!==typeof e?null:"function"===typeof(e=z&&e[z]||e["@@iterator"])?e:null}var D,I=Object.assign;function F(e){if(void 0===D)try{throw Error()}catch(n){var t=n.stack.trim().match(/\n( *(at )?)/);D=t&&t[1]||""}return"\n"+D+e}var M=!1;function U(e,t){if(!e||M)return"";M=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"===typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(c){var r=c}Reflect.construct(e,[],t)}else{try{t.call()}catch(c){r=c}e.call(t.prototype)}else{try{throw Error()}catch(c){r=c}e()}}catch(c){if(c&&r&&"string"===typeof c.stack){for(var o=c.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,l=a.length-1;1<=i&&0<=l&&o[i]!==a[l];)l--;for(;1<=i&&0<=l;i--,l--)if(o[i]!==a[l]){if(1!==i||1!==l)do{if(i--,0>--l||o[i]!==a[l]){var u="\n"+o[i].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=i&&0<=l);break}}}finally{M=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?F(e):""}function $(e){switch(e.tag){case 5:return F(e.type);case 16:return F("Lazy");case 13:return F("Suspense");case 19:return F("SuspenseList");case 0:case 2:case 15:return e=U(e.type,!1);case 11:return e=U(e.type.render,!1);case 1:return e=U(e.type,!0);default:return""}}function W(e){if(null==e)return null;if("function"===typeof e)return e.displayName||e.name||null;if("string"===typeof e)return e;switch(e){case x:return"Fragment";case k:return"Portal";case _:return"Profiler";case E:return"StrictMode";case T:return"Suspense";case N:return"SuspenseList"}if("object"===typeof e)switch(e.$$typeof){case P:return(e.displayName||"Context")+".Consumer";case C:return(e._context.displayName||"Context")+".Provider";case O:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case A:return null!==(t=e.displayName||null)?t:W(e.type)||"Memo";case L:t=e._payload,e=e._init;try{return W(e(t))}catch(n){}}return null}function H(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return W(t);case 8:return t===E?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"===typeof t)return t.displayName||t.name||null;if("string"===typeof t)return t}return null}function V(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function B(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function K(e){e._valueTracker||(e._valueTracker=function(e){var t=B(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&"undefined"!==typeof n&&"function"===typeof n.get&&"function"===typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=B(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function q(e){if("undefined"===typeof(e=e||("undefined"!==typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Y(e,t){var n=t.checked;return I({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function G(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=V(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function J(e,t){X(e,t);var n=V(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,V(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&q(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+V(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return I({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(te(n)){if(1<n.length)throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:V(n)}}function ae(e,t){var n=V(t.value),r=V(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ce,se,fe=(se=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ce=ce||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ce.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return se(e,t)}))}:se);function de(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"===typeof t||""===t?"":n||"number"!==typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ve(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ye=I({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ge(e,t){if(t){if(ye[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!==typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!==typeof t.style)throw Error(a(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"===typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function Se(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var ke=null,xe=null,Ee=null;function _e(e){if(e=wo(e)){if("function"!==typeof ke)throw Error(a(280));var t=e.stateNode;t&&(t=ko(t),ke(e.stateNode,e.type,t))}}function Ce(e){xe?Ee?Ee.push(e):Ee=[e]:xe=e}function Pe(){if(xe){var e=xe,t=Ee;if(Ee=xe=null,_e(e),t)for(e=0;e<t.length;e++)_e(t[e])}}function Oe(e,t){return e(t)}function Te(){}var Ne=!1;function Ae(e,t,n){if(Ne)return e(t,n);Ne=!0;try{return Oe(e,t,n)}finally{Ne=!1,(null!==xe||null!==Ee)&&(Te(),Pe())}}function Le(e,t){var n=e.stateNode;if(null===n)return null;var r=ko(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!==typeof n)throw Error(a(231,t,typeof n));return n}var Re=!1;if(s)try{var ze={};Object.defineProperty(ze,"passive",{get:function(){Re=!0}}),window.addEventListener("test",ze,ze),window.removeEventListener("test",ze,ze)}catch(se){Re=!1}function je(e,t,n,r,o,a,i,l,u){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(s){this.onError(s)}}var De=!1,Ie=null,Fe=!1,Me=null,Ue={onError:function(e){De=!0,Ie=e}};function $e(e,t,n,r,o,a,i,l,u){De=!1,Ie=null,je.apply(Ue,arguments)}function We(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!==(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function He(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function Ve(e){if(We(e)!==e)throw Error(a(188))}function Be(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=We(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return Ve(o),e;if(i===r)return Ve(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=i;break}if(u===r){l=!0,r=o,n=i;break}u=u.sibling}if(!l){for(u=i.child;u;){if(u===n){l=!0,n=i,r=o;break}if(u===r){l=!0,r=i,n=o;break}u=u.sibling}if(!l)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e))?Ke(e):null}function Ke(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Ke(e);if(null!==t)return t;e=e.sibling}return null}var Qe=o.unstable_scheduleCallback,qe=o.unstable_cancelCallback,Ye=o.unstable_shouldYield,Ge=o.unstable_requestPaint,Xe=o.unstable_now,Je=o.unstable_getCurrentPriorityLevel,Ze=o.unstable_ImmediatePriority,et=o.unstable_UserBlockingPriority,tt=o.unstable_NormalPriority,nt=o.unstable_LowPriority,rt=o.unstable_IdlePriority,ot=null,at=null;var it=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(lt(e)/ut|0)|0},lt=Math.log,ut=Math.LN2;var ct=64,st=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,a=e.pingedLanes,i=268435455&n;if(0!==i){var l=i&~o;0!==l?r=ft(l):0!==(a&=i)&&(r=ft(a))}else 0!==(i=n&~o)?r=ft(i):0!==a&&(r=ft(a));if(0===r)return 0;if(0!==t&&t!==r&&0===(t&o)&&((o=r&-r)>=(a=t&-t)||16===o&&0!==(4194240&a)))return t;if(0!==(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-it(t)),r|=e[n],t&=~o;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!==(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=ct;return 0===(4194240&(ct<<=1))&&(ct=64),e}function vt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function yt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function gt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var bt=0;function wt(e){return 1<(e&=-e)?4<e?0!==(268435455&e)?16:536870912:4:1}var St,kt,xt,Et,_t,Ct=!1,Pt=[],Ot=null,Tt=null,Nt=null,At=new Map,Lt=new Map,Rt=[],zt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function jt(e,t){switch(e){case"focusin":case"focusout":Ot=null;break;case"dragenter":case"dragleave":Tt=null;break;case"mouseover":case"mouseout":Nt=null;break;case"pointerover":case"pointerout":At.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Lt.delete(t.pointerId)}}function Dt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[o]},null!==t&&(null!==(t=wo(t))&&kt(t)),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function It(e){var t=bo(e.target);if(null!==t){var n=We(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=He(n)))return e.blockedOn=t,void _t(e.priority,(function(){xt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Ft(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Yt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=wo(n))&&kt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);we=r,n.target.dispatchEvent(r),we=null,t.shift()}return!0}function Mt(e,t,n){Ft(e)&&n.delete(t)}function Ut(){Ct=!1,null!==Ot&&Ft(Ot)&&(Ot=null),null!==Tt&&Ft(Tt)&&(Tt=null),null!==Nt&&Ft(Nt)&&(Nt=null),At.forEach(Mt),Lt.forEach(Mt)}function $t(e,t){e.blockedOn===t&&(e.blockedOn=null,Ct||(Ct=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Ut)))}function Wt(e){function t(t){return $t(t,e)}if(0<Pt.length){$t(Pt[0],e);for(var n=1;n<Pt.length;n++){var r=Pt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Ot&&$t(Ot,e),null!==Tt&&$t(Tt,e),null!==Nt&&$t(Nt,e),At.forEach(t),Lt.forEach(t),n=0;n<Rt.length;n++)(r=Rt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Rt.length&&null===(n=Rt[0]).blockedOn;)It(n),null===n.blockedOn&&Rt.shift()}var Ht=w.ReactCurrentBatchConfig,Vt=!0;function Bt(e,t,n,r){var o=bt,a=Ht.transition;Ht.transition=null;try{bt=1,Qt(e,t,n,r)}finally{bt=o,Ht.transition=a}}function Kt(e,t,n,r){var o=bt,a=Ht.transition;Ht.transition=null;try{bt=4,Qt(e,t,n,r)}finally{bt=o,Ht.transition=a}}function Qt(e,t,n,r){if(Vt){var o=Yt(e,t,n,r);if(null===o)Vr(e,t,r,qt,n),jt(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return Ot=Dt(Ot,e,t,n,r,o),!0;case"dragenter":return Tt=Dt(Tt,e,t,n,r,o),!0;case"mouseover":return Nt=Dt(Nt,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return At.set(a,Dt(At.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,Lt.set(a,Dt(Lt.get(a)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(jt(e,r),4&t&&-1<zt.indexOf(e)){for(;null!==o;){var a=wo(o);if(null!==a&&St(a),null===(a=Yt(e,t,n,r))&&Vr(e,t,r,qt,n),a===o)break;o=a}null!==o&&r.stopPropagation()}else Vr(e,t,r,null,n)}}var qt=null;function Yt(e,t,n,r){if(qt=null,null!==(e=bo(e=Se(r))))if(null===(t=We(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=He(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return qt=e,null}function Gt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Je()){case Ze:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Xt=null,Jt=null,Zt=null;function en(){if(Zt)return Zt;var e,t,n=Jt,r=n.length,o="value"in Xt?Xt.value:Xt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return Zt=o.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return I(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!==typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!==typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,ln,un,cn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},sn=on(cn),fn=I({},cn,{view:0,detail:0}),dn=on(fn),pn=I({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:_n,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(an=e.screenX-un.screenX,ln=e.screenY-un.screenY):ln=an=0,un=e),an)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),hn=on(pn),mn=on(I({},pn,{dataTransfer:0})),vn=on(I({},fn,{relatedTarget:0})),yn=on(I({},cn,{animationName:0,elapsedTime:0,pseudoElement:0})),gn=I({},cn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=on(gn),wn=on(I({},cn,{data:0})),Sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},xn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function En(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=xn[e])&&!!t[e]}function _n(){return En}var Cn=I({},fn,{key:function(e){if(e.key){var t=Sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?kn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:_n,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Pn=on(Cn),On=on(I({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Tn=on(I({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:_n})),Nn=on(I({},cn,{propertyName:0,elapsedTime:0,pseudoElement:0})),An=I({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Ln=on(An),Rn=[9,13,27,32],zn=s&&"CompositionEvent"in window,jn=null;s&&"documentMode"in document&&(jn=document.documentMode);var Dn=s&&"TextEvent"in window&&!jn,In=s&&(!zn||jn&&8<jn&&11>=jn),Fn=String.fromCharCode(32),Mn=!1;function Un(e,t){switch(e){case"keyup":return-1!==Rn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function $n(e){return"object"===typeof(e=e.detail)&&"data"in e?e.data:null}var Wn=!1;var Hn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Hn[e.type]:"textarea"===t}function Bn(e,t,n,r){Ce(r),0<(t=Kr(t,"onChange")).length&&(n=new sn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Kn=null,Qn=null;function qn(e){Fr(e,0)}function Yn(e){if(Q(So(e)))return e}function Gn(e,t){if("change"===e)return t}var Xn=!1;if(s){var Jn;if(s){var Zn="oninput"in document;if(!Zn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Zn="function"===typeof er.oninput}Jn=Zn}else Jn=!1;Xn=Jn&&(!document.documentMode||9<document.documentMode)}function tr(){Kn&&(Kn.detachEvent("onpropertychange",nr),Qn=Kn=null)}function nr(e){if("value"===e.propertyName&&Yn(Qn)){var t=[];Bn(t,Qn,e,Se(e)),Ae(qn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Qn=n,(Kn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Yn(Qn)}function ar(e,t){if("click"===e)return Yn(t)}function ir(e,t){if("input"===e||"change"===e)return Yn(t)}var lr="function"===typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e===1/t)||e!==e&&t!==t};function ur(e,t){if(lr(e,t))return!0;if("object"!==typeof e||null===e||"object"!==typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!f.call(t,o)||!lr(e[o],t[o]))return!1}return!0}function cr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function sr(e,t){var n,r=cr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=q();t instanceof e.HTMLIFrameElement;){try{var n="string"===typeof t.contentWindow.location.href}catch(r){n=!1}if(!n)break;t=q((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=dr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&fr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,a=Math.min(r.start,o);r=void 0===r.end?a:Math.min(r.end,o),!e.extend&&a>r&&(o=r,r=a,a=o),o=sr(n,a);var i=sr(n,r);o&&i&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),a>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"===typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=s&&"documentMode"in document&&11>=document.documentMode,vr=null,yr=null,gr=null,br=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==vr||vr!==q(r)||("selectionStart"in(r=vr)&&pr(r)?r={start:r.selectionStart,end:r.selectionEnd}:r={anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},gr&&ur(gr,r)||(gr=r,0<(r=Kr(yr,"onSelect")).length&&(t=new sn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=vr)))}function Sr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kr={animationend:Sr("Animation","AnimationEnd"),animationiteration:Sr("Animation","AnimationIteration"),animationstart:Sr("Animation","AnimationStart"),transitionend:Sr("Transition","TransitionEnd")},xr={},Er={};function _r(e){if(xr[e])return xr[e];if(!kr[e])return e;var t,n=kr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Er)return xr[e]=n[t];return e}s&&(Er=document.createElement("div").style,"AnimationEvent"in window||(delete kr.animationend.animation,delete kr.animationiteration.animation,delete kr.animationstart.animation),"TransitionEvent"in window||delete kr.transitionend.transition);var Cr=_r("animationend"),Pr=_r("animationiteration"),Or=_r("animationstart"),Tr=_r("transitionend"),Nr=new Map,Ar="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Lr(e,t){Nr.set(e,t),u(t,[e])}for(var Rr=0;Rr<Ar.length;Rr++){var zr=Ar[Rr];Lr(zr.toLowerCase(),"on"+(zr[0].toUpperCase()+zr.slice(1)))}Lr(Cr,"onAnimationEnd"),Lr(Pr,"onAnimationIteration"),Lr(Or,"onAnimationStart"),Lr("dblclick","onDoubleClick"),Lr("focusin","onFocus"),Lr("focusout","onBlur"),Lr(Tr,"onTransitionEnd"),c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var jr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Dr=new Set("cancel close invalid load scroll toggle".split(" ").concat(jr));function Ir(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,l,u,c){if($e.apply(this,arguments),De){if(!De)throw Error(a(198));var s=Ie;De=!1,Ie=null,Fe||(Fe=!0,Me=s)}}(r,t,void 0,e),e.currentTarget=null}function Fr(e,t){t=0!==(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],u=l.instance,c=l.currentTarget;if(l=l.listener,u!==a&&o.isPropagationStopped())break e;Ir(o,l,c),a=u}else for(i=0;i<r.length;i++){if(u=(l=r[i]).instance,c=l.currentTarget,l=l.listener,u!==a&&o.isPropagationStopped())break e;Ir(o,l,c),a=u}}}if(Fe)throw e=Me,Fe=!1,Me=null,e}function Mr(e,t){var n=t[vo];void 0===n&&(n=t[vo]=new Set);var r=e+"__bubble";n.has(r)||(Hr(t,e,2,!1),n.add(r))}function Ur(e,t,n){var r=0;t&&(r|=4),Hr(n,e,r,t)}var $r="_reactListening"+Math.random().toString(36).slice(2);function Wr(e){if(!e[$r]){e[$r]=!0,i.forEach((function(t){"selectionchange"!==t&&(Dr.has(t)||Ur(t,!1,e),Ur(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[$r]||(t[$r]=!0,Ur("selectionchange",!1,t))}}function Hr(e,t,n,r){switch(Gt(t)){case 1:var o=Bt;break;case 4:o=Kt;break;default:o=Qt}n=o.bind(null,t,n,e),o=void 0,!Re||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Vr(e,t,n,r,o){var a=r;if(0===(1&t)&&0===(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=bo(l)))return;if(5===(u=i.tag)||6===u){r=a=i;continue e}l=l.parentNode}}r=r.return}Ae((function(){var r=a,o=Se(n),i=[];e:{var l=Nr.get(e);if(void 0!==l){var u=sn,c=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":u=Pn;break;case"focusin":c="focus",u=vn;break;case"focusout":c="blur",u=vn;break;case"beforeblur":case"afterblur":u=vn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Tn;break;case Cr:case Pr:case Or:u=yn;break;case Tr:u=Nn;break;case"scroll":u=dn;break;case"wheel":u=Ln;break;case"copy":case"cut":case"paste":u=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=On}var s=0!==(4&t),f=!s&&"scroll"===e,d=s?null!==l?l+"Capture":null:l;s=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&(null!=(m=Le(h,d))&&s.push(Br(h,m,p)))),f)break;h=h.return}0<s.length&&(l=new u(l,c,null,n,o),i.push({event:l,listeners:s}))}}if(0===(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===we||!(c=n.relatedTarget||n.fromElement)||!bo(c)&&!c[mo])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(c=(c=n.relatedTarget||n.toElement)?bo(c):null)&&(c!==(f=We(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(u=null,c=r),u!==c)){if(s=hn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(s=On,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?l:So(u),p=null==c?l:So(c),(l=new s(m,h+"leave",u,n,o)).target=f,l.relatedTarget=p,m=null,bo(o)===r&&((s=new s(d,h+"enter",c,n,o)).target=p,s.relatedTarget=f,m=s),f=m,u&&c)e:{for(d=c,h=0,p=s=u;p;p=Qr(p))h++;for(p=0,m=d;m;m=Qr(m))p++;for(;0<h-p;)s=Qr(s),h--;for(;0<p-h;)d=Qr(d),p--;for(;h--;){if(s===d||null!==d&&s===d.alternate)break e;s=Qr(s),d=Qr(d)}s=null}else s=null;null!==u&&qr(i,l,u,s,!1),null!==c&&null!==f&&qr(i,f,c,s,!0)}if("select"===(u=(l=r?So(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var v=Gn;else if(Vn(l))if(Xn)v=ir;else{v=or;var y=rr}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(v=ar);switch(v&&(v=v(e,r))?Bn(i,v,n,o):(y&&y(e,l,r),"focusout"===e&&(y=l._wrapperState)&&y.controlled&&"number"===l.type&&ee(l,"number",l.value)),y=r?So(r):window,e){case"focusin":(Vn(y)||"true"===y.contentEditable)&&(vr=y,yr=r,gr=null);break;case"focusout":gr=yr=vr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,wr(i,n,o);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":wr(i,n,o)}var g;if(zn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Wn?Un(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(In&&"ko"!==n.locale&&(Wn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Wn&&(g=en()):(Jt="value"in(Xt=o)?Xt.value:Xt.textContent,Wn=!0)),0<(y=Kr(r,b)).length&&(b=new wn(b,e,null,n,o),i.push({event:b,listeners:y}),g?b.data=g:null!==(g=$n(n))&&(b.data=g))),(g=Dn?function(e,t){switch(e){case"compositionend":return $n(t);case"keypress":return 32!==t.which?null:(Mn=!0,Fn);case"textInput":return(e=t.data)===Fn&&Mn?null:e;default:return null}}(e,n):function(e,t){if(Wn)return"compositionend"===e||!zn&&Un(e,t)?(e=en(),Zt=Jt=Xt=null,Wn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return In&&"ko"!==t.locale?null:t.data}}(e,n))&&(0<(r=Kr(r,"onBeforeInput")).length&&(o=new wn("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=g))}Fr(i,t)}))}function Br(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Kr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Le(e,n))&&r.unshift(Br(e,a,o)),null!=(a=Le(e,t))&&r.push(Br(e,a,o))),e=e.return}return r}function Qr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function qr(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var l=n,u=l.alternate,c=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==c&&(l=c,o?null!=(u=Le(n,a))&&i.unshift(Br(n,u,l)):o||null!=(u=Le(n,a))&&i.push(Br(n,u,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Yr=/\r\n?/g,Gr=/\u0000|\uFFFD/g;function Xr(e){return("string"===typeof e?e:""+e).replace(Yr,"\n").replace(Gr,"")}function Jr(e,t,n){if(t=Xr(t),Xr(e)!==t&&n)throw Error(a(425))}function Zr(){}var eo=null,to=null;function no(e,t){return"textarea"===e||"noscript"===e||"string"===typeof t.children||"number"===typeof t.children||"object"===typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ro="function"===typeof setTimeout?setTimeout:void 0,oo="function"===typeof clearTimeout?clearTimeout:void 0,ao="function"===typeof Promise?Promise:void 0,io="function"===typeof queueMicrotask?queueMicrotask:"undefined"!==typeof ao?function(e){return ao.resolve(null).then(e).catch(lo)}:ro;function lo(e){setTimeout((function(){throw e}))}function uo(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===r)return e.removeChild(o),void Wt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=o}while(n);Wt(t)}function co(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function so(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fo=Math.random().toString(36).slice(2),po="__reactFiber$"+fo,ho="__reactProps$"+fo,mo="__reactContainer$"+fo,vo="__reactEvents$"+fo,yo="__reactListeners$"+fo,go="__reactHandles$"+fo;function bo(e){var t=e[po];if(t)return t;for(var n=e.parentNode;n;){if(t=n[mo]||n[po]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=so(e);null!==e;){if(n=e[po])return n;e=so(e)}return t}n=(e=n).parentNode}return null}function wo(e){return!(e=e[po]||e[mo])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function So(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function ko(e){return e[ho]||null}var xo=[],Eo=-1;function _o(e){return{current:e}}function Co(e){0>Eo||(e.current=xo[Eo],xo[Eo]=null,Eo--)}function Po(e,t){Eo++,xo[Eo]=e.current,e.current=t}var Oo={},To=_o(Oo),No=_o(!1),Ao=Oo;function Lo(e,t){var n=e.type.contextTypes;if(!n)return Oo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function Ro(e){return null!==(e=e.childContextTypes)&&void 0!==e}function zo(){Co(No),Co(To)}function jo(e,t,n){if(To.current!==Oo)throw Error(a(168));Po(To,t),Po(No,n)}function Do(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!==typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(a(108,H(e)||"Unknown",o));return I({},n,r)}function Io(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Oo,Ao=To.current,Po(To,e),Po(No,No.current),!0}function Fo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=Do(e,t,Ao),r.__reactInternalMemoizedMergedChildContext=e,Co(No),Co(To),Po(To,e)):Co(No),Po(No,n)}var Mo=null,Uo=!1,$o=!1;function Wo(e){null===Mo?Mo=[e]:Mo.push(e)}function Ho(){if(!$o&&null!==Mo){$o=!0;var e=0,t=bt;try{var n=Mo;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Mo=null,Uo=!1}catch(o){throw null!==Mo&&(Mo=Mo.slice(e+1)),Qe(Ze,Ho),o}finally{bt=t,$o=!1}}return null}var Vo=w.ReactCurrentBatchConfig;function Bo(e,t){if(e&&e.defaultProps){for(var n in t=I({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Ko=_o(null),Qo=null,qo=null,Yo=null;function Go(){Yo=qo=Qo=null}function Xo(e){var t=Ko.current;Co(Ko),e._currentValue=t}function Jo(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Zo(e,t){Qo=e,Yo=qo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!==(e.lanes&t)&&(Sl=!0),e.firstContext=null)}function ea(e){var t=e._currentValue;if(Yo!==e)if(e={context:e,memoizedValue:t,next:null},null===qo){if(null===Qo)throw Error(a(308));qo=e,Qo.dependencies={lanes:0,firstContext:e}}else qo=qo.next=e;return t}var ta=null,na=!1;function ra(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function oa(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function aa(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function ia(e,t){var n=e.updateQueue;null!==n&&(n=n.shared,tc(e)?(null===(e=n.interleaved)?(t.next=t,null===ta?ta=[n]:ta.push(n)):(t.next=e.next,e.next=t),n.interleaved=t):(null===(e=n.pending)?t.next=t:(t.next=e.next,e.next=t),n.pending=t))}function la(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!==(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}function ua(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function ca(e,t,n,r){var o=e.updateQueue;na=!1;var a=o.firstBaseUpdate,i=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var u=l,c=u.next;u.next=null,null===i?a=c:i.next=c,i=u;var s=e.alternate;null!==s&&((l=(s=s.updateQueue).lastBaseUpdate)!==i&&(null===l?s.firstBaseUpdate=c:l.next=c,s.lastBaseUpdate=u))}if(null!==a){var f=o.baseState;for(i=0,s=c=u=null,l=a;;){var d=l.lane,p=l.eventTime;if((r&d)===d){null!==s&&(s=s.next={eventTime:p,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var h=e,m=l;switch(d=t,p=n,m.tag){case 1:if("function"===typeof(h=m.payload)){f=h.call(p,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null===(d="function"===typeof(h=m.payload)?h.call(p,f,d):h)||void 0===d)break e;f=I({},f,d);break e;case 2:na=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(d=o.effects)?o.effects=[l]:d.push(l))}else p={eventTime:p,lane:d,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===s?(c=s=p,u=f):s=s.next=p,i|=d;if(null===(l=l.next)){if(null===(l=o.shared.pending))break;l=(d=l).next,d.next=null,o.lastBaseUpdate=d,o.shared.pending=null}}if(null===s&&(u=f),o.baseState=u,o.firstBaseUpdate=c,o.lastBaseUpdate=s,null!==(t=o.shared.interleaved)){o=t;do{i|=o.lane,o=o.next}while(o!==t)}else null===a&&(o.shared.lanes=0);Ru|=i,e.lanes=i,e.memoizedState=f}}function sa(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!==typeof o)throw Error(a(191,o));o.call(r)}}}var fa=(new r.Component).refs;function da(e,t,n,r){n=null===(n=n(r,t=e.memoizedState))||void 0===n?t:I({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var pa={isMounted:function(e){return!!(e=e._reactInternals)&&We(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Xu(),o=Ju(e),a=aa(r,o);a.payload=t,void 0!==n&&null!==n&&(a.callback=n),ia(e,a),null!==(t=Zu(e,o,r))&&la(t,e,o)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Xu(),o=Ju(e),a=aa(r,o);a.tag=1,a.payload=t,void 0!==n&&null!==n&&(a.callback=n),ia(e,a),null!==(t=Zu(e,o,r))&&la(t,e,o)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Xu(),r=Ju(e),o=aa(n,r);o.tag=2,void 0!==t&&null!==t&&(o.callback=t),ia(e,o),null!==(t=Zu(e,r,n))&&la(t,e,r)}};function ha(e,t,n,r,o,a,i){return"function"===typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!t.prototype||!t.prototype.isPureReactComponent||(!ur(n,r)||!ur(o,a))}function ma(e,t,n){var r=!1,o=Oo,a=t.contextType;return"object"===typeof a&&null!==a?a=ea(a):(o=Ro(t)?Ao:To.current,a=(r=null!==(r=t.contextTypes)&&void 0!==r)?Lo(e,o):Oo),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=pa,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function va(e,t,n,r){e=t.state,"function"===typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"===typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&pa.enqueueReplaceState(t,t.state,null)}function ya(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=fa,ra(e);var a=t.contextType;"object"===typeof a&&null!==a?o.context=ea(a):(a=Ro(t)?Ao:To.current,o.context=Lo(e,a)),o.state=e.memoizedState,"function"===typeof(a=t.getDerivedStateFromProps)&&(da(e,t,a,n),o.state=e.memoizedState),"function"===typeof t.getDerivedStateFromProps||"function"===typeof o.getSnapshotBeforeUpdate||"function"!==typeof o.UNSAFE_componentWillMount&&"function"!==typeof o.componentWillMount||(t=o.state,"function"===typeof o.componentWillMount&&o.componentWillMount(),"function"===typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&pa.enqueueReplaceState(o,o.state,null),ca(e,n,o,r),o.state=e.memoizedState),"function"===typeof o.componentDidMount&&(e.flags|=4194308)}var ga=[],ba=0,wa=null,Sa=0,ka=[],xa=0,Ea=null,_a=1,Ca="";function Pa(e,t){ga[ba++]=Sa,ga[ba++]=wa,wa=e,Sa=t}function Oa(e,t,n){ka[xa++]=_a,ka[xa++]=Ca,ka[xa++]=Ea,Ea=e;var r=_a;e=Ca;var o=32-it(r)-1;r&=~(1<<o),n+=1;var a=32-it(t)+o;if(30<a){var i=o-o%5;a=(r&(1<<i)-1).toString(32),r>>=i,o-=i,_a=1<<32-it(t)+o|n<<o|r,Ca=a+e}else _a=1<<a|n<<o|r,Ca=e}function Ta(e){null!==e.return&&(Pa(e,1),Oa(e,1,0))}function Na(e){for(;e===wa;)wa=ga[--ba],ga[ba]=null,Sa=ga[--ba],ga[ba]=null;for(;e===Ea;)Ea=ka[--xa],ka[xa]=null,Ca=ka[--xa],ka[xa]=null,_a=ka[--xa],ka[xa]=null}var Aa=null,La=null,Ra=!1,za=null;function ja(e,t){var n=Nc(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function Da(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,Aa=e,La=co(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,Aa=e,La=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Ea?{id:_a,overflow:Ca}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Nc(18,null,null,0)).stateNode=t,n.return=e,e.child=n,Aa=e,La=null,!0);default:return!1}}function Ia(e){return 0!==(1&e.mode)&&0===(128&e.flags)}function Fa(e){if(Ra){var t=La;if(t){var n=t;if(!Da(e,t)){if(Ia(e))throw Error(a(418));t=co(n.nextSibling);var r=Aa;t&&Da(e,t)?ja(r,n):(e.flags=-4097&e.flags|2,Ra=!1,Aa=e)}}else{if(Ia(e))throw Error(a(418));e.flags=-4097&e.flags|2,Ra=!1,Aa=e}}}function Ma(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Aa=e}function Ua(e){if(e!==Aa)return!1;if(!Ra)return Ma(e),Ra=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!no(e.type,e.memoizedProps)),t&&(t=La)){if(Ia(e)){for(e=La;e;)e=co(e.nextSibling);throw Error(a(418))}for(;t;)ja(e,t),t=co(t.nextSibling)}if(Ma(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){La=co(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}La=null}}else La=Aa?co(e.stateNode.nextSibling):null;return!0}function $a(){La=Aa=null,Ra=!1}function Wa(e){null===za?za=[e]:za.push(e)}function Ha(e,t,n){if(null!==(e=n.ref)&&"function"!==typeof e&&"object"!==typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=r,i=""+e;return null!==t&&null!==t.ref&&"function"===typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=o.refs;t===fa&&(t=o.refs={}),null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!==typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Va(e,t){throw e=Object.prototype.toString.call(t),Error(a(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Ba(e){return(0,e._init)(e._payload)}function Ka(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Lc(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Dc(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){var a=n.type;return a===x?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===a||"object"===typeof a&&null!==a&&a.$$typeof===L&&Ba(a)===t.type)?((r=o(t,n.props)).ref=Ha(e,t,n),r.return=e,r):((r=Rc(n.type,n.key,n.props,null,e.mode,r)).ref=Ha(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ic(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=zc(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"===typeof t&&""!==t||"number"===typeof t)return(t=Dc(""+t,e.mode,n)).return=e,t;if("object"===typeof t&&null!==t){switch(t.$$typeof){case S:return(n=Rc(t.type,t.key,t.props,null,e.mode,n)).ref=Ha(e,null,t),n.return=e,n;case k:return(t=Ic(t,e.mode,n)).return=e,t;case L:return d(e,(0,t._init)(t._payload),n)}if(te(t)||j(t))return(t=zc(t,e.mode,n,null)).return=e,t;Va(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"===typeof n&&""!==n||"number"===typeof n)return null!==o?null:u(e,t,""+n,r);if("object"===typeof n&&null!==n){switch(n.$$typeof){case S:return n.key===o?c(e,t,n,r):null;case k:return n.key===o?s(e,t,n,r):null;case L:return p(e,t,(o=n._init)(n._payload),r)}if(te(n)||j(n))return null!==o?null:f(e,t,n,r,null);Va(e,n)}return null}function h(e,t,n,r,o){if("string"===typeof r&&""!==r||"number"===typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"===typeof r&&null!==r){switch(r.$$typeof){case S:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o);case k:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o);case L:return h(e,t,n,(0,r._init)(r._payload),o)}if(te(r)||j(r))return f(t,e=e.get(n)||null,r,o,null);Va(t,r)}return null}function m(o,a,l,u){for(var c=null,s=null,f=a,m=a=0,v=null;null!==f&&m<l.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var y=p(o,f,l[m],u);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(o,f),a=i(y,a,m),null===s?c=y:s.sibling=y,s=y,f=v}if(m===l.length)return n(o,f),Ra&&Pa(o,m),c;if(null===f){for(;m<l.length;m++)null!==(f=d(o,l[m],u))&&(a=i(f,a,m),null===s?c=f:s.sibling=f,s=f);return Ra&&Pa(o,m),c}for(f=r(o,f);m<l.length;m++)null!==(v=h(f,o,m,l[m],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),a=i(v,a,m),null===s?c=v:s.sibling=v,s=v);return e&&f.forEach((function(e){return t(o,e)})),Ra&&Pa(o,m),c}function v(o,l,u,c){var s=j(u);if("function"!==typeof s)throw Error(a(150));if(null==(u=s.call(u)))throw Error(a(151));for(var f=s=null,m=l,v=l=0,y=null,g=u.next();null!==m&&!g.done;v++,g=u.next()){m.index>v?(y=m,m=null):y=m.sibling;var b=p(o,m,g.value,c);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&t(o,m),l=i(b,l,v),null===f?s=b:f.sibling=b,f=b,m=y}if(g.done)return n(o,m),Ra&&Pa(o,v),s;if(null===m){for(;!g.done;v++,g=u.next())null!==(g=d(o,g.value,c))&&(l=i(g,l,v),null===f?s=g:f.sibling=g,f=g);return Ra&&Pa(o,v),s}for(m=r(o,m);!g.done;v++,g=u.next())null!==(g=h(m,o,v,g.value,c))&&(e&&null!==g.alternate&&m.delete(null===g.key?v:g.key),l=i(g,l,v),null===f?s=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(o,e)})),Ra&&Pa(o,v),s}return function e(r,a,i,u){if("object"===typeof i&&null!==i&&i.type===x&&null===i.key&&(i=i.props.children),"object"===typeof i&&null!==i){switch(i.$$typeof){case S:e:{for(var c=i.key,s=a;null!==s;){if(s.key===c){if((c=i.type)===x){if(7===s.tag){n(r,s.sibling),(a=o(s,i.props.children)).return=r,r=a;break e}}else if(s.elementType===c||"object"===typeof c&&null!==c&&c.$$typeof===L&&Ba(c)===s.type){n(r,s.sibling),(a=o(s,i.props)).ref=Ha(r,s,i),a.return=r,r=a;break e}n(r,s);break}t(r,s),s=s.sibling}i.type===x?((a=zc(i.props.children,r.mode,u,i.key)).return=r,r=a):((u=Rc(i.type,i.key,i.props,null,r.mode,u)).ref=Ha(r,a,i),u.return=r,r=u)}return l(r);case k:e:{for(s=i.key;null!==a;){if(a.key===s){if(4===a.tag&&a.stateNode.containerInfo===i.containerInfo&&a.stateNode.implementation===i.implementation){n(r,a.sibling),(a=o(a,i.children||[])).return=r,r=a;break e}n(r,a);break}t(r,a),a=a.sibling}(a=Ic(i,r.mode,u)).return=r,r=a}return l(r);case L:return e(r,a,(s=i._init)(i._payload),u)}if(te(i))return m(r,a,i,u);if(j(i))return v(r,a,i,u);Va(r,i)}return"string"===typeof i&&""!==i||"number"===typeof i?(i=""+i,null!==a&&6===a.tag?(n(r,a.sibling),(a=o(a,i)).return=r,r=a):(n(r,a),(a=Dc(i,r.mode,u)).return=r,r=a),l(r)):n(r,a)}}var Qa=Ka(!0),qa=Ka(!1),Ya={},Ga=_o(Ya),Xa=_o(Ya),Ja=_o(Ya);function Za(e){if(e===Ya)throw Error(a(174));return e}function ei(e,t){switch(Po(Ja,t),Po(Xa,e),Po(Ga,Ya),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ue(null,"");break;default:t=ue(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Co(Ga),Po(Ga,t)}function ti(){Co(Ga),Co(Xa),Co(Ja)}function ni(e){Za(Ja.current);var t=Za(Ga.current),n=ue(t,e.type);t!==n&&(Po(Xa,e),Po(Ga,n))}function ri(e){Xa.current===e&&(Co(Ga),Co(Xa))}var oi=_o(0);function ai(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!==(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ii=[];function li(){for(var e=0;e<ii.length;e++)ii[e]._workInProgressVersionPrimary=null;ii.length=0}var ui=w.ReactCurrentDispatcher,ci=w.ReactCurrentBatchConfig,si=0,fi=null,di=null,pi=null,hi=!1,mi=!1,vi=0,yi=0;function gi(){throw Error(a(321))}function bi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function wi(e,t,n,r,o,i){if(si=i,fi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,ui.current=null===e||null===e.memoizedState?rl:ol,e=n(r,o),mi){i=0;do{if(mi=!1,vi=0,25<=i)throw Error(a(301));i+=1,pi=di=null,t.updateQueue=null,ui.current=al,e=n(r,o)}while(mi)}if(ui.current=nl,t=null!==di&&null!==di.next,si=0,pi=di=fi=null,hi=!1,t)throw Error(a(300));return e}function Si(){var e=0!==vi;return vi=0,e}function ki(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===pi?fi.memoizedState=pi=e:pi=pi.next=e,pi}function xi(){if(null===di){var e=fi.alternate;e=null!==e?e.memoizedState:null}else e=di.next;var t=null===pi?fi.memoizedState:pi.next;if(null!==t)pi=t,di=e;else{if(null===e)throw Error(a(310));e={memoizedState:(di=e).memoizedState,baseState:di.baseState,baseQueue:di.baseQueue,queue:di.queue,next:null},null===pi?fi.memoizedState=pi=e:pi=pi.next=e}return pi}function Ei(e,t){return"function"===typeof t?t(e):t}function _i(e){var t=xi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=di,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var l=o.next;o.next=i.next,i.next=l}r.baseQueue=o=i,n.pending=null}if(null!==o){i=o.next,r=r.baseState;var u=l=null,c=null,s=i;do{var f=s.lane;if((si&f)===f)null!==c&&(c=c.next={lane:0,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null}),r=s.hasEagerState?s.eagerState:e(r,s.action);else{var d={lane:f,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null};null===c?(u=c=d,l=r):c=c.next=d,fi.lanes|=f,Ru|=f}s=s.next}while(null!==s&&s!==i);null===c?l=r:c.next=u,lr(r,t.memoizedState)||(Sl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=c,n.lastRenderedState=r}if(null!==(e=n.interleaved)){o=e;do{i=o.lane,fi.lanes|=i,Ru|=i,o=o.next}while(o!==e)}else null===o&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Ci(e){var t=xi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{i=e(i,l.action),l=l.next}while(l!==o);lr(i,t.memoizedState)||(Sl=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function Pi(){}function Oi(e,t){var n=fi,r=xi(),o=t(),i=!lr(r.memoizedState,o);if(i&&(r.memoizedState=o,Sl=!0),r=r.queue,Mi(Ai.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==pi&&1&pi.memoizedState.tag){if(n.flags|=2048,zi(9,Ni.bind(null,n,r,o,t),void 0,null),null===Cu)throw Error(a(349));0!==(30&si)||Ti(n,t,o)}return o}function Ti(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=fi.updateQueue)?(t={lastEffect:null,stores:null},fi.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ni(e,t,n,r){t.value=n,t.getSnapshot=r,Li(t)&&Zu(e,1,-1)}function Ai(e,t,n){return n((function(){Li(t)&&Zu(e,1,-1)}))}function Li(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(r){return!0}}function Ri(e){var t=ki();return"function"===typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ei,lastRenderedState:e},t.queue=e,e=e.dispatch=Xi.bind(null,fi,e),[t.memoizedState,e]}function zi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=fi.updateQueue)?(t={lastEffect:null,stores:null},fi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ji(){return xi().memoizedState}function Di(e,t,n,r){var o=ki();fi.flags|=e,o.memoizedState=zi(1|t,n,void 0,void 0===r?null:r)}function Ii(e,t,n,r){var o=xi();r=void 0===r?null:r;var a=void 0;if(null!==di){var i=di.memoizedState;if(a=i.destroy,null!==r&&bi(r,i.deps))return void(o.memoizedState=zi(t,n,a,r))}fi.flags|=e,o.memoizedState=zi(1|t,n,a,r)}function Fi(e,t){return Di(8390656,8,e,t)}function Mi(e,t){return Ii(2048,8,e,t)}function Ui(e,t){return Ii(4,2,e,t)}function $i(e,t){return Ii(4,4,e,t)}function Wi(e,t){return"function"===typeof t?(e=e(),t(e),function(){t(null)}):null!==t&&void 0!==t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Hi(e,t,n){return n=null!==n&&void 0!==n?n.concat([e]):null,Ii(4,4,Wi.bind(null,t,e),n)}function Vi(){}function Bi(e,t){var n=xi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&bi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ki(e,t){var n=xi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&bi(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Qi(e,t,n){return 0===(21&si)?(e.baseState&&(e.baseState=!1,Sl=!0),e.memoizedState=n):(lr(n,t)||(n=mt(),fi.lanes|=n,Ru|=n,e.baseState=!0),t)}function qi(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=ci.transition;ci.transition={};try{e(!1),t()}finally{bt=n,ci.transition=r}}function Yi(){return xi().memoizedState}function Gi(e,t,n){var r=Ju(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Ji(e)?Zi(t,n):(el(e,t,n),null!==(e=Zu(e,r,n=Xu()))&&tl(e,t,r))}function Xi(e,t,n){var r=Ju(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Ji(e))Zi(t,o);else{el(e,t,o);var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=a(i,n);if(o.hasEagerState=!0,o.eagerState=l,lr(l,i))return}catch(u){}null!==(e=Zu(e,r,n=Xu()))&&tl(e,t,r)}}function Ji(e){var t=e.alternate;return e===fi||null!==t&&t===fi}function Zi(e,t){mi=hi=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function el(e,t,n){tc(e)?(null===(e=t.interleaved)?(n.next=n,null===ta?ta=[t]:ta.push(t)):(n.next=e.next,e.next=n),t.interleaved=n):(null===(e=t.pending)?n.next=n:(n.next=e.next,e.next=n),t.pending=n)}function tl(e,t,n){if(0!==(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}var nl={readContext:ea,useCallback:gi,useContext:gi,useEffect:gi,useImperativeHandle:gi,useInsertionEffect:gi,useLayoutEffect:gi,useMemo:gi,useReducer:gi,useRef:gi,useState:gi,useDebugValue:gi,useDeferredValue:gi,useTransition:gi,useMutableSource:gi,useSyncExternalStore:gi,useId:gi,unstable_isNewReconciler:!1},rl={readContext:ea,useCallback:function(e,t){return ki().memoizedState=[e,void 0===t?null:t],e},useContext:ea,useEffect:Fi,useImperativeHandle:function(e,t,n){return n=null!==n&&void 0!==n?n.concat([e]):null,Di(4194308,4,Wi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Di(4194308,4,e,t)},useInsertionEffect:function(e,t){return Di(4,2,e,t)},useMemo:function(e,t){var n=ki();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ki();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=Gi.bind(null,fi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},ki().memoizedState=e},useState:Ri,useDebugValue:Vi,useDeferredValue:function(e){return ki().memoizedState=e},useTransition:function(){var e=Ri(!1),t=e[0];return e=qi.bind(null,e[1]),ki().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=fi,o=ki();if(Ra){if(void 0===n)throw Error(a(407));n=n()}else{if(n=t(),null===Cu)throw Error(a(349));0!==(30&si)||Ti(r,t,n)}o.memoizedState=n;var i={value:n,getSnapshot:t};return o.queue=i,Fi(Ai.bind(null,r,i,e),[e]),r.flags|=2048,zi(9,Ni.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=ki(),t=Cu.identifierPrefix;if(Ra){var n=Ca;t=":"+t+"R"+(n=(_a&~(1<<32-it(_a)-1)).toString(32)+n),0<(n=vi++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=yi++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},ol={readContext:ea,useCallback:Bi,useContext:ea,useEffect:Mi,useImperativeHandle:Hi,useInsertionEffect:Ui,useLayoutEffect:$i,useMemo:Ki,useReducer:_i,useRef:ji,useState:function(){return _i(Ei)},useDebugValue:Vi,useDeferredValue:function(e){return Qi(xi(),di.memoizedState,e)},useTransition:function(){return[_i(Ei)[0],xi().memoizedState]},useMutableSource:Pi,useSyncExternalStore:Oi,useId:Yi,unstable_isNewReconciler:!1},al={readContext:ea,useCallback:Bi,useContext:ea,useEffect:Mi,useImperativeHandle:Hi,useInsertionEffect:Ui,useLayoutEffect:$i,useMemo:Ki,useReducer:Ci,useRef:ji,useState:function(){return Ci(Ei)},useDebugValue:Vi,useDeferredValue:function(e){var t=xi();return null===di?t.memoizedState=e:Qi(t,di.memoizedState,e)},useTransition:function(){return[Ci(Ei)[0],xi().memoizedState]},useMutableSource:Pi,useSyncExternalStore:Oi,useId:Yi,unstable_isNewReconciler:!1};function il(e,t){try{var n="",r=t;do{n+=$(r),r=r.return}while(r);var o=n}catch(a){o="\nError generating stack: "+a.message+"\n"+a.stack}return{value:e,source:t,stack:o}}function ll(e,t){try{console.error(t.value)}catch(n){setTimeout((function(){throw n}))}}var ul,cl,sl,fl="function"===typeof WeakMap?WeakMap:Map;function dl(e,t,n){(n=aa(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){$u||($u=!0,Wu=r),ll(0,t)},n}function pl(e,t,n){(n=aa(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"===typeof r){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){ll(0,t)}}var a=e.stateNode;return null!==a&&"function"===typeof a.componentDidCatch&&(n.callback=function(){ll(0,t),"function"!==typeof r&&(null===Hu?Hu=new Set([this]):Hu.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function hl(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new fl;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=Ec.bind(null,e,t,n),t.then(e,e))}function ml(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function vl(e,t,n,r,o){return 0===(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=aa(-1,1)).tag=2,ia(n,t))),n.lanes|=1),e):(e.flags|=65536,e.lanes=o,e)}function yl(e,t){if(!Ra)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function gl(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function bl(e,t,n){var r=t.pendingProps;switch(Na(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return gl(t),null;case 1:case 17:return Ro(t.type)&&zo(),gl(t),null;case 3:return r=t.stateNode,ti(),Co(No),Co(To),li(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Ua(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0===(256&t.flags)||(t.flags|=1024,null!==za&&(ac(za),za=null))),gl(t),null;case 5:ri(t);var o=Za(Ja.current);if(n=t.type,null!==e&&null!=t.stateNode)cl(e,t,n,r),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(a(166));return gl(t),null}if(e=Za(Ga.current),Ua(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[po]=t,r[ho]=i,e=0!==(1&t.mode),n){case"dialog":Mr("cancel",r),Mr("close",r);break;case"iframe":case"object":case"embed":Mr("load",r);break;case"video":case"audio":for(o=0;o<jr.length;o++)Mr(jr[o],r);break;case"source":Mr("error",r);break;case"img":case"image":case"link":Mr("error",r),Mr("load",r);break;case"details":Mr("toggle",r);break;case"input":G(r,i),Mr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Mr("invalid",r);break;case"textarea":oe(r,i),Mr("invalid",r)}for(var u in ge(n,i),o=null,i)if(i.hasOwnProperty(u)){var c=i[u];"children"===u?"string"===typeof c?r.textContent!==c&&(!0!==i.suppressHydrationWarning&&Jr(r.textContent,c,e),o=["children",c]):"number"===typeof c&&r.textContent!==""+c&&(!0!==i.suppressHydrationWarning&&Jr(r.textContent,c,e),o=["children",""+c]):l.hasOwnProperty(u)&&null!=c&&"onScroll"===u&&Mr("scroll",r)}switch(n){case"input":K(r),Z(r,i,!0);break;case"textarea":K(r),ie(r);break;case"select":case"option":break;default:"function"===typeof i.onClick&&(r.onclick=Zr)}r=o,t.updateQueue=r,null!==r&&(t.flags|=4)}else{u=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"===typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[po]=t,e[ho]=r,ul(e,t),t.stateNode=e;e:{switch(u=be(n,r),n){case"dialog":Mr("cancel",e),Mr("close",e),o=r;break;case"iframe":case"object":case"embed":Mr("load",e),o=r;break;case"video":case"audio":for(o=0;o<jr.length;o++)Mr(jr[o],e);o=r;break;case"source":Mr("error",e),o=r;break;case"img":case"image":case"link":Mr("error",e),Mr("load",e),o=r;break;case"details":Mr("toggle",e),o=r;break;case"input":G(e,r),o=Y(e,r),Mr("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=I({},r,{value:void 0}),Mr("invalid",e);break;case"textarea":oe(e,r),o=re(e,r),Mr("invalid",e)}for(i in ge(n,o),c=o)if(c.hasOwnProperty(i)){var s=c[i];"style"===i?ve(e,s):"dangerouslySetInnerHTML"===i?null!=(s=s?s.__html:void 0)&&fe(e,s):"children"===i?"string"===typeof s?("textarea"!==n||""!==s)&&de(e,s):"number"===typeof s&&de(e,""+s):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(l.hasOwnProperty(i)?null!=s&&"onScroll"===i&&Mr("scroll",e):null!=s&&b(e,i,s,u))}switch(n){case"input":K(e),Z(e,r,!1);break;case"textarea":K(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+V(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"===typeof o.onClick&&(e.onclick=Zr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return gl(t),null;case 6:if(e&&null!=t.stateNode)sl(0,t,e.memoizedProps,r);else{if("string"!==typeof r&&null===t.stateNode)throw Error(a(166));if(n=Za(Ja.current),Za(Ga.current),Ua(t)){if(r=t.stateNode,n=t.memoizedProps,r[po]=t,(i=r.nodeValue!==n)&&null!==(e=Aa))switch(e.tag){case 3:Jr(r.nodeValue,n,0!==(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Jr(r.nodeValue,n,0!==(1&e.mode))}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[po]=t,t.stateNode=r}return gl(t),null;case 13:if(Co(oi),r=t.memoizedState,Ra&&null!==La&&0!==(1&t.mode)&&0===(128&t.flags)){for(r=La;r;)r=co(r.nextSibling);return $a(),t.flags|=98560,t}if(null!==r&&null!==r.dehydrated){if(r=Ua(t),null===e){if(!r)throw Error(a(318));if(!(r=null!==(r=t.memoizedState)?r.dehydrated:null))throw Error(a(317));r[po]=t}else $a(),0===(128&t.flags)&&(t.memoizedState=null),t.flags|=4;return gl(t),null}return null!==za&&(ac(za),za=null),0!==(128&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?Ua(t):n=null!==e.memoizedState,r!==n&&r&&(t.child.flags|=8192,0!==(1&t.mode)&&(null===e||0!==(1&oi.current)?0===Au&&(Au=3):hc())),null!==t.updateQueue&&(t.flags|=4),gl(t),null);case 4:return ti(),null===e&&Wr(t.stateNode.containerInfo),gl(t),null;case 10:return Xo(t.type._context),gl(t),null;case 19:if(Co(oi),null===(i=t.memoizedState))return gl(t),null;if(r=0!==(128&t.flags),null===(u=i.rendering))if(r)yl(i,!1);else{if(0!==Au||null!==e&&0!==(128&e.flags))for(e=t.child;null!==e;){if(null!==(u=ai(e))){for(t.flags|=128,yl(i,!1),null!==(r=u.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(u=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=u.childLanes,i.lanes=u.lanes,i.child=u.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=u.memoizedProps,i.memoizedState=u.memoizedState,i.updateQueue=u.updateQueue,i.type=u.type,e=u.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Po(oi,1&oi.current|2),t.child}e=e.sibling}null!==i.tail&&Xe()>Mu&&(t.flags|=128,r=!0,yl(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ai(u))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),yl(i,!0),null===i.tail&&"hidden"===i.tailMode&&!u.alternate&&!Ra)return gl(t),null}else 2*Xe()-i.renderingStartTime>Mu&&1073741824!==n&&(t.flags|=128,r=!0,yl(i,!1),t.lanes=4194304);i.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=i.last)?n.sibling=u:t.child=u,i.last=u)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Xe(),t.sibling=null,n=oi.current,Po(oi,r?1&n|2:1&n),t):(gl(t),null);case 22:case 23:return sc(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!==(1&t.mode)?0!==(1073741824&Tu)&&(gl(t),6&t.subtreeFlags&&(t.flags|=8192)):gl(t),null;case 24:case 25:return null}throw Error(a(156,t.tag))}ul=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},cl=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,Za(Ga.current);var a,i=null;switch(n){case"input":o=Y(e,o),r=Y(e,r),i=[];break;case"select":o=I({},o,{value:void 0}),r=I({},r,{value:void 0}),i=[];break;case"textarea":o=re(e,o),r=re(e,r),i=[];break;default:"function"!==typeof o.onClick&&"function"===typeof r.onClick&&(e.onclick=Zr)}for(s in ge(n,r),n=null,o)if(!r.hasOwnProperty(s)&&o.hasOwnProperty(s)&&null!=o[s])if("style"===s){var u=o[s];for(a in u)u.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==s&&"children"!==s&&"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(l.hasOwnProperty(s)?i||(i=[]):(i=i||[]).push(s,null));for(s in r){var c=r[s];if(u=null!=o?o[s]:void 0,r.hasOwnProperty(s)&&c!==u&&(null!=c||null!=u))if("style"===s)if(u){for(a in u)!u.hasOwnProperty(a)||c&&c.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in c)c.hasOwnProperty(a)&&u[a]!==c[a]&&(n||(n={}),n[a]=c[a])}else n||(i||(i=[]),i.push(s,n)),n=c;else"dangerouslySetInnerHTML"===s?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(i=i||[]).push(s,c)):"children"===s?"string"!==typeof c&&"number"!==typeof c||(i=i||[]).push(s,""+c):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&(l.hasOwnProperty(s)?(null!=c&&"onScroll"===s&&Mr("scroll",e),i||u===c||(i=[])):(i=i||[]).push(s,c))}n&&(i=i||[]).push("style",n);var s=i;(t.updateQueue=s)&&(t.flags|=4)}},sl=function(e,t,n,r){n!==r&&(t.flags|=4)};var wl=w.ReactCurrentOwner,Sl=!1;function kl(e,t,n,r){t.child=null===e?qa(t,null,n,r):Qa(t,e.child,n,r)}function xl(e,t,n,r,o){n=n.render;var a=t.ref;return Zo(t,o),r=wi(e,t,n,r,a,o),n=Si(),null===e||Sl?(Ra&&n&&Ta(t),t.flags|=1,kl(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Vl(e,t,o))}function El(e,t,n,r,o){if(null===e){var a=n.type;return"function"!==typeof a||Ac(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Rc(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,_l(e,t,a,r,o))}if(a=e.child,0===(e.lanes&o)){var i=a.memoizedProps;if((n=null!==(n=n.compare)?n:ur)(i,r)&&e.ref===t.ref)return Vl(e,t,o)}return t.flags|=1,(e=Lc(a,r)).ref=t.ref,e.return=t,t.child=e}function _l(e,t,n,r,o){if(null!==e){var a=e.memoizedProps;if(ur(a,r)&&e.ref===t.ref){if(Sl=!1,t.pendingProps=r=a,0===(e.lanes&o))return t.lanes=e.lanes,Vl(e,t,o);0!==(131072&e.flags)&&(Sl=!0)}}return Ol(e,t,n,r,o)}function Cl(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0===(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Po(Nu,Tu),Tu|=n;else{if(0===(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Po(Nu,Tu),Tu|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==a?a.baseLanes:n,Po(Nu,Tu),Tu|=r}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,Po(Nu,Tu),Tu|=r;return kl(e,t,o,n),t.child}function Pl(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Ol(e,t,n,r,o){var a=Ro(n)?Ao:To.current;return a=Lo(t,a),Zo(t,o),n=wi(e,t,n,r,a,o),r=Si(),null===e||Sl?(Ra&&r&&Ta(t),t.flags|=1,kl(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Vl(e,t,o))}function Tl(e,t,n,r,o){if(Ro(n)){var a=!0;Io(t)}else a=!1;if(Zo(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),ma(t,n,r),ya(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,c=n.contextType;"object"===typeof c&&null!==c?c=ea(c):c=Lo(t,c=Ro(n)?Ao:To.current);var s=n.getDerivedStateFromProps,f="function"===typeof s||"function"===typeof i.getSnapshotBeforeUpdate;f||"function"!==typeof i.UNSAFE_componentWillReceiveProps&&"function"!==typeof i.componentWillReceiveProps||(l!==r||u!==c)&&va(t,i,r,c),na=!1;var d=t.memoizedState;i.state=d,ca(t,r,i,o),u=t.memoizedState,l!==r||d!==u||No.current||na?("function"===typeof s&&(da(t,n,s,r),u=t.memoizedState),(l=na||ha(t,n,l,r,d,u,c))?(f||"function"!==typeof i.UNSAFE_componentWillMount&&"function"!==typeof i.componentWillMount||("function"===typeof i.componentWillMount&&i.componentWillMount(),"function"===typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"===typeof i.componentDidMount&&(t.flags|=4194308)):("function"===typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=c,r=l):("function"===typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,oa(e,t),l=t.memoizedProps,c=t.type===t.elementType?l:Bo(t.type,l),i.props=c,f=t.pendingProps,d=i.context,"object"===typeof(u=n.contextType)&&null!==u?u=ea(u):u=Lo(t,u=Ro(n)?Ao:To.current);var p=n.getDerivedStateFromProps;(s="function"===typeof p||"function"===typeof i.getSnapshotBeforeUpdate)||"function"!==typeof i.UNSAFE_componentWillReceiveProps&&"function"!==typeof i.componentWillReceiveProps||(l!==f||d!==u)&&va(t,i,r,u),na=!1,d=t.memoizedState,i.state=d,ca(t,r,i,o);var h=t.memoizedState;l!==f||d!==h||No.current||na?("function"===typeof p&&(da(t,n,p,r),h=t.memoizedState),(c=na||ha(t,n,c,r,d,h,u)||!1)?(s||"function"!==typeof i.UNSAFE_componentWillUpdate&&"function"!==typeof i.componentWillUpdate||("function"===typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,u),"function"===typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,u)),"function"===typeof i.componentDidUpdate&&(t.flags|=4),"function"===typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!==typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!==typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=u,r=c):("function"!==typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!==typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return Nl(e,t,n,r,a,o)}function Nl(e,t,n,r,o,a){Pl(e,t);var i=0!==(128&t.flags);if(!r&&!i)return o&&Fo(t,n,!1),Vl(e,t,a);r=t.stateNode,wl.current=t;var l=i&&"function"!==typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Qa(t,e.child,null,a),t.child=Qa(t,null,l,a)):kl(e,t,l,a),t.memoizedState=r.state,o&&Fo(t,n,!0),t.child}function Al(e){var t=e.stateNode;t.pendingContext?jo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&jo(0,t.context,!1),ei(e,t.containerInfo)}function Ll(e,t,n,r,o){return $a(),Wa(o),t.flags|=256,kl(e,t,n,r),t.child}var Rl={dehydrated:null,treeContext:null,retryLane:0};function zl(e){return{baseLanes:e,cachePool:null,transitions:null}}function jl(e,t){return{baseLanes:e.baseLanes|t,cachePool:null,transitions:e.transitions}}function Dl(e,t,n){var r,o=t.pendingProps,i=oi.current,l=!1,u=0!==(128&t.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&0!==(2&i)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),Po(oi,1&i),null===e)return Fa(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0===(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(i=o.children,e=o.fallback,l?(o=t.mode,l=t.child,i={mode:"hidden",children:i},0===(1&o)&&null!==l?(l.childLanes=0,l.pendingProps=i):l=jc(i,o,0,null),e=zc(e,o,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=zl(n),t.memoizedState=Rl,e):Il(t,i));if(null!==(i=e.memoizedState)){if(null!==(r=i.dehydrated)){if(u)return 256&t.flags?(t.flags&=-257,Ul(e,t,n,Error(a(422)))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(l=o.fallback,i=t.mode,o=jc({mode:"visible",children:o.children},i,0,null),(l=zc(l,i,n,null)).flags|=2,o.return=t,l.return=t,o.sibling=l,t.child=o,0!==(1&t.mode)&&Qa(t,e.child,null,n),t.child.memoizedState=zl(n),t.memoizedState=Rl,l);if(0===(1&t.mode))t=Ul(e,t,n,null);else if("$!"===r.data)t=Ul(e,t,n,Error(a(419)));else if(o=0!==(n&e.childLanes),Sl||o){if(null!==(o=Cu)){switch(n&-n){case 4:l=2;break;case 16:l=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:l=32;break;case 536870912:l=268435456;break;default:l=0}0!==(o=0!==(l&(o.suspendedLanes|n))?0:l)&&o!==i.retryLane&&(i.retryLane=o,Zu(e,o,-1))}hc(),t=Ul(e,t,n,Error(a(421)))}else"$?"===r.data?(t.flags|=128,t.child=e.child,t=Cc.bind(null,e),r._reactRetry=t,t=null):(n=i.treeContext,La=co(r.nextSibling),Aa=t,Ra=!0,za=null,null!==n&&(ka[xa++]=_a,ka[xa++]=Ca,ka[xa++]=Ea,_a=n.id,Ca=n.overflow,Ea=t),(t=Il(t,t.pendingProps.children)).flags|=4096);return t}return l?(o=Ml(e,t,o.children,o.fallback,n),l=t.child,i=e.child.memoizedState,l.memoizedState=null===i?zl(n):jl(i,n),l.childLanes=e.childLanes&~n,t.memoizedState=Rl,o):(n=Fl(e,t,o.children,n),t.memoizedState=null,n)}return l?(o=Ml(e,t,o.children,o.fallback,n),l=t.child,i=e.child.memoizedState,l.memoizedState=null===i?zl(n):jl(i,n),l.childLanes=e.childLanes&~n,t.memoizedState=Rl,o):(n=Fl(e,t,o.children,n),t.memoizedState=null,n)}function Il(e,t){return(t=jc({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Fl(e,t,n,r){var o=e.child;return e=o.sibling,n=Lc(o,{mode:"visible",children:n}),0===(1&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n}function Ml(e,t,n,r,o){var a=t.mode,i=(e=e.child).sibling,l={mode:"hidden",children:n};return 0===(1&a)&&t.child!==e?((n=t.child).childLanes=0,n.pendingProps=l,t.deletions=null):(n=Lc(e,l)).subtreeFlags=14680064&e.subtreeFlags,null!==i?r=Lc(i,r):(r=zc(r,a,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}function Ul(e,t,n,r){return null!==r&&Wa(r),Qa(t,e.child,null,n),(e=Il(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function $l(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Jo(e.return,t,n)}function Wl(e,t,n,r,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o)}function Hl(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(kl(e,t,r.children,n),0!==(2&(r=oi.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!==(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&$l(e,n,t);else if(19===e.tag)$l(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Po(oi,r),0===(1&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===ai(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Wl(t,!1,o,n,a);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ai(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Wl(t,!0,n,null,a);break;case"together":Wl(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Vl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Ru|=t.lanes,0===(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Lc(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Lc(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Bl(e,t){switch(Na(t),t.tag){case 1:return Ro(t.type)&&zo(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ti(),Co(No),Co(To),li(),0!==(65536&(e=t.flags))&&0===(128&e)?(t.flags=-65537&e|128,t):null;case 5:return ri(t),null;case 13:if(Co(oi),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(a(340));$a()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Co(oi),null;case 4:return ti(),null;case 10:return Xo(t.type._context),null;case 22:case 23:return sc(),null;default:return null}}var Kl=!1,Ql=!1,ql="function"===typeof WeakSet?WeakSet:Set,Yl=null;function Gl(e,t){var n=e.ref;if(null!==n)if("function"===typeof n)try{n(null)}catch(r){xc(e,t,r)}else n.current=null}function Xl(e,t,n){try{n()}catch(r){xc(e,t,r)}}var Jl=!1;function Zl(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var a=o.destroy;o.destroy=void 0,void 0!==a&&Xl(t,n,a)}o=o.next}while(o!==r)}}function eu(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function tu(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"===typeof t?t(e):t.current=e}}function nu(e){var t=e.alternate;null!==t&&(e.alternate=null,nu(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&(null!==(t=e.stateNode)&&(delete t[po],delete t[ho],delete t[vo],delete t[yo],delete t[go])),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function ru(e){return 5===e.tag||3===e.tag||4===e.tag}function ou(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||ru(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function au(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!==(n=n._reactRootContainer)&&void 0!==n||null!==t.onclick||(t.onclick=Zr));else if(4!==r&&null!==(e=e.child))for(au(e,t,n),e=e.sibling;null!==e;)au(e,t,n),e=e.sibling}function iu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(iu(e,t,n),e=e.sibling;null!==e;)iu(e,t,n),e=e.sibling}var lu=null,uu=!1;function cu(e,t,n){for(n=n.child;null!==n;)su(e,t,n),n=n.sibling}function su(e,t,n){if(at&&"function"===typeof at.onCommitFiberUnmount)try{at.onCommitFiberUnmount(ot,n)}catch(l){}switch(n.tag){case 5:Ql||Gl(n,t);case 6:var r=lu,o=uu;lu=null,cu(e,t,n),uu=o,null!==(lu=r)&&(uu?(e=lu,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):lu.removeChild(n.stateNode));break;case 18:null!==lu&&(uu?(e=lu,n=n.stateNode,8===e.nodeType?uo(e.parentNode,n):1===e.nodeType&&uo(e,n),Wt(e)):uo(lu,n.stateNode));break;case 4:r=lu,o=uu,lu=n.stateNode.containerInfo,uu=!0,cu(e,t,n),lu=r,uu=o;break;case 0:case 11:case 14:case 15:if(!Ql&&(null!==(r=n.updateQueue)&&null!==(r=r.lastEffect))){o=r=r.next;do{var a=o,i=a.destroy;a=a.tag,void 0!==i&&(0!==(2&a)||0!==(4&a))&&Xl(n,t,i),o=o.next}while(o!==r)}cu(e,t,n);break;case 1:if(!Ql&&(Gl(n,t),"function"===typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(l){xc(n,t,l)}cu(e,t,n);break;case 21:cu(e,t,n);break;case 22:1&n.mode?(Ql=(r=Ql)||null!==n.memoizedState,cu(e,t,n),Ql=r):cu(e,t,n);break;default:cu(e,t,n)}}function fu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ql),t.forEach((function(t){var r=Pc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function du(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r];try{var i=e,l=t,u=l;e:for(;null!==u;){switch(u.tag){case 5:lu=u.stateNode,uu=!1;break e;case 3:case 4:lu=u.stateNode.containerInfo,uu=!0;break e}u=u.return}if(null===lu)throw Error(a(160));su(i,l,o),lu=null,uu=!1;var c=o.alternate;null!==c&&(c.return=null),o.return=null}catch(s){xc(o,t,s)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)pu(t,e),t=t.sibling}function pu(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(du(t,e),hu(e),4&r){try{Zl(3,e,e.return),eu(3,e)}catch(m){xc(e,e.return,m)}try{Zl(5,e,e.return)}catch(m){xc(e,e.return,m)}}break;case 1:du(t,e),hu(e),512&r&&null!==n&&Gl(n,n.return);break;case 5:if(du(t,e),hu(e),512&r&&null!==n&&Gl(n,n.return),32&e.flags){var o=e.stateNode;try{de(o,"")}catch(m){xc(e,e.return,m)}}if(4&r&&null!=(o=e.stateNode)){var i=e.memoizedProps,l=null!==n?n.memoizedProps:i,u=e.type,c=e.updateQueue;if(e.updateQueue=null,null!==c)try{"input"===u&&"radio"===i.type&&null!=i.name&&X(o,i),be(u,l);var s=be(u,i);for(l=0;l<c.length;l+=2){var f=c[l],d=c[l+1];"style"===f?ve(o,d):"dangerouslySetInnerHTML"===f?fe(o,d):"children"===f?de(o,d):b(o,f,d,s)}switch(u){case"input":J(o,i);break;case"textarea":ae(o,i);break;case"select":var p=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!i.multiple;var h=i.value;null!=h?ne(o,!!i.multiple,h,!1):p!==!!i.multiple&&(null!=i.defaultValue?ne(o,!!i.multiple,i.defaultValue,!0):ne(o,!!i.multiple,i.multiple?[]:"",!1))}o[ho]=i}catch(m){xc(e,e.return,m)}}break;case 6:if(du(t,e),hu(e),4&r){if(null===e.stateNode)throw Error(a(162));s=e.stateNode,f=e.memoizedProps;try{s.nodeValue=f}catch(m){xc(e,e.return,m)}}break;case 3:if(du(t,e),hu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Wt(t.containerInfo)}catch(m){xc(e,e.return,m)}break;case 4:default:du(t,e),hu(e);break;case 13:du(t,e),hu(e),8192&(s=e.child).flags&&null!==s.memoizedState&&(null===s.alternate||null===s.alternate.memoizedState)&&(Fu=Xe()),4&r&&fu(e);break;case 22:if(s=null!==n&&null!==n.memoizedState,1&e.mode?(Ql=(f=Ql)||s,du(t,e),Ql=f):du(t,e),hu(e),8192&r){f=null!==e.memoizedState;e:for(d=null,p=e;;){if(5===p.tag){if(null===d){d=p;try{o=p.stateNode,f?"function"===typeof(i=o.style).setProperty?i.setProperty("display","none","important"):i.display="none":(u=p.stateNode,l=void 0!==(c=p.memoizedProps.style)&&null!==c&&c.hasOwnProperty("display")?c.display:null,u.style.display=me("display",l))}catch(m){xc(e,e.return,m)}}}else if(6===p.tag){if(null===d)try{p.stateNode.nodeValue=f?"":p.memoizedProps}catch(m){xc(e,e.return,m)}}else if((22!==p.tag&&23!==p.tag||null===p.memoizedState||p===e)&&null!==p.child){p.child.return=p,p=p.child;continue}if(p===e)break e;for(;null===p.sibling;){if(null===p.return||p.return===e)break e;d===p&&(d=null),p=p.return}d===p&&(d=null),p.sibling.return=p.return,p=p.sibling}if(f&&!s&&0!==(1&e.mode))for(Yl=e,e=e.child;null!==e;){for(s=Yl=e;null!==Yl;){switch(d=(f=Yl).child,f.tag){case 0:case 11:case 14:case 15:Zl(4,f,f.return);break;case 1:if(Gl(f,f.return),"function"===typeof(i=f.stateNode).componentWillUnmount){p=f,h=f.return;try{o=p,i.props=o.memoizedProps,i.state=o.memoizedState,i.componentWillUnmount()}catch(m){xc(p,h,m)}}break;case 5:Gl(f,f.return);break;case 22:if(null!==f.memoizedState){gu(s);continue}}null!==d?(d.return=f,Yl=d):gu(s)}e=e.sibling}}break;case 19:du(t,e),hu(e),4&r&&fu(e);case 21:}}function hu(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(ru(n)){var r=n;break e}n=n.return}throw Error(a(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(de(o,""),r.flags&=-33),iu(e,ou(e),o);break;case 3:case 4:var i=r.stateNode.containerInfo;au(e,ou(e),i);break;default:throw Error(a(161))}}catch(l){xc(e,e.return,l)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function mu(e,t,n){Yl=e,vu(e,t,n)}function vu(e,t,n){for(var r=0!==(1&e.mode);null!==Yl;){var o=Yl,a=o.child;if(22===o.tag&&r){var i=null!==o.memoizedState||Kl;if(!i){var l=o.alternate,u=null!==l&&null!==l.memoizedState||Ql;l=Kl;var c=Ql;if(Kl=i,(Ql=u)&&!c)for(Yl=o;null!==Yl;)u=(i=Yl).child,22===i.tag&&null!==i.memoizedState?bu(o):null!==u?(u.return=i,Yl=u):bu(o);for(;null!==a;)Yl=a,vu(a,t,n),a=a.sibling;Yl=o,Kl=l,Ql=c}yu(e)}else 0!==(8772&o.subtreeFlags)&&null!==a?(a.return=o,Yl=a):yu(e)}}function yu(e){for(;null!==Yl;){var t=Yl;if(0!==(8772&t.flags)){var n=t.alternate;try{if(0!==(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Ql||eu(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Ql)if(null===n)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:Bo(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&sa(t,i,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}sa(t,l,n)}break;case 5:var u=t.stateNode;if(null===n&&4&t.flags){n=u;var c=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&n.focus();break;case"img":c.src&&(n.src=c.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:break;case 13:if(null===t.memoizedState){var s=t.alternate;if(null!==s){var f=s.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&Wt(d)}}}break;default:throw Error(a(163))}Ql||512&t.flags&&tu(t)}catch(p){xc(t,t.return,p)}}if(t===e){Yl=null;break}if(null!==(n=t.sibling)){n.return=t.return,Yl=n;break}Yl=t.return}}function gu(e){for(;null!==Yl;){var t=Yl;if(t===e){Yl=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Yl=n;break}Yl=t.return}}function bu(e){for(;null!==Yl;){var t=Yl;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{eu(4,t)}catch(u){xc(t,n,u)}break;case 1:var r=t.stateNode;if("function"===typeof r.componentDidMount){var o=t.return;try{r.componentDidMount()}catch(u){xc(t,o,u)}}var a=t.return;try{tu(t)}catch(u){xc(t,a,u)}break;case 5:var i=t.return;try{tu(t)}catch(u){xc(t,i,u)}}}catch(u){xc(t,t.return,u)}if(t===e){Yl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Yl=l;break}Yl=t.return}}var wu,Su=Math.ceil,ku=w.ReactCurrentDispatcher,xu=w.ReactCurrentOwner,Eu=w.ReactCurrentBatchConfig,_u=0,Cu=null,Pu=null,Ou=0,Tu=0,Nu=_o(0),Au=0,Lu=null,Ru=0,zu=0,ju=0,Du=null,Iu=null,Fu=0,Mu=1/0,Uu=null,$u=!1,Wu=null,Hu=null,Vu=!1,Bu=null,Ku=0,Qu=0,qu=null,Yu=-1,Gu=0;function Xu(){return 0!==(6&_u)?Xe():-1!==Yu?Yu:Yu=Xe()}function Ju(e){return 0===(1&e.mode)?1:0!==(2&_u)&&0!==Ou?Ou&-Ou:null!==Vo.transition?(0===Gu&&(Gu=mt()),Gu):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Gt(e.type)}function Zu(e,t,n){if(50<Qu)throw Qu=0,qu=null,Error(a(185));var r=ec(e,t);return null===r?null:(yt(r,t,n),0!==(2&_u)&&r===Cu||(r===Cu&&(0===(2&_u)&&(zu|=t),4===Au&&ic(r,Ou)),nc(r,n),1===t&&0===_u&&0===(1&e.mode)&&(Mu=Xe()+500,Uo&&Ho())),r)}function ec(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function tc(e){return(null!==Cu||null!==ta)&&0!==(1&e.mode)&&0===(2&_u)}function nc(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,a=e.pendingLanes;0<a;){var i=31-it(a),l=1<<i,u=o[i];-1===u?0!==(l&n)&&0===(l&r)||(o[i]=pt(l,t)):u<=t&&(e.expiredLanes|=l),a&=~l}}(e,t);var r=dt(e,e===Cu?Ou:0);if(0===r)null!==n&&qe(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&qe(n),1===t)0===e.tag?function(e){Uo=!0,Wo(e)}(lc.bind(null,e)):Wo(lc.bind(null,e)),io((function(){0===_u&&Ho()})),n=null;else{switch(wt(r)){case 1:n=Ze;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Oc(n,rc.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function rc(e,t){if(Yu=-1,Gu=0,0!==(6&_u))throw Error(a(327));var n=e.callbackNode;if(Sc()&&e.callbackNode!==n)return null;var r=dt(e,e===Cu?Ou:0);if(0===r)return null;if(0!==(30&r)||0!==(r&e.expiredLanes)||t)t=mc(e,r);else{t=r;var o=_u;_u|=2;var i=pc();for(Cu===e&&Ou===t||(Uu=null,Mu=Xe()+500,fc(e,t));;)try{yc();break}catch(u){dc(e,u)}Go(),ku.current=i,_u=o,null!==Pu?t=0:(Cu=null,Ou=0,t=Au)}if(0!==t){if(2===t&&(0!==(o=ht(e))&&(r=o,t=oc(e,o))),1===t)throw n=Lu,fc(e,0),ic(e,r),nc(e,Xe()),n;if(6===t)ic(e,r);else{if(o=e.current.alternate,0===(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],a=o.getSnapshot;o=o.value;try{if(!lr(a(),o))return!1}catch(l){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)&&(2===(t=mc(e,r))&&(0!==(i=ht(e))&&(r=i,t=oc(e,i))),1===t))throw n=Lu,fc(e,0),ic(e,r),nc(e,Xe()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(a(345));case 2:case 5:wc(e,Iu,Uu);break;case 3:if(ic(e,r),(130023424&r)===r&&10<(t=Fu+500-Xe())){if(0!==dt(e,0))break;if(((o=e.suspendedLanes)&r)!==r){Xu(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=ro(wc.bind(null,e,Iu,Uu),t);break}wc(e,Iu,Uu);break;case 4:if(ic(e,r),(4194240&r)===r)break;for(t=e.eventTimes,o=-1;0<r;){var l=31-it(r);i=1<<l,(l=t[l])>o&&(o=l),r&=~i}if(r=o,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Su(r/1960))-r)){e.timeoutHandle=ro(wc.bind(null,e,Iu,Uu),r);break}wc(e,Iu,Uu);break;default:throw Error(a(329))}}}return nc(e,Xe()),e.callbackNode===n?rc.bind(null,e):null}function oc(e,t){var n=Du;return e.current.memoizedState.isDehydrated&&(fc(e,t).flags|=256),2!==(e=mc(e,t))&&(t=Iu,Iu=n,null!==t&&ac(t)),e}function ac(e){null===Iu?Iu=e:Iu.push.apply(Iu,e)}function ic(e,t){for(t&=~ju,t&=~zu,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function lc(e){if(0!==(6&_u))throw Error(a(327));Sc();var t=dt(e,0);if(0===(1&t))return nc(e,Xe()),null;var n=mc(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=oc(e,r))}if(1===n)throw n=Lu,fc(e,0),ic(e,t),nc(e,Xe()),n;if(6===n)throw Error(a(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,wc(e,Iu,Uu),nc(e,Xe()),null}function uc(e,t){var n=_u;_u|=1;try{return e(t)}finally{0===(_u=n)&&(Mu=Xe()+500,Uo&&Ho())}}function cc(e){null!==Bu&&0===Bu.tag&&0===(6&_u)&&Sc();var t=_u;_u|=1;var n=Eu.transition,r=bt;try{if(Eu.transition=null,bt=1,e)return e()}finally{bt=r,Eu.transition=n,0===(6&(_u=t))&&Ho()}}function sc(){Tu=Nu.current,Co(Nu)}function fc(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,oo(n)),null!==Pu)for(n=Pu.return;null!==n;){var r=n;switch(Na(r),r.tag){case 1:null!==(r=r.type.childContextTypes)&&void 0!==r&&zo();break;case 3:ti(),Co(No),Co(To),li();break;case 5:ri(r);break;case 4:ti();break;case 13:case 19:Co(oi);break;case 10:Xo(r.type._context);break;case 22:case 23:sc()}n=n.return}if(Cu=e,Pu=e=Lc(e.current,null),Ou=Tu=t,Au=0,Lu=null,ju=zu=Ru=0,Iu=Du=null,null!==ta){for(t=0;t<ta.length;t++)if(null!==(r=(n=ta[t]).interleaved)){n.interleaved=null;var o=r.next,a=n.pending;if(null!==a){var i=a.next;a.next=o,r.next=i}n.pending=r}ta=null}return e}function dc(e,t){for(;;){var n=Pu;try{if(Go(),ui.current=nl,hi){for(var r=fi.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}hi=!1}if(si=0,pi=di=fi=null,mi=!1,vi=0,xu.current=null,null===n||null===n.return){Au=1,Lu=t,Pu=null;break}e:{var i=e,l=n.return,u=n,c=t;if(t=Ou,u.flags|=32768,null!==c&&"object"===typeof c&&"function"===typeof c.then){var s=c,f=u,d=f.tag;if(0===(1&f.mode)&&(0===d||11===d||15===d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=ml(l);if(null!==h){h.flags&=-257,vl(h,l,u,0,t),1&h.mode&&hl(i,s,t),c=s;var m=(t=h).updateQueue;if(null===m){var v=new Set;v.add(c),t.updateQueue=v}else m.add(c);break e}if(0===(1&t)){hl(i,s,t),hc();break e}c=Error(a(426))}else if(Ra&&1&u.mode){var y=ml(l);if(null!==y){0===(65536&y.flags)&&(y.flags|=256),vl(y,l,u,0,t),Wa(c);break e}}i=c,4!==Au&&(Au=2),null===Du?Du=[i]:Du.push(i),c=il(c,u),u=l;do{switch(u.tag){case 3:u.flags|=65536,t&=-t,u.lanes|=t,ua(u,dl(0,c,t));break e;case 1:i=c;var g=u.type,b=u.stateNode;if(0===(128&u.flags)&&("function"===typeof g.getDerivedStateFromError||null!==b&&"function"===typeof b.componentDidCatch&&(null===Hu||!Hu.has(b)))){u.flags|=65536,t&=-t,u.lanes|=t,ua(u,pl(u,i,t));break e}}u=u.return}while(null!==u)}bc(n)}catch(w){t=w,Pu===n&&null!==n&&(Pu=n=n.return);continue}break}}function pc(){var e=ku.current;return ku.current=nl,null===e?nl:e}function hc(){0!==Au&&3!==Au&&2!==Au||(Au=4),null===Cu||0===(268435455&Ru)&&0===(268435455&zu)||ic(Cu,Ou)}function mc(e,t){var n=_u;_u|=2;var r=pc();for(Cu===e&&Ou===t||(Uu=null,fc(e,t));;)try{vc();break}catch(o){dc(e,o)}if(Go(),_u=n,ku.current=r,null!==Pu)throw Error(a(261));return Cu=null,Ou=0,Au}function vc(){for(;null!==Pu;)gc(Pu)}function yc(){for(;null!==Pu&&!Ye();)gc(Pu)}function gc(e){var t=wu(e.alternate,e,Tu);e.memoizedProps=e.pendingProps,null===t?bc(e):Pu=t,xu.current=null}function bc(e){var t=e;do{var n=t.alternate;if(e=t.return,0===(32768&t.flags)){if(null!==(n=bl(n,t,Tu)))return void(Pu=n)}else{if(null!==(n=Bl(n,t)))return n.flags&=32767,void(Pu=n);if(null===e)return Au=6,void(Pu=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Pu=t);Pu=t=e}while(null!==t);0===Au&&(Au=5)}function wc(e,t,n){var r=bt,o=Eu.transition;try{Eu.transition=null,bt=1,function(e,t,n,r){do{Sc()}while(null!==Bu);if(0!==(6&_u))throw Error(a(327));n=e.finishedWork;var o=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-it(n),a=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~a}}(e,i),e===Cu&&(Pu=Cu=null,Ou=0),0===(2064&n.subtreeFlags)&&0===(2064&n.flags)||Vu||(Vu=!0,Oc(tt,(function(){return Sc(),null}))),i=0!==(15990&n.flags),0!==(15990&n.subtreeFlags)||i){i=Eu.transition,Eu.transition=null;var l=bt;bt=1;var u=_u;_u|=4,xu.current=null,function(e,t){if(eo=Vt,pr(e=dr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(k){n=null;break e}var l=0,u=-1,c=-1,s=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==n||0!==o&&3!==d.nodeType||(u=l+o),d!==i||0!==r&&3!==d.nodeType||(c=l+r),3===d.nodeType&&(l+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===n&&++s===o&&(u=l),p===i&&++f===r&&(c=l),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}n=-1===u||-1===c?null:{start:u,end:c}}else n=null}n=n||{start:0,end:0}}else n=null;for(to={focusedElem:e,selectionRange:n},Vt=!1,Yl=t;null!==Yl;)if(e=(t=Yl).child,0!==(1028&t.subtreeFlags)&&null!==e)e.return=t,Yl=e;else for(;null!==Yl;){t=Yl;try{var m=t.alternate;if(0!==(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var v=m.memoizedProps,y=m.memoizedState,g=t.stateNode,b=g.getSnapshotBeforeUpdate(t.elementType===t.type?v:Bo(t.type,v),y);g.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=t.stateNode.containerInfo;if(1===w.nodeType)w.textContent="";else if(9===w.nodeType){var S=w.body;null!=S&&(S.textContent="")}break;default:throw Error(a(163))}}catch(k){xc(t,t.return,k)}if(null!==(e=t.sibling)){e.return=t.return,Yl=e;break}Yl=t.return}m=Jl,Jl=!1}(e,n),pu(n,e),hr(to),Vt=!!eo,to=eo=null,e.current=n,mu(n,e,o),Ge(),_u=u,bt=l,Eu.transition=i}else e.current=n;if(Vu&&(Vu=!1,Bu=e,Ku=o),0===(i=e.pendingLanes)&&(Hu=null),function(e){if(at&&"function"===typeof at.onCommitFiberRoot)try{at.onCommitFiberRoot(ot,e,void 0,128===(128&e.current.flags))}catch(t){}}(n.stateNode),nc(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r(t[n]);if($u)throw $u=!1,e=Wu,Wu=null,e;0!==(1&Ku)&&0!==e.tag&&Sc(),0!==(1&(i=e.pendingLanes))?e===qu?Qu++:(Qu=0,qu=e):Qu=0,Ho()}(e,t,n,r)}finally{Eu.transition=o,bt=r}return null}function Sc(){if(null!==Bu){var e=wt(Ku),t=Eu.transition,n=bt;try{if(Eu.transition=null,bt=16>e?16:e,null===Bu)var r=!1;else{if(e=Bu,Bu=null,Ku=0,0!==(6&_u))throw Error(a(331));var o=_u;for(_u|=4,Yl=e.current;null!==Yl;){var i=Yl,l=i.child;if(0!==(16&Yl.flags)){var u=i.deletions;if(null!==u){for(var c=0;c<u.length;c++){var s=u[c];for(Yl=s;null!==Yl;){var f=Yl;switch(f.tag){case 0:case 11:case 15:Zl(8,f,i)}var d=f.child;if(null!==d)d.return=f,Yl=d;else for(;null!==Yl;){var p=(f=Yl).sibling,h=f.return;if(nu(f),f===s){Yl=null;break}if(null!==p){p.return=h,Yl=p;break}Yl=h}}}var m=i.alternate;if(null!==m){var v=m.child;if(null!==v){m.child=null;do{var y=v.sibling;v.sibling=null,v=y}while(null!==v)}}Yl=i}}if(0!==(2064&i.subtreeFlags)&&null!==l)l.return=i,Yl=l;else e:for(;null!==Yl;){if(0!==(2048&(i=Yl).flags))switch(i.tag){case 0:case 11:case 15:Zl(9,i,i.return)}var g=i.sibling;if(null!==g){g.return=i.return,Yl=g;break e}Yl=i.return}}var b=e.current;for(Yl=b;null!==Yl;){var w=(l=Yl).child;if(0!==(2064&l.subtreeFlags)&&null!==w)w.return=l,Yl=w;else e:for(l=b;null!==Yl;){if(0!==(2048&(u=Yl).flags))try{switch(u.tag){case 0:case 11:case 15:eu(9,u)}}catch(k){xc(u,u.return,k)}if(u===l){Yl=null;break e}var S=u.sibling;if(null!==S){S.return=u.return,Yl=S;break e}Yl=u.return}}if(_u=o,Ho(),at&&"function"===typeof at.onPostCommitFiberRoot)try{at.onPostCommitFiberRoot(ot,e)}catch(k){}r=!0}return r}finally{bt=n,Eu.transition=t}}return!1}function kc(e,t,n){ia(e,t=dl(0,t=il(n,t),1)),t=Xu(),null!==(e=ec(e,1))&&(yt(e,1,t),nc(e,t))}function xc(e,t,n){if(3===e.tag)kc(e,e,n);else for(;null!==t;){if(3===t.tag){kc(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"===typeof t.type.getDerivedStateFromError||"function"===typeof r.componentDidCatch&&(null===Hu||!Hu.has(r))){ia(t,e=pl(t,e=il(n,e),1)),e=Xu(),null!==(t=ec(t,1))&&(yt(t,1,e),nc(t,e));break}}t=t.return}}function Ec(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=Xu(),e.pingedLanes|=e.suspendedLanes&n,Cu===e&&(Ou&n)===n&&(4===Au||3===Au&&(130023424&Ou)===Ou&&500>Xe()-Fu?fc(e,0):ju|=n),nc(e,t)}function _c(e,t){0===t&&(0===(1&e.mode)?t=1:(t=st,0===(130023424&(st<<=1))&&(st=4194304)));var n=Xu();null!==(e=ec(e,t))&&(yt(e,t,n),nc(e,n))}function Cc(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),_c(e,n)}function Pc(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(a(314))}null!==r&&r.delete(t),_c(e,n)}function Oc(e,t){return Qe(e,t)}function Tc(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Nc(e,t,n,r){return new Tc(e,t,n,r)}function Ac(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Lc(e,t){var n=e.alternate;return null===n?((n=Nc(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Rc(e,t,n,r,o,i){var l=2;if(r=e,"function"===typeof e)Ac(e)&&(l=1);else if("string"===typeof e)l=5;else e:switch(e){case x:return zc(n.children,o,i,t);case E:l=8,o|=8;break;case _:return(e=Nc(12,n,t,2|o)).elementType=_,e.lanes=i,e;case T:return(e=Nc(13,n,t,o)).elementType=T,e.lanes=i,e;case N:return(e=Nc(19,n,t,o)).elementType=N,e.lanes=i,e;case R:return jc(n,o,i,t);default:if("object"===typeof e&&null!==e)switch(e.$$typeof){case C:l=10;break e;case P:l=9;break e;case O:l=11;break e;case A:l=14;break e;case L:l=16,r=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Nc(l,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function zc(e,t,n,r){return(e=Nc(7,e,r,t)).lanes=n,e}function jc(e,t,n,r){return(e=Nc(22,e,r,t)).elementType=R,e.lanes=n,e.stateNode={},e}function Dc(e,t,n){return(e=Nc(6,e,null,t)).lanes=n,e}function Ic(e,t,n){return(t=Nc(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Fc(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=vt(0),this.expirationTimes=vt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=vt(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function Mc(e,t,n,r,o,a,i,l,u){return e=new Fc(e,t,n,l,u),1===t?(t=1,!0===a&&(t|=8)):t=0,a=Nc(3,null,null,t),e.current=a,a.stateNode=e,a.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},ra(a),e}function Uc(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function $c(e){if(!e)return Oo;e:{if(We(e=e._reactInternals)!==e||1!==e.tag)throw Error(a(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Ro(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(a(171))}if(1===e.tag){var n=e.type;if(Ro(n))return Do(e,n,t)}return t}function Wc(e,t,n,r,o,a,i,l,u){return(e=Mc(n,r,!0,e,0,a,0,l,u)).context=$c(null),n=e.current,(a=aa(r=Xu(),o=Ju(n))).callback=void 0!==t&&null!==t?t:null,ia(n,a),e.current.lanes=o,yt(e,o,r),nc(e,r),e}function Hc(e,t,n,r){var o=t.current,a=Xu(),i=Ju(o);return n=$c(n),null===t.context?t.context=n:t.pendingContext=n,(t=aa(a,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),ia(o,t),null!==(e=Zu(o,i,a))&&la(e,o,i),i}function Vc(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Bc(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Kc(e,t){Bc(e,t),(e=e.alternate)&&Bc(e,t)}wu=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||No.current)Sl=!0;else{if(0===(e.lanes&n)&&0===(128&t.flags))return Sl=!1,function(e,t,n){switch(t.tag){case 3:Al(t),$a();break;case 5:ni(t);break;case 1:Ro(t.type)&&Io(t);break;case 4:ei(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;Po(Ko,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Po(oi,1&oi.current),t.flags|=128,null):0!==(n&t.child.childLanes)?Dl(e,t,n):(Po(oi,1&oi.current),null!==(e=Vl(e,t,n))?e.sibling:null);Po(oi,1&oi.current);break;case 19:if(r=0!==(n&t.childLanes),0!==(128&e.flags)){if(r)return Hl(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),Po(oi,oi.current),r)break;return null;case 22:case 23:return t.lanes=0,Cl(e,t,n)}return Vl(e,t,n)}(e,t,n);Sl=0!==(131072&e.flags)}else Sl=!1,Ra&&0!==(1048576&t.flags)&&Oa(t,Sa,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps;var o=Lo(t,To.current);Zo(t,n),o=wi(null,t,r,e,o,n);var i=Si();return t.flags|=1,"object"===typeof o&&null!==o&&"function"===typeof o.render&&void 0===o.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Ro(r)?(i=!0,Io(t)):i=!1,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ra(t),o.updater=pa,t.stateNode=o,o._reactInternals=t,ya(t,r,e,n),t=Nl(null,t,r,!0,i,n)):(t.tag=0,Ra&&i&&Ta(t),kl(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,r=(o=r._init)(r._payload),t.type=r,o=t.tag=function(e){if("function"===typeof e)return Ac(e)?1:0;if(void 0!==e&&null!==e){if((e=e.$$typeof)===O)return 11;if(e===A)return 14}return 2}(r),e=Bo(r,e),o){case 0:t=Ol(null,t,r,e,n);break e;case 1:t=Tl(null,t,r,e,n);break e;case 11:t=xl(null,t,r,e,n);break e;case 14:t=El(null,t,r,Bo(r.type,e),n);break e}throw Error(a(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,Ol(e,t,r,o=t.elementType===r?o:Bo(r,o),n);case 1:return r=t.type,o=t.pendingProps,Tl(e,t,r,o=t.elementType===r?o:Bo(r,o),n);case 3:e:{if(Al(t),null===e)throw Error(a(387));r=t.pendingProps,o=(i=t.memoizedState).element,oa(e,t),ca(t,r,null,n);var l=t.memoizedState;if(r=l.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=Ll(e,t,r,n,o=Error(a(423)));break e}if(r!==o){t=Ll(e,t,r,n,o=Error(a(424)));break e}for(La=co(t.stateNode.containerInfo.firstChild),Aa=t,Ra=!0,za=null,n=qa(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if($a(),r===o){t=Vl(e,t,n);break e}kl(e,t,r,n)}t=t.child}return t;case 5:return ni(t),null===e&&Fa(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,l=o.children,no(r,o)?l=null:null!==i&&no(r,i)&&(t.flags|=32),Pl(e,t),kl(e,t,l,n),t.child;case 6:return null===e&&Fa(t),null;case 13:return Dl(e,t,n);case 4:return ei(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Qa(t,null,r,n):kl(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,xl(e,t,r,o=t.elementType===r?o:Bo(r,o),n);case 7:return kl(e,t,t.pendingProps,n),t.child;case 8:case 12:return kl(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,i=t.memoizedProps,l=o.value,Po(Ko,r._currentValue),r._currentValue=l,null!==i)if(lr(i.value,l)){if(i.children===o.children&&!No.current){t=Vl(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var u=i.dependencies;if(null!==u){l=i.child;for(var c=u.firstContext;null!==c;){if(c.context===r){if(1===i.tag){(c=aa(-1,n&-n)).tag=2;var s=i.updateQueue;if(null!==s){var f=(s=s.shared).pending;null===f?c.next=c:(c.next=f.next,f.next=c),s.pending=c}}i.lanes|=n,null!==(c=i.alternate)&&(c.lanes|=n),Jo(i.return,n,t),u.lanes|=n;break}c=c.next}}else if(10===i.tag)l=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(l=i.return))throw Error(a(341));l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),Jo(l,n,t),l=i.sibling}else l=i.child;if(null!==l)l.return=i;else for(l=i;null!==l;){if(l===t){l=null;break}if(null!==(i=l.sibling)){i.return=l.return,l=i;break}l=l.return}i=l}kl(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,Zo(t,n),r=r(o=ea(o)),t.flags|=1,kl(e,t,r,n),t.child;case 14:return o=Bo(r=t.type,t.pendingProps),El(e,t,r,o=Bo(r.type,o),n);case 15:return _l(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Bo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,Ro(r)?(e=!0,Io(t)):e=!1,Zo(t,n),ma(t,r,o),ya(t,r,o,n),Nl(null,t,r,!0,e,n);case 19:return Hl(e,t,n);case 22:return Cl(e,t,n)}throw Error(a(156,t.tag))};var Qc="function"===typeof reportError?reportError:function(e){console.error(e)};function qc(e){this._internalRoot=e}function Yc(e){this._internalRoot=e}function Gc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Xc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Jc(){}function Zc(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a;if("function"===typeof o){var l=o;o=function(){var e=Vc(i);l.call(e)}}Hc(t,i,e,o)}else i=function(e,t,n,r,o){if(o){if("function"===typeof r){var a=r;r=function(){var e=Vc(i);a.call(e)}}var i=Wc(t,r,e,0,null,!1,0,"",Jc);return e._reactRootContainer=i,e[mo]=i.current,Wr(8===e.nodeType?e.parentNode:e),cc(),i}for(;o=e.lastChild;)e.removeChild(o);if("function"===typeof r){var l=r;r=function(){var e=Vc(u);l.call(e)}}var u=Mc(e,0,!1,null,0,!1,0,"",Jc);return e._reactRootContainer=u,e[mo]=u.current,Wr(8===e.nodeType?e.parentNode:e),cc((function(){Hc(t,u,n,r)})),u}(n,t,e,o,r);return Vc(i)}Yc.prototype.render=qc.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(a(409));Hc(e,t,null,null)},Yc.prototype.unmount=qc.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;cc((function(){Hc(null,e,null,null)})),t[mo]=null}},Yc.prototype.unstable_scheduleHydration=function(e){if(e){var t=Et();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Rt.length&&0!==t&&t<Rt[n].priority;n++);Rt.splice(n,0,e),0===n&&It(e)}},St=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(gt(t,1|n),nc(t,Xe()),0===(6&_u)&&(Mu=Xe()+500,Ho()))}break;case 13:var r=Xu();cc((function(){return Zu(e,1,r)})),Kc(e,1)}},kt=function(e){13===e.tag&&(Zu(e,134217728,Xu()),Kc(e,134217728))},xt=function(e){if(13===e.tag){var t=Xu(),n=Ju(e);Zu(e,n,t),Kc(e,n)}},Et=function(){return bt},_t=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},ke=function(e,t,n){switch(t){case"input":if(J(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=ko(r);if(!o)throw Error(a(90));Q(r),J(r,o)}}}break;case"textarea":ae(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Oe=uc,Te=cc;var es={usingClientEntryPoint:!1,Events:[wo,So,ko,Ce,Pe,uc]},ts={findFiberByHostInstance:bo,bundleType:0,version:"18.1.0",rendererPackageName:"react-dom"},ns={bundleType:ts.bundleType,version:ts.version,rendererPackageName:ts.rendererPackageName,rendererConfig:ts.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Be(e))?null:e.stateNode},findFiberByHostInstance:ts.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.1.0-next-22edb9f77-20220426"};if("undefined"!==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var rs=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!rs.isDisabled&&rs.supportsFiber)try{ot=rs.inject(ns),at=rs}catch(se){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=es,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Gc(t))throw Error(a(200));return Uc(e,t,null,n)},t.createRoot=function(e,t){if(!Gc(e))throw Error(a(299));var n=!1,r="",o=Qc;return null!==t&&void 0!==t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=Mc(e,1,!1,null,0,n,0,r,o),e[mo]=t.current,Wr(8===e.nodeType?e.parentNode:e),new qc(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"===typeof e.render)throw Error(a(188));throw e=Object.keys(e).join(","),Error(a(268,e))}return e=null===(e=Be(t))?null:e.stateNode},t.flushSync=function(e){return cc(e)},t.hydrate=function(e,t,n){if(!Xc(t))throw Error(a(200));return Zc(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Gc(e))throw Error(a(405));var r=null!=n&&n.hydratedSources||null,o=!1,i="",l=Qc;if(null!==n&&void 0!==n&&(!0===n.unstable_strictMode&&(o=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=Wc(t,null,e,1,null!=n?n:null,o,0,i,l),e[mo]=t.current,Wr(e),r)for(e=0;e<r.length;e++)o=(o=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new Yc(t)},t.render=function(e,t,n){if(!Xc(t))throw Error(a(200));return Zc(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Xc(e))throw Error(a(40));return!!e._reactRootContainer&&(cc((function(){Zc(null,null,e,!1,(function(){e._reactRootContainer=null,e[mo]=null}))})),!0)},t.unstable_batchedUpdates=uc,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Xc(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return Zc(e,t,n,!1,r)},t.version="18.1.0-next-22edb9f77-20220426"},250:function(e,t,n){"use strict";var r=n(164);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},164:function(e,t,n){"use strict";!function e(){if("undefined"!==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(t){console.error(t)}}(),e.exports=n(463)},372:function(e,t){"use strict";var n=60103,r=60106,o=60107,a=60108,i=60114,l=60109,u=60110,c=60112,s=60113,f=60120,d=60115,p=60116,h=60121,m=60122,v=60117,y=60129,g=60131;if("function"===typeof Symbol&&Symbol.for){var b=Symbol.for;n=b("react.element"),r=b("react.portal"),o=b("react.fragment"),a=b("react.strict_mode"),i=b("react.profiler"),l=b("react.provider"),u=b("react.context"),c=b("react.forward_ref"),s=b("react.suspense"),f=b("react.suspense_list"),d=b("react.memo"),p=b("react.lazy"),h=b("react.block"),m=b("react.server.block"),v=b("react.fundamental"),y=b("react.debug_trace_mode"),g=b("react.legacy_hidden")}function w(e){if("object"===typeof e&&null!==e){var t=e.$$typeof;switch(t){case n:switch(e=e.type){case o:case i:case a:case s:case f:return e;default:switch(e=e&&e.$$typeof){case u:case c:case p:case d:case l:return e;default:return t}}case r:return t}}}t.isValidElementType=function(e){return"string"===typeof e||"function"===typeof e||e===o||e===i||e===y||e===a||e===s||e===f||e===g||"object"===typeof e&&null!==e&&(e.$$typeof===p||e.$$typeof===d||e.$$typeof===l||e.$$typeof===u||e.$$typeof===c||e.$$typeof===v||e.$$typeof===h||e[0]===m)},t.typeOf=w},441:function(e,t,n){"use strict";e.exports=n(372)},459:function(e,t){"use strict";var n,r=Symbol.for("react.element"),o=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),i=Symbol.for("react.strict_mode"),l=Symbol.for("react.profiler"),u=Symbol.for("react.provider"),c=Symbol.for("react.context"),s=Symbol.for("react.server_context"),f=Symbol.for("react.forward_ref"),d=Symbol.for("react.suspense"),p=Symbol.for("react.suspense_list"),h=Symbol.for("react.memo"),m=Symbol.for("react.lazy"),v=Symbol.for("react.offscreen");function y(e){if("object"===typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case a:case l:case i:case d:case p:return e;default:switch(e=e&&e.$$typeof){case s:case c:case f:case m:case h:case u:return e;default:return t}}case o:return t}}}n=Symbol.for("react.module.reference")},900:function(e,t,n){"use strict";n(459)},374:function(e,t,n){"use strict";var r=n(791),o=Symbol.for("react.element"),a=Symbol.for("react.fragment"),i=Object.prototype.hasOwnProperty,l=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,u={key:!0,ref:!0,__self:!0,__source:!0};function c(e,t,n){var r,a={},c=null,s=null;for(r in void 0!==n&&(c=""+n),void 0!==t.key&&(c=""+t.key),void 0!==t.ref&&(s=t.ref),t)i.call(t,r)&&!u.hasOwnProperty(r)&&(a[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===a[r]&&(a[r]=t[r]);return{$$typeof:o,type:e,key:c,ref:s,props:a,_owner:l.current}}t.jsx=c,t.jsxs=c},117:function(e,t){"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),u=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),s=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator;var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,v={};function y(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}function g(){}function b(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!==typeof e&&"function"!==typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=y.prototype;var w=b.prototype=new g;w.constructor=b,m(w,y.prototype),w.isPureReactComponent=!0;var S=Array.isArray,k=Object.prototype.hasOwnProperty,x={current:null},E={key:!0,ref:!0,__self:!0,__source:!0};function _(e,t,r){var o,a={},i=null,l=null;if(null!=t)for(o in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)k.call(t,o)&&!E.hasOwnProperty(o)&&(a[o]=t[o]);var u=arguments.length-2;if(1===u)a.children=r;else if(1<u){for(var c=Array(u),s=0;s<u;s++)c[s]=arguments[s+2];a.children=c}if(e&&e.defaultProps)for(o in u=e.defaultProps)void 0===a[o]&&(a[o]=u[o]);return{$$typeof:n,type:e,key:i,ref:l,props:a,_owner:x.current}}function C(e){return"object"===typeof e&&null!==e&&e.$$typeof===n}var P=/\/+/g;function O(e,t){return"object"===typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function T(e,t,o,a,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case r:u=!0}}if(u)return i=i(u=e),e=""===a?"."+O(u,0):a,S(i)?(o="",null!=e&&(o=e.replace(P,"$&/")+"/"),T(i,t,o,"",(function(e){return e}))):null!=i&&(C(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,o+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(P,"$&/")+"/")+e)),t.push(i)),1;if(u=0,a=""===a?".":a+":",S(e))for(var c=0;c<e.length;c++){var s=a+O(l=e[c],c);u+=T(l,t,o,s,i)}else if(s=function(e){return null===e||"object"!==typeof e?null:"function"===typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"===typeof s)for(e=s.call(e),c=0;!(l=e.next()).done;)u+=T(l=l.value,t,o,s=a+O(l,c++),i);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return u}function N(e,t,n){if(null==e)return e;var r=[],o=0;return T(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function A(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var L={current:null},R={transition:null},z={ReactCurrentDispatcher:L,ReactCurrentBatchConfig:R,ReactCurrentOwner:x};t.Children={map:N,forEach:function(e,t,n){N(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return N(e,(function(){t++})),t},toArray:function(e){return N(e,(function(e){return e}))||[]},only:function(e){if(!C(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=y,t.Fragment=o,t.Profiler=i,t.PureComponent=b,t.StrictMode=a,t.Suspense=s,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=z,t.cloneElement=function(e,t,r){if(null===e||void 0===e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=m({},e.props),a=e.key,i=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,l=x.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)k.call(t,c)&&!E.hasOwnProperty(c)&&(o[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)o.children=r;else if(1<c){u=Array(c);for(var s=0;s<c;s++)u[s]=arguments[s+2];o.children=u}return{$$typeof:n,type:e.type,key:a,ref:i,props:o,_owner:l}},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=_,t.createFactory=function(e){var t=_.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=C,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:A}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=R.transition;R.transition={};try{e()}finally{R.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return L.current.useCallback(e,t)},t.useContext=function(e){return L.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return L.current.useDeferredValue(e)},t.useEffect=function(e,t){return L.current.useEffect(e,t)},t.useId=function(){return L.current.useId()},t.useImperativeHandle=function(e,t,n){return L.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return L.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return L.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return L.current.useMemo(e,t)},t.useReducer=function(e,t,n){return L.current.useReducer(e,t,n)},t.useRef=function(e){return L.current.useRef(e)},t.useState=function(e){return L.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return L.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return L.current.useTransition()},t.version="18.1.0"},791:function(e,t,n){"use strict";e.exports=n(117)},184:function(e,t,n){"use strict";e.exports=n(374)},813:function(e,t){"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<a(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,i=o>>>1;r<i;){var l=2*(r+1)-1,u=e[l],c=l+1,s=e[c];if(0>a(u,n))c<o&&0>a(s,u)?(e[r]=s,e[c]=n,r=c):(e[r]=u,e[l]=n,r=l);else{if(!(c<o&&0>a(s,n)))break e;e[r]=s,e[c]=n,r=c}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"===typeof performance&&"function"===typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}var c=[],s=[],f=1,d=null,p=3,h=!1,m=!1,v=!1,y="function"===typeof setTimeout?setTimeout:null,g="function"===typeof clearTimeout?clearTimeout:null,b="undefined"!==typeof setImmediate?setImmediate:null;function w(e){for(var t=r(s);null!==t;){if(null===t.callback)o(s);else{if(!(t.startTime<=e))break;o(s),t.sortIndex=t.expirationTime,n(c,t)}t=r(s)}}function S(e){if(v=!1,w(e),!m)if(null!==r(c))m=!0,R(k);else{var t=r(s);null!==t&&z(S,t.startTime-e)}}function k(e,n){m=!1,v&&(v=!1,g(C),C=-1),h=!0;var a=p;try{for(w(n),d=r(c);null!==d&&(!(d.expirationTime>n)||e&&!T());){var i=d.callback;if("function"===typeof i){d.callback=null,p=d.priorityLevel;var l=i(d.expirationTime<=n);n=t.unstable_now(),"function"===typeof l?d.callback=l:d===r(c)&&o(c),w(n)}else o(c);d=r(c)}if(null!==d)var u=!0;else{var f=r(s);null!==f&&z(S,f.startTime-n),u=!1}return u}finally{d=null,p=a,h=!1}}"undefined"!==typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var x,E=!1,_=null,C=-1,P=5,O=-1;function T(){return!(t.unstable_now()-O<P)}function N(){if(null!==_){var e=t.unstable_now();O=e;var n=!0;try{n=_(!0,e)}finally{n?x():(E=!1,_=null)}}else E=!1}if("function"===typeof b)x=function(){b(N)};else if("undefined"!==typeof MessageChannel){var A=new MessageChannel,L=A.port2;A.port1.onmessage=N,x=function(){L.postMessage(null)}}else x=function(){y(N,0)};function R(e){_=e,E||(E=!0,x())}function z(e,n){C=y((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,R(k))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):P=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(c)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,o,a){var i=t.unstable_now();switch("object"===typeof a&&null!==a?a="number"===typeof(a=a.delay)&&0<a?i+a:i:a=i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:f++,callback:o,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>i?(e.sortIndex=a,n(s,e),null===r(c)&&e===r(s)&&(v?(g(C),C=-1):v=!0,z(S,a-i))):(e.sortIndex=l,n(c,e),m||h||(m=!0,R(k))),e},t.unstable_shouldYield=T,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},296:function(e,t,n){"use strict";e.exports=n(813)},613:function(e){e.exports=function(e,t,n,r){var o=n?n.call(r,e,t):void 0;if(void 0!==o)return!!o;if(e===t)return!0;if("object"!==typeof e||!e||"object"!==typeof t||!t)return!1;var a=Object.keys(e),i=Object.keys(t);if(a.length!==i.length)return!1;for(var l=Object.prototype.hasOwnProperty.bind(t),u=0;u<a.length;u++){var c=a[u];if(!l(c))return!1;var s=e[c],f=t[c];if(!1===(o=n?n.call(r,s,f,c):void 0)||void 0===o&&s!==f)return!1}return!0}},561:function(e,t,n){"use strict";var r=n(791);var o="function"===typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e===1/t)||e!==e&&t!==t},a=r.useState,i=r.useEffect,l=r.useLayoutEffect,u=r.useDebugValue;function c(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!o(e,n)}catch(r){return!0}}var s="undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement?function(e,t){return t()}:function(e,t){var n=t(),r=a({inst:{value:n,getSnapshot:t}}),o=r[0].inst,s=r[1];return l((function(){o.value=n,o.getSnapshot=t,c(o)&&s({inst:o})}),[e,n,t]),i((function(){return c(o)&&s({inst:o}),e((function(){c(o)&&s({inst:o})}))}),[e]),u(n),n};t.useSyncExternalStore=void 0!==r.useSyncExternalStore?r.useSyncExternalStore:s},595:function(e,t,n){"use strict";var r=n(791),o=n(248);var a="function"===typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e===1/t)||e!==e&&t!==t},i=o.useSyncExternalStore,l=r.useRef,u=r.useEffect,c=r.useMemo,s=r.useDebugValue;t.useSyncExternalStoreWithSelector=function(e,t,n,r,o){var f=l(null);if(null===f.current){var d={hasValue:!1,value:null};f.current=d}else d=f.current;f=c((function(){function e(e){if(!u){if(u=!0,i=e,e=r(e),void 0!==o&&d.hasValue){var t=d.value;if(o(t,e))return l=t}return l=e}if(t=l,a(i,e))return t;var n=r(e);return void 0!==o&&o(t,n)?t:(i=e,l=n)}var i,l,u=!1,c=void 0===n?null:n;return[function(){return e(t())},null===c?void 0:function(){return e(c())}]}),[t,n,r,o]);var p=i(e,f[0],f[1]);return u((function(){d.hasValue=!0,d.value=p}),[p]),s(p),p}},248:function(e,t,n){"use strict";e.exports=n(561)},327:function(e,t,n){"use strict";e.exports=n(595)}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={exports:{}};return e[r](a,a.exports,n),a.exports}n.m=e,n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,{a:t}),t},n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.f={},n.e=function(e){return Promise.all(Object.keys(n.f).reduce((function(t,r){return n.f[r](e,t),t}),[]))},n.u=function(e){return"static/js/"+e+".bundle.js"},n.miniCssF=function(e){},n.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"===typeof window)return window}}(),n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},function(){var e={},t="demo-app:";n.l=function(r,o,a,i){if(e[r])e[r].push(o);else{var l,u;if(void 0!==a)for(var c=document.getElementsByTagName("script"),s=0;s<c.length;s++){var f=c[s];if(f.getAttribute("src")==r||f.getAttribute("data-webpack")==t+a){l=f;break}}l||(u=!0,(l=document.createElement("script")).charset="utf-8",l.timeout=120,n.nc&&l.setAttribute("nonce",n.nc),l.setAttribute("data-webpack",t+a),l.src=r),e[r]=[o];var d=function(t,n){l.onerror=l.onload=null,clearTimeout(p);var o=e[r];if(delete e[r],l.parentNode&&l.parentNode.removeChild(l),o&&o.forEach((function(e){return e(n)})),t)return t(n)},p=setTimeout(d.bind(null,void 0,{type:"timeout",target:l}),12e4);l.onerror=d.bind(null,l.onerror),l.onload=d.bind(null,l.onload),u&&document.head.appendChild(l)}}}(),n.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},function(){var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e+"../../"}(),function(){var e={179:0};n.f.j=function(t,r){var o=n.o(e,t)?e[t]:void 0;if(0!==o)if(o)r.push(o[2]);else{var a=new Promise((function(n,r){o=e[t]=[n,r]}));r.push(o[2]=a);var i=n.p+n.u(t),l=new Error;n.l(i,(function(r){if(n.o(e,t)&&(0!==(o=e[t])&&(e[t]=void 0),o)){var a=r&&("load"===r.type?"missing":r.type),i=r&&r.target&&r.target.src;l.message="Loading chunk "+t+" failed.\n("+a+": "+i+")",l.name="ChunkLoadError",l.type=a,l.request=i,o[1](l)}}),"chunk-"+t,t)}};var t=function(t,r){var o,a,i=r[0],l=r[1],u=r[2],c=0;if(i.some((function(t){return 0!==e[t]}))){for(o in l)n.o(l,o)&&(n.m[o]=l[o]);if(u)u(n)}for(t&&t(r);c<i.length;c++)a=i[c],n.o(e,a)&&e[a]&&e[a][0](),e[a]=0},r=self.webpackChunkdemo_app=self.webpackChunkdemo_app||[];r.forEach(t.bind(null,0)),r.push=t.bind(null,r.push.bind(r))}(),function(){"use strict";var e=n(250),t=n(248),r=n(327),o=n(164);var a=function(e){e()},i=function(){return a},l=n(791),u=l.createContext(null);var c=n(110),s=n.n(c);n(900);var f={notify:function(){},get:function(){return[]}};function d(e,t){var n,r=f;function o(){l.onStateChange&&l.onStateChange()}function a(){n||(n=t?t.addNestedSub(o):e.subscribe(o),r=function(){var e=i(),t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}())}var l={addNestedSub:function(e){return a(),r.subscribe(e)},notifyNestedSubs:function(){r.notify()},handleChangeWrapper:o,isSubscribed:function(){return Boolean(n)},trySubscribe:a,tryUnsubscribe:function(){n&&(n(),n=void 0,r.clear(),r=f)},getListeners:function(){return r}};return l}var p=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement)?l.useLayoutEffect:l.useEffect;var h=function(e){var t=e.store,n=e.context,r=e.children,o=e.serverState,a=(0,l.useMemo)((function(){var e=d(t);return{store:t,subscription:e,getServerState:o?function(){return o}:void 0}}),[t,o]),i=(0,l.useMemo)((function(){return t.getState()}),[t]);p((function(){var e=a.subscription;return e.onStateChange=e.notifyNestedSubs,e.trySubscribe(),i!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=void 0}}),[a,i]);var c=n||u;return l.createElement(c.Provider,{value:a},r)};var m;function v(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}!function(e){e}(r.useSyncExternalStoreWithSelector),function(e){e}(t.useSyncExternalStore),m=o.unstable_batchedUpdates,a=m;var y=n(441),g=n(613),b=n.n(g);var w=function(e){function t(e,r,u,c,d){for(var p,h,m,v,w,k=0,x=0,E=0,_=0,C=0,L=0,z=m=p=0,D=0,I=0,F=0,M=0,U=u.length,$=U-1,W="",H="",V="",B="";D<U;){if(h=u.charCodeAt(D),D===$&&0!==x+_+E+k&&(0!==x&&(h=47===x?10:47),_=E=k=0,U++,$++),0===x+_+E+k){if(D===$&&(0<I&&(W=W.replace(f,"")),0<W.trim().length)){switch(h){case 32:case 9:case 59:case 13:case 10:break;default:W+=u.charAt(D)}h=59}switch(h){case 123:for(p=(W=W.trim()).charCodeAt(0),m=1,M=++D;D<U;){switch(h=u.charCodeAt(D)){case 123:m++;break;case 125:m--;break;case 47:switch(h=u.charCodeAt(D+1)){case 42:case 47:e:{for(z=D+1;z<$;++z)switch(u.charCodeAt(z)){case 47:if(42===h&&42===u.charCodeAt(z-1)&&D+2!==z){D=z+1;break e}break;case 10:if(47===h){D=z+1;break e}}D=z}}break;case 91:h++;case 40:h++;case 34:case 39:for(;D++<$&&u.charCodeAt(D)!==h;);}if(0===m)break;D++}if(m=u.substring(M,D),0===p&&(p=(W=W.replace(s,"").trim()).charCodeAt(0)),64===p){switch(0<I&&(W=W.replace(f,"")),h=W.charCodeAt(1)){case 100:case 109:case 115:case 45:I=r;break;default:I=A}if(M=(m=t(r,I,m,h,d+1)).length,0<R&&(w=l(3,m,I=n(A,W,F),r,O,P,M,h,d,c),W=I.join(""),void 0!==w&&0===(M=(m=w.trim()).length)&&(h=0,m="")),0<M)switch(h){case 115:W=W.replace(S,i);case 100:case 109:case 45:m=W+"{"+m+"}";break;case 107:m=(W=W.replace(y,"$1 $2"))+"{"+m+"}",m=1===N||2===N&&a("@"+m,3)?"@-webkit-"+m+"@"+m:"@"+m;break;default:m=W+m,112===c&&(H+=m,m="")}else m=""}else m=t(r,n(r,W,F),m,c,d+1);V+=m,m=F=I=z=p=0,W="",h=u.charCodeAt(++D);break;case 125:case 59:if(1<(M=(W=(0<I?W.replace(f,""):W).trim()).length))switch(0===z&&(p=W.charCodeAt(0),45===p||96<p&&123>p)&&(M=(W=W.replace(" ",":")).length),0<R&&void 0!==(w=l(1,W,r,e,O,P,H.length,c,d,c))&&0===(M=(W=w.trim()).length)&&(W="\0\0"),p=W.charCodeAt(0),h=W.charCodeAt(1),p){case 0:break;case 64:if(105===h||99===h){B+=W+u.charAt(D);break}default:58!==W.charCodeAt(M-1)&&(H+=o(W,p,h,W.charCodeAt(2)))}F=I=z=p=0,W="",h=u.charCodeAt(++D)}}switch(h){case 13:case 10:47===x?x=0:0===1+p&&107!==c&&0<W.length&&(I=1,W+="\0"),0<R*j&&l(0,W,r,e,O,P,H.length,c,d,c),P=1,O++;break;case 59:case 125:if(0===x+_+E+k){P++;break}default:switch(P++,v=u.charAt(D),h){case 9:case 32:if(0===_+k+x)switch(C){case 44:case 58:case 9:case 32:v="";break;default:32!==h&&(v=" ")}break;case 0:v="\\0";break;case 12:v="\\f";break;case 11:v="\\v";break;case 38:0===_+x+k&&(I=F=1,v="\f"+v);break;case 108:if(0===_+x+k+T&&0<z)switch(D-z){case 2:112===C&&58===u.charCodeAt(D-3)&&(T=C);case 8:111===L&&(T=L)}break;case 58:0===_+x+k&&(z=D);break;case 44:0===x+E+_+k&&(I=1,v+="\r");break;case 34:case 39:0===x&&(_=_===h?0:0===_?h:_);break;case 91:0===_+x+E&&k++;break;case 93:0===_+x+E&&k--;break;case 41:0===_+x+k&&E--;break;case 40:if(0===_+x+k){if(0===p)if(2*C+3*L===533);else p=1;E++}break;case 64:0===x+E+_+k+z+m&&(m=1);break;case 42:case 47:if(!(0<_+k+E))switch(x){case 0:switch(2*h+3*u.charCodeAt(D+1)){case 235:x=47;break;case 220:M=D,x=42}break;case 42:47===h&&42===C&&M+2!==D&&(33===u.charCodeAt(M+2)&&(H+=u.substring(M,D+1)),v="",x=0)}}0===x&&(W+=v)}L=C,C=h,D++}if(0<(M=H.length)){if(I=r,0<R&&(void 0!==(w=l(2,H,I,e,O,P,M,c,d,c))&&0===(H=w).length))return B+H+V;if(H=I.join(",")+"{"+H+"}",0!==N*T){switch(2!==N||a(H,2)||(T=0),T){case 111:H=H.replace(b,":-moz-$1")+H;break;case 112:H=H.replace(g,"::-webkit-input-$1")+H.replace(g,"::-moz-$1")+H.replace(g,":-ms-input-$1")+H}T=0}}return B+H+V}function n(e,t,n){var o=t.trim().split(m);t=o;var a=o.length,i=e.length;switch(i){case 0:case 1:var l=0;for(e=0===i?"":e[0]+" ";l<a;++l)t[l]=r(e,t[l],n).trim();break;default:var u=l=0;for(t=[];l<a;++l)for(var c=0;c<i;++c)t[u++]=r(e[c]+" ",o[l],n).trim()}return t}function r(e,t,n){var r=t.charCodeAt(0);switch(33>r&&(r=(t=t.trim()).charCodeAt(0)),r){case 38:return t.replace(v,"$1"+e.trim());case 58:return e.trim()+t.replace(v,"$1"+e.trim());default:if(0<1*n&&0<t.indexOf("\f"))return t.replace(v,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function o(e,t,n,r){var i=e+";",l=2*t+3*n+4*r;if(944===l){e=i.indexOf(":",9)+1;var u=i.substring(e,i.length-1).trim();return u=i.substring(0,e).trim()+u+";",1===N||2===N&&a(u,1)?"-webkit-"+u+u:u}if(0===N||2===N&&!a(i,1))return i;switch(l){case 1015:return 97===i.charCodeAt(10)?"-webkit-"+i+i:i;case 951:return 116===i.charCodeAt(3)?"-webkit-"+i+i:i;case 963:return 110===i.charCodeAt(5)?"-webkit-"+i+i:i;case 1009:if(100!==i.charCodeAt(4))break;case 969:case 942:return"-webkit-"+i+i;case 978:return"-webkit-"+i+"-moz-"+i+i;case 1019:case 983:return"-webkit-"+i+"-moz-"+i+"-ms-"+i+i;case 883:if(45===i.charCodeAt(8))return"-webkit-"+i+i;if(0<i.indexOf("image-set(",11))return i.replace(C,"$1-webkit-$2")+i;break;case 932:if(45===i.charCodeAt(4))switch(i.charCodeAt(5)){case 103:return"-webkit-box-"+i.replace("-grow","")+"-webkit-"+i+"-ms-"+i.replace("grow","positive")+i;case 115:return"-webkit-"+i+"-ms-"+i.replace("shrink","negative")+i;case 98:return"-webkit-"+i+"-ms-"+i.replace("basis","preferred-size")+i}return"-webkit-"+i+"-ms-"+i+i;case 964:return"-webkit-"+i+"-ms-flex-"+i+i;case 1023:if(99!==i.charCodeAt(8))break;return"-webkit-box-pack"+(u=i.substring(i.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+i+"-ms-flex-pack"+u+i;case 1005:return p.test(i)?i.replace(d,":-webkit-")+i.replace(d,":-moz-")+i:i;case 1e3:switch(t=(u=i.substring(13).trim()).indexOf("-")+1,u.charCodeAt(0)+u.charCodeAt(t)){case 226:u=i.replace(w,"tb");break;case 232:u=i.replace(w,"tb-rl");break;case 220:u=i.replace(w,"lr");break;default:return i}return"-webkit-"+i+"-ms-"+u+i;case 1017:if(-1===i.indexOf("sticky",9))break;case 975:switch(t=(i=e).length-10,l=(u=(33===i.charCodeAt(t)?i.substring(0,t):i).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|u.charCodeAt(7))){case 203:if(111>u.charCodeAt(8))break;case 115:i=i.replace(u,"-webkit-"+u)+";"+i;break;case 207:case 102:i=i.replace(u,"-webkit-"+(102<l?"inline-":"")+"box")+";"+i.replace(u,"-webkit-"+u)+";"+i.replace(u,"-ms-"+u+"box")+";"+i}return i+";";case 938:if(45===i.charCodeAt(5))switch(i.charCodeAt(6)){case 105:return u=i.replace("-items",""),"-webkit-"+i+"-webkit-box-"+u+"-ms-flex-"+u+i;case 115:return"-webkit-"+i+"-ms-flex-item-"+i.replace(x,"")+i;default:return"-webkit-"+i+"-ms-flex-line-pack"+i.replace("align-content","").replace(x,"")+i}break;case 973:case 989:if(45!==i.charCodeAt(3)||122===i.charCodeAt(4))break;case 931:case 953:if(!0===_.test(e))return 115===(u=e.substring(e.indexOf(":")+1)).charCodeAt(0)?o(e.replace("stretch","fill-available"),t,n,r).replace(":fill-available",":stretch"):i.replace(u,"-webkit-"+u)+i.replace(u,"-moz-"+u.replace("fill-",""))+i;break;case 962:if(i="-webkit-"+i+(102===i.charCodeAt(5)?"-ms-"+i:"")+i,211===n+r&&105===i.charCodeAt(13)&&0<i.indexOf("transform",10))return i.substring(0,i.indexOf(";",27)+1).replace(h,"$1-webkit-$2")+i}return i}function a(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10);return n=e.substring(n+1,e.length-1),z(2!==t?r:r.replace(E,"$1"),n,t)}function i(e,t){var n=o(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(k," or ($1)").substring(4):"("+t+")"}function l(e,t,n,r,o,a,i,l,u,s){for(var f,d=0,p=t;d<R;++d)switch(f=L[d].call(c,e,p,n,r,o,a,i,l,u,s)){case void 0:case!1:case!0:case null:break;default:p=f}if(p!==t)return p}function u(e){return void 0!==(e=e.prefix)&&(z=null,e?"function"!==typeof e?N=1:(N=2,z=e):N=0),u}function c(e,n){var r=e;if(33>r.charCodeAt(0)&&(r=r.trim()),r=[r],0<R){var o=l(-1,n,r,r,O,P,0,0,0,0);void 0!==o&&"string"===typeof o&&(n=o)}var a=t(A,r,n,0,0);return 0<R&&(void 0!==(o=l(-2,a,r,r,O,P,a.length,0,0,0))&&(a=o)),"",T=0,P=O=1,a}var s=/^\0+/g,f=/[\0\r\f]/g,d=/: */g,p=/zoo|gra/,h=/([,: ])(transform)/g,m=/,\r+?/g,v=/([\t\r\n ])*\f?&/g,y=/@(k\w+)\s*(\S*)\s*/,g=/::(place)/g,b=/:(read-only)/g,w=/[svh]\w+-[tblr]{2}/,S=/\(\s*(.*)\s*\)/g,k=/([\s\S]*?);/g,x=/-self|flex-/g,E=/[^]*?(:[rp][el]a[\w-]+)[^]*/,_=/stretch|:\s*\w+\-(?:conte|avail)/,C=/([^-])(image-set\()/,P=1,O=1,T=0,N=1,A=[],L=[],R=0,z=null,j=0;return c.use=function e(t){switch(t){case void 0:case null:R=L.length=0;break;default:if("function"===typeof t)L[R++]=t;else if("object"===typeof t)for(var n=0,r=t.length;n<r;++n)e(t[n]);else j=0|!!t}return e},c.set=u,void 0!==e&&u(e),c},S={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var k=function(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}},x=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,E=k((function(e){return x.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91}));function _(){return(_=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var C=function(e,t){for(var n=[e[0]],r=0,o=t.length;r<o;r+=1)n.push(t[r],e[r+1]);return n},P=function(e){return null!==e&&"object"==typeof e&&"[object Object]"===(e.toString?e.toString():Object.prototype.toString.call(e))&&!(0,y.typeOf)(e)},O=Object.freeze([]),T=Object.freeze({});function N(e){return"function"==typeof e}function A(e){return e.displayName||e.name||"Component"}function L(e){return e&&"string"==typeof e.styledComponentId}var R="undefined"!=typeof process&&({NODE_ENV:"production",PUBLIC_URL:"",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0}.REACT_APP_SC_ATTR||{NODE_ENV:"production",PUBLIC_URL:"",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0}.SC_ATTR)||"data-styled",z="undefined"!=typeof window&&"HTMLElement"in window,j=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!=={NODE_ENV:"production",PUBLIC_URL:"",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0}.REACT_APP_SC_DISABLE_SPEEDY&&""!=={NODE_ENV:"production",PUBLIC_URL:"",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0}.REACT_APP_SC_DISABLE_SPEEDY?"false"!=={NODE_ENV:"production",PUBLIC_URL:"",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0}.REACT_APP_SC_DISABLE_SPEEDY&&{NODE_ENV:"production",PUBLIC_URL:"",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0}.REACT_APP_SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!=={NODE_ENV:"production",PUBLIC_URL:"",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0}.SC_DISABLE_SPEEDY&&""!=={NODE_ENV:"production",PUBLIC_URL:"",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0}.SC_DISABLE_SPEEDY&&("false"!=={NODE_ENV:"production",PUBLIC_URL:"",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0}.SC_DISABLE_SPEEDY&&{NODE_ENV:"production",PUBLIC_URL:"",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0}.SC_DISABLE_SPEEDY));function D(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw new Error("An error occurred. See https://git.io/JUIaE#"+e+" for more information."+(n.length>0?" Args: "+n.join(", "):""))}var I=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}var t=e.prototype;return t.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},t.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,r=n.length,o=r;e>=o;)(o<<=1)<0&&D(16,""+e);this.groupSizes=new Uint32Array(o),this.groupSizes.set(n),this.length=o;for(var a=r;a<o;a++)this.groupSizes[a]=0}for(var i=this.indexOfGroup(e+1),l=0,u=t.length;l<u;l++)this.tag.insertRule(i,t[l])&&(this.groupSizes[e]++,i++)},t.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),r=n+t;this.groupSizes[e]=0;for(var o=n;o<r;o++)this.tag.deleteRule(n)}},t.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],r=this.indexOfGroup(e),o=r+n,a=r;a<o;a++)t+=this.tag.getRule(a)+"/*!sc*/\n";return t},e}(),F=new Map,M=new Map,U=1,$=function(e){if(F.has(e))return F.get(e);for(;M.has(U);)U++;var t=U++;return F.set(e,t),M.set(t,e),t},W=function(e){return M.get(e)},H=function(e,t){t>=U&&(U=t+1),F.set(e,t),M.set(t,e)},V="style["+R+'][data-styled-version="5.3.5"]',B=new RegExp("^"+R+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),K=function(e,t,n){for(var r,o=n.split(","),a=0,i=o.length;a<i;a++)(r=o[a])&&e.registerName(t,r)},Q=function(e,t){for(var n=(t.textContent||"").split("/*!sc*/\n"),r=[],o=0,a=n.length;o<a;o++){var i=n[o].trim();if(i){var l=i.match(B);if(l){var u=0|parseInt(l[1],10),c=l[2];0!==u&&(H(c,u),K(e,c,l[3]),e.getTag().insertRules(u,r)),r.length=0}else r.push(i)}}},q=function(){return"undefined"!=typeof window&&void 0!==window.__webpack_nonce__?window.__webpack_nonce__:null},Y=function(e){var t=document.head,n=e||t,r=document.createElement("style"),o=function(e){for(var t=e.childNodes,n=t.length;n>=0;n--){var r=t[n];if(r&&1===r.nodeType&&r.hasAttribute(R))return r}}(n),a=void 0!==o?o.nextSibling:null;r.setAttribute(R,"active"),r.setAttribute("data-styled-version","5.3.5");var i=q();return i&&r.setAttribute("nonce",i),n.insertBefore(r,a),r},G=function(){function e(e){var t=this.element=Y(e);t.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,r=t.length;n<r;n++){var o=t[n];if(o.ownerNode===e)return o}D(17)}(t),this.length=0}var t=e.prototype;return t.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return!1}},t.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},t.getRule=function(e){var t=this.sheet.cssRules[e];return void 0!==t&&"string"==typeof t.cssText?t.cssText:""},e}(),X=function(){function e(e){var t=this.element=Y(e);this.nodes=t.childNodes,this.length=0}var t=e.prototype;return t.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t),r=this.nodes[e];return this.element.insertBefore(n,r||null),this.length++,!0}return!1},t.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},t.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),J=function(){function e(e){this.rules=[],this.length=0}var t=e.prototype;return t.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},t.deleteRule=function(e){this.rules.splice(e,1),this.length--},t.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),Z=z,ee={isServer:!z,useCSSOMInjection:!j},te=function(){function e(e,t,n){void 0===e&&(e=T),void 0===t&&(t={}),this.options=_({},ee,{},e),this.gs=t,this.names=new Map(n),this.server=!!e.isServer,!this.server&&z&&Z&&(Z=!1,function(e){for(var t=document.querySelectorAll(V),n=0,r=t.length;n<r;n++){var o=t[n];o&&"active"!==o.getAttribute(R)&&(Q(e,o),o.parentNode&&o.parentNode.removeChild(o))}}(this))}e.registerId=function(e){return $(e)};var t=e.prototype;return t.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(_({},this.options,{},t),this.gs,n&&this.names||void 0)},t.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},t.getTag=function(){return this.tag||(this.tag=(n=(t=this.options).isServer,r=t.useCSSOMInjection,o=t.target,e=n?new J(o):r?new G(o):new X(o),new I(e)));var e,t,n,r,o},t.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},t.registerName=function(e,t){if($(e),this.names.has(e))this.names.get(e).add(t);else{var n=new Set;n.add(t),this.names.set(e,n)}},t.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules($(e),n)},t.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},t.clearRules=function(e){this.getTag().clearGroup($(e)),this.clearNames(e)},t.clearTag=function(){this.tag=void 0},t.toString=function(){return function(e){for(var t=e.getTag(),n=t.length,r="",o=0;o<n;o++){var a=W(o);if(void 0!==a){var i=e.names.get(a),l=t.getGroup(o);if(i&&l&&i.size){var u=R+".g"+o+'[id="'+a+'"]',c="";void 0!==i&&i.forEach((function(e){e.length>0&&(c+=e+",")})),r+=""+l+u+'{content:"'+c+'"}/*!sc*/\n'}}}return r}(this)},e}(),ne=/(a)(d)/gi,re=function(e){return String.fromCharCode(e+(e>25?39:97))};function oe(e){var t,n="";for(t=Math.abs(e);t>52;t=t/52|0)n=re(t%52)+n;return(re(t%52)+n).replace(ne,"$1-$2")}var ae=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},ie=function(e){return ae(5381,e)};function le(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(N(n)&&!L(n))return!1}return!0}var ue=ie("5.3.5"),ce=function(){function e(e,t,n){this.rules=e,this.staticRulesId="",this.isStatic=(void 0===n||n.isStatic)&&le(e),this.componentId=t,this.baseHash=ae(ue,t),this.baseStyle=n,te.registerId(t)}return e.prototype.generateAndInjectStyles=function(e,t,n){var r=this.componentId,o=[];if(this.baseStyle&&o.push(this.baseStyle.generateAndInjectStyles(e,t,n)),this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(r,this.staticRulesId))o.push(this.staticRulesId);else{var a=Pe(this.rules,e,t,n).join(""),i=oe(ae(this.baseHash,a)>>>0);if(!t.hasNameForId(r,i)){var l=n(a,"."+i,void 0,r);t.insertRules(r,i,l)}o.push(i),this.staticRulesId=i}else{for(var u=this.rules.length,c=ae(this.baseHash,n.hash),s="",f=0;f<u;f++){var d=this.rules[f];if("string"==typeof d)s+=d;else if(d){var p=Pe(d,e,t,n),h=Array.isArray(p)?p.join(""):p;c=ae(c,h+f),s+=h}}if(s){var m=oe(c>>>0);if(!t.hasNameForId(r,m)){var v=n(s,"."+m,void 0,r);t.insertRules(r,m,v)}o.push(m)}}return o.join(" ")},e}(),se=/^\s*\/\/.*$/gm,fe=[":","[",".","#"];function de(e){var t,n,r,o,a=void 0===e?T:e,i=a.options,l=void 0===i?T:i,u=a.plugins,c=void 0===u?O:u,s=new w(l),f=[],d=function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,o,a,i,l,u,c,s,f){switch(n){case 1:if(0===s&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===c)return r+"/*|*/";break;case 3:switch(c){case 102:case 112:return e(o[0]+r),"";default:return r+(0===f?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t)}}}((function(e){f.push(e)})),p=function(e,r,a){return 0===r&&-1!==fe.indexOf(a[n.length])||a.match(o)?e:"."+t};function h(e,a,i,l){void 0===l&&(l="&");var u=e.replace(se,""),c=a&&i?i+" "+a+" { "+u+" }":u;return t=l,n=a,r=new RegExp("\\"+n+"\\b","g"),o=new RegExp("(\\"+n+"\\b){2,}"),s(i||!a?"":a,c)}return s.use([].concat(c,[function(e,t,o){2===e&&o.length&&o[0].lastIndexOf(n)>0&&(o[0]=o[0].replace(r,p))},d,function(e){if(-2===e){var t=f;return f=[],t}}])),h.hash=c.length?c.reduce((function(e,t){return t.name||D(15),ae(e,t.name)}),5381).toString():"",h}var pe=l.createContext(),he=(pe.Consumer,l.createContext()),me=(he.Consumer,new te),ve=de();function ye(){return(0,l.useContext)(pe)||me}function ge(){return(0,l.useContext)(he)||ve}function be(e){var t=(0,l.useState)(e.stylisPlugins),n=t[0],r=t[1],o=ye(),a=(0,l.useMemo)((function(){var t=o;return e.sheet?t=e.sheet:e.target&&(t=t.reconstructWithOptions({target:e.target},!1)),e.disableCSSOMInjection&&(t=t.reconstructWithOptions({useCSSOMInjection:!1})),t}),[e.disableCSSOMInjection,e.sheet,e.target]),i=(0,l.useMemo)((function(){return de({options:{prefix:!e.disableVendorPrefixes},plugins:n})}),[e.disableVendorPrefixes,n]);return(0,l.useEffect)((function(){b()(n,e.stylisPlugins)||r(e.stylisPlugins)}),[e.stylisPlugins]),l.createElement(pe.Provider,{value:a},l.createElement(he.Provider,{value:i},e.children))}var we=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=ve);var r=n.name+t.hash;e.hasNameForId(n.id,r)||e.insertRules(n.id,r,t(n.rules,r,"@keyframes"))},this.toString=function(){return D(12,String(n.name))},this.name=e,this.id="sc-keyframes-"+e,this.rules=t}return e.prototype.getName=function(e){return void 0===e&&(e=ve),this.name+e.hash},e}(),Se=/([A-Z])/,ke=/([A-Z])/g,xe=/^ms-/,Ee=function(e){return"-"+e.toLowerCase()};function _e(e){return Se.test(e)?e.replace(ke,Ee).replace(xe,"-ms-"):e}var Ce=function(e){return null==e||!1===e||""===e};function Pe(e,t,n,r){if(Array.isArray(e)){for(var o,a=[],i=0,l=e.length;i<l;i+=1)""!==(o=Pe(e[i],t,n,r))&&(Array.isArray(o)?a.push.apply(a,o):a.push(o));return a}return Ce(e)?"":L(e)?"."+e.styledComponentId:N(e)?"function"!=typeof(u=e)||u.prototype&&u.prototype.isReactComponent||!t?e:Pe(e(t),t,n,r):e instanceof we?n?(e.inject(n,r),e.getName(r)):e:P(e)?function e(t,n){var r,o,a=[];for(var i in t)t.hasOwnProperty(i)&&!Ce(t[i])&&(Array.isArray(t[i])&&t[i].isCss||N(t[i])?a.push(_e(i)+":",t[i],";"):P(t[i])?a.push.apply(a,e(t[i],i)):a.push(_e(i)+": "+(r=i,(null==(o=t[i])||"boolean"==typeof o||""===o?"":"number"!=typeof o||0===o||r in S?String(o).trim():o+"px")+";")));return n?[n+" {"].concat(a,["}"]):a}(e):e.toString();var u}var Oe=function(e){return Array.isArray(e)&&(e.isCss=!0),e};function Te(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return N(e)||P(e)?Oe(Pe(C(O,[e].concat(n)))):0===n.length&&1===e.length&&"string"==typeof e[0]?e:Oe(Pe(C(e,n)))}new Set;var Ne=function(e,t,n){return void 0===n&&(n=T),e.theme!==n.theme&&e.theme||t||n.theme},Ae=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,Le=/(^-|-$)/g;function Re(e){return e.replace(Ae,"-").replace(Le,"")}var ze=function(e){return oe(ie(e)>>>0)};function je(e){return"string"==typeof e&&!0}var De=function(e){return"function"==typeof e||"object"==typeof e&&null!==e&&!Array.isArray(e)},Ie=function(e){return"__proto__"!==e&&"constructor"!==e&&"prototype"!==e};function Fe(e,t,n){var r=e[n];De(t)&&De(r)?Me(r,t):e[n]=t}function Me(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var o=0,a=n;o<a.length;o++){var i=a[o];if(De(i))for(var l in i)Ie(l)&&Fe(e,i[l],l)}return e}var Ue=l.createContext();Ue.Consumer;var $e={};function We(e,t,n){var r=L(e),o=!je(e),a=t.attrs,i=void 0===a?O:a,u=t.componentId,c=void 0===u?function(e,t){var n="string"!=typeof e?"sc":Re(e);$e[n]=($e[n]||0)+1;var r=n+"-"+ze("5.3.5"+n+$e[n]);return t?t+"-"+r:r}(t.displayName,t.parentComponentId):u,f=t.displayName,d=void 0===f?function(e){return je(e)?"styled."+e:"Styled("+A(e)+")"}(e):f,p=t.displayName&&t.componentId?Re(t.displayName)+"-"+t.componentId:t.componentId||c,h=r&&e.attrs?Array.prototype.concat(e.attrs,i).filter(Boolean):i,m=t.shouldForwardProp;r&&e.shouldForwardProp&&(m=t.shouldForwardProp?function(n,r,o){return e.shouldForwardProp(n,r,o)&&t.shouldForwardProp(n,r,o)}:e.shouldForwardProp);var v,y=new ce(n,p,r?e.componentStyle:void 0),g=y.isStatic&&0===i.length,b=function(e,t){return function(e,t,n,r){var o=e.attrs,a=e.componentStyle,i=e.defaultProps,u=e.foldedComponentIds,c=e.shouldForwardProp,s=e.styledComponentId,f=e.target,d=function(e,t,n){void 0===e&&(e=T);var r=_({},t,{theme:e}),o={};return n.forEach((function(e){var t,n,a,i=e;for(t in N(i)&&(i=i(r)),i)r[t]=o[t]="className"===t?(n=o[t],a=i[t],n&&a?n+" "+a:n||a):i[t]})),[r,o]}(Ne(t,(0,l.useContext)(Ue),i)||T,t,o),p=d[0],h=d[1],m=function(e,t,n,r){var o=ye(),a=ge();return t?e.generateAndInjectStyles(T,o,a):e.generateAndInjectStyles(n,o,a)}(a,r,p),v=n,y=h.$as||t.$as||h.as||t.as||f,g=je(y),b=h!==t?_({},t,{},h):t,w={};for(var S in b)"$"!==S[0]&&"as"!==S&&("forwardedAs"===S?w.as=b[S]:(c?c(S,E,y):!g||E(S))&&(w[S]=b[S]));return t.style&&h.style!==t.style&&(w.style=_({},t.style,{},h.style)),w.className=Array.prototype.concat(u,s,m!==s?m:null,t.className,h.className).filter(Boolean).join(" "),w.ref=v,(0,l.createElement)(y,w)}(v,e,t,g)};return b.displayName=d,(v=l.forwardRef(b)).attrs=h,v.componentStyle=y,v.displayName=d,v.shouldForwardProp=m,v.foldedComponentIds=r?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):O,v.styledComponentId=p,v.target=r?e.target:e,v.withComponent=function(e){var r=t.componentId,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(t,["componentId"]),a=r&&r+"-"+(je(e)?e:Re(A(e)));return We(e,_({},o,{attrs:h,componentId:a}),n)},Object.defineProperty(v,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(t){this._foldedDefaultProps=r?Me({},e.defaultProps,t):t}}),v.toString=function(){return"."+v.styledComponentId},o&&s()(v,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),v}var He=function(e){return function e(t,n,r){if(void 0===r&&(r=T),!(0,y.isValidElementType)(n))return D(1,String(n));var o=function(){return t(n,r,Te.apply(void 0,arguments))};return o.withConfig=function(o){return e(t,n,_({},r,{},o))},o.attrs=function(o){return e(t,n,_({},r,{attrs:Array.prototype.concat(r.attrs,o).filter(Boolean)}))},o}(We,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","textPath","tspan"].forEach((function(e){He[e]=He(e)}));!function(){function e(e,t){this.rules=e,this.componentId=t,this.isStatic=le(e),te.registerId(this.componentId+1)}var t=e.prototype;t.createStyles=function(e,t,n,r){var o=r(Pe(this.rules,t,n,r).join(""),""),a=this.componentId+e;n.insertRules(a,a,o)},t.removeStyles=function(e,t){t.clearRules(this.componentId+e)},t.renderStyles=function(e,t,n,r){e>2&&te.registerId(this.componentId+e),this.removeStyles(e,n),this.createStyles(e,t,n,r)}}();!function(){function e(){var e=this;this._emitSheetCSS=function(){var t=e.instance.toString();if(!t)return"";var n=q();return"<style "+[n&&'nonce="'+n+'"',R+'="true"','data-styled-version="5.3.5"'].filter(Boolean).join(" ")+">"+t+"</style>"},this.getStyleTags=function(){return e.sealed?D(2):e._emitSheetCSS()},this.getStyleElement=function(){var t;if(e.sealed)return D(2);var n=((t={})[R]="",t["data-styled-version"]="5.3.5",t.dangerouslySetInnerHTML={__html:e.instance.toString()},t),r=q();return r&&(n.nonce=r),[l.createElement("style",_({},n,{key:"sc-0-0"}))]},this.seal=function(){e.sealed=!0},this.instance=new te({isServer:!0}),this.sealed=!1}var t=e.prototype;t.collectStyles=function(e){return this.sealed?D(2):l.createElement(be,{sheet:this.instance},e)},t.interleaveWithNodeStream=function(e){return D(3)}}();var Ve,Be,Ke=He,Qe=n(184),qe=Ke.div(Ve||(Ve=v(["\n  width: 120px;\n  min-width: 120px;\n  flex-grow: 0;\n  display: flex;\n  flex-direction: column;\n  padding: 20px 10px\n"]))),Ye=Ke.div(Be||(Be=v(["\n  font-size: 16px;\n  font-family: Arial;\n  display: flex;\n  flex-direction: row;\n  margin: 5px;\n  align-items: center\n"]))),Ge=function(){return(0,Qe.jsxs)(qe,{children:[(0,Qe.jsx)(Ye,{children:"Add a File ..."}),(0,Qe.jsx)(Ye,{children:"Library"}),(0,Qe.jsx)(Ye,{children:"Favorites"})]})};function Xe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var Je,Ze,et=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.speechText=void 0}var t,n,r;return t=e,(n=[{key:"currentSpeechText",get:function(){return this.speechText},set:function(e){this.speechText=e}}])&&Xe(t.prototype,n),r&&Xe(t,r),Object.defineProperty(t,"prototype",{writable:!1}),e}(),tt=function(){return window.userData||(window.userData={globalData:new et}),console.log(window.userData.globalData),window.userData.globalData},nt=Ke.div(Je||(Je=v(["\n  flex-grow: 10;\n  margin: 20px 10px;\n  background-color: white;\n  display: flex;\n  flex-direction: column;\n"]))),rt=Ke.textarea(Ze||(Ze=v(["\n  flex-grow: 10;\n"]))),ot=function(){return(0,Qe.jsx)(nt,{children:(0,Qe.jsx)(rt,{onChange:function(e){e.target&&e.target.value&&(tt().currentSpeechText=e.target.value)},placeholder:"Type here ..."})})};function at(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function it(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!==typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(u){l=!0,o=u}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(e,t)||function(e,t){if(e){if("string"===typeof e)return at(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?at(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function lt(e){return lt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},lt(e)}function ut(){ut=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},o=r.iterator||"@@iterator",a=r.asyncIterator||"@@asyncIterator",i=r.toStringTag||"@@toStringTag";function l(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{l({},"")}catch(C){l=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof f?t:f,a=Object.create(o.prototype),i=new x(r||[]);return a._invoke=function(e,t,n){var r="suspendedStart";return function(o,a){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw a;return _()}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var l=w(i,n);if(l){if(l===s)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=c(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===s)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}(e,n,i),a}function c(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(C){return{type:"throw",arg:C}}}e.wrap=u;var s={};function f(){}function d(){}function p(){}var h={};l(h,o,(function(){return this}));var m=Object.getPrototypeOf,v=m&&m(m(E([])));v&&v!==t&&n.call(v,o)&&(h=v);var y=p.prototype=f.prototype=Object.create(h);function g(e){["next","throw","return"].forEach((function(t){l(e,t,(function(e){return this._invoke(t,e)}))}))}function b(e,t){function r(o,a,i,l){var u=c(e[o],e,a);if("throw"!==u.type){var s=u.arg,f=s.value;return f&&"object"==lt(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){r("next",e,i,l)}),(function(e){r("throw",e,i,l)})):t.resolve(f).then((function(e){s.value=e,i(s)}),(function(e){return r("throw",e,i,l)}))}l(u.arg)}var o;this._invoke=function(e,n){function a(){return new t((function(t,o){r(e,n,t,o)}))}return o=o?o.then(a,a):a()}}function w(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,w(e,t),"throw"===t.method))return s;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return s}var r=c(n,e.iterator,t.arg);if("throw"===r.type)return t.method="throw",t.arg=r.arg,t.delegate=null,s;var o=r.arg;return o?o.done?(t[e.resultName]=o.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,s):o:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,s)}function S(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function k(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function x(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(S,this),this.reset(!0)}function E(e){if(e){var t=e[o];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,a=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return a.next=a}}return{next:_}}function _(){return{value:void 0,done:!0}}return d.prototype=p,l(y,"constructor",p),l(p,"constructor",d),d.displayName=l(p,i,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===d||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,p):(e.__proto__=p,l(e,i,"GeneratorFunction")),e.prototype=Object.create(y),e},e.awrap=function(e){return{__await:e}},g(b.prototype),l(b.prototype,a,(function(){return this})),e.AsyncIterator=b,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new b(u(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},g(y),l(y,i,"Generator"),l(y,o,(function(){return this})),l(y,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=E,x.prototype={constructor:x,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(k),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return i.type="throw",i.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],i=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var l=n.call(a,"catchLoc"),u=n.call(a,"finallyLoc");if(l&&u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,s):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),s},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),k(n),s}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;k(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:E(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),s}},e}function ct(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(c){return void n(c)}l.done?t(u):Promise.resolve(u).then(r,o)}var st=new Map,ft={postMessage:function(e){window.chrome&&window.chrome.webview?window.chrome.webview.postMessage(JSON.stringify(e)):console.log("Can't access window.chrome.webview")},addHostMessageListener:function(e,t){var n;st.has(e)?null===(n=st.get(e))||void 0===n||n.push(t):st.set(e,[t])},removeHostMessageListener:function(e,t){if(st.has(e)){var n,r,o=null===(n=st.get(e))||void 0===n?void 0:n.indexOf(t);if(void 0===o)return;if(o>=0)null===(r=st.get(e))||void 0===r||r.slice(o,o+1)}},onHostMessage:function(e,t){if(st.has(e)){var n=st.get(e);null===n||void 0===n||n.forEach((function(e){return e(t)}))}},getVoices:function(){var e=function(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){ct(a,r,o,i,l,"next",e)}function l(e){ct(a,r,o,i,l,"throw",e)}i(void 0)}))}}(ut().mark((function e(){var t;return ut().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!window.chrome||!window.chrome.webview){e.next=6;break}return e.next=3,window.chrome.webview.hostObjects.interop.getVoices();case 3:return t=e.sent,console.log(t),e.abrupt("return",t.split(","));case 6:return e.abrupt("return",[]);case 7:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}()};window.chrome&&window.chrome.webview&&window.chrome.webview.addEventListener("message",(function(e){if(e.data&&"string"===typeof e.data){var t=JSON.parse(e.data);if(!t.Event)return;ft.onHostMessage(t.Event,t)}}));var dt,pt,ht,mt,vt=ft,yt=Ke.div(dt||(dt=v(["\n  height: 32px;\n  flex-grow: 0;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: row;\n"]))),gt=Ke.div(pt||(pt=v(["\n  margin: 2px 5px;\n"]))),bt=Ke.button(ht||(ht=v(["\n  width: 5rem;\n"])));!function(e){e.kUnknown="unknown",e.kPlaying="playing",e.kPaused="paused",e.kCompleted="completed"}(mt||(mt={}));var wt,St,kt,xt,Et=function(e,t){var n={CommandName:e,CommandArguments:null!==t&&void 0!==t?t:""};return JSON.stringify(n)},_t=function(){var e=it(l.useState(mt.kUnknown),2),t=e[0],n=e[1],r=it(l.useState([]),2),o=r[0],a=r[1],i=it(l.useState(""),2),u=i[0],c=i[1];function s(e){if("playStateChanged"===e.Event)switch(e.Arguments){case"playing":return void n(mt.kPlaying);case"paused":return void n(mt.kPaused);case"completed":return void n(mt.kCompleted);default:return void n(mt.kUnknown)}}l.useEffect((function(){vt.addHostMessageListener("playStateChanged",s),vt.addHostMessageListener("voiceChanged",(function(e){"voiceChanged"===e.Event&&c(e.Arguments)})),vt.getVoices().then((function(e){a(e)}))}),[]);return(0,Qe.jsxs)(yt,{children:[(0,Qe.jsx)(gt,{children:(0,Qe.jsx)(bt,{onClick:function(e){window.speechSynthesis.getVoices().forEach((function(e){console.log("{v.name}}")})),console.log("onBackward")},children:"Backward"})}),t==mt.kPaused||t==mt.kPlaying?(0,Qe.jsx)(gt,{children:(0,Qe.jsx)(bt,{onClick:function(){var e=Et("stop");vt.postMessage({Status:0,Event:"command",Arguments:e})},children:"Stop"})}):(0,Qe.jsx)(gt,{children:(0,Qe.jsx)(bt,{disabled:!0,children:"Stop"})}),t==mt.kPlaying?(0,Qe.jsx)(gt,{children:(0,Qe.jsx)(bt,{onClick:function(){var e=Et("pause");vt.postMessage({Status:0,Event:"command",Arguments:e})},children:"Pause"})}):(0,Qe.jsx)(gt,{children:(0,Qe.jsx)(bt,{onClick:function(){var e;if(tt().currentSpeechText&&0!==tt().currentSpeechText.length){var t=Et("play",null!==(e=tt().currentSpeechText)&&void 0!==e?e:"");vt.postMessage({Status:0,Event:"command",Arguments:t})}},children:"Play"})}),(0,Qe.jsx)(gt,{children:(0,Qe.jsx)(bt,{onClick:function(){console.log("onForward")},children:"Forward"})}),(0,Qe.jsx)(gt,{children:(0,Qe.jsx)("select",{onChange:function(e){var t=Et("changeVoice",e.target.value);vt.postMessage({Status:0,Event:"command",Arguments:t})},children:o.map((function(e){return e===u?(0,Qe.jsx)("option",{value:e,selected:!0,children:e}):(0,Qe.jsx)("option",{value:e,children:e})}))})})]})},Ct=Ke.div(wt||(wt=v(["\n  flex-grow: 10;\n  display: flex;\n  flex-direction: column;\n  padding: 20px 10px;\n"]))),Pt=function(){return(0,Qe.jsxs)(Ct,{children:[(0,Qe.jsx)(_t,{}),(0,Qe.jsx)(ot,{})]})},Ot=Ke.div(St||(St=v(["\n  flex-grow: 10;\n  display: flex;\n  flex-direction: row;\n"]))),Tt=function(){return(0,Qe.jsxs)(Ot,{children:[(0,Qe.jsx)(Ge,{}),(0,Qe.jsx)(Pt,{})]})},Nt=Ke.div(kt||(kt=v(["\n  flex-grow: 10;\n  min-height: 200px;\n  min-width: 300px;\n  display: flex;\n  flex-direction: column;\n"]))),At=function(e){return(0,Qe.jsx)(Nt,{children:(0,Qe.jsx)(Tt,{})})},Lt=Ke.div(xt||(xt=v(["\n  flex-grow: 10;\n  font-family: Arial;\n  font-size: 14px;\n  display: flex;\n  flex-direction: column;\n"])));var Rt=function(){return(0,Qe.jsx)(Lt,{children:(0,Qe.jsx)(At,{})})},zt=function(e){e&&e instanceof Function&&n.e(787).then(n.bind(n,787)).then((function(t){var n=t.getCLS,r=t.getFID,o=t.getFCP,a=t.getLCP,i=t.getTTFB;n(e),r(e),o(e),a(e),i(e)}))};function jt(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw Error("[Immer] minified error nr: "+e+(n.length?" "+n.map((function(e){return"'"+e+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function Dt(e){return!!e&&!!e[Cn]}function It(e){return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;var n=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return n===Object||"function"==typeof n&&Function.toString.call(n)===Pn}(e)||Array.isArray(e)||!!e[_n]||!!e.constructor[_n]||Vt(e)||Bt(e))}function Ft(e,t,n){void 0===n&&(n=!1),0===Mt(e)?(n?Object.keys:On)(e).forEach((function(r){n&&"symbol"==typeof r||t(r,e[r],e)})):e.forEach((function(n,r){return t(r,n,e)}))}function Mt(e){var t=e[Cn];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:Vt(e)?2:Bt(e)?3:0}function Ut(e,t){return 2===Mt(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function $t(e,t){return 2===Mt(e)?e.get(t):e[t]}function Wt(e,t,n){var r=Mt(e);2===r?e.set(t,n):3===r?(e.delete(t),e.add(n)):e[t]=n}function Ht(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function Vt(e){return Sn&&e instanceof Map}function Bt(e){return kn&&e instanceof Set}function Kt(e){return e.o||e.t}function Qt(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=Tn(e);delete t[Cn];for(var n=On(t),r=0;r<n.length;r++){var o=n[r],a=t[o];!1===a.writable&&(a.writable=!0,a.configurable=!0),(a.get||a.set)&&(t[o]={configurable:!0,writable:!0,enumerable:a.enumerable,value:e[o]})}return Object.create(Object.getPrototypeOf(e),t)}function qt(e,t){return void 0===t&&(t=!1),Gt(e)||Dt(e)||!It(e)||(Mt(e)>1&&(e.set=e.add=e.clear=e.delete=Yt),Object.freeze(e),t&&Ft(e,(function(e,t){return qt(t,!0)}),!0)),e}function Yt(){jt(2)}function Gt(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function Xt(e){var t=Nn[e];return t||jt(18,e),t}function Jt(e,t){Nn[e]||(Nn[e]=t)}function Zt(){return bn}function en(e,t){t&&(Xt("Patches"),e.u=[],e.s=[],e.v=t)}function tn(e){nn(e),e.p.forEach(on),e.p=null}function nn(e){e===bn&&(bn=e.l)}function rn(e){return bn={p:[],l:bn,h:e,m:!0,_:0}}function on(e){var t=e[Cn];0===t.i||1===t.i?t.j():t.O=!0}function an(e,t){t._=t.p.length;var n=t.p[0],r=void 0!==e&&e!==n;return t.h.g||Xt("ES5").S(t,e,r),r?(n[Cn].P&&(tn(t),jt(4)),It(e)&&(e=ln(t,e),t.l||cn(t,e)),t.u&&Xt("Patches").M(n[Cn].t,e,t.u,t.s)):e=ln(t,n,[]),tn(t),t.u&&t.v(t.u,t.s),e!==En?e:void 0}function ln(e,t,n){if(Gt(t))return t;var r=t[Cn];if(!r)return Ft(t,(function(o,a){return un(e,r,t,o,a,n)}),!0),t;if(r.A!==e)return t;if(!r.P)return cn(e,r.t,!0),r.t;if(!r.I){r.I=!0,r.A._--;var o=4===r.i||5===r.i?r.o=Qt(r.k):r.o;Ft(3===r.i?new Set(o):o,(function(t,a){return un(e,r,o,t,a,n)})),cn(e,o,!1),n&&e.u&&Xt("Patches").R(r,n,e.u,e.s)}return r.o}function un(e,t,n,r,o,a){if(Dt(o)){var i=ln(e,o,a&&t&&3!==t.i&&!Ut(t.D,r)?a.concat(r):void 0);if(Wt(n,r,i),!Dt(i))return;e.m=!1}if(It(o)&&!Gt(o)){if(!e.h.F&&e._<1)return;ln(e,o),t&&t.A.l||cn(e,o)}}function cn(e,t,n){void 0===n&&(n=!1),e.h.F&&e.m&&qt(t,n)}function sn(e,t){var n=e[Cn];return(n?Kt(n):e)[t]}function fn(e,t){if(t in e)for(var n=Object.getPrototypeOf(e);n;){var r=Object.getOwnPropertyDescriptor(n,t);if(r)return r;n=Object.getPrototypeOf(n)}}function dn(e){e.P||(e.P=!0,e.l&&dn(e.l))}function pn(e){e.o||(e.o=Qt(e.t))}function hn(e,t,n){var r=Vt(t)?Xt("MapSet").N(t,n):Bt(t)?Xt("MapSet").T(t,n):e.g?function(e,t){var n=Array.isArray(e),r={i:n?1:0,A:t?t.A:Zt(),P:!1,I:!1,D:{},l:t,t:e,k:null,o:null,j:null,C:!1},o=r,a=An;n&&(o=[r],a=Ln);var i=Proxy.revocable(o,a),l=i.revoke,u=i.proxy;return r.k=u,r.j=l,u}(t,n):Xt("ES5").J(t,n);return(n?n.A:Zt()).p.push(r),r}function mn(e){return Dt(e)||jt(22,e),function e(t){if(!It(t))return t;var n,r=t[Cn],o=Mt(t);if(r){if(!r.P&&(r.i<4||!Xt("ES5").K(r)))return r.t;r.I=!0,n=vn(t,o),r.I=!1}else n=vn(t,o);return Ft(n,(function(t,o){r&&$t(r.t,t)===o||Wt(n,t,e(o))})),3===o?new Set(n):n}(e)}function vn(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return Qt(e)}function yn(){function e(e,t){var n=o[e];return n?n.enumerable=t:o[e]=n={configurable:!0,enumerable:t,get:function(){var t=this[Cn];return An.get(t,e)},set:function(t){var n=this[Cn];An.set(n,e,t)}},n}function t(e){for(var t=e.length-1;t>=0;t--){var o=e[t][Cn];if(!o.P)switch(o.i){case 5:r(o)&&dn(o);break;case 4:n(o)&&dn(o)}}}function n(e){for(var t=e.t,n=e.k,r=On(n),o=r.length-1;o>=0;o--){var a=r[o];if(a!==Cn){var i=t[a];if(void 0===i&&!Ut(t,a))return!0;var l=n[a],u=l&&l[Cn];if(u?u.t!==i:!Ht(l,i))return!0}}var c=!!t[Cn];return r.length!==On(t).length+(c?0:1)}function r(e){var t=e.k;if(t.length!==e.t.length)return!0;var n=Object.getOwnPropertyDescriptor(t,t.length-1);if(n&&!n.get)return!0;for(var r=0;r<t.length;r++)if(!t.hasOwnProperty(r))return!0;return!1}var o={};Jt("ES5",{J:function(t,n){var r=Array.isArray(t),o=function(t,n){if(t){for(var r=Array(n.length),o=0;o<n.length;o++)Object.defineProperty(r,""+o,e(o,!0));return r}var a=Tn(n);delete a[Cn];for(var i=On(a),l=0;l<i.length;l++){var u=i[l];a[u]=e(u,t||!!a[u].enumerable)}return Object.create(Object.getPrototypeOf(n),a)}(r,t),a={i:r?5:4,A:n?n.A:Zt(),P:!1,I:!1,D:{},l:n,t:t,k:o,o:null,O:!1,C:!1};return Object.defineProperty(o,Cn,{value:a,writable:!0}),o},S:function(e,n,o){o?Dt(n)&&n[Cn].A===e&&t(e.p):(e.u&&function e(t){if(t&&"object"==typeof t){var n=t[Cn];if(n){var o=n.t,a=n.k,i=n.D,l=n.i;if(4===l)Ft(a,(function(t){t!==Cn&&(void 0!==o[t]||Ut(o,t)?i[t]||e(a[t]):(i[t]=!0,dn(n)))})),Ft(o,(function(e){void 0!==a[e]||Ut(a,e)||(i[e]=!1,dn(n))}));else if(5===l){if(r(n)&&(dn(n),i.length=!0),a.length<o.length)for(var u=a.length;u<o.length;u++)i[u]=!1;else for(var c=o.length;c<a.length;c++)i[c]=!0;for(var s=Math.min(a.length,o.length),f=0;f<s;f++)a.hasOwnProperty(f)||(i[f]=!0),void 0===i[f]&&e(a[f])}}}}(e.p[0]),t(e.p))},K:function(e){return 4===e.i?n(e):r(e)}})}var gn,bn,wn="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),Sn="undefined"!=typeof Map,kn="undefined"!=typeof Set,xn="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,En=wn?Symbol.for("immer-nothing"):((gn={})["immer-nothing"]=!0,gn),_n=wn?Symbol.for("immer-draftable"):"__$immer_draftable",Cn=wn?Symbol.for("immer-state"):"__$immer_state",Pn=("undefined"!=typeof Symbol&&Symbol.iterator,""+Object.prototype.constructor),On="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames,Tn=Object.getOwnPropertyDescriptors||function(e){var t={};return On(e).forEach((function(n){t[n]=Object.getOwnPropertyDescriptor(e,n)})),t},Nn={},An={get:function(e,t){if(t===Cn)return e;var n=Kt(e);if(!Ut(n,t))return function(e,t,n){var r,o=fn(t,n);return o?"value"in o?o.value:null===(r=o.get)||void 0===r?void 0:r.call(e.k):void 0}(e,n,t);var r=n[t];return e.I||!It(r)?r:r===sn(e.t,t)?(pn(e),e.o[t]=hn(e.A.h,r,e)):r},has:function(e,t){return t in Kt(e)},ownKeys:function(e){return Reflect.ownKeys(Kt(e))},set:function(e,t,n){var r=fn(Kt(e),t);if(null==r?void 0:r.set)return r.set.call(e.k,n),!0;if(!e.P){var o=sn(Kt(e),t),a=null==o?void 0:o[Cn];if(a&&a.t===n)return e.o[t]=n,e.D[t]=!1,!0;if(Ht(n,o)&&(void 0!==n||Ut(e.t,t)))return!0;pn(e),dn(e)}return e.o[t]===n&&"number"!=typeof n&&(void 0!==n||t in e.o)||(e.o[t]=n,e.D[t]=!0,!0)},deleteProperty:function(e,t){return void 0!==sn(e.t,t)||t in e.t?(e.D[t]=!1,pn(e),dn(e)):delete e.D[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var n=Kt(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:r.enumerable,value:n[t]}:r},defineProperty:function(){jt(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){jt(12)}},Ln={};Ft(An,(function(e,t){Ln[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),Ln.deleteProperty=function(e,t){return Ln.set.call(this,e,t,void 0)},Ln.set=function(e,t,n){return An.set.call(this,e[0],t,n,e[0])};var Rn=function(){function e(e){var t=this;this.g=xn,this.F=!0,this.produce=function(e,n,r){if("function"==typeof e&&"function"!=typeof n){var o=n;n=e;var a=t;return function(e){var t=this;void 0===e&&(e=o);for(var r=arguments.length,i=Array(r>1?r-1:0),l=1;l<r;l++)i[l-1]=arguments[l];return a.produce(e,(function(e){var r;return(r=n).call.apply(r,[t,e].concat(i))}))}}var i;if("function"!=typeof n&&jt(6),void 0!==r&&"function"!=typeof r&&jt(7),It(e)){var l=rn(t),u=hn(t,e,void 0),c=!0;try{i=n(u),c=!1}finally{c?tn(l):nn(l)}return"undefined"!=typeof Promise&&i instanceof Promise?i.then((function(e){return en(l,r),an(e,l)}),(function(e){throw tn(l),e})):(en(l,r),an(i,l))}if(!e||"object"!=typeof e){if(void 0===(i=n(e))&&(i=e),i===En&&(i=void 0),t.F&&qt(i,!0),r){var s=[],f=[];Xt("Patches").M(e,i,s,f),r(s,f)}return i}jt(21,e)},this.produceWithPatches=function(e,n){if("function"==typeof e)return function(n){for(var r=arguments.length,o=Array(r>1?r-1:0),a=1;a<r;a++)o[a-1]=arguments[a];return t.produceWithPatches(n,(function(t){return e.apply(void 0,[t].concat(o))}))};var r,o,a=t.produce(e,n,(function(e,t){r=e,o=t}));return"undefined"!=typeof Promise&&a instanceof Promise?a.then((function(e){return[e,r,o]})):[a,r,o]},"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze)}var t=e.prototype;return t.createDraft=function(e){It(e)||jt(8),Dt(e)&&(e=mn(e));var t=rn(this),n=hn(this,e,void 0);return n[Cn].C=!0,nn(t),n},t.finishDraft=function(e,t){var n=(e&&e[Cn]).A;return en(n,t),an(void 0,n)},t.setAutoFreeze=function(e){this.F=e},t.setUseProxies=function(e){e&&!xn&&jt(20),this.g=e},t.applyPatches=function(e,t){var n;for(n=t.length-1;n>=0;n--){var r=t[n];if(0===r.path.length&&"replace"===r.op){e=r.value;break}}n>-1&&(t=t.slice(n+1));var o=Xt("Patches").$;return Dt(e)?o(e,t):this.produce(e,(function(e){return o(e,t)}))},e}(),zn=new Rn;zn.produce,zn.produceWithPatches.bind(zn),zn.setAutoFreeze.bind(zn),zn.setUseProxies.bind(zn),zn.applyPatches.bind(zn),zn.createDraft.bind(zn),zn.finishDraft.bind(zn);function jn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Dn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function In(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Dn(Object(n),!0).forEach((function(t){jn(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Dn(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Fn(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}var Mn="function"===typeof Symbol&&Symbol.observable||"@@observable",Un=function(){return Math.random().toString(36).substring(7).split("").join(".")},$n={INIT:"@@redux/INIT"+Un(),REPLACE:"@@redux/REPLACE"+Un(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+Un()}};function Wn(e){if("object"!==typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function Hn(e,t,n){var r;if("function"===typeof t&&"function"===typeof n||"function"===typeof n&&"function"===typeof arguments[3])throw new Error(Fn(0));if("function"===typeof t&&"undefined"===typeof n&&(n=t,t=void 0),"undefined"!==typeof n){if("function"!==typeof n)throw new Error(Fn(1));return n(Hn)(e,t)}if("function"!==typeof e)throw new Error(Fn(2));var o=e,a=t,i=[],l=i,u=!1;function c(){l===i&&(l=i.slice())}function s(){if(u)throw new Error(Fn(3));return a}function f(e){if("function"!==typeof e)throw new Error(Fn(4));if(u)throw new Error(Fn(5));var t=!0;return c(),l.push(e),function(){if(t){if(u)throw new Error(Fn(6));t=!1,c();var n=l.indexOf(e);l.splice(n,1),i=null}}}function d(e){if(!Wn(e))throw new Error(Fn(7));if("undefined"===typeof e.type)throw new Error(Fn(8));if(u)throw new Error(Fn(9));try{u=!0,a=o(a,e)}finally{u=!1}for(var t=i=l,n=0;n<t.length;n++){(0,t[n])()}return e}function p(e){if("function"!==typeof e)throw new Error(Fn(10));o=e,d({type:$n.REPLACE})}function h(){var e,t=f;return(e={subscribe:function(e){if("object"!==typeof e||null===e)throw new Error(Fn(11));function n(){e.next&&e.next(s())}return n(),{unsubscribe:t(n)}}})[Mn]=function(){return this},e}return d({type:$n.INIT}),(r={dispatch:d,subscribe:f,getState:s,replaceReducer:p})[Mn]=h,r}function Vn(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];0,"function"===typeof e[o]&&(n[o]=e[o])}var a,i=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if("undefined"===typeof n(void 0,{type:$n.INIT}))throw new Error(Fn(12));if("undefined"===typeof n(void 0,{type:$n.PROBE_UNKNOWN_ACTION()}))throw new Error(Fn(13))}))}(n)}catch(l){a=l}return function(e,t){if(void 0===e&&(e={}),a)throw a;for(var r=!1,o={},l=0;l<i.length;l++){var u=i[l],c=n[u],s=e[u],f=c(s,t);if("undefined"===typeof f){t&&t.type;throw new Error(Fn(14))}o[u]=f,r=r||f!==s}return(r=r||i.length!==Object.keys(e).length)?o:e}}function Bn(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function Kn(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error(Fn(15))},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},a=t.map((function(e){return e(o)}));return r=Bn.apply(void 0,a)(n.dispatch),In(In({},n),{},{dispatch:r})}}}function Qn(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"===typeof o?o(n,r,e):t(o)}}}}var qn=Qn();qn.withExtraArgument=Qn;var Yn=qn,Gn=function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};return function(t,n){if("function"!==typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Xn=function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e},Jn=Object.defineProperty,Zn=(Object.defineProperties,Object.getOwnPropertyDescriptors,Object.getOwnPropertySymbols),er=Object.prototype.hasOwnProperty,tr=Object.prototype.propertyIsEnumerable,nr=function(e,t,n){return t in e?Jn(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n},rr=function(e,t){for(var n in t||(t={}))er.call(t,n)&&nr(e,n,t[n]);if(Zn)for(var r=0,o=Zn(t);r<o.length;r++){n=o[r];tr.call(t,n)&&nr(e,n,t[n])}return e},or="undefined"!==typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"===typeof arguments[0]?Bn:Bn.apply(null,arguments)};"undefined"!==typeof window&&window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__;function ar(e){if("object"!==typeof e||null===e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;for(var n=t;null!==Object.getPrototypeOf(n);)n=Object.getPrototypeOf(n);return t===n}var ir=function(e){function t(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var o=e.apply(this,n)||this;return Object.setPrototypeOf(o,t.prototype),o}return Gn(t,e),Object.defineProperty(t,Symbol.species,{get:function(){return t},enumerable:!1,configurable:!0}),t.prototype.concat=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.prototype.concat.apply(this,t)},t.prototype.prepend=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return 1===e.length&&Array.isArray(e[0])?new(t.bind.apply(t,Xn([void 0],e[0].concat(this)))):new(t.bind.apply(t,Xn([void 0],e.concat(this))))},t}(Array);function lr(){return function(e){return function(e){void 0===e&&(e={});var t=e.thunk,n=void 0===t||t,r=(e.immutableCheck,e.serializableCheck,new ir);n&&(!function(e){return"boolean"===typeof e}(n)?r.push(Yn.withExtraArgument(n.extraArgument)):r.push(Yn));0;return r}(e)}}function ur(e,t){function n(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];if(t){var o=t.apply(void 0,n);if(!o)throw new Error("prepareAction did not return an object");return rr(rr({type:e,payload:o.payload},"meta"in o&&{meta:o.meta}),"error"in o&&{error:o.error})}return{type:e,payload:n[0]}}return n.toString=function(){return""+e},n.type=e,n.match=function(t){return t.type===e},n}Object.assign;var cr="listenerMiddleware";ur(cr+"/add"),ur(cr+"/removeAll"),ur(cr+"/remove");yn();var sr=function(e){var t,n=lr(),r=e||{},o=r.reducer,a=void 0===o?void 0:o,i=r.middleware,l=void 0===i?n():i,u=r.devTools,c=void 0===u||u,s=r.preloadedState,f=void 0===s?void 0:s,d=r.enhancers,p=void 0===d?void 0:d;if("function"===typeof a)t=a;else{if(!ar(a))throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');t=Vn(a)}var h=l;"function"===typeof h&&(h=h(n));var m=Kn.apply(void 0,h),v=Bn;c&&(v=or(rr({trace:!1},"object"===typeof c&&c)));var y=[m];return Array.isArray(p)?y=Xn([m],p):"function"===typeof p&&(y=p(y)),Hn(t,f,v.apply(void 0,y))}({reducer:{}});e.createRoot(document.getElementById("root")).render((0,Qe.jsx)(h,{store:sr,children:(0,Qe.jsx)(Rt,{})})),zt()}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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U0FBU28rRCxlQUFlLFNBRXJCempFLFFBQ0gsVUFBQyxFQUFELENBQVVzM0MsTUFBT0EsR0FBakIsVUFDRSxVQUFDLEdBQUQsT0FPSm9zQiIsInNvdXJjZXMiOlsid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3Mvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9jbGllbnQuanMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2pzeC1ydW50aW1lLmpzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL25vZGVfbW9kdWxlcy9zaGFsbG93ZXF1YWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9ub2RlX21vZHVsZXMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUvY2pzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlLXNoaW0ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9ub2RlX21vZHVsZXMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUvY2pzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlLXNoaW0vd2l0aC1zZWxlY3Rvci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL25vZGVfbW9kdWxlcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS9zaGltL2luZGV4LmpzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlL3NoaW0vd2l0aC1zZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9kZW1vLWFwcC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9kZW1vLWFwcC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9kZW1vLWFwcC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvd2VicGFjay9ydW50aW1lL2Vuc3VyZSBjaHVuayIsIndlYnBhY2s6Ly9kZW1vLWFwcC93ZWJwYWNrL3J1bnRpbWUvZ2V0IGphdmFzY3JpcHQgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvd2VicGFjay9ydW50aW1lL2dldCBtaW5pLWNzcyBjaHVuayBmaWxlbmFtZSIsIndlYnBhY2s6Ly9kZW1vLWFwcC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2RlbW8tYXBwL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvd2VicGFjay9ydW50aW1lL2xvYWQgc2NyaXB0Iiwid2VicGFjazovL2RlbW8tYXBwL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvYmF0Y2guanMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Db250ZXh0LmpzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZVNlbGVjdG9yLmpzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0LmpzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlRGlzcGF0Y2guanMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdGFnZ2VkVGVtcGxhdGVMaXRlcmFsLmpzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2luZGV4LmpzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvY29ubmVjdC5qcyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zdHlsaXMvZGlzdC9zdHlsaXMuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vdW5pdGxlc3MvZGlzdC91bml0bGVzcy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9tZW1vaXplL2Rpc3QvZW1vdGlvbi1tZW1vaXplLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2lzLXByb3AtdmFsaWQvZGlzdC9lbW90aW9uLWlzLXByb3AtdmFsaWQuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGVkLWNvbXBvbmVudHMvc3JjL3V0aWxzL2ludGVybGVhdmUuanMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGVkLWNvbXBvbmVudHMvc3JjL3V0aWxzL2lzUGxhaW5PYmplY3QuanMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGVkLWNvbXBvbmVudHMvc3JjL3V0aWxzL2VtcHRpZXMuanMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGVkLWNvbXBvbmVudHMvc3JjL3V0aWxzL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGVkLWNvbXBvbmVudHMvc3JjL3V0aWxzL2dldENvbXBvbmVudE5hbWUuanMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGVkLWNvbXBvbmVudHMvc3JjL3V0aWxzL2lzU3R5bGVkQ29tcG9uZW50LmpzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlZC1jb21wb25lbnRzL3NyYy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGVkLWNvbXBvbmVudHMvc3JjL3V0aWxzL2Vycm9yLmpzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlZC1jb21wb25lbnRzL3NyYy9zaGVldC9Hcm91cGVkVGFnLmpzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlZC1jb21wb25lbnRzL3NyYy9zaGVldC9Hcm91cElEQWxsb2NhdG9yLmpzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlZC1jb21wb25lbnRzL3NyYy9zaGVldC9SZWh5ZHJhdGlvbi5qcyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL25vZGVfbW9kdWxlcy9zdHlsZWQtY29tcG9uZW50cy9zcmMvdXRpbHMvbm9uY2UuanMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGVkLWNvbXBvbmVudHMvc3JjL3NoZWV0L2RvbS5qcyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL25vZGVfbW9kdWxlcy9zdHlsZWQtY29tcG9uZW50cy9zcmMvc2hlZXQvVGFnLmpzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlZC1jb21wb25lbnRzL3NyYy9zaGVldC9TaGVldC5qcyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL25vZGVfbW9kdWxlcy9zdHlsZWQtY29tcG9uZW50cy9zcmMvdXRpbHMvZ2VuZXJhdGVBbHBoYWJldGljTmFtZS5qcyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL25vZGVfbW9kdWxlcy9zdHlsZWQtY29tcG9uZW50cy9zcmMvdXRpbHMvaGFzaC5qcyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL25vZGVfbW9kdWxlcy9zdHlsZWQtY29tcG9uZW50cy9zcmMvdXRpbHMvaXNTdGF0aWNSdWxlcy5qcyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL25vZGVfbW9kdWxlcy9zdHlsZWQtY29tcG9uZW50cy9zcmMvbW9kZWxzL0NvbXBvbmVudFN0eWxlLmpzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlZC1jb21wb25lbnRzL3NyYy91dGlscy9zdHlsaXMuanMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGVkLWNvbXBvbmVudHMvc3JjL3V0aWxzL3N0eWxpc1BsdWdpbkluc2VydFJ1bGUuanMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGVkLWNvbXBvbmVudHMvc3JjL21vZGVscy9TdHlsZVNoZWV0TWFuYWdlci5qcyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL25vZGVfbW9kdWxlcy9zdHlsZWQtY29tcG9uZW50cy9zcmMvbW9kZWxzL0tleWZyYW1lcy5qcyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL25vZGVfbW9kdWxlcy9zdHlsZWQtY29tcG9uZW50cy9zcmMvdXRpbHMvaHlwaGVuYXRlU3R5bGVOYW1lLmpzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlZC1jb21wb25lbnRzL3NyYy91dGlscy9mbGF0dGVuLmpzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlZC1jb21wb25lbnRzL3NyYy91dGlscy9pc1N0YXRlbGVzc0Z1bmN0aW9uLmpzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlZC1jb21wb25lbnRzL3NyYy91dGlscy9hZGRVbml0SWZOZWVkZWQuanMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGVkLWNvbXBvbmVudHMvc3JjL2NvbnN0cnVjdG9ycy9jc3MuanMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGVkLWNvbXBvbmVudHMvc3JjL3V0aWxzL2NoZWNrRHluYW1pY0NyZWF0aW9uLmpzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlZC1jb21wb25lbnRzL3NyYy91dGlscy9kZXRlcm1pbmVUaGVtZS5qcyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL25vZGVfbW9kdWxlcy9zdHlsZWQtY29tcG9uZW50cy9zcmMvdXRpbHMvZXNjYXBlLmpzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlZC1jb21wb25lbnRzL3NyYy91dGlscy9nZW5lcmF0ZUNvbXBvbmVudElkLmpzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlZC1jb21wb25lbnRzL3NyYy91dGlscy9pc1RhZy5qcyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL25vZGVfbW9kdWxlcy9zdHlsZWQtY29tcG9uZW50cy9zcmMvdXRpbHMvbWl4aW5EZWVwLmpzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlZC1jb21wb25lbnRzL3NyYy9tb2RlbHMvVGhlbWVQcm92aWRlci5qcyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL25vZGVfbW9kdWxlcy9zdHlsZWQtY29tcG9uZW50cy9zcmMvbW9kZWxzL1N0eWxlZENvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL25vZGVfbW9kdWxlcy9zdHlsZWQtY29tcG9uZW50cy9zcmMvdXRpbHMvZ2VuZXJhdGVEaXNwbGF5TmFtZS5qcyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL25vZGVfbW9kdWxlcy9zdHlsZWQtY29tcG9uZW50cy9zcmMvdXRpbHMvam9pblN0cmluZ3MuanMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGVkLWNvbXBvbmVudHMvc3JjL3V0aWxzL2RvbUVsZW1lbnRzLmpzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlZC1jb21wb25lbnRzL3NyYy9jb25zdHJ1Y3RvcnMvc3R5bGVkLmpzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlZC1jb21wb25lbnRzL3NyYy9jb25zdHJ1Y3RvcnMvY29uc3RydWN0V2l0aE9wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGVkLWNvbXBvbmVudHMvc3JjL21vZGVscy9HbG9iYWxTdHlsZS5qcyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL25vZGVfbW9kdWxlcy9zdHlsZWQtY29tcG9uZW50cy9zcmMvbW9kZWxzL1NlcnZlclN0eWxlU2hlZXQuanMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGVkLWNvbXBvbmVudHMvc3JjL2NvbnN0cnVjdG9ycy9rZXlmcmFtZXMuanMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGVkLWNvbXBvbmVudHMvc3JjL2Jhc2UuanMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9zcmMvY29tcG9uZW50cy9zaWRlLW5hdmJhci50c3giLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9zcmMvZGF0YXByb3ZpZGVyL2dsb2JhbC1kYXRhLnRzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrLmpzIiwid2VicGFjazovL2RlbW8tYXBwLy4vc3JjL2NvbXBvbmVudHMvcGFuZWwtdGV4dGFyZWEudHN4Iiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5TGlrZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheVdpdGhIb2xlcy5qcyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qcyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9ub25JdGVyYWJsZVJlc3QuanMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mLmpzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3JlZ2VuZXJhdG9yUnVudGltZS5qcyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yLmpzIiwid2VicGFjazovL2RlbW8tYXBwLy4vc3JjL2hvc3RhcGkvaG9zdGFwaS50cyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL3NyYy9jb21wb25lbnRzL3BhbmVsLXRvb2xiYXIudHN4Iiwid2VicGFjazovL2RlbW8tYXBwLy4vc3JjL2NvbXBvbmVudHMvcGFuZWwudHN4Iiwid2VicGFjazovL2RlbW8tYXBwLy4vc3JjL2NvbXBvbmVudHMvbGF5b3V0LXZlcmJvc2UudHN4Iiwid2VicGFjazovL2RlbW8tYXBwLy4vc3JjL2NvbXBvbmVudHMvcGFsZXR0ZS50c3giLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9zcmMvQXBwLnRzeCIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL3NyYy9yZXBvcnRXZWJWaXRhbHMudHMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9ub2RlX21vZHVsZXMvaW1tZXIvc3JjL3V0aWxzL2Vycm9ycy50cyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL25vZGVfbW9kdWxlcy9pbW1lci9zcmMvdXRpbHMvY29tbW9uLnRzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL2ltbWVyL3NyYy91dGlscy9wbHVnaW5zLnRzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL2ltbWVyL3NyYy9jb3JlL3Njb3BlLnRzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL2ltbWVyL3NyYy9jb3JlL2ZpbmFsaXplLnRzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL2ltbWVyL3NyYy9jb3JlL3Byb3h5LnRzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL2ltbWVyL3NyYy9jb3JlL2ltbWVyQ2xhc3MudHMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9ub2RlX21vZHVsZXMvaW1tZXIvc3JjL2NvcmUvY3VycmVudC50cyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL25vZGVfbW9kdWxlcy9pbW1lci9zcmMvcGx1Z2lucy9lczUudHMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9ub2RlX21vZHVsZXMvaW1tZXIvc3JjL2ltbWVyLnRzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL2ltbWVyL3NyYy91dGlscy9lbnYudHMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMi5qcyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL25vZGVfbW9kdWxlcy9yZWR1eC9lcy9yZWR1eC5qcyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL25vZGVfbW9kdWxlcy9yZWR1eC10aHVuay9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL25vZGVfbW9kdWxlcy9AcmVkdXhqcy90b29sa2l0L3NyYy9kZXZ0b29sc0V4dGVuc2lvbi50cyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL25vZGVfbW9kdWxlcy9AcmVkdXhqcy90b29sa2l0L3NyYy9pc1BsYWluT2JqZWN0LnRzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL0ByZWR1eGpzL3Rvb2xraXQvc3JjL3V0aWxzLnRzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL0ByZWR1eGpzL3Rvb2xraXQvc3JjL2dldERlZmF1bHRNaWRkbGV3YXJlLnRzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL0ByZWR1eGpzL3Rvb2xraXQvc3JjL2NyZWF0ZUFjdGlvbi50cyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL25vZGVfbW9kdWxlcy9AcmVkdXhqcy90b29sa2l0L3NyYy9saXN0ZW5lck1pZGRsZXdhcmUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vZGVtby1hcHAvLi9ub2RlX21vZHVsZXMvQHJlZHV4anMvdG9vbGtpdC9zcmMvbGlzdGVuZXJNaWRkbGV3YXJlL3V0aWxzLnRzIiwid2VicGFjazovL2RlbW8tYXBwLy4vbm9kZV9tb2R1bGVzL0ByZWR1eGpzL3Rvb2xraXQvc3JjL2luZGV4LnRzIiwid2VicGFjazovL2RlbW8tYXBwLy4vc3JjL3N0b3JlLnRzeCIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL25vZGVfbW9kdWxlcy9AcmVkdXhqcy90b29sa2l0L3NyYy9jb25maWd1cmVTdG9yZS50cyIsIndlYnBhY2s6Ly9kZW1vLWFwcC8uL3NyYy9pbmRleC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1xuU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6NjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcseD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik6NjAxMTgseT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTo2MDExOTtcbmZ1bmN0aW9uIHooYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIHQ6Y2FzZSByOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiBBKGEpe3JldHVybiB6KGEpPT09bX1leHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7XG5leHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIEEoYSl8fHooYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9QTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09dH07XG5leHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXJ9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWZ9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXB9O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxhPT09cXx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXd8fGEuJCR0eXBlb2Y9PT14fHxhLiQkdHlwZW9mPT09eXx8YS4kJHR5cGVvZj09PXYpfTtleHBvcnRzLnR5cGVPZj16O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxiYT1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHAoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9dmFyIGRhPW5ldyBTZXQsZWE9e307ZnVuY3Rpb24gZmEoYSxiKXtoYShhLGIpO2hhKGErXCJDYXB0dXJlXCIsYil9XG5mdW5jdGlvbiBoYShhLGIpe2VhW2FdPWI7Zm9yKGE9MDthPGIubGVuZ3RoO2ErKylkYS5hZGQoYlthXSl9XG52YXIgaWE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLGphPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksa2E9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGxhPVxue30sbWE9e307ZnVuY3Rpb24gbmEoYSl7aWYoamEuY2FsbChtYSxhKSlyZXR1cm4hMDtpZihqYS5jYWxsKGxhLGEpKXJldHVybiExO2lmKGthLnRlc3QoYSkpcmV0dXJuIG1hW2FdPSEwO2xhW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIG9hKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gcGEoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8b2EoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiB0KGEsYixjLGQsZSxmLGcpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mO3RoaXMucmVtb3ZlRW1wdHlTdHJpbmc9Z312YXIgej17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdChhLDAsITEsYSxudWxsLCExLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTt6W2JdPW5ldyB0KGIsMSwhMSxhWzFdLG51bGwsITEsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdChhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdChhLDIsITEsYSxudWxsLCExLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGRpc2FibGVSZW1vdGVQbGF5YmFjayBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHQoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHQoYSwzLCEwLGEsbnVsbCwhMSwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHQoYSw0LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdChhLDYsITEsYSxudWxsLCExLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdChhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7dmFyIHFhPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gcmEoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocWEsXG5yYSk7eltiXT1uZXcgdChiLDEsITEsYSxudWxsLCExLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHFhLHJhKTt6W2JdPW5ldyB0KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHFhLHJhKTt6W2JdPW5ldyB0KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdChhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG56LnhsaW5rSHJlZj1uZXcgdChcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITAsITEpO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdChhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITAsITApfSk7XG5mdW5jdGlvbiBzYShhLGIsYyxkKXt2YXIgZT16Lmhhc093blByb3BlcnR5KGIpP3pbYl06bnVsbDtpZihudWxsIT09ZT8wIT09ZS50eXBlOmR8fCEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXSlwYShiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/bmEoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpfVxudmFyIHRhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELHVhPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLHZhPVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIiksd2E9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLHhhPVN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSx6YT1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksQWE9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLEJhPVN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLENhPVN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSxEYT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIiksRWE9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIiksRmE9U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIiksR2E9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik7U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5kZWJ1Z190cmFjZV9tb2RlXCIpO1xudmFyIEhhPVN5bWJvbC5mb3IoXCJyZWFjdC5vZmZzY3JlZW5cIik7U3ltYm9sLmZvcihcInJlYWN0LmxlZ2FjeV9oaWRkZW5cIik7U3ltYm9sLmZvcihcInJlYWN0LmNhY2hlXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC50cmFjaW5nX21hcmtlclwiKTt2YXIgSWE9U3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEphKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1JYSYmYVtJYV18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH12YXIgQT1PYmplY3QuYXNzaWduLEthO2Z1bmN0aW9uIExhKGEpe2lmKHZvaWQgMD09PUthKXRyeXt0aHJvdyBFcnJvcigpO31jYXRjaChjKXt2YXIgYj1jLnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO0thPWImJmJbMV18fFwiXCJ9cmV0dXJuXCJcXG5cIitLYSthfXZhciBNYT0hMTtcbmZ1bmN0aW9uIE5hKGEsYil7aWYoIWF8fE1hKXJldHVyblwiXCI7TWE9ITA7dmFyIGM9RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9dm9pZCAwO3RyeXtpZihiKWlmKGI9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicHJvcHNcIix7c2V0OmZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9fSksXCJvYmplY3RcIj09PXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmNvbnN0cnVjdCl7dHJ5e1JlZmxlY3QuY29uc3RydWN0KGIsW10pfWNhdGNoKGwpe3ZhciBkPWx9UmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSxiKX1lbHNle3RyeXtiLmNhbGwoKX1jYXRjaChsKXtkPWx9YS5jYWxsKGIucHJvdG90eXBlKX1lbHNle3RyeXt0aHJvdyBFcnJvcigpO31jYXRjaChsKXtkPWx9YSgpfX1jYXRjaChsKXtpZihsJiZkJiZcInN0cmluZ1wiPT09dHlwZW9mIGwuc3RhY2spe2Zvcih2YXIgZT1sLnN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuZj1kLnN0YWNrLnNwbGl0KFwiXFxuXCIpLGc9ZS5sZW5ndGgtMSxoPWYubGVuZ3RoLTE7MTw9ZyYmMDw9aCYmZVtnXSE9PWZbaF07KWgtLTtmb3IoOzE8PWcmJjA8PWg7Zy0tLGgtLSlpZihlW2ddIT09ZltoXSl7aWYoMSE9PWd8fDEhPT1oKXtkbyBpZihnLS0saC0tLDA+aHx8ZVtnXSE9PWZbaF0pe3ZhciBrPVwiXFxuXCIrZVtnXS5yZXBsYWNlKFwiIGF0IG5ldyBcIixcIiBhdCBcIik7YS5kaXNwbGF5TmFtZSYmay5pbmNsdWRlcyhcIjxhbm9ueW1vdXM+XCIpJiYoaz1rLnJlcGxhY2UoXCI8YW5vbnltb3VzPlwiLGEuZGlzcGxheU5hbWUpKTtyZXR1cm4ga313aGlsZSgxPD1nJiYwPD1oKX1icmVha319fWZpbmFsbHl7TWE9ITEsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9Y31yZXR1cm4oYT1hP2EuZGlzcGxheU5hbWV8fGEubmFtZTpcIlwiKT9MYShhKTpcIlwifVxuZnVuY3Rpb24gT2EoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIExhKGEudHlwZSk7Y2FzZSAxNjpyZXR1cm4gTGEoXCJMYXp5XCIpO2Nhc2UgMTM6cmV0dXJuIExhKFwiU3VzcGVuc2VcIik7Y2FzZSAxOTpyZXR1cm4gTGEoXCJTdXNwZW5zZUxpc3RcIik7Y2FzZSAwOmNhc2UgMjpjYXNlIDE1OnJldHVybiBhPU5hKGEudHlwZSwhMSksYTtjYXNlIDExOnJldHVybiBhPU5hKGEudHlwZS5yZW5kZXIsITEpLGE7Y2FzZSAxOnJldHVybiBhPU5hKGEudHlwZSwhMCksYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gUGEoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSB3YTpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSB2YTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgemE6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgeGE6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBEYTpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBFYTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBCYTpyZXR1cm4oYS5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSBBYTpyZXR1cm4oYS5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSBDYTp2YXIgYj1hLnJlbmRlcjthPWEuZGlzcGxheU5hbWU7YXx8KGE9Yi5kaXNwbGF5TmFtZXx8XG5iLm5hbWV8fFwiXCIsYT1cIlwiIT09YT9cIkZvcndhcmRSZWYoXCIrYStcIilcIjpcIkZvcndhcmRSZWZcIik7cmV0dXJuIGE7Y2FzZSBGYTpyZXR1cm4gYj1hLmRpc3BsYXlOYW1lfHxudWxsLG51bGwhPT1iP2I6UGEoYS50eXBlKXx8XCJNZW1vXCI7Y2FzZSBHYTpiPWEuX3BheWxvYWQ7YT1hLl9pbml0O3RyeXtyZXR1cm4gUGEoYShiKSl9Y2F0Y2goYyl7fX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFFhKGEpe3ZhciBiPWEudHlwZTtzd2l0Y2goYS50YWcpe2Nhc2UgMjQ6cmV0dXJuXCJDYWNoZVwiO2Nhc2UgOTpyZXR1cm4oYi5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSAxMDpyZXR1cm4oYi5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSAxODpyZXR1cm5cIkRlaHlkcmF0ZWRGcmFnbWVudFwiO2Nhc2UgMTE6cmV0dXJuIGE9Yi5yZW5kZXIsYT1hLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiXCIsYi5kaXNwbGF5TmFtZXx8KFwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtjYXNlIDc6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgNTpyZXR1cm4gYjtjYXNlIDQ6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIDM6cmV0dXJuXCJSb290XCI7Y2FzZSA2OnJldHVyblwiVGV4dFwiO2Nhc2UgMTY6cmV0dXJuIFBhKGIpO2Nhc2UgODpyZXR1cm4gYj09PXhhP1wiU3RyaWN0TW9kZVwiOlwiTW9kZVwiO2Nhc2UgMjI6cmV0dXJuXCJPZmZzY3JlZW5cIjtcbmNhc2UgMTI6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgMjE6cmV0dXJuXCJTY29wZVwiO2Nhc2UgMTM6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgMTk6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIjtjYXNlIDI1OnJldHVyblwiVHJhY2luZ01hcmtlclwiO2Nhc2UgMTpjYXNlIDA6Y2FzZSAxNzpjYXNlIDI6Y2FzZSAxNDpjYXNlIDE1OmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBiLmRpc3BsYXlOYW1lfHxiLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiKXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIFJhKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtjYXNlIFwib2JqZWN0XCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIFNhKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBUYShhKXt2YXIgYj1TYShhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVWEoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVRhKGEpKX1mdW5jdGlvbiBWYShhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9U2EoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBXYShhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19XG5mdW5jdGlvbiBYYShhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gQSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gWWEoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9UmEobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBaYShhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnNhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiAkYShhLGIpe1phKGEsYik7dmFyIGM9UmEoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/YmIoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmYmIoYSxiLnR5cGUsUmEoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBjYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gYmIoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxXYShhLm93bmVyRG9jdW1lbnQpIT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9dmFyIGRiPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBlYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrUmEoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGZiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcihwKDkxKSk7cmV0dXJuIEEoe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gZ2IoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IocCg5MikpO2lmKGRiKGMpKXtpZigxPGMubGVuZ3RoKXRocm93IEVycm9yKHAoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpSYShjKX19XG5mdW5jdGlvbiBoYihhLGIpe3ZhciBjPVJhKGIudmFsdWUpLGQ9UmEoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBpYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfWZ1bmN0aW9uIGpiKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19XG5mdW5jdGlvbiBrYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/amIoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgbGIsbWI9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiE9PWEubmFtZXNwYWNlVVJJfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7bGI9bGJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7bGIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9bGIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gbmIoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBvYj17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYXNwZWN0UmF0aW86ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLFxuem9vbTohMCxmaWxsT3BhY2l0eTohMCxmbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxwYj1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMob2IpLmZvckVhY2goZnVuY3Rpb24oYSl7cGIuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtvYltiXT1vYlthXX0pfSk7ZnVuY3Rpb24gcWIoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fG9iLmhhc093blByb3BlcnR5KGEpJiZvYlthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiByYihhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1xYihjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBzYj1BKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gdGIoYSxiKXtpZihiKXtpZihzYlthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHAoMTM3LGEpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHAoNjApKTtpZihcIm9iamVjdFwiIT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8fCEoXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHAoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHAoNjIpKTt9fVxuZnVuY3Rpb24gdWIoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciB2Yj1udWxsO2Z1bmN0aW9uIHdiKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX12YXIgeGI9bnVsbCx5Yj1udWxsLHpiPW51bGw7XG5mdW5jdGlvbiBBYihhKXtpZihhPUJiKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgeGIpdGhyb3cgRXJyb3IocCgyODApKTt2YXIgYj1hLnN0YXRlTm9kZTtiJiYoYj1DYihiKSx4YihhLnN0YXRlTm9kZSxhLnR5cGUsYikpfX1mdW5jdGlvbiBEYihhKXt5Yj96Yj96Yi5wdXNoKGEpOnpiPVthXTp5Yj1hfWZ1bmN0aW9uIEViKCl7aWYoeWIpe3ZhciBhPXliLGI9emI7emI9eWI9bnVsbDtBYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspQWIoYlthXSl9fWZ1bmN0aW9uIEZiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gR2IoKXt9dmFyIEhiPSExO2Z1bmN0aW9uIEliKGEsYixjKXtpZihIYilyZXR1cm4gYShiLGMpO0hiPSEwO3RyeXtyZXR1cm4gRmIoYSxiLGMpfWZpbmFsbHl7aWYoSGI9ITEsbnVsbCE9PXlifHxudWxsIT09emIpR2IoKSxFYigpfX1cbmZ1bmN0aW9uIEpiKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7dmFyIGQ9Q2IoYyk7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGMpdGhyb3cgRXJyb3IocCgyMzEsYix0eXBlb2YgYykpO3JldHVybiBjfXZhciBLYj0hMTtpZihpYSl0cnl7dmFyIExiPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShMYixcInBhc3NpdmVcIix7Z2V0OmZ1bmN0aW9uKCl7S2I9ITB9fSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsTGIsTGIpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFwiLExiLExiKX1jYXRjaChhKXtLYj0hMX1mdW5jdGlvbiBNYihhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobil7dGhpcy5vbkVycm9yKG4pfX12YXIgTmI9ITEsT2I9bnVsbCxQYj0hMSxRYj1udWxsLFJiPXtvbkVycm9yOmZ1bmN0aW9uKGEpe05iPSEwO09iPWF9fTtmdW5jdGlvbiBTYihhLGIsYyxkLGUsZixnLGgsayl7TmI9ITE7T2I9bnVsbDtNYi5hcHBseShSYixhcmd1bWVudHMpfVxuZnVuY3Rpb24gVGIoYSxiLGMsZCxlLGYsZyxoLGspe1NiLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihOYil7aWYoTmIpe3ZhciBsPU9iO05iPSExO09iPW51bGx9ZWxzZSB0aHJvdyBFcnJvcihwKDE5OCkpO1BifHwoUGI9ITAsUWI9bCl9fWZ1bmN0aW9uIFViKGEpe3ZhciBiPWEsYz1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXthPWI7ZG8gYj1hLDAhPT0oYi5mbGFncyY0MDk4KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gVmIoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBXYihhKXtpZihVYihhKSE9PWEpdGhyb3cgRXJyb3IocCgxODgpKTt9XG5mdW5jdGlvbiBYYihhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1VYihhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcihwKDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBXYihlKSxhO2lmKGY9PT1kKXJldHVybiBXYihlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHAoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IocCgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcihwKDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IocCgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIFliKGEpe2E9WGIoYSk7cmV0dXJuIG51bGwhPT1hP1piKGEpOm51bGx9ZnVuY3Rpb24gWmIoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGE7Zm9yKGE9YS5jaGlsZDtudWxsIT09YTspe3ZhciBiPVpiKGEpO2lmKG51bGwhPT1iKXJldHVybiBiO2E9YS5zaWJsaW5nfXJldHVybiBudWxsfVxudmFyICRiPWJhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssYWM9YmEudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssYmM9YmEudW5zdGFibGVfc2hvdWxkWWllbGQsY2M9YmEudW5zdGFibGVfcmVxdWVzdFBhaW50LEI9YmEudW5zdGFibGVfbm93LGRjPWJhLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLGVjPWJhLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LGZjPWJhLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGdjPWJhLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LGhjPWJhLnVuc3RhYmxlX0xvd1ByaW9yaXR5LGljPWJhLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxqYz1udWxsLGtjPW51bGw7ZnVuY3Rpb24gbGMoYSl7aWYoa2MmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrYy5vbkNvbW1pdEZpYmVyUm9vdCl0cnl7a2Mub25Db21taXRGaWJlclJvb3QoamMsYSx2b2lkIDAsMTI4PT09KGEuY3VycmVudC5mbGFncyYxMjgpKX1jYXRjaChiKXt9fVxudmFyIG5jPU1hdGguY2x6MzI/TWF0aC5jbHozMjptYyxvYz1NYXRoLmxvZyxwYz1NYXRoLkxOMjtmdW5jdGlvbiBtYyhhKXthPj4+PTA7cmV0dXJuIDA9PT1hPzMyOjMxLShvYyhhKS9wY3wwKXwwfXZhciBxYz02NCxyYz00MTk0MzA0O1xuZnVuY3Rpb24gc2MoYSl7c3dpdGNoKGEmLWEpe2Nhc2UgMTpyZXR1cm4gMTtjYXNlIDI6cmV0dXJuIDI7Y2FzZSA0OnJldHVybiA0O2Nhc2UgODpyZXR1cm4gODtjYXNlIDE2OnJldHVybiAxNjtjYXNlIDMyOnJldHVybiAzMjtjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOnJldHVybiBhJjQxOTQyNDA7Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDpyZXR1cm4gYSYxMzAwMjM0MjQ7Y2FzZSAxMzQyMTc3Mjg6cmV0dXJuIDEzNDIxNzcyODtjYXNlIDI2ODQzNTQ1NjpyZXR1cm4gMjY4NDM1NDU2O2Nhc2UgNTM2ODcwOTEyOnJldHVybiA1MzY4NzA5MTI7Y2FzZSAxMDczNzQxODI0OnJldHVybiAxMDczNzQxODI0O1xuZGVmYXVsdDpyZXR1cm4gYX19ZnVuY3Rpb24gdGMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcztpZigwPT09YylyZXR1cm4gMDt2YXIgZD0wLGU9YS5zdXNwZW5kZWRMYW5lcyxmPWEucGluZ2VkTGFuZXMsZz1jJjI2ODQzNTQ1NTtpZigwIT09Zyl7dmFyIGg9ZyZ+ZTswIT09aD9kPXNjKGgpOihmJj1nLDAhPT1mJiYoZD1zYyhmKSkpfWVsc2UgZz1jJn5lLDAhPT1nP2Q9c2MoZyk6MCE9PWYmJihkPXNjKGYpKTtpZigwPT09ZClyZXR1cm4gMDtpZigwIT09YiYmYiE9PWQmJjA9PT0oYiZlKSYmKGU9ZCYtZCxmPWImLWIsZT49Znx8MTY9PT1lJiYwIT09KGYmNDE5NDI0MCkpKXJldHVybiBiOzAhPT0oZCY0KSYmKGR8PWMmMTYpO2I9YS5lbnRhbmdsZWRMYW5lcztpZigwIT09Yilmb3IoYT1hLmVudGFuZ2xlbWVudHMsYiY9ZDswPGI7KWM9MzEtbmMoYiksZT0xPDxjLGR8PWFbY10sYiY9fmU7cmV0dXJuIGR9XG5mdW5jdGlvbiB1YyhhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgNDpyZXR1cm4gYisyNTA7Y2FzZSA4OmNhc2UgMTY6Y2FzZSAzMjpjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOnJldHVybiBiKzVFMztjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OnJldHVybi0xO2Nhc2UgMTM0MjE3NzI4OmNhc2UgMjY4NDM1NDU2OmNhc2UgNTM2ODcwOTEyOmNhc2UgMTA3Mzc0MTgyNDpyZXR1cm4tMTtkZWZhdWx0OnJldHVybi0xfX1cbmZ1bmN0aW9uIHZjKGEsYil7Zm9yKHZhciBjPWEuc3VzcGVuZGVkTGFuZXMsZD1hLnBpbmdlZExhbmVzLGU9YS5leHBpcmF0aW9uVGltZXMsZj1hLnBlbmRpbmdMYW5lczswPGY7KXt2YXIgZz0zMS1uYyhmKSxoPTE8PGcsaz1lW2ddO2lmKC0xPT09ayl7aWYoMD09PShoJmMpfHwwIT09KGgmZCkpZVtnXT11YyhoLGIpfWVsc2Ugazw9YiYmKGEuZXhwaXJlZExhbmVzfD1oKTtmJj1+aH19ZnVuY3Rpb24gd2MoYSl7YT1hLnBlbmRpbmdMYW5lcyYtMTA3Mzc0MTgyNTtyZXR1cm4gMCE9PWE/YTphJjEwNzM3NDE4MjQ/MTA3Mzc0MTgyNDowfWZ1bmN0aW9uIHhjKCl7dmFyIGE9cWM7cWM8PD0xOzA9PT0ocWMmNDE5NDI0MCkmJihxYz02NCk7cmV0dXJuIGF9ZnVuY3Rpb24geWMoYSl7Zm9yKHZhciBiPVtdLGM9MDszMT5jO2MrKyliLnB1c2goYSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiB6YyhhLGIsYyl7YS5wZW5kaW5nTGFuZXN8PWI7NTM2ODcwOTEyIT09YiYmKGEuc3VzcGVuZGVkTGFuZXM9MCxhLnBpbmdlZExhbmVzPTApO2E9YS5ldmVudFRpbWVzO2I9MzEtbmMoYik7YVtiXT1jfWZ1bmN0aW9uIEFjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXMmfmI7YS5wZW5kaW5nTGFuZXM9YjthLnN1c3BlbmRlZExhbmVzPTA7YS5waW5nZWRMYW5lcz0wO2EuZXhwaXJlZExhbmVzJj1iO2EubXV0YWJsZVJlYWRMYW5lcyY9YjthLmVudGFuZ2xlZExhbmVzJj1iO2I9YS5lbnRhbmdsZW1lbnRzO3ZhciBkPWEuZXZlbnRUaW1lcztmb3IoYT1hLmV4cGlyYXRpb25UaW1lczswPGM7KXt2YXIgZT0zMS1uYyhjKSxmPTE8PGU7YltlXT0wO2RbZV09LTE7YVtlXT0tMTtjJj1+Zn19XG5mdW5jdGlvbiBCYyhhLGIpe3ZhciBjPWEuZW50YW5nbGVkTGFuZXN8PWI7Zm9yKGE9YS5lbnRhbmdsZW1lbnRzO2M7KXt2YXIgZD0zMS1uYyhjKSxlPTE8PGQ7ZSZifGFbZF0mYiYmKGFbZF18PWIpO2MmPX5lfX12YXIgQz0wO2Z1bmN0aW9uIENjKGEpe2EmPS1hO3JldHVybiAxPGE/NDxhPzAhPT0oYSYyNjg0MzU0NTUpPzE2OjUzNjg3MDkxMjo0OjF9dmFyIERjLEVjLEZjLEdjLEhjLEljPSExLEpjPVtdLEtjPW51bGwsTGM9bnVsbCxNYz1udWxsLE5jPW5ldyBNYXAsT2M9bmV3IE1hcCxQYz1bXSxRYz1cIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBSYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOktjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpMYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjpNYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6TmMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6T2MuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiBTYyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPXtibG9ja2VkT246Yixkb21FdmVudE5hbWU6YyxldmVudFN5c3RlbUZsYWdzOmQsbmF0aXZlRXZlbnQ6Zix0YXJnZXRDb250YWluZXJzOltlXX0sbnVsbCE9PWImJihiPUJiKGIpLG51bGwhPT1iJiZFYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7Yj1hLnRhcmdldENvbnRhaW5lcnM7bnVsbCE9PWUmJi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBUYyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNpblwiOnJldHVybiBLYz1TYyhLYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gTGM9U2MoTGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIE1jPVNjKE1jLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7TmMuc2V0KGYsU2MoTmMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLE9jLnNldChmLFNjKE9jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIFVjKGEpe3ZhciBiPVZjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9VWIoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9VmIoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7SGMoYS5wcmlvcml0eSxmdW5jdGlvbigpe0ZjKGMpfSk7cmV0dXJufX1lbHNlIGlmKDM9PT1iJiZjLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXthLmJsb2NrZWRPbj0zPT09Yy50YWc/Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO3JldHVybn19YS5ibG9ja2VkT249bnVsbH1cbmZ1bmN0aW9uIFdjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTtmb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz1YYyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsPT09Yyl7Yz1hLm5hdGl2ZUV2ZW50O3ZhciBkPW5ldyBjLmNvbnN0cnVjdG9yKGMudHlwZSxjKTt2Yj1kO2MudGFyZ2V0LmRpc3BhdGNoRXZlbnQoZCk7dmI9bnVsbH1lbHNlIHJldHVybiBiPUJiKGMpLG51bGwhPT1iJiZFYyhiKSxhLmJsb2NrZWRPbj1jLCExO2Iuc2hpZnQoKX1yZXR1cm4hMH1mdW5jdGlvbiBZYyhhLGIsYyl7V2MoYSkmJmMuZGVsZXRlKGIpfWZ1bmN0aW9uIFpjKCl7SWM9ITE7bnVsbCE9PUtjJiZXYyhLYykmJihLYz1udWxsKTtudWxsIT09TGMmJldjKExjKSYmKExjPW51bGwpO251bGwhPT1NYyYmV2MoTWMpJiYoTWM9bnVsbCk7TmMuZm9yRWFjaChZYyk7T2MuZm9yRWFjaChZYyl9XG5mdW5jdGlvbiAkYyhhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsSWN8fChJYz0hMCxiYS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKGJhLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFpjKSkpfVxuZnVuY3Rpb24gYWQoYSl7ZnVuY3Rpb24gYihiKXtyZXR1cm4gJGMoYixhKX1pZigwPEpjLmxlbmd0aCl7JGMoSmNbMF0sYSk7Zm9yKHZhciBjPTE7YzxKYy5sZW5ndGg7YysrKXt2YXIgZD1KY1tjXTtkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKX19bnVsbCE9PUtjJiYkYyhLYyxhKTtudWxsIT09TGMmJiRjKExjLGEpO251bGwhPT1NYyYmJGMoTWMsYSk7TmMuZm9yRWFjaChiKTtPYy5mb3JFYWNoKGIpO2ZvcihjPTA7YzxQYy5sZW5ndGg7YysrKWQ9UGNbY10sZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCk7Zm9yKDswPFBjLmxlbmd0aCYmKGM9UGNbMF0sbnVsbD09PWMuYmxvY2tlZE9uKTspVWMoYyksbnVsbD09PWMuYmxvY2tlZE9uJiZQYy5zaGlmdCgpfXZhciBiZD10YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxjZD0hMDtcbmZ1bmN0aW9uIGRkKGEsYixjLGQpe3ZhciBlPUMsZj1iZC50cmFuc2l0aW9uO2JkLnRyYW5zaXRpb249bnVsbDt0cnl7Qz0xLGVkKGEsYixjLGQpfWZpbmFsbHl7Qz1lLGJkLnRyYW5zaXRpb249Zn19ZnVuY3Rpb24gZmQoYSxiLGMsZCl7dmFyIGU9QyxmPWJkLnRyYW5zaXRpb247YmQudHJhbnNpdGlvbj1udWxsO3RyeXtDPTQsZWQoYSxiLGMsZCl9ZmluYWxseXtDPWUsYmQudHJhbnNpdGlvbj1mfX1cbmZ1bmN0aW9uIGVkKGEsYixjLGQpe2lmKGNkKXt2YXIgZT1YYyhhLGIsYyxkKTtpZihudWxsPT09ZSlnZChhLGIsZCxoZCxjKSxSYyhhLGQpO2Vsc2UgaWYoVGMoZSxhLGIsYyxkKSlkLnN0b3BQcm9wYWdhdGlvbigpO2Vsc2UgaWYoUmMoYSxkKSxiJjQmJi0xPFFjLmluZGV4T2YoYSkpe2Zvcig7bnVsbCE9PWU7KXt2YXIgZj1CYihlKTtudWxsIT09ZiYmRGMoZik7Zj1YYyhhLGIsYyxkKTtudWxsPT09ZiYmZ2QoYSxiLGQsaGQsYyk7aWYoZj09PWUpYnJlYWs7ZT1mfW51bGwhPT1lJiZkLnN0b3BQcm9wYWdhdGlvbigpfWVsc2UgZ2QoYSxiLGQsbnVsbCxjKX19dmFyIGhkPW51bGw7XG5mdW5jdGlvbiBYYyhhLGIsYyxkKXtoZD1udWxsO2E9d2IoZCk7YT1WYyhhKTtpZihudWxsIT09YSlpZihiPVViKGEpLG51bGw9PT1iKWE9bnVsbDtlbHNlIGlmKGM9Yi50YWcsMTM9PT1jKXthPVZiKGIpO2lmKG51bGwhPT1hKXJldHVybiBhO2E9bnVsbH1lbHNlIGlmKDM9PT1jKXtpZihiLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXJldHVybiAzPT09Yi50YWc/Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2E9bnVsbH1lbHNlIGIhPT1hJiYoYT1udWxsKTtoZD1hO3JldHVybiBudWxsfVxuZnVuY3Rpb24gaWQoYSl7c3dpdGNoKGEpe2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xpY2tcIjpjYXNlIFwiY2xvc2VcIjpjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmNhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcImludmFsaWRcIjpjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJrZXl1cFwiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJwYXN0ZVwiOmNhc2UgXCJwYXVzZVwiOmNhc2UgXCJwbGF5XCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcnVwXCI6Y2FzZSBcInJhdGVjaGFuZ2VcIjpjYXNlIFwicmVzZXRcIjpjYXNlIFwicmVzaXplXCI6Y2FzZSBcInNlZWtlZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2hzdGFydFwiOmNhc2UgXCJ2b2x1bWVjaGFuZ2VcIjpjYXNlIFwiY2hhbmdlXCI6Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmNhc2UgXCJ0ZXh0SW5wdXRcIjpjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOmNhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmNhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOmNhc2UgXCJiZWZvcmVpbnB1dFwiOmNhc2UgXCJibHVyXCI6Y2FzZSBcImZ1bGxzY3JlZW5jaGFuZ2VcIjpjYXNlIFwiZm9jdXNcIjpjYXNlIFwiaGFzaGNoYW5nZVwiOmNhc2UgXCJwb3BzdGF0ZVwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwic2VsZWN0c3RhcnRcIjpyZXR1cm4gMTtjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJzY3JvbGxcIjpjYXNlIFwidG9nZ2xlXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ3aGVlbFwiOmNhc2UgXCJtb3VzZWVudGVyXCI6Y2FzZSBcIm1vdXNlbGVhdmVcIjpjYXNlIFwicG9pbnRlcmVudGVyXCI6Y2FzZSBcInBvaW50ZXJsZWF2ZVwiOnJldHVybiA0O1xuY2FzZSBcIm1lc3NhZ2VcIjpzd2l0Y2goZGMoKSl7Y2FzZSBlYzpyZXR1cm4gMTtjYXNlIGZjOnJldHVybiA0O2Nhc2UgZ2M6Y2FzZSBoYzpyZXR1cm4gMTY7Y2FzZSBpYzpyZXR1cm4gNTM2ODcwOTEyO2RlZmF1bHQ6cmV0dXJuIDE2fWRlZmF1bHQ6cmV0dXJuIDE2fX12YXIgamQ9bnVsbCxrZD1udWxsLGxkPW51bGw7ZnVuY3Rpb24gbWQoKXtpZihsZClyZXR1cm4gbGQ7dmFyIGEsYj1rZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBqZD9qZC52YWx1ZTpqZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBsZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfVxuZnVuY3Rpb24gbmQoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9ZnVuY3Rpb24gb2QoKXtyZXR1cm4hMH1mdW5jdGlvbiBwZCgpe3JldHVybiExfVxuZnVuY3Rpb24gcWQoYSl7ZnVuY3Rpb24gYihiLGQsZSxmLGcpe3RoaXMuX3JlYWN0TmFtZT1iO3RoaXMuX3RhcmdldEluc3Q9ZTt0aGlzLnR5cGU9ZDt0aGlzLm5hdGl2ZUV2ZW50PWY7dGhpcy50YXJnZXQ9Zzt0aGlzLmN1cnJlbnRUYXJnZXQ9bnVsbDtmb3IodmFyIGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYj1hW2NdLHRoaXNbY109Yj9iKGYpOmZbY10pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1mLmRlZmF1bHRQcmV2ZW50ZWQ/Zi5kZWZhdWx0UHJldmVudGVkOiExPT09Zi5yZXR1cm5WYWx1ZSk/b2Q6cGQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1wZDtyZXR1cm4gdGhpc31BKGIucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiZcbihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1vZCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1vZCl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt9LGlzUGVyc2lzdGVudDpvZH0pO3JldHVybiBifVxudmFyIHJkPXtldmVudFBoYXNlOjAsYnViYmxlczowLGNhbmNlbGFibGU6MCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOjAsaXNUcnVzdGVkOjB9LHNkPXFkKHJkKSx0ZD1BKHt9LHJkLHt2aWV3OjAsZGV0YWlsOjB9KSx1ZD1xZCh0ZCksdmQsd2QseGQsemQ9QSh7fSx0ZCx7c2NyZWVuWDowLHNjcmVlblk6MCxjbGllbnRYOjAsY2xpZW50WTowLHBhZ2VYOjAscGFnZVk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp5ZCxidXR0b246MCxidXR0b25zOjAscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YS5yZWxhdGVkVGFyZ2V0P2EuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudDphLnJlbGF0ZWRUYXJnZXR9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW5cbmEpcmV0dXJuIGEubW92ZW1lbnRYO2EhPT14ZCYmKHhkJiZcIm1vdXNlbW92ZVwiPT09YS50eXBlPyh2ZD1hLnNjcmVlblgteGQuc2NyZWVuWCx3ZD1hLnNjcmVlblkteGQuc2NyZWVuWSk6d2Q9dmQ9MCx4ZD1hKTtyZXR1cm4gdmR9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtyZXR1cm5cIm1vdmVtZW50WVwiaW4gYT9hLm1vdmVtZW50WTp3ZH19KSxBZD1xZCh6ZCksQmQ9QSh7fSx6ZCx7ZGF0YVRyYW5zZmVyOjB9KSxDZD1xZChCZCksRGQ9QSh7fSx0ZCx7cmVsYXRlZFRhcmdldDowfSksRWQ9cWQoRGQpLEZkPUEoe30scmQse2FuaW1hdGlvbk5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLEdkPXFkKEZkKSxIZD1BKHt9LHJkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksSWQ9cWQoSGQpLEpkPUEoe30scmQse2RhdGE6MH0pLEtkPXFkKEpkKSxMZD17RXNjOlwiRXNjYXBlXCIsXG5TcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxNZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIiwxMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIixcbjExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sTmQ9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIE9kKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9TmRbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB5ZCgpe3JldHVybiBPZH1cbnZhciBQZD1BKHt9LHRkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPUxkW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW5kKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9NZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGNvZGU6MCxsb2NhdGlvbjowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxyZXBlYXQ6MCxsb2NhbGU6MCxnZXRNb2RpZmllclN0YXRlOnlkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9uZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP25kKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksUWQ9cWQoUGQpLFJkPUEoe30semQse3BvaW50ZXJJZDowLHdpZHRoOjAsaGVpZ2h0OjAscHJlc3N1cmU6MCx0YW5nZW50aWFsUHJlc3N1cmU6MCx0aWx0WDowLHRpbHRZOjAsdHdpc3Q6MCxwb2ludGVyVHlwZTowLGlzUHJpbWFyeTowfSksU2Q9cWQoUmQpLFRkPUEoe30sdGQse3RvdWNoZXM6MCx0YXJnZXRUb3VjaGVzOjAsY2hhbmdlZFRvdWNoZXM6MCxhbHRLZXk6MCxtZXRhS2V5OjAsY3RybEtleTowLHNoaWZ0S2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp5ZH0pLFVkPXFkKFRkKSxWZD1BKHt9LHJkLHtwcm9wZXJ0eU5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLFdkPXFkKFZkKSxYZD1BKHt9LHpkLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxcbmRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjowLGRlbHRhTW9kZTowfSksWWQ9cWQoWGQpLFpkPVs5LDEzLDI3LDMyXSwkZD1pYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csYWU9bnVsbDtpYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoYWU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgYmU9aWEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFhZSxjZT1pYSYmKCEkZHx8YWUmJjg8YWUmJjExPj1hZSksZGU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksZWU9ITE7XG5mdW5jdGlvbiBmZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PVpkLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJmb2N1c291dFwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGdlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGhlPSExO2Z1bmN0aW9uIGllKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBnZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7ZWU9ITA7cmV0dXJuIGRlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PWRlJiZlZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBqZShhLGIpe2lmKGhlKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCEkZCYmZmUoYSxiKT8oYT1tZCgpLGxkPWtkPWpkPW51bGwsaGU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGNlJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBrZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBsZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWtlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBtZShhLGIsYyxkKXtEYihkKTtiPW5lKGIsXCJvbkNoYW5nZVwiKTswPGIubGVuZ3RoJiYoYz1uZXcgc2QoXCJvbkNoYW5nZVwiLFwiY2hhbmdlXCIsbnVsbCxjLGQpLGEucHVzaCh7ZXZlbnQ6YyxsaXN0ZW5lcnM6Yn0pKX12YXIgb2U9bnVsbCxwZT1udWxsO2Z1bmN0aW9uIHFlKGEpe3JlKGEsMCl9ZnVuY3Rpb24gc2UoYSl7dmFyIGI9dGUoYSk7aWYoVmEoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiB1ZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciB2ZT0hMTtpZihpYSl7dmFyIHdlO2lmKGlhKXt2YXIgeGU9XCJvbmlucHV0XCJpbiBkb2N1bWVudDtpZigheGUpe3ZhciB5ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3llLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIixcInJldHVybjtcIik7eGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHllLm9uaW5wdXR9d2U9eGV9ZWxzZSB3ZT0hMTt2ZT13ZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKX1mdW5jdGlvbiB6ZSgpe29lJiYob2UuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQWUpLHBlPW9lPW51bGwpfWZ1bmN0aW9uIEFlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZzZShwZSkpe3ZhciBiPVtdO21lKGIscGUsYSx3YihhKSk7SWIocWUsYil9fVxuZnVuY3Rpb24gQmUoYSxiLGMpe1wiZm9jdXNpblwiPT09YT8oemUoKSxvZT1iLHBlPWMsb2UuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQWUpKTpcImZvY3Vzb3V0XCI9PT1hJiZ6ZSgpfWZ1bmN0aW9uIENlKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIHNlKHBlKX1mdW5jdGlvbiBEZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIHNlKGIpfWZ1bmN0aW9uIEVlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIHNlKGIpfWZ1bmN0aW9uIEZlKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgR2U9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6RmU7XG5mdW5jdGlvbiBIZShhLGIpe2lmKEdlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXTtpZighamEuY2FsbChiLGUpfHwhR2UoYVtlXSxiW2VdKSlyZXR1cm4hMX1yZXR1cm4hMH1mdW5jdGlvbiBJZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBKZShhLGIpe3ZhciBjPUllKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPUllKGMpfX1mdW5jdGlvbiBLZShhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP0tlKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIExlKCl7Zm9yKHZhciBhPXdpbmRvdyxiPVdhKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPVdhKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIE1lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG5mdW5jdGlvbiBOZShhKXt2YXIgYj1MZSgpLGM9YS5mb2N1c2VkRWxlbSxkPWEuc2VsZWN0aW9uUmFuZ2U7aWYoYiE9PWMmJmMmJmMub3duZXJEb2N1bWVudCYmS2UoYy5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxjKSl7aWYobnVsbCE9PWQmJk1lKGMpKWlmKGI9ZC5zdGFydCxhPWQuZW5kLHZvaWQgMD09PWEmJihhPWIpLFwic2VsZWN0aW9uU3RhcnRcImluIGMpYy5zZWxlY3Rpb25TdGFydD1iLGMuc2VsZWN0aW9uRW5kPU1hdGgubWluKGEsYy52YWx1ZS5sZW5ndGgpO2Vsc2UgaWYoYT0oYj1jLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmYi5kZWZhdWx0Vmlld3x8d2luZG93LGEuZ2V0U2VsZWN0aW9uKXthPWEuZ2V0U2VsZWN0aW9uKCk7dmFyIGU9Yy50ZXh0Q29udGVudC5sZW5ndGgsZj1NYXRoLm1pbihkLnN0YXJ0LGUpO2Q9dm9pZCAwPT09ZC5lbmQ/ZjpNYXRoLm1pbihkLmVuZCxlKTshYS5leHRlbmQmJmY+ZCYmKGU9ZCxkPWYsZj1lKTtlPUplKGMsZik7dmFyIGc9SmUoYyxcbmQpO2UmJmcmJigxIT09YS5yYW5nZUNvdW50fHxhLmFuY2hvck5vZGUhPT1lLm5vZGV8fGEuYW5jaG9yT2Zmc2V0IT09ZS5vZmZzZXR8fGEuZm9jdXNOb2RlIT09Zy5ub2RlfHxhLmZvY3VzT2Zmc2V0IT09Zy5vZmZzZXQpJiYoYj1iLmNyZWF0ZVJhbmdlKCksYi5zZXRTdGFydChlLm5vZGUsZS5vZmZzZXQpLGEucmVtb3ZlQWxsUmFuZ2VzKCksZj5kPyhhLmFkZFJhbmdlKGIpLGEuZXh0ZW5kKGcubm9kZSxnLm9mZnNldCkpOihiLnNldEVuZChnLm5vZGUsZy5vZmZzZXQpLGEuYWRkUmFuZ2UoYikpKX1iPVtdO2ZvcihhPWM7YT1hLnBhcmVudE5vZGU7KTE9PT1hLm5vZGVUeXBlJiZiLnB1c2goe2VsZW1lbnQ6YSxsZWZ0OmEuc2Nyb2xsTGVmdCx0b3A6YS5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5mb2N1cyYmYy5mb2N1cygpO2ZvcihjPTA7YzxiLmxlbmd0aDtjKyspYT1iW2NdLGEuZWxlbWVudC5zY3JvbGxMZWZ0PWEubGVmdCxhLmVsZW1lbnQuc2Nyb2xsVG9wPWEudG9wfX1cbnZhciBPZT1pYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFBlPW51bGwsUWU9bnVsbCxSZT1udWxsLFNlPSExO1xuZnVuY3Rpb24gVGUoYSxiLGMpe3ZhciBkPWMud2luZG93PT09Yz9jLmRvY3VtZW50Ojk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O1NlfHxudWxsPT1QZXx8UGUhPT1XYShkKXx8KGQ9UGUsXCJzZWxlY3Rpb25TdGFydFwiaW4gZCYmTWUoZCk/ZD17c3RhcnQ6ZC5zZWxlY3Rpb25TdGFydCxlbmQ6ZC5zZWxlY3Rpb25FbmR9OihkPShkLm93bmVyRG9jdW1lbnQmJmQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxkPXthbmNob3JOb2RlOmQuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6ZC5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmQuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmQuZm9jdXNPZmZzZXR9KSxSZSYmSGUoUmUsZCl8fChSZT1kLGQ9bmUoUWUsXCJvblNlbGVjdFwiKSwwPGQubGVuZ3RoJiYoYj1uZXcgc2QoXCJvblNlbGVjdFwiLFwic2VsZWN0XCIsbnVsbCxiLGMpLGEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6ZH0pLGIudGFyZ2V0PVBlKSkpfVxuZnVuY3Rpb24gVWUoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgVmU9e2FuaW1hdGlvbmVuZDpVZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpVZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlVlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlVlKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sV2U9e30sWGU9e307XG5pYSYmKFhlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFZlLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFZlLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFZlLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFZlLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gWWUoYSl7aWYoV2VbYV0pcmV0dXJuIFdlW2FdO2lmKCFWZVthXSlyZXR1cm4gYTt2YXIgYj1WZVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBYZSlyZXR1cm4gV2VbYV09YltjXTtyZXR1cm4gYX12YXIgWmU9WWUoXCJhbmltYXRpb25lbmRcIiksJGU9WWUoXCJhbmltYXRpb25pdGVyYXRpb25cIiksYWY9WWUoXCJhbmltYXRpb25zdGFydFwiKSxiZj1ZZShcInRyYW5zaXRpb25lbmRcIiksY2Y9bmV3IE1hcCxkZj1cImFib3J0IGF1eENsaWNrIGNhbmNlbCBjYW5QbGF5IGNhblBsYXlUaHJvdWdoIGNsaWNrIGNsb3NlIGNvbnRleHRNZW51IGNvcHkgY3V0IGRyYWcgZHJhZ0VuZCBkcmFnRW50ZXIgZHJhZ0V4aXQgZHJhZ0xlYXZlIGRyYWdPdmVyIGRyYWdTdGFydCBkcm9wIGR1cmF0aW9uQ2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGdvdFBvaW50ZXJDYXB0dXJlIGlucHV0IGludmFsaWQga2V5RG93biBrZXlQcmVzcyBrZXlVcCBsb2FkIGxvYWRlZERhdGEgbG9hZGVkTWV0YWRhdGEgbG9hZFN0YXJ0IGxvc3RQb2ludGVyQ2FwdHVyZSBtb3VzZURvd24gbW91c2VNb3ZlIG1vdXNlT3V0IG1vdXNlT3ZlciBtb3VzZVVwIHBhc3RlIHBhdXNlIHBsYXkgcGxheWluZyBwb2ludGVyQ2FuY2VsIHBvaW50ZXJEb3duIHBvaW50ZXJNb3ZlIHBvaW50ZXJPdXQgcG9pbnRlck92ZXIgcG9pbnRlclVwIHByb2dyZXNzIHJhdGVDaGFuZ2UgcmVzZXQgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VibWl0IHN1c3BlbmQgdGltZVVwZGF0ZSB0b3VjaENhbmNlbCB0b3VjaEVuZCB0b3VjaFN0YXJ0IHZvbHVtZUNoYW5nZSBzY3JvbGwgdG9nZ2xlIHRvdWNoTW92ZSB3YWl0aW5nIHdoZWVsXCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gZWYoYSxiKXtjZi5zZXQoYSxiKTtmYShiLFthXSl9Zm9yKHZhciBmZj0wO2ZmPGRmLmxlbmd0aDtmZisrKXt2YXIgZ2Y9ZGZbZmZdLGhmPWdmLnRvTG93ZXJDYXNlKCksamY9Z2ZbMF0udG9VcHBlckNhc2UoKStnZi5zbGljZSgxKTtlZihoZixcIm9uXCIramYpfWVmKFplLFwib25BbmltYXRpb25FbmRcIik7ZWYoJGUsXCJvbkFuaW1hdGlvbkl0ZXJhdGlvblwiKTtlZihhZixcIm9uQW5pbWF0aW9uU3RhcnRcIik7ZWYoXCJkYmxjbGlja1wiLFwib25Eb3VibGVDbGlja1wiKTtlZihcImZvY3VzaW5cIixcIm9uRm9jdXNcIik7ZWYoXCJmb2N1c291dFwiLFwib25CbHVyXCIpO2VmKGJmLFwib25UcmFuc2l0aW9uRW5kXCIpO2hhKFwib25Nb3VzZUVudGVyXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7aGEoXCJvbk1vdXNlTGVhdmVcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtoYShcIm9uUG9pbnRlckVudGVyXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO1xuaGEoXCJvblBvaW50ZXJMZWF2ZVwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtmYShcIm9uQ2hhbmdlXCIsXCJjaGFuZ2UgY2xpY2sgZm9jdXNpbiBmb2N1c291dCBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvblNlbGVjdFwiLFwiZm9jdXNvdXQgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1c2luIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uQmVmb3JlSW5wdXRcIixbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl0pO2ZhKFwib25Db21wb3NpdGlvbkVuZFwiLFwiY29tcG9zaXRpb25lbmQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO2ZhKFwib25Db21wb3NpdGlvblN0YXJ0XCIsXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtcbmZhKFwib25Db21wb3NpdGlvblVwZGF0ZVwiLFwiY29tcG9zaXRpb251cGRhdGUgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO3ZhciBrZj1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2UgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLGxmPW5ldyBTZXQoXCJjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCB0b2dnbGVcIi5zcGxpdChcIiBcIikuY29uY2F0KGtmKSk7XG5mdW5jdGlvbiBtZihhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9YztUYihkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gcmUoYSxiKXtiPTAhPT0oYiY0KTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXSxlPWQuZXZlbnQ7ZD1kLmxpc3RlbmVyczthOnt2YXIgZj12b2lkIDA7aWYoYilmb3IodmFyIGc9ZC5sZW5ndGgtMTswPD1nO2ctLSl7dmFyIGg9ZFtnXSxrPWguaW5zdGFuY2UsbD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTttZihlLGgsbCk7Zj1rfWVsc2UgZm9yKGc9MDtnPGQubGVuZ3RoO2crKyl7aD1kW2ddO2s9aC5pbnN0YW5jZTtsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO21mKGUsaCxsKTtmPWt9fX1pZihQYil0aHJvdyBhPVFiLFBiPSExLFFiPW51bGwsYTt9XG5mdW5jdGlvbiBEKGEsYil7dmFyIGM9YltuZl07dm9pZCAwPT09YyYmKGM9YltuZl09bmV3IFNldCk7dmFyIGQ9YStcIl9fYnViYmxlXCI7Yy5oYXMoZCl8fChvZihiLGEsMiwhMSksYy5hZGQoZCkpfWZ1bmN0aW9uIHBmKGEsYixjKXt2YXIgZD0wO2ImJihkfD00KTtvZihjLGEsZCxiKX12YXIgcWY9XCJfcmVhY3RMaXN0ZW5pbmdcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtmdW5jdGlvbiByZihhKXtpZighYVtxZl0pe2FbcWZdPSEwO2RhLmZvckVhY2goZnVuY3Rpb24oYil7XCJzZWxlY3Rpb25jaGFuZ2VcIiE9PWImJihsZi5oYXMoYil8fHBmKGIsITEsYSkscGYoYiwhMCxhKSl9KTt2YXIgYj05PT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDtudWxsPT09Ynx8YltxZl18fChiW3FmXT0hMCxwZihcInNlbGVjdGlvbmNoYW5nZVwiLCExLGIpKX19XG5mdW5jdGlvbiBvZihhLGIsYyxkKXtzd2l0Y2goaWQoYikpe2Nhc2UgMTp2YXIgZT1kZDticmVhaztjYXNlIDQ6ZT1mZDticmVhaztkZWZhdWx0OmU9ZWR9Yz1lLmJpbmQobnVsbCxiLGMsYSk7ZT12b2lkIDA7IUtifHxcInRvdWNoc3RhcnRcIiE9PWImJlwidG91Y2htb3ZlXCIhPT1iJiZcIndoZWVsXCIhPT1ifHwoZT0hMCk7ZD92b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse2NhcHR1cmU6ITAscGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMCk6dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCExKX1cbmZ1bmN0aW9uIGdkKGEsYixjLGQsZSl7dmFyIGY9ZDtpZigwPT09KGImMSkmJjA9PT0oYiYyKSYmbnVsbCE9PWQpYTpmb3IoOzspe2lmKG51bGw9PT1kKXJldHVybjt2YXIgZz1kLnRhZztpZigzPT09Z3x8ND09PWcpe3ZhciBoPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoaD09PWV8fDg9PT1oLm5vZGVUeXBlJiZoLnBhcmVudE5vZGU9PT1lKWJyZWFrO2lmKDQ9PT1nKWZvcihnPWQucmV0dXJuO251bGwhPT1nOyl7dmFyIGs9Zy50YWc7aWYoMz09PWt8fDQ9PT1rKWlmKGs9Zy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxrPT09ZXx8OD09PWsubm9kZVR5cGUmJmsucGFyZW50Tm9kZT09PWUpcmV0dXJuO2c9Zy5yZXR1cm59Zm9yKDtudWxsIT09aDspe2c9VmMoaCk7aWYobnVsbD09PWcpcmV0dXJuO2s9Zy50YWc7aWYoNT09PWt8fDY9PT1rKXtkPWY9Zztjb250aW51ZSBhfWg9aC5wYXJlbnROb2RlfX1kPWQucmV0dXJufUliKGZ1bmN0aW9uKCl7dmFyIGQ9ZixlPXdiKGMpLGc9W107XG5hOnt2YXIgaD1jZi5nZXQoYSk7aWYodm9pZCAwIT09aCl7dmFyIGs9c2QsbT1hO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09bmQoYykpYnJlYWsgYTtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOms9UWQ7YnJlYWs7Y2FzZSBcImZvY3VzaW5cIjptPVwiZm9jdXNcIjtrPUVkO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOm09XCJibHVyXCI7az1FZDticmVhaztjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjprPUVkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilicmVhayBhO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6az1BZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjprPVxuQ2Q7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6az1VZDticmVhaztjYXNlIFplOmNhc2UgJGU6Y2FzZSBhZjprPUdkO2JyZWFrO2Nhc2UgYmY6az1XZDticmVhaztjYXNlIFwic2Nyb2xsXCI6az11ZDticmVhaztjYXNlIFwid2hlZWxcIjprPVlkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOms9SWQ7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6az1TZH12YXIgdz0wIT09KGImNCksSj0hdyYmXCJzY3JvbGxcIj09PWEsdj13P251bGwhPT1oP2grXCJDYXB0dXJlXCI6bnVsbDpoO3c9W107Zm9yKHZhciB4PWQscjtudWxsIT09XG54Oyl7cj14O3ZhciBGPXIuc3RhdGVOb2RlOzU9PT1yLnRhZyYmbnVsbCE9PUYmJihyPUYsbnVsbCE9PXYmJihGPUpiKHgsdiksbnVsbCE9RiYmdy5wdXNoKHNmKHgsRixyKSkpKTtpZihKKWJyZWFrO3g9eC5yZXR1cm59MDx3Lmxlbmd0aCYmKGg9bmV3IGsoaCxtLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmgsbGlzdGVuZXJzOnd9KSl9fWlmKDA9PT0oYiY3KSl7YTp7aD1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YTtrPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihoJiZjIT09dmImJihtPWMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCkmJihWYyhtKXx8bVt0Zl0pKWJyZWFrIGE7aWYoa3x8aCl7aD1lLndpbmRvdz09PWU/ZTooaD1lLm93bmVyRG9jdW1lbnQpP2guZGVmYXVsdFZpZXd8fGgucGFyZW50V2luZG93OndpbmRvdztpZihrKXtpZihtPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQsaz1kLG09bT9WYyhtKTpudWxsLG51bGwhPT1cbm0mJihKPVViKG0pLG0hPT1KfHw1IT09bS50YWcmJjYhPT1tLnRhZykpbT1udWxsfWVsc2Ugaz1udWxsLG09ZDtpZihrIT09bSl7dz1BZDtGPVwib25Nb3VzZUxlYXZlXCI7dj1cIm9uTW91c2VFbnRlclwiO3g9XCJtb3VzZVwiO2lmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSl3PVNkLEY9XCJvblBvaW50ZXJMZWF2ZVwiLHY9XCJvblBvaW50ZXJFbnRlclwiLHg9XCJwb2ludGVyXCI7Sj1udWxsPT1rP2g6dGUoayk7cj1udWxsPT1tP2g6dGUobSk7aD1uZXcgdyhGLHgrXCJsZWF2ZVwiLGssYyxlKTtoLnRhcmdldD1KO2gucmVsYXRlZFRhcmdldD1yO0Y9bnVsbDtWYyhlKT09PWQmJih3PW5ldyB3KHYseCtcImVudGVyXCIsbSxjLGUpLHcudGFyZ2V0PXIsdy5yZWxhdGVkVGFyZ2V0PUosRj13KTtKPUY7aWYoayYmbSliOnt3PWs7dj1tO3g9MDtmb3Iocj13O3I7cj11ZihyKSl4Kys7cj0wO2ZvcihGPXY7RjtGPXVmKEYpKXIrKztmb3IoOzA8eC1yOyl3PXVmKHcpLHgtLTtmb3IoOzA8ci14Oyl2PVxudWYodiksci0tO2Zvcig7eC0tOyl7aWYodz09PXZ8fG51bGwhPT12JiZ3PT09di5hbHRlcm5hdGUpYnJlYWsgYjt3PXVmKHcpO3Y9dWYodil9dz1udWxsfWVsc2Ugdz1udWxsO251bGwhPT1rJiZ2ZihnLGgsayx3LCExKTtudWxsIT09bSYmbnVsbCE9PUomJnZmKGcsSixtLHcsITApfX19YTp7aD1kP3RlKGQpOndpbmRvdztrPWgubm9kZU5hbWUmJmgubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1oLnR5cGUpdmFyIFo9dWU7ZWxzZSBpZihsZShoKSlpZih2ZSlaPUVlO2Vsc2V7Wj1DZTt2YXIgeWE9QmV9ZWxzZShrPWgubm9kZU5hbWUpJiZcImlucHV0XCI9PT1rLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1oLnR5cGV8fFwicmFkaW9cIj09PWgudHlwZSkmJihaPURlKTtpZihaJiYoWj1aKGEsZCkpKXttZShnLFosYyxlKTticmVhayBhfXlhJiZ5YShhLGgsZCk7XCJmb2N1c291dFwiPT09YSYmKHlhPWguX3dyYXBwZXJTdGF0ZSkmJlxueWEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWgudHlwZSYmYmIoaCxcIm51bWJlclwiLGgudmFsdWUpfXlhPWQ/dGUoZCk6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmlmKGxlKHlhKXx8XCJ0cnVlXCI9PT15YS5jb250ZW50RWRpdGFibGUpUGU9eWEsUWU9ZCxSZT1udWxsO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOlJlPVFlPVBlPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOlNlPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpTZT0hMTtUZShnLGMsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKE9lKWJyZWFrO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6VGUoZyxjLGUpfXZhciBhYjtpZigkZCliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjp2YXIgY2E9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIjticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmNhPVwib25Db21wb3NpdGlvbkVuZFwiO1xuYnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpjYT1cIm9uQ29tcG9zaXRpb25VcGRhdGVcIjticmVhayBifWNhPXZvaWQgMH1lbHNlIGhlP2ZlKGEsYykmJihjYT1cIm9uQ29tcG9zaXRpb25FbmRcIik6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihjYT1cIm9uQ29tcG9zaXRpb25TdGFydFwiKTtjYSYmKGNlJiZcImtvXCIhPT1jLmxvY2FsZSYmKGhlfHxcIm9uQ29tcG9zaXRpb25TdGFydFwiIT09Y2E/XCJvbkNvbXBvc2l0aW9uRW5kXCI9PT1jYSYmaGUmJihhYj1tZCgpKTooamQ9ZSxrZD1cInZhbHVlXCJpbiBqZD9qZC52YWx1ZTpqZC50ZXh0Q29udGVudCxoZT0hMCkpLHlhPW5lKGQsY2EpLDA8eWEubGVuZ3RoJiYoY2E9bmV3IEtkKGNhLGEsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6Y2EsbGlzdGVuZXJzOnlhfSksYWI/Y2EuZGF0YT1hYjooYWI9Z2UoYyksbnVsbCE9PWFiJiYoY2EuZGF0YT1hYikpKSk7aWYoYWI9YmU/aWUoYSxjKTpqZShhLGMpKWQ9bmUoZCxcIm9uQmVmb3JlSW5wdXRcIiksXG4wPGQubGVuZ3RoJiYoZT1uZXcgS2QoXCJvbkJlZm9yZUlucHV0XCIsXCJiZWZvcmVpbnB1dFwiLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmUsbGlzdGVuZXJzOmR9KSxlLmRhdGE9YWIpfXJlKGcsYil9KX1mdW5jdGlvbiBzZihhLGIsYyl7cmV0dXJue2luc3RhbmNlOmEsbGlzdGVuZXI6YixjdXJyZW50VGFyZ2V0OmN9fWZ1bmN0aW9uIG5lKGEsYil7Zm9yKHZhciBjPWIrXCJDYXB0dXJlXCIsZD1bXTtudWxsIT09YTspe3ZhciBlPWEsZj1lLnN0YXRlTm9kZTs1PT09ZS50YWcmJm51bGwhPT1mJiYoZT1mLGY9SmIoYSxjKSxudWxsIT1mJiZkLnVuc2hpZnQoc2YoYSxmLGUpKSxmPUpiKGEsYiksbnVsbCE9ZiYmZC5wdXNoKHNmKGEsZixlKSkpO2E9YS5yZXR1cm59cmV0dXJuIGR9ZnVuY3Rpb24gdWYoYSl7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIHZmKGEsYixjLGQsZSl7Zm9yKHZhciBmPWIuX3JlYWN0TmFtZSxnPVtdO251bGwhPT1jJiZjIT09ZDspe3ZhciBoPWMsaz1oLmFsdGVybmF0ZSxsPWguc3RhdGVOb2RlO2lmKG51bGwhPT1rJiZrPT09ZClicmVhazs1PT09aC50YWcmJm51bGwhPT1sJiYoaD1sLGU/KGs9SmIoYyxmKSxudWxsIT1rJiZnLnVuc2hpZnQoc2YoYyxrLGgpKSk6ZXx8KGs9SmIoYyxmKSxudWxsIT1rJiZnLnB1c2goc2YoYyxrLGgpKSkpO2M9Yy5yZXR1cm59MCE9PWcubGVuZ3RoJiZhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmd9KX12YXIgd2Y9L1xcclxcbj8vZyx4Zj0vXFx1MDAwMHxcXHVGRkZEL2c7ZnVuY3Rpb24geWYoYSl7cmV0dXJuKFwic3RyaW5nXCI9PT10eXBlb2YgYT9hOlwiXCIrYSkucmVwbGFjZSh3ZixcIlxcblwiKS5yZXBsYWNlKHhmLFwiXCIpfWZ1bmN0aW9uIHpmKGEsYixjKXtiPXlmKGIpO2lmKHlmKGEpIT09YiYmYyl0aHJvdyBFcnJvcihwKDQyNSkpO31mdW5jdGlvbiBBZigpe31cbnZhciBCZj1udWxsLENmPW51bGw7ZnVuY3Rpb24gRGYoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9XG52YXIgRWY9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsRmY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwLEdmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBQcm9taXNlP1Byb21pc2U6dm9pZCAwLElmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBxdWV1ZU1pY3JvdGFzaz9xdWV1ZU1pY3JvdGFzazpcInVuZGVmaW5lZFwiIT09dHlwZW9mIEdmP2Z1bmN0aW9uKGEpe3JldHVybiBHZi5yZXNvbHZlKG51bGwpLnRoZW4oYSkuY2F0Y2goSGYpfTpFZjtmdW5jdGlvbiBIZihhKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYTt9KX1cbmZ1bmN0aW9uIEpmKGEsYil7dmFyIGM9YixkPTA7ZG97dmFyIGU9Yy5uZXh0U2libGluZzthLnJlbW92ZUNoaWxkKGMpO2lmKGUmJjg9PT1lLm5vZGVUeXBlKWlmKGM9ZS5kYXRhLFwiLyRcIj09PWMpe2lmKDA9PT1kKXthLnJlbW92ZUNoaWxkKGUpO2FkKGIpO3JldHVybn1kLS19ZWxzZVwiJFwiIT09YyYmXCIkP1wiIT09YyYmXCIkIVwiIT09Y3x8ZCsrO2M9ZX13aGlsZShjKTthZChiKX1mdW5jdGlvbiBLZihhKXtmb3IoO251bGwhPWE7YT1hLm5leHRTaWJsaW5nKXt2YXIgYj1hLm5vZGVUeXBlO2lmKDE9PT1ifHwzPT09YilicmVhaztpZig4PT09Yil7Yj1hLmRhdGE7aWYoXCIkXCI9PT1ifHxcIiQhXCI9PT1ifHxcIiQ/XCI9PT1iKWJyZWFrO2lmKFwiLyRcIj09PWIpcmV0dXJuIG51bGx9fXJldHVybiBhfVxuZnVuY3Rpb24gTGYoYSl7YT1hLnByZXZpb3VzU2libGluZztmb3IodmFyIGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIiRcIj09PWN8fFwiJCFcIj09PWN8fFwiJD9cIj09PWMpe2lmKDA9PT1iKXJldHVybiBhO2ItLX1lbHNlXCIvJFwiPT09YyYmYisrfWE9YS5wcmV2aW91c1NpYmxpbmd9cmV0dXJuIG51bGx9dmFyIE1mPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLE5mPVwiX19yZWFjdEZpYmVyJFwiK01mLE9mPVwiX19yZWFjdFByb3BzJFwiK01mLHRmPVwiX19yZWFjdENvbnRhaW5lciRcIitNZixuZj1cIl9fcmVhY3RFdmVudHMkXCIrTWYsUGY9XCJfX3JlYWN0TGlzdGVuZXJzJFwiK01mLFFmPVwiX19yZWFjdEhhbmRsZXMkXCIrTWY7XG5mdW5jdGlvbiBWYyhhKXt2YXIgYj1hW05mXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1t0Zl18fGNbTmZdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9TGYoYSk7bnVsbCE9PWE7KXtpZihjPWFbTmZdKXJldHVybiBjO2E9TGYoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIEJiKGEpe2E9YVtOZl18fGFbdGZdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiB0ZShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IocCgzMykpO31mdW5jdGlvbiBDYihhKXtyZXR1cm4gYVtPZl18fG51bGx9dmFyIFJmPVtdLFNmPS0xO2Z1bmN0aW9uIFRmKGEpe3JldHVybntjdXJyZW50OmF9fVxuZnVuY3Rpb24gRShhKXswPlNmfHwoYS5jdXJyZW50PVJmW1NmXSxSZltTZl09bnVsbCxTZi0tKX1mdW5jdGlvbiBHKGEsYil7U2YrKztSZltTZl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBVZj17fSxIPVRmKFVmKSxWZj1UZighMSksV2Y9VWY7ZnVuY3Rpb24gWGYoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBVZjt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1cbmZ1bmN0aW9uIFlmKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9ZnVuY3Rpb24gWmYoKXtFKFZmKTtFKEgpfWZ1bmN0aW9uICRmKGEsYixjKXtpZihILmN1cnJlbnQhPT1VZil0aHJvdyBFcnJvcihwKDE2OCkpO0coSCxiKTtHKFZmLGMpfWZ1bmN0aW9uIGFnKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtiPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZClpZighKGUgaW4gYikpdGhyb3cgRXJyb3IocCgxMDgsUWEoYSl8fFwiVW5rbm93blwiLGUpKTtyZXR1cm4gQSh7fSxjLGQpfVxuZnVuY3Rpb24gYmcoYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fFVmO1dmPUguY3VycmVudDtHKEgsYSk7RyhWZixWZi5jdXJyZW50KTtyZXR1cm4hMH1mdW5jdGlvbiBjZyhhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IocCgxNjkpKTtjPyhhPWFnKGEsYixXZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1hLEUoVmYpLEUoSCksRyhILGEpKTpFKFZmKTtHKFZmLGMpfXZhciBkZz1udWxsLGVnPSExLGZnPSExO2Z1bmN0aW9uIGdnKGEpe251bGw9PT1kZz9kZz1bYV06ZGcucHVzaChhKX1mdW5jdGlvbiBoZyhhKXtlZz0hMDtnZyhhKX1cbmZ1bmN0aW9uIGlnKCl7aWYoIWZnJiZudWxsIT09ZGcpe2ZnPSEwO3ZhciBhPTAsYj1DO3RyeXt2YXIgYz1kZztmb3IoQz0xO2E8Yy5sZW5ndGg7YSsrKXt2YXIgZD1jW2FdO2RvIGQ9ZCghMCk7d2hpbGUobnVsbCE9PWQpfWRnPW51bGw7ZWc9ITF9Y2F0Y2goZSl7dGhyb3cgbnVsbCE9PWRnJiYoZGc9ZGcuc2xpY2UoYSsxKSksJGIoZWMsaWcpLGU7fWZpbmFsbHl7Qz1iLGZnPSExfX1yZXR1cm4gbnVsbH12YXIgamc9dGEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc7ZnVuY3Rpb24ga2coYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1BKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSk7cmV0dXJuIGJ9cmV0dXJuIGJ9dmFyIGxnPVRmKG51bGwpLG1nPW51bGwsbmc9bnVsbCxvZz1udWxsO2Z1bmN0aW9uIHBnKCl7b2c9bmc9bWc9bnVsbH1cbmZ1bmN0aW9uIHFnKGEpe3ZhciBiPWxnLmN1cnJlbnQ7RShsZyk7YS5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gcmcoYSxiLGMpe2Zvcig7bnVsbCE9PWE7KXt2YXIgZD1hLmFsdGVybmF0ZTsoYS5jaGlsZExhbmVzJmIpIT09Yj8oYS5jaGlsZExhbmVzfD1iLG51bGwhPT1kJiYoZC5jaGlsZExhbmVzfD1iKSk6bnVsbCE9PWQmJihkLmNoaWxkTGFuZXMmYikhPT1iJiYoZC5jaGlsZExhbmVzfD1iKTtpZihhPT09YylicmVhazthPWEucmV0dXJufX1mdW5jdGlvbiBzZyhhLGIpe21nPWE7b2c9bmc9bnVsbDthPWEuZGVwZW5kZW5jaWVzO251bGwhPT1hJiZudWxsIT09YS5maXJzdENvbnRleHQmJigwIT09KGEubGFuZXMmYikmJih0Zz0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9XG5mdW5jdGlvbiB1ZyhhKXt2YXIgYj1hLl9jdXJyZW50VmFsdWU7aWYob2chPT1hKWlmKGE9e2NvbnRleHQ6YSxtZW1vaXplZFZhbHVlOmIsbmV4dDpudWxsfSxudWxsPT09bmcpe2lmKG51bGw9PT1tZyl0aHJvdyBFcnJvcihwKDMwOCkpO25nPWE7bWcuZGVwZW5kZW5jaWVzPXtsYW5lczowLGZpcnN0Q29udGV4dDphfX1lbHNlIG5nPW5nLm5leHQ9YTtyZXR1cm4gYn12YXIgdmc9bnVsbCx3Zz0hMTtmdW5jdGlvbiB4ZyhhKXthLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5tZW1vaXplZFN0YXRlLGZpcnN0QmFzZVVwZGF0ZTpudWxsLGxhc3RCYXNlVXBkYXRlOm51bGwsc2hhcmVkOntwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowfSxlZmZlY3RzOm51bGx9fVxuZnVuY3Rpb24geWcoYSxiKXthPWEudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT09PWEmJihiLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmEuZmlyc3RCYXNlVXBkYXRlLGxhc3RCYXNlVXBkYXRlOmEubGFzdEJhc2VVcGRhdGUsc2hhcmVkOmEuc2hhcmVkLGVmZmVjdHM6YS5lZmZlY3RzfSl9ZnVuY3Rpb24gemcoYSxiKXtyZXR1cm57ZXZlbnRUaW1lOmEsbGFuZTpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbH19XG5mdW5jdGlvbiBBZyhhLGIpe3ZhciBjPWEudXBkYXRlUXVldWU7bnVsbCE9PWMmJihjPWMuc2hhcmVkLEJnKGEpPyhhPWMuaW50ZXJsZWF2ZWQsbnVsbD09PWE/KGIubmV4dD1iLG51bGw9PT12Zz92Zz1bY106dmcucHVzaChjKSk6KGIubmV4dD1hLm5leHQsYS5uZXh0PWIpLGMuaW50ZXJsZWF2ZWQ9Yik6KGE9Yy5wZW5kaW5nLG51bGw9PT1hP2IubmV4dD1iOihiLm5leHQ9YS5uZXh0LGEubmV4dD1iKSxjLnBlbmRpbmc9YikpfWZ1bmN0aW9uIENnKGEsYixjKXtiPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWImJihiPWIuc2hhcmVkLDAhPT0oYyY0MTk0MjQwKSkpe3ZhciBkPWIubGFuZXM7ZCY9YS5wZW5kaW5nTGFuZXM7Y3w9ZDtiLmxhbmVzPWM7QmMoYSxjKX19XG5mdW5jdGlvbiBEZyhhLGIpe3ZhciBjPWEudXBkYXRlUXVldWUsZD1hLmFsdGVybmF0ZTtpZihudWxsIT09ZCYmKGQ9ZC51cGRhdGVRdWV1ZSxjPT09ZCkpe3ZhciBlPW51bGwsZj1udWxsO2M9Yy5maXJzdEJhc2VVcGRhdGU7aWYobnVsbCE9PWMpe2Rve3ZhciBnPXtldmVudFRpbWU6Yy5ldmVudFRpbWUsbGFuZTpjLmxhbmUsdGFnOmMudGFnLHBheWxvYWQ6Yy5wYXlsb2FkLGNhbGxiYWNrOmMuY2FsbGJhY2ssbmV4dDpudWxsfTtudWxsPT09Zj9lPWY9ZzpmPWYubmV4dD1nO2M9Yy5uZXh0fXdoaWxlKG51bGwhPT1jKTtudWxsPT09Zj9lPWY9YjpmPWYubmV4dD1ifWVsc2UgZT1mPWI7Yz17YmFzZVN0YXRlOmQuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTplLGxhc3RCYXNlVXBkYXRlOmYsc2hhcmVkOmQuc2hhcmVkLGVmZmVjdHM6ZC5lZmZlY3RzfTthLnVwZGF0ZVF1ZXVlPWM7cmV0dXJufWE9Yy5sYXN0QmFzZVVwZGF0ZTtudWxsPT09YT9jLmZpcnN0QmFzZVVwZGF0ZT1iOmEubmV4dD1cbmI7Yy5sYXN0QmFzZVVwZGF0ZT1ifVxuZnVuY3Rpb24gRWcoYSxiLGMsZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTt3Zz0hMTt2YXIgZj1lLmZpcnN0QmFzZVVwZGF0ZSxnPWUubGFzdEJhc2VVcGRhdGUsaD1lLnNoYXJlZC5wZW5kaW5nO2lmKG51bGwhPT1oKXtlLnNoYXJlZC5wZW5kaW5nPW51bGw7dmFyIGs9aCxsPWsubmV4dDtrLm5leHQ9bnVsbDtudWxsPT09Zz9mPWw6Zy5uZXh0PWw7Zz1rO3ZhciBuPWEuYWx0ZXJuYXRlO251bGwhPT1uJiYobj1uLnVwZGF0ZVF1ZXVlLGg9bi5sYXN0QmFzZVVwZGF0ZSxoIT09ZyYmKG51bGw9PT1oP24uZmlyc3RCYXNlVXBkYXRlPWw6aC5uZXh0PWwsbi5sYXN0QmFzZVVwZGF0ZT1rKSl9aWYobnVsbCE9PWYpe3ZhciB1PWUuYmFzZVN0YXRlO2c9MDtuPWw9az1udWxsO2g9Zjtkb3t2YXIgcT1oLmxhbmUseT1oLmV2ZW50VGltZTtpZigoZCZxKT09PXEpe251bGwhPT1uJiYobj1uLm5leHQ9e2V2ZW50VGltZTp5LGxhbmU6MCx0YWc6aC50YWcscGF5bG9hZDpoLnBheWxvYWQsY2FsbGJhY2s6aC5jYWxsYmFjayxcbm5leHQ6bnVsbH0pO2E6e3ZhciBtPWEsdz1oO3E9Yjt5PWM7c3dpdGNoKHcudGFnKXtjYXNlIDE6bT13LnBheWxvYWQ7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIG0pe3U9bS5jYWxsKHksdSxxKTticmVhayBhfXU9bTticmVhayBhO2Nhc2UgMzptLmZsYWdzPW0uZmxhZ3MmLTY1NTM3fDEyODtjYXNlIDA6bT13LnBheWxvYWQ7cT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbT9tLmNhbGwoeSx1LHEpOm07aWYobnVsbD09PXF8fHZvaWQgMD09PXEpYnJlYWsgYTt1PUEoe30sdSxxKTticmVhayBhO2Nhc2UgMjp3Zz0hMH19bnVsbCE9PWguY2FsbGJhY2smJjAhPT1oLmxhbmUmJihhLmZsYWdzfD02NCxxPWUuZWZmZWN0cyxudWxsPT09cT9lLmVmZmVjdHM9W2hdOnEucHVzaChoKSl9ZWxzZSB5PXtldmVudFRpbWU6eSxsYW5lOnEsdGFnOmgudGFnLHBheWxvYWQ6aC5wYXlsb2FkLGNhbGxiYWNrOmguY2FsbGJhY2ssbmV4dDpudWxsfSxudWxsPT09bj8obD1uPXksaz11KTpuPW4ubmV4dD15LGd8PXE7XG5oPWgubmV4dDtpZihudWxsPT09aClpZihoPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWgpYnJlYWs7ZWxzZSBxPWgsaD1xLm5leHQscS5uZXh0PW51bGwsZS5sYXN0QmFzZVVwZGF0ZT1xLGUuc2hhcmVkLnBlbmRpbmc9bnVsbH13aGlsZSgxKTtudWxsPT09biYmKGs9dSk7ZS5iYXNlU3RhdGU9aztlLmZpcnN0QmFzZVVwZGF0ZT1sO2UubGFzdEJhc2VVcGRhdGU9bjtiPWUuc2hhcmVkLmludGVybGVhdmVkO2lmKG51bGwhPT1iKXtlPWI7ZG8gZ3w9ZS5sYW5lLGU9ZS5uZXh0O3doaWxlKGUhPT1iKX1lbHNlIG51bGw9PT1mJiYoZS5zaGFyZWQubGFuZXM9MCk7Rmd8PWc7YS5sYW5lcz1nO2EubWVtb2l6ZWRTdGF0ZT11fX1cbmZ1bmN0aW9uIEdnKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9YztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZSl0aHJvdyBFcnJvcihwKDE5MSxlKSk7ZS5jYWxsKGQpfX19dmFyIEhnPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO2Z1bmN0aW9uIElnKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjpBKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7MD09PWEubGFuZXMmJihhLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1jKX1cbnZhciBNZz17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxzKT9VYihhKT09PWE6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1KZygpLGU9S2coYSksZj16ZyhkLGUpO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtBZyhhLGYpO2I9TGcoYSxlLGQpO251bGwhPT1iJiZDZyhiLGEsZSl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SmcoKSxlPUtnKGEpLGY9emcoZCxlKTtmLnRhZz0xO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtBZyhhLGYpO2I9TGcoYSxlLGQpO251bGwhPT1iJiZDZyhiLGEsZSl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGM9SmcoKSxkPUtnKGEpLGU9emcoYyxcbmQpO2UudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihlLmNhbGxiYWNrPWIpO0FnKGEsZSk7Yj1MZyhhLGQsYyk7bnVsbCE9PWImJkNnKGIsYSxkKX19O2Z1bmN0aW9uIE5nKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IUhlKGMsZCl8fCFIZShlLGYpOiEwfVxuZnVuY3Rpb24gT2coYSxiLGMpe3ZhciBkPSExLGU9VWY7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9dWcoZik6KGU9WWYoYik/V2Y6SC5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/WGYoYSxlKTpVZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPU1nO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbHM9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gUGcoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJk1nLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gUWcoYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1IZzt4ZyhhKTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PXVnKGYpOihmPVlmKGIpP1dmOkguY3VycmVudCxlLmNvbnRleHQ9WGYoYSxmKSk7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKElnKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChiPWUuc3RhdGUsXG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJk1nLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLEVnKGEsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZmxhZ3N8PTQxOTQzMDgpfXZhciBSZz1bXSxTZz0wLFRnPW51bGwsVWc9MCxWZz1bXSxXZz0wLFhnPW51bGwsWWc9MSxaZz1cIlwiO2Z1bmN0aW9uICRnKGEsYil7UmdbU2crK109VWc7UmdbU2crK109VGc7VGc9YTtVZz1ifVxuZnVuY3Rpb24gYWgoYSxiLGMpe1ZnW1dnKytdPVlnO1ZnW1dnKytdPVpnO1ZnW1dnKytdPVhnO1hnPWE7dmFyIGQ9WWc7YT1aZzt2YXIgZT0zMi1uYyhkKS0xO2QmPX4oMTw8ZSk7Yys9MTt2YXIgZj0zMi1uYyhiKStlO2lmKDMwPGYpe3ZhciBnPWUtZSU1O2Y9KGQmKDE8PGcpLTEpLnRvU3RyaW5nKDMyKTtkPj49ZztlLT1nO1lnPTE8PDMyLW5jKGIpK2V8Yzw8ZXxkO1pnPWYrYX1lbHNlIFlnPTE8PGZ8Yzw8ZXxkLFpnPWF9ZnVuY3Rpb24gYmgoYSl7bnVsbCE9PWEucmV0dXJuJiYoJGcoYSwxKSxhaChhLDEsMCkpfWZ1bmN0aW9uIGNoKGEpe2Zvcig7YT09PVRnOylUZz1SZ1stLVNnXSxSZ1tTZ109bnVsbCxVZz1SZ1stLVNnXSxSZ1tTZ109bnVsbDtmb3IoO2E9PT1YZzspWGc9VmdbLS1XZ10sVmdbV2ddPW51bGwsWmc9VmdbLS1XZ10sVmdbV2ddPW51bGwsWWc9VmdbLS1XZ10sVmdbV2ddPW51bGx9dmFyIGRoPW51bGwsZWg9bnVsbCxJPSExLGZoPW51bGw7XG5mdW5jdGlvbiBnaChhLGIpe3ZhciBjPWhoKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2I9YS5kZWxldGlvbnM7bnVsbD09PWI/KGEuZGVsZXRpb25zPVtjXSxhLmZsYWdzfD0xNik6Yi5wdXNoKGMpfVxuZnVuY3Rpb24gaWgoYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsZGg9YSxlaD1LZihiLmZpcnN0Q2hpbGQpLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsZGg9YSxlaD1udWxsLCEwKTohMTtjYXNlIDEzOnJldHVybiBiPTghPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYz1udWxsIT09WGc/e2lkOllnLG92ZXJmbG93OlpnfTpudWxsLGEubWVtb2l6ZWRTdGF0ZT17ZGVoeWRyYXRlZDpiLHRyZWVDb250ZXh0OmMscmV0cnlMYW5lOjEwNzM3NDE4MjR9LGM9aGgoMTgsbnVsbCxudWxsLDApLGMuc3RhdGVOb2RlPWIsYy5yZXR1cm49YSxhLmNoaWxkPWMsZGg9YSxlaD1cbm51bGwsITApOiExO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGpoKGEpe3JldHVybiAwIT09KGEubW9kZSYxKSYmMD09PShhLmZsYWdzJjEyOCl9ZnVuY3Rpb24ga2goYSl7aWYoSSl7dmFyIGI9ZWg7aWYoYil7dmFyIGM9YjtpZighaWgoYSxiKSl7aWYoamgoYSkpdGhyb3cgRXJyb3IocCg0MTgpKTtiPUtmKGMubmV4dFNpYmxpbmcpO3ZhciBkPWRoO2ImJmloKGEsYik/Z2goZCxjKTooYS5mbGFncz1hLmZsYWdzJi00MDk3fDIsST0hMSxkaD1hKX19ZWxzZXtpZihqaChhKSl0aHJvdyBFcnJvcihwKDQxOCkpO2EuZmxhZ3M9YS5mbGFncyYtNDA5N3wyO0k9ITE7ZGg9YX19fWZ1bmN0aW9uIGxoKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjtkaD1hfVxuZnVuY3Rpb24gbWgoYSl7aWYoYSE9PWRoKXJldHVybiExO2lmKCFJKXJldHVybiBsaChhKSxJPSEwLCExO3ZhciBiOyhiPTMhPT1hLnRhZykmJiEoYj01IT09YS50YWcpJiYoYj1hLnR5cGUsYj1cImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIURmKGEudHlwZSxhLm1lbW9pemVkUHJvcHMpKTtpZihiJiYoYj1laCkpe2lmKGpoKGEpKXtmb3IoYT1laDthOylhPUtmKGEubmV4dFNpYmxpbmcpO3Rocm93IEVycm9yKHAoNDE4KSk7fWZvcig7YjspZ2goYSxiKSxiPUtmKGIubmV4dFNpYmxpbmcpfWxoKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IocCgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIi8kXCI9PT1jKXtpZigwPT09Yil7ZWg9S2YoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZVwiJFwiIT09YyYmXG5cIiQhXCIhPT1jJiZcIiQ/XCIhPT1jfHxiKyt9YT1hLm5leHRTaWJsaW5nfWVoPW51bGx9fWVsc2UgZWg9ZGg/S2YoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7cmV0dXJuITB9ZnVuY3Rpb24gbmgoKXtlaD1kaD1udWxsO0k9ITF9ZnVuY3Rpb24gb2goYSl7bnVsbD09PWZoP2ZoPVthXTpmaC5wdXNoKGEpfVxuZnVuY3Rpb24gcGgoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO2lmKGMpe2lmKDEhPT1jLnRhZyl0aHJvdyBFcnJvcihwKDMwOSkpO3ZhciBkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IEVycm9yKHAoMTQ3LGEpKTt2YXIgZT1kLGY9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWYpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZS5yZWZzO2I9PT1IZyYmKGI9ZS5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltmXTpiW2ZdPWF9O2IuX3N0cmluZ1JlZj1mO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcihwKDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcihwKDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gcWgoYSxiKXthPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKTt0aHJvdyBFcnJvcihwKDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1hP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmEpKTt9ZnVuY3Rpb24gcmgoYSl7dmFyIGI9YS5faW5pdDtyZXR1cm4gYihhLl9wYXlsb2FkKX1cbmZ1bmN0aW9uIHNoKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmRlbGV0aW9ucztudWxsPT09ZD8oYi5kZWxldGlvbnM9W2NdLGIuZmxhZ3N8PTE2KTpkLnB1c2goYyl9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPXRoKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYi5mbGFnc3w9MTA0ODU3NixjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZmxhZ3N8PTIsYyk6ZDtiLmZsYWdzfD0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmXG5udWxsPT09Yi5hbHRlcm5hdGUmJihiLmZsYWdzfD0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9dWgoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXt2YXIgZj1jLnR5cGU7aWYoZj09PXdhKXJldHVybiBuKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsYy5rZXkpO2lmKG51bGwhPT1iJiYoYi5lbGVtZW50VHlwZT09PWZ8fFwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYuJCR0eXBlb2Y9PT1HYSYmcmgoZik9PT1iLnR5cGUpKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1waChhLGIsYyksZC5yZXR1cm49YSxkO2Q9dmgoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9cGgoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxcbmIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj13aChjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbihhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9eGgoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiB1KGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGImJlwiXCIhPT1ifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9dWgoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgdWE6cmV0dXJuIGM9dmgoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksXG5jLnJlZj1waChhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgdmE6cmV0dXJuIGI9d2goYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2Nhc2UgR2E6dmFyIGQ9Yi5faW5pdDtyZXR1cm4gdShhLGQoYi5fcGF5bG9hZCksYyl9aWYoZGIoYil8fEphKGIpKXJldHVybiBiPXhoKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO3FoKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcShhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYyYmXCJcIiE9PWN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgdWE6cmV0dXJuIGMua2V5PT09ZT9rKGEsYixjLGQpOm51bGw7Y2FzZSB2YTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbDtjYXNlIEdhOnJldHVybiBlPWMuX2luaXQscShhLFxuYixlKGMuX3BheWxvYWQpLGQpfWlmKGRiKGMpfHxKYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDpuKGEsYixjLGQsbnVsbCk7cWgoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB5KGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkJiZcIlwiIT09ZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSB1YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsayhiLGEsZCxlKTtjYXNlIHZhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpO2Nhc2UgR2E6dmFyIGY9ZC5faW5pdDtyZXR1cm4geShhLGIsYyxmKGQuX3BheWxvYWQpLGUpfWlmKGRiKGQpfHxKYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxuKGIsYSxkLGUsbnVsbCk7cWgoYixkKX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIG0oZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsbj1udWxsLHI9ZyxtPWc9MCx4PW51bGw7bnVsbCE9PXImJm08aC5sZW5ndGg7bSsrKXtyLmluZGV4Pm0/KHg9cixyPW51bGwpOng9ci5zaWJsaW5nO3ZhciB2PXEoZSxyLGhbbV0sayk7aWYobnVsbD09PXYpe251bGw9PT1yJiYocj14KTticmVha31hJiZyJiZudWxsPT09di5hbHRlcm5hdGUmJmIoZSxyKTtnPWYodixnLG0pO251bGw9PT1uP2w9djpuLnNpYmxpbmc9djtuPXY7cj14fWlmKG09PT1oLmxlbmd0aClyZXR1cm4gYyhlLHIpLEkmJiRnKGUsbSksbDtpZihudWxsPT09cil7Zm9yKDttPGgubGVuZ3RoO20rKylyPXUoZSxoW21dLGspLG51bGwhPT1yJiYoZz1mKHIsZyxtKSxudWxsPT09bj9sPXI6bi5zaWJsaW5nPXIsbj1yKTtJJiYkZyhlLG0pO3JldHVybiBsfWZvcihyPWQoZSxyKTttPGgubGVuZ3RoO20rKyl4PXkocixlLG0saFttXSxrKSxudWxsIT09eCYmKGEmJm51bGwhPT14LmFsdGVybmF0ZSYmci5kZWxldGUobnVsbD09PVxueC5rZXk/bTp4LmtleSksZz1mKHgsZyxtKSxudWxsPT09bj9sPXg6bi5zaWJsaW5nPXgsbj14KTthJiZyLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO0kmJiRnKGUsbSk7cmV0dXJuIGx9ZnVuY3Rpb24gdyhlLGcsaCxrKXt2YXIgbD1KYShoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgbCl0aHJvdyBFcnJvcihwKDE1MCkpO2g9bC5jYWxsKGgpO2lmKG51bGw9PWgpdGhyb3cgRXJyb3IocCgxNTEpKTtmb3IodmFyIG49bD1udWxsLG09ZyxyPWc9MCx4PW51bGwsdj1oLm5leHQoKTtudWxsIT09bSYmIXYuZG9uZTtyKyssdj1oLm5leHQoKSl7bS5pbmRleD5yPyh4PW0sbT1udWxsKTp4PW0uc2libGluZzt2YXIgdz1xKGUsbSx2LnZhbHVlLGspO2lmKG51bGw9PT13KXtudWxsPT09bSYmKG09eCk7YnJlYWt9YSYmbSYmbnVsbD09PXcuYWx0ZXJuYXRlJiZiKGUsbSk7Zz1mKHcsZyxyKTtudWxsPT09bj9sPXc6bi5zaWJsaW5nPXc7bj13O209eH1pZih2LmRvbmUpcmV0dXJuIGMoZSxcbm0pLEkmJiRnKGUsciksbDtpZihudWxsPT09bSl7Zm9yKDshdi5kb25lO3IrKyx2PWgubmV4dCgpKXY9dShlLHYudmFsdWUsayksbnVsbCE9PXYmJihnPWYodixnLHIpLG51bGw9PT1uP2w9djpuLnNpYmxpbmc9dixuPXYpO0kmJiRnKGUscik7cmV0dXJuIGx9Zm9yKG09ZChlLG0pOyF2LmRvbmU7cisrLHY9aC5uZXh0KCkpdj15KG0sZSxyLHYudmFsdWUsayksbnVsbCE9PXYmJihhJiZudWxsIT09di5hbHRlcm5hdGUmJm0uZGVsZXRlKG51bGw9PT12LmtleT9yOnYua2V5KSxnPWYodixnLHIpLG51bGw9PT1uP2w9djpuLnNpYmxpbmc9dixuPXYpO2EmJm0uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7SSYmJGcoZSxyKTtyZXR1cm4gbH1mdW5jdGlvbiBKKGEsZCxmLGgpe1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PXdhJiZudWxsPT09Zi5rZXkmJihmPWYucHJvcHMuY2hpbGRyZW4pO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYpe3N3aXRjaChmLiQkdHlwZW9mKXtjYXNlIHVhOmE6e2Zvcih2YXIgaz1cbmYua2V5LGw9ZDtudWxsIT09bDspe2lmKGwua2V5PT09ayl7az1mLnR5cGU7aWYoaz09PXdhKXtpZig3PT09bC50YWcpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYucHJvcHMuY2hpbGRyZW4pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWVsc2UgaWYobC5lbGVtZW50VHlwZT09PWt8fFwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWsmJmsuJCR0eXBlb2Y9PT1HYSYmcmgoayk9PT1sLnR5cGUpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYucHJvcHMpO2QucmVmPXBoKGEsbCxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWMoYSxsKTticmVha31lbHNlIGIoYSxsKTtsPWwuc2libGluZ31mLnR5cGU9PT13YT8oZD14aChmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9dmgoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9cGgoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIHZhOmE6e2ZvcihsPWYua2V5O251bGwhPT1cbmQ7KXtpZihkLmtleT09PWwpaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9d2goZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSk7Y2FzZSBHYTpyZXR1cm4gbD1mLl9pbml0LEooYSxkLGwoZi5fcGF5bG9hZCksaCl9aWYoZGIoZikpcmV0dXJuIG0oYSxkLGYsaCk7aWYoSmEoZikpcmV0dXJuIHcoYSxkLGYsaCk7cWgoYSxmKX1yZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGYmJlwiXCIhPT1mfHxcIm51bWJlclwiPT09dHlwZW9mIGY/KGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTpcbihjKGEsZCksZD11aChmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKSk6YyhhLGQpfXJldHVybiBKfXZhciB5aD1zaCghMCksemg9c2goITEpLEFoPXt9LEJoPVRmKEFoKSxDaD1UZihBaCksRGg9VGYoQWgpO2Z1bmN0aW9uIEVoKGEpe2lmKGE9PT1BaCl0aHJvdyBFcnJvcihwKDE3NCkpO3JldHVybiBhfWZ1bmN0aW9uIEZoKGEsYil7RyhEaCxiKTtHKENoLGEpO0coQmgsQWgpO2E9Yi5ub2RlVHlwZTtzd2l0Y2goYSl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6a2IobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmE9OD09PWE/Yi5wYXJlbnROb2RlOmIsYj1hLm5hbWVzcGFjZVVSSXx8bnVsbCxhPWEudGFnTmFtZSxiPWtiKGIsYSl9RShCaCk7RyhCaCxiKX1mdW5jdGlvbiBHaCgpe0UoQmgpO0UoQ2gpO0UoRGgpfVxuZnVuY3Rpb24gSGgoYSl7RWgoRGguY3VycmVudCk7dmFyIGI9RWgoQmguY3VycmVudCk7dmFyIGM9a2IoYixhLnR5cGUpO2IhPT1jJiYoRyhDaCxhKSxHKEJoLGMpKX1mdW5jdGlvbiBJaChhKXtDaC5jdXJyZW50PT09YSYmKEUoQmgpLEUoQ2gpKX12YXIgSz1UZigwKTtcbmZ1bmN0aW9uIEpoKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fFwiJD9cIj09PWMuZGF0YXx8XCIkIVwiPT09Yy5kYXRhKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmZsYWdzJjEyOCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfXZhciBLaD1bXTtcbmZ1bmN0aW9uIExoKCl7Zm9yKHZhciBhPTA7YTxLaC5sZW5ndGg7YSsrKUtoW2FdLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PW51bGw7S2gubGVuZ3RoPTB9dmFyIE1oPXRhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsTmg9dGEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsT2g9MCxMPW51bGwsTT1udWxsLE49bnVsbCxQaD0hMSxRaD0hMSxSaD0wLFNoPTA7ZnVuY3Rpb24gTygpe3Rocm93IEVycm9yKHAoMzIxKSk7fWZ1bmN0aW9uIFRoKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoIUdlKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBVaChhLGIsYyxkLGUsZil7T2g9ZjtMPWI7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2IubGFuZXM9MDtNaC5jdXJyZW50PW51bGw9PT1hfHxudWxsPT09YS5tZW1vaXplZFN0YXRlP1ZoOldoO2E9YyhkLGUpO2lmKFFoKXtmPTA7ZG97UWg9ITE7Umg9MDtpZigyNTw9Zil0aHJvdyBFcnJvcihwKDMwMSkpO2YrPTE7Tj1NPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO01oLmN1cnJlbnQ9WGg7YT1jKGQsZSl9d2hpbGUoUWgpfU1oLmN1cnJlbnQ9WWg7Yj1udWxsIT09TSYmbnVsbCE9PU0ubmV4dDtPaD0wO049TT1MPW51bGw7UGg9ITE7aWYoYil0aHJvdyBFcnJvcihwKDMwMCkpO3JldHVybiBhfWZ1bmN0aW9uIFpoKCl7dmFyIGE9MCE9PVJoO1JoPTA7cmV0dXJuIGF9XG5mdW5jdGlvbiAkaCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1OP0wubWVtb2l6ZWRTdGF0ZT1OPWE6Tj1OLm5leHQ9YTtyZXR1cm4gTn1mdW5jdGlvbiBhaSgpe2lmKG51bGw9PT1NKXt2YXIgYT1MLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1NLm5leHQ7dmFyIGI9bnVsbD09PU4/TC5tZW1vaXplZFN0YXRlOk4ubmV4dDtpZihudWxsIT09YilOPWIsTT1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IocCgzMTApKTtNPWE7YT17bWVtb2l6ZWRTdGF0ZTpNLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk0uYmFzZVN0YXRlLGJhc2VRdWV1ZTpNLmJhc2VRdWV1ZSxxdWV1ZTpNLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PU4/TC5tZW1vaXplZFN0YXRlPU49YTpOPU4ubmV4dD1hfXJldHVybiBOfVxuZnVuY3Rpb24gYmkoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBjaShhKXt2YXIgYj1haSgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcihwKDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPU0sZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7Zj1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPW51bGwsaz1udWxsLGw9Zjtkb3t2YXIgbj1sLmxhbmU7aWYoKE9oJm4pPT09biludWxsIT09ayYmKGs9ay5uZXh0PXtsYW5lOjAsYWN0aW9uOmwuYWN0aW9uLGhhc0VhZ2VyU3RhdGU6bC5oYXNFYWdlclN0YXRlLGVhZ2VyU3RhdGU6bC5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLGQ9bC5oYXNFYWdlclN0YXRlP2wuZWFnZXJTdGF0ZTphKGQsbC5hY3Rpb24pO2Vsc2V7dmFyIHU9e2xhbmU6bixhY3Rpb246bC5hY3Rpb24saGFzRWFnZXJTdGF0ZTpsLmhhc0VhZ2VyU3RhdGUsXG5lYWdlclN0YXRlOmwuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1rPyhoPWs9dSxnPWQpOms9ay5uZXh0PXU7TC5sYW5lc3w9bjtGZ3w9bn1sPWwubmV4dH13aGlsZShudWxsIT09bCYmbCE9PWYpO251bGw9PT1rP2c9ZDprLm5leHQ9aDtHZShkLGIubWVtb2l6ZWRTdGF0ZSl8fCh0Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZztiLmJhc2VRdWV1ZT1rO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1hPWMuaW50ZXJsZWF2ZWQ7aWYobnVsbCE9PWEpe2U9YTtkbyBmPWUubGFuZSxMLmxhbmVzfD1mLEZnfD1mLGU9ZS5uZXh0O3doaWxlKGUhPT1hKX1lbHNlIG51bGw9PT1lJiYoYy5sYW5lcz0wKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gZGkoYSl7dmFyIGI9YWkoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IocCgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpO0dlKGYsYi5tZW1vaXplZFN0YXRlKXx8KHRnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19ZnVuY3Rpb24gZWkoKXt9XG5mdW5jdGlvbiBmaShhLGIpe3ZhciBjPUwsZD1haSgpLGU9YigpLGY9IUdlKGQubWVtb2l6ZWRTdGF0ZSxlKTtmJiYoZC5tZW1vaXplZFN0YXRlPWUsdGc9ITApO2Q9ZC5xdWV1ZTtnaShoaS5iaW5kKG51bGwsYyxkLGEpLFthXSk7aWYoZC5nZXRTbmFwc2hvdCE9PWJ8fGZ8fG51bGwhPT1OJiZOLm1lbW9pemVkU3RhdGUudGFnJjEpe2MuZmxhZ3N8PTIwNDg7aWkoOSxqaS5iaW5kKG51bGwsYyxkLGUsYiksdm9pZCAwLG51bGwpO2lmKG51bGw9PT1QKXRocm93IEVycm9yKHAoMzQ5KSk7MCE9PShPaCYzMCl8fGtpKGMsYixlKX1yZXR1cm4gZX1mdW5jdGlvbiBraShhLGIsYyl7YS5mbGFnc3w9MTYzODQ7YT17Z2V0U25hcHNob3Q6Yix2YWx1ZTpjfTtiPUwudXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbCxzdG9yZXM6bnVsbH0sTC51cGRhdGVRdWV1ZT1iLGIuc3RvcmVzPVthXSk6KGM9Yi5zdG9yZXMsbnVsbD09PWM/Yi5zdG9yZXM9W2FdOmMucHVzaChhKSl9XG5mdW5jdGlvbiBqaShhLGIsYyxkKXtiLnZhbHVlPWM7Yi5nZXRTbmFwc2hvdD1kO2xpKGIpJiZMZyhhLDEsLTEpfWZ1bmN0aW9uIGhpKGEsYixjKXtyZXR1cm4gYyhmdW5jdGlvbigpe2xpKGIpJiZMZyhhLDEsLTEpfSl9ZnVuY3Rpb24gbGkoYSl7dmFyIGI9YS5nZXRTbmFwc2hvdDthPWEudmFsdWU7dHJ5e3ZhciBjPWIoKTtyZXR1cm4hR2UoYSxjKX1jYXRjaChkKXtyZXR1cm4hMH19ZnVuY3Rpb24gbWkoYSl7dmFyIGI9JGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPXtwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjpiaSxsYXN0UmVuZGVyZWRTdGF0ZTphfTtiLnF1ZXVlPWE7YT1hLmRpc3BhdGNoPW5pLmJpbmQobnVsbCxMLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19XG5mdW5jdGlvbiBpaShhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1MLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGwsc3RvcmVzOm51bGx9LEwudXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gb2koKXtyZXR1cm4gYWkoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIHBpKGEsYixjLGQpe3ZhciBlPSRoKCk7TC5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9aWkoMXxiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1cbmZ1bmN0aW9uIHFpKGEsYixjLGQpe3ZhciBlPWFpKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PU0pe3ZhciBnPU0ubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmVGgoZCxnLmRlcHMpKXtlLm1lbW9pemVkU3RhdGU9aWkoYixjLGYsZCk7cmV0dXJufX1MLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1paSgxfGIsYyxmLGQpfWZ1bmN0aW9uIHJpKGEsYil7cmV0dXJuIHBpKDgzOTA2NTYsOCxhLGIpfWZ1bmN0aW9uIGdpKGEsYil7cmV0dXJuIHFpKDIwNDgsOCxhLGIpfWZ1bmN0aW9uIHNpKGEsYil7cmV0dXJuIHFpKDQsMixhLGIpfWZ1bmN0aW9uIHRpKGEsYil7cmV0dXJuIHFpKDQsNCxhLGIpfVxuZnVuY3Rpb24gdWkoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiB2aShhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIHFpKDQsNCx1aS5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiB3aSgpe31mdW5jdGlvbiB4aShhLGIpe3ZhciBjPWFpKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZUaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1cbmZ1bmN0aW9uIHlpKGEsYil7dmFyIGM9YWkoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJlRoKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIHppKGEsYixjKXtpZigwPT09KE9oJjIxKSlyZXR1cm4gYS5iYXNlU3RhdGUmJihhLmJhc2VTdGF0ZT0hMSx0Zz0hMCksYS5tZW1vaXplZFN0YXRlPWM7R2UoYyxiKXx8KGM9eGMoKSxMLmxhbmVzfD1jLEZnfD1jLGEuYmFzZVN0YXRlPSEwKTtyZXR1cm4gYn1mdW5jdGlvbiBBaShhLGIpe3ZhciBjPUM7Qz0wIT09YyYmND5jP2M6NDthKCEwKTt2YXIgZD1OaC50cmFuc2l0aW9uO05oLnRyYW5zaXRpb249e307dHJ5e2EoITEpLGIoKX1maW5hbGx5e0M9YyxOaC50cmFuc2l0aW9uPWR9fWZ1bmN0aW9uIEJpKCl7cmV0dXJuIGFpKCkubWVtb2l6ZWRTdGF0ZX1cbmZ1bmN0aW9uIENpKGEsYixjKXt2YXIgZD1LZyhhKTtjPXtsYW5lOmQsYWN0aW9uOmMsaGFzRWFnZXJTdGF0ZTohMSxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTtEaShhKT9FaShiLGMpOihGaShhLGIsYyksYz1KZygpLGE9TGcoYSxkLGMpLG51bGwhPT1hJiZHaShhLGIsZCkpfVxuZnVuY3Rpb24gbmkoYSxiLGMpe3ZhciBkPUtnKGEpLGU9e2xhbmU6ZCxhY3Rpb246YyxoYXNFYWdlclN0YXRlOiExLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O2lmKERpKGEpKUVpKGIsZSk7ZWxzZXtGaShhLGIsZSk7dmFyIGY9YS5hbHRlcm5hdGU7aWYoMD09PWEubGFuZXMmJihudWxsPT09Znx8MD09PWYubGFuZXMpJiYoZj1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWYpKXRyeXt2YXIgZz1iLmxhc3RSZW5kZXJlZFN0YXRlLGg9ZihnLGMpO2UuaGFzRWFnZXJTdGF0ZT0hMDtlLmVhZ2VyU3RhdGU9aDtpZihHZShoLGcpKXJldHVybn1jYXRjaChrKXt9ZmluYWxseXt9Yz1KZygpO2E9TGcoYSxkLGMpO251bGwhPT1hJiZHaShhLGIsZCl9fWZ1bmN0aW9uIERpKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO3JldHVybiBhPT09THx8bnVsbCE9PWImJmI9PT1MfVxuZnVuY3Rpb24gRWkoYSxiKXtRaD1QaD0hMDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifWZ1bmN0aW9uIEZpKGEsYixjKXtCZyhhKT8oYT1iLmludGVybGVhdmVkLG51bGw9PT1hPyhjLm5leHQ9YyxudWxsPT09dmc/dmc9W2JdOnZnLnB1c2goYikpOihjLm5leHQ9YS5uZXh0LGEubmV4dD1jKSxiLmludGVybGVhdmVkPWMpOihhPWIucGVuZGluZyxudWxsPT09YT9jLm5leHQ9YzooYy5uZXh0PWEubmV4dCxhLm5leHQ9YyksYi5wZW5kaW5nPWMpfWZ1bmN0aW9uIEdpKGEsYixjKXtpZigwIT09KGMmNDE5NDI0MCkpe3ZhciBkPWIubGFuZXM7ZCY9YS5wZW5kaW5nTGFuZXM7Y3w9ZDtiLmxhbmVzPWM7QmMoYSxjKX19XG52YXIgWWg9e3JlYWRDb250ZXh0OnVnLHVzZUNhbGxiYWNrOk8sdXNlQ29udGV4dDpPLHVzZUVmZmVjdDpPLHVzZUltcGVyYXRpdmVIYW5kbGU6Tyx1c2VJbnNlcnRpb25FZmZlY3Q6Tyx1c2VMYXlvdXRFZmZlY3Q6Tyx1c2VNZW1vOk8sdXNlUmVkdWNlcjpPLHVzZVJlZjpPLHVzZVN0YXRlOk8sdXNlRGVidWdWYWx1ZTpPLHVzZURlZmVycmVkVmFsdWU6Tyx1c2VUcmFuc2l0aW9uOk8sdXNlTXV0YWJsZVNvdXJjZTpPLHVzZVN5bmNFeHRlcm5hbFN0b3JlOk8sdXNlSWQ6Tyx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LFZoPXtyZWFkQ29udGV4dDp1Zyx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpeyRoKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6dWcsdXNlRWZmZWN0OnJpLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBwaSg0MTk0MzA4LFxuNCx1aS5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHBpKDQxOTQzMDgsNCxhLGIpfSx1c2VJbnNlcnRpb25FZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gcGkoNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz0kaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD0kaCgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT17cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTtkLnF1ZXVlPWE7YT1hLmRpc3BhdGNoPUNpLmJpbmQobnVsbCxMLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpmdW5jdGlvbihhKXt2YXIgYj1cbiRoKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOm1pLHVzZURlYnVnVmFsdWU6d2ksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXtyZXR1cm4gJGgoKS5tZW1vaXplZFN0YXRlPWF9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1taSghMSksYj1hWzBdO2E9QWkuYmluZChudWxsLGFbMV0pOyRoKCkubWVtb2l6ZWRTdGF0ZT1hO3JldHVybltiLGFdfSx1c2VNdXRhYmxlU291cmNlOmZ1bmN0aW9uKCl7fSx1c2VTeW5jRXh0ZXJuYWxTdG9yZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9TCxlPSRoKCk7aWYoSSl7aWYodm9pZCAwPT09Yyl0aHJvdyBFcnJvcihwKDQwNykpO2M9YygpfWVsc2V7Yz1iKCk7aWYobnVsbD09PVApdGhyb3cgRXJyb3IocCgzNDkpKTswIT09KE9oJjMwKXx8a2koZCxiLGMpfWUubWVtb2l6ZWRTdGF0ZT1jO3ZhciBmPXt2YWx1ZTpjLGdldFNuYXBzaG90OmJ9O2UucXVldWU9ZjtyaShoaS5iaW5kKG51bGwsZCxcbmYsYSksW2FdKTtkLmZsYWdzfD0yMDQ4O2lpKDksamkuYmluZChudWxsLGQsZixjLGIpLHZvaWQgMCxudWxsKTtyZXR1cm4gY30sdXNlSWQ6ZnVuY3Rpb24oKXt2YXIgYT0kaCgpLGI9UC5pZGVudGlmaWVyUHJlZml4O2lmKEkpe3ZhciBjPVpnO3ZhciBkPVlnO2M9KGQmfigxPDwzMi1uYyhkKS0xKSkudG9TdHJpbmcoMzIpK2M7Yj1cIjpcIitiK1wiUlwiK2M7Yz1SaCsrOzA8YyYmKGIrPVwiSFwiK2MudG9TdHJpbmcoMzIpKTtiKz1cIjpcIn1lbHNlIGM9U2grKyxiPVwiOlwiK2IrXCJyXCIrYy50b1N0cmluZygzMikrXCI6XCI7cmV0dXJuIGEubWVtb2l6ZWRTdGF0ZT1ifSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LFdoPXtyZWFkQ29udGV4dDp1Zyx1c2VDYWxsYmFjazp4aSx1c2VDb250ZXh0OnVnLHVzZUVmZmVjdDpnaSx1c2VJbXBlcmF0aXZlSGFuZGxlOnZpLHVzZUluc2VydGlvbkVmZmVjdDpzaSx1c2VMYXlvdXRFZmZlY3Q6dGksdXNlTWVtbzp5aSx1c2VSZWR1Y2VyOmNpLHVzZVJlZjpvaSx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBjaShiaSl9LFxudXNlRGVidWdWYWx1ZTp3aSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPWFpKCk7cmV0dXJuIHppKGIsTS5tZW1vaXplZFN0YXRlLGEpfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9Y2koYmkpWzBdLGI9YWkoKS5tZW1vaXplZFN0YXRlO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOmVpLHVzZVN5bmNFeHRlcm5hbFN0b3JlOmZpLHVzZUlkOkJpLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sWGg9e3JlYWRDb250ZXh0OnVnLHVzZUNhbGxiYWNrOnhpLHVzZUNvbnRleHQ6dWcsdXNlRWZmZWN0OmdpLHVzZUltcGVyYXRpdmVIYW5kbGU6dmksdXNlSW5zZXJ0aW9uRWZmZWN0OnNpLHVzZUxheW91dEVmZmVjdDp0aSx1c2VNZW1vOnlpLHVzZVJlZHVjZXI6ZGksdXNlUmVmOm9pLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGRpKGJpKX0sdXNlRGVidWdWYWx1ZTp3aSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPWFpKCk7cmV0dXJuIG51bGw9PT1cbk0/Yi5tZW1vaXplZFN0YXRlPWE6emkoYixNLm1lbW9pemVkU3RhdGUsYSl9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1kaShiaSlbMF0sYj1haSgpLm1lbW9pemVkU3RhdGU7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6ZWksdXNlU3luY0V4dGVybmFsU3RvcmU6ZmksdXNlSWQ6QmksdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfTtmdW5jdGlvbiBIaShhLGIpe3RyeXt2YXIgYz1cIlwiLGQ9YjtkbyBjKz1PYShkKSxkPWQucmV0dXJuO3doaWxlKGQpO3ZhciBlPWN9Y2F0Y2goZil7ZT1cIlxcbkVycm9yIGdlbmVyYXRpbmcgc3RhY2s6IFwiK2YubWVzc2FnZStcIlxcblwiK2Yuc3RhY2t9cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6ZX19ZnVuY3Rpb24gSWkoYSxiKXt0cnl7Y29uc29sZS5lcnJvcihiLnZhbHVlKX1jYXRjaChjKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYzt9KX19XG52YXIgSmk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gS2koYSxiLGMpe2M9emcoLTEsYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7TGl8fChMaT0hMCxNaT1kKTtJaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIE5pKGEsYixjKXtjPXpnKC0xLGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtyZXR1cm4gZChlKX07Yy5jYWxsYmFjaz1mdW5jdGlvbigpe0lpKGEsYil9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtJaShhLGIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PU9pP09pPW5ldyBTZXQoW3RoaXNdKTpPaS5hZGQodGhpcykpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfVxuZnVuY3Rpb24gUGkoYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO2lmKG51bGw9PT1kKXtkPWEucGluZ0NhY2hlPW5ldyBKaTt2YXIgZT1uZXcgU2V0O2Quc2V0KGIsZSl9ZWxzZSBlPWQuZ2V0KGIpLHZvaWQgMD09PWUmJihlPW5ldyBTZXQsZC5zZXQoYixlKSk7ZS5oYXMoYyl8fChlLmFkZChjKSxhPVFpLmJpbmQobnVsbCxhLGIsYyksYi50aGVuKGEsYSkpfWZ1bmN0aW9uIFJpKGEpe2Rve3ZhciBiO2lmKGI9MTM9PT1hLnRhZyliPWEubWVtb2l6ZWRTdGF0ZSxiPW51bGwhPT1iP251bGwhPT1iLmRlaHlkcmF0ZWQ/ITA6ITE6ITA7aWYoYilyZXR1cm4gYTthPWEucmV0dXJufXdoaWxlKG51bGwhPT1hKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFNpKGEsYixjLGQsZSl7aWYoMD09PShhLm1vZGUmMSkpcmV0dXJuIGE9PT1iP2EuZmxhZ3N8PTY1NTM2OihhLmZsYWdzfD0xMjgsYy5mbGFnc3w9MTMxMDcyLGMuZmxhZ3MmPS01MjgwNSwxPT09Yy50YWcmJihudWxsPT09Yy5hbHRlcm5hdGU/Yy50YWc9MTc6KGI9emcoLTEsMSksYi50YWc9MixBZyhjLGIpKSksYy5sYW5lc3w9MSksYTthLmZsYWdzfD02NTUzNjthLmxhbmVzPWU7cmV0dXJuIGF9dmFyIFRpLFVpLFZpLFdpO1xuVGk9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O1VpPWZ1bmN0aW9uKCl7fTtcblZpPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWEubWVtb2l6ZWRQcm9wcztpZihlIT09ZCl7YT1iLnN0YXRlTm9kZTtFaChCaC5jdXJyZW50KTt2YXIgZj1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjplPVhhKGEsZSk7ZD1YYShhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmU9QSh7fSxlLHt2YWx1ZTp2b2lkIDB9KTtkPUEoe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjplPWZiKGEsZSk7ZD1mYihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPUFmKX10YihjLGQpO3ZhciBnO2M9bnVsbDtmb3IobCBpbiBlKWlmKCFkLmhhc093blByb3BlcnR5KGwpJiZlLmhhc093blByb3BlcnR5KGwpJiZudWxsIT1lW2xdKWlmKFwic3R5bGVcIj09PWwpe3ZhciBoPWVbbF07Zm9yKGcgaW4gaCloLmhhc093blByb3BlcnR5KGcpJiZcbihjfHwoYz17fSksY1tnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCYmXCJjaGlsZHJlblwiIT09bCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiZcImF1dG9Gb2N1c1wiIT09bCYmKGVhLmhhc093blByb3BlcnR5KGwpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChsLG51bGwpKTtmb3IobCBpbiBkKXt2YXIgaz1kW2xdO2g9bnVsbCE9ZT9lW2xdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGwpJiZrIT09aCYmKG51bGwhPWt8fG51bGwhPWgpKWlmKFwic3R5bGVcIj09PWwpaWYoaCl7Zm9yKGcgaW4gaCkhaC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGN8fChjPXt9KSxjW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmaFtnXSE9PWtbZ10mJihjfHwoYz17fSksY1tnXT1rW2ddKX1lbHNlIGN8fChmfHwoZj1bXSksZi5wdXNoKGwsXG5jKSksYz1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1sPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGg9aD9oLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmaCE9PWsmJihmPWZ8fFtdKS5wdXNoKGwsaykpOlwiY2hpbGRyZW5cIj09PWw/XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGwsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJihlYS5oYXNPd25Qcm9wZXJ0eShsKT8obnVsbCE9ayYmXCJvblNjcm9sbFwiPT09bCYmRChcInNjcm9sbFwiLGEpLGZ8fGg9PT1rfHwoZj1bXSkpOihmPWZ8fFtdKS5wdXNoKGwsaykpfWMmJihmPWZ8fFtdKS5wdXNoKFwic3R5bGVcIixjKTt2YXIgbD1mO2lmKGIudXBkYXRlUXVldWU9bCliLmZsYWdzfD00fX07V2k9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJihiLmZsYWdzfD00KX07XG5mdW5jdGlvbiBYaShhLGIpe2lmKCFJKXN3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBRKGEpe3ZhciBiPW51bGwhPT1hLmFsdGVybmF0ZSYmYS5hbHRlcm5hdGUuY2hpbGQ9PT1hLmNoaWxkLGM9MCxkPTA7aWYoYilmb3IodmFyIGU9YS5jaGlsZDtudWxsIT09ZTspY3w9ZS5sYW5lc3xlLmNoaWxkTGFuZXMsZHw9ZS5zdWJ0cmVlRmxhZ3MmMTQ2ODAwNjQsZHw9ZS5mbGFncyYxNDY4MDA2NCxlLnJldHVybj1hLGU9ZS5zaWJsaW5nO2Vsc2UgZm9yKGU9YS5jaGlsZDtudWxsIT09ZTspY3w9ZS5sYW5lc3xlLmNoaWxkTGFuZXMsZHw9ZS5zdWJ0cmVlRmxhZ3MsZHw9ZS5mbGFncyxlLnJldHVybj1hLGU9ZS5zaWJsaW5nO2Euc3VidHJlZUZsYWdzfD1kO2EuY2hpbGRMYW5lcz1jO3JldHVybiBifVxuZnVuY3Rpb24gWWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO2NoKGIpO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmNhc2UgMTY6Y2FzZSAxNTpjYXNlIDA6Y2FzZSAxMTpjYXNlIDc6Y2FzZSA4OmNhc2UgMTI6Y2FzZSA5OmNhc2UgMTQ6cmV0dXJuIFEoYiksbnVsbDtjYXNlIDE6cmV0dXJuIFlmKGIudHlwZSkmJlpmKCksUShiKSxudWxsO2Nhc2UgMzpkPWIuc3RhdGVOb2RlO0doKCk7RShWZik7RShIKTtMaCgpO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZCltaChiKT9iLmZsYWdzfD00Om51bGw9PT1hfHxhLm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkJiYwPT09KGIuZmxhZ3MmMjU2KXx8KGIuZmxhZ3N8PTEwMjQsbnVsbCE9PWZoJiYoWmkoZmgpLGZoPW51bGwpKTtVaShhLGIpO1EoYik7cmV0dXJuIG51bGw7Y2FzZSA1OkloKGIpO3ZhciBlPUVoKERoLmN1cnJlbnQpO1xuYz1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKVZpKGEsYixjLGQsZSksYS5yZWYhPT1iLnJlZiYmKGIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyKTtlbHNle2lmKCFkKXtpZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjYpKTtRKGIpO3JldHVybiBudWxsfWE9RWgoQmguY3VycmVudCk7aWYobWgoYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLnR5cGU7dmFyIGY9Yi5tZW1vaXplZFByb3BzO2RbTmZdPWI7ZFtPZl09ZjthPTAhPT0oYi5tb2RlJjEpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RChcImNhbmNlbFwiLGQpO0QoXCJjbG9zZVwiLGQpO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RChcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZT0wO2U8a2YubGVuZ3RoO2UrKylEKGtmW2VdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpEKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpEKFwiZXJyb3JcIixcbmQpO0QoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpEKFwidG9nZ2xlXCIsZCk7YnJlYWs7Y2FzZSBcImlucHV0XCI6WWEoZCxmKTtEKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZi5tdWx0aXBsZX07RChcImludmFsaWRcIixkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpnYihkLGYpLEQoXCJpbnZhbGlkXCIsZCl9dGIoYyxmKTtlPW51bGw7Zm9yKHZhciBnIGluIGYpaWYoZi5oYXNPd25Qcm9wZXJ0eShnKSl7dmFyIGg9ZltnXTtcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgaD9kLnRleHRDb250ZW50IT09aCYmKCEwIT09Zi5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcmJnpmKGQudGV4dENvbnRlbnQsaCxhKSxlPVtcImNoaWxkcmVuXCIsaF0pOlwibnVtYmVyXCI9PT10eXBlb2YgaCYmZC50ZXh0Q29udGVudCE9PVwiXCIraCYmKCEwIT09Zi5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcmJnpmKGQudGV4dENvbnRlbnQsXG5oLGEpLGU9W1wiY2hpbGRyZW5cIixcIlwiK2hdKTplYS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9aCYmXCJvblNjcm9sbFwiPT09ZyYmRChcInNjcm9sbFwiLGQpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpVYShkKTtjYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlVhKGQpO2liKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoZC5vbmNsaWNrPUFmKX1kPWU7Yi51cGRhdGVRdWV1ZT1kO251bGwhPT1kJiYoYi5mbGFnc3w9NCl9ZWxzZXtnPTk9PT1lLm5vZGVUeXBlP2U6ZS5vd25lckRvY3VtZW50O1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YSYmKGE9amIoYykpO1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9cInNjcmlwdFwiPT09Yz8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XG5cInN0cmluZ1wiPT09dHlwZW9mIGQuaXM/YT1nLmNyZWF0ZUVsZW1lbnQoYyx7aXM6ZC5pc30pOihhPWcuY3JlYXRlRWxlbWVudChjKSxcInNlbGVjdFwiPT09YyYmKGc9YSxkLm11bHRpcGxlP2cubXVsdGlwbGU9ITA6ZC5zaXplJiYoZy5zaXplPWQuc2l6ZSkpKTphPWcuY3JlYXRlRWxlbWVudE5TKGEsYyk7YVtOZl09YjthW09mXT1kO1RpKGEsYiwhMSwhMSk7Yi5zdGF0ZU5vZGU9YTthOntnPXViKGMsZCk7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpEKFwiY2FuY2VsXCIsYSk7RChcImNsb3NlXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RChcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPGtmLmxlbmd0aDtlKyspRChrZltlXSxhKTtlPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkQoXCJlcnJvclwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpEKFwiZXJyb3JcIixcbmEpO0QoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RChcInRvZ2dsZVwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW5wdXRcIjpZYShhLGQpO2U9WGEoYSxkKTtEKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWQ7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFkLm11bHRpcGxlfTtlPUEoe30sZCx7dmFsdWU6dm9pZCAwfSk7RChcImludmFsaWRcIixhKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpnYihhLGQpO2U9ZmIoYSxkKTtEKFwiaW52YWxpZFwiLGEpO2JyZWFrO2RlZmF1bHQ6ZT1kfXRiKGMsZSk7aD1lO2ZvcihmIGluIGgpaWYoaC5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGs9aFtmXTtcInN0eWxlXCI9PT1mP3JiKGEsayk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zj8oaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1rJiZtYihhLGspKTpcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2Ygaz8oXCJ0ZXh0YXJlYVwiIT09XG5jfHxcIlwiIT09aykmJm5iKGEsayk6XCJudW1iZXJcIj09PXR5cGVvZiBrJiZuYihhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWYmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1mJiZcImF1dG9Gb2N1c1wiIT09ZiYmKGVhLmhhc093blByb3BlcnR5KGYpP251bGwhPWsmJlwib25TY3JvbGxcIj09PWYmJkQoXCJzY3JvbGxcIixhKTpudWxsIT1rJiZzYShhLGYsayxnKSl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlVhKGEpO2NiKGEsZCwhMSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VWEoYSk7aWIoYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWQudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK1JhKGQudmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWQubXVsdGlwbGU7Zj1kLnZhbHVlO251bGwhPWY/ZWIoYSwhIWQubXVsdGlwbGUsZiwhMSk6bnVsbCE9ZC5kZWZhdWx0VmFsdWUmJmViKGEsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLFxuITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGUub25DbGljayYmKGEub25jbGljaz1BZil9c3dpdGNoKGMpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6ZD0hIWQuYXV0b0ZvY3VzO2JyZWFrIGE7Y2FzZSBcImltZ1wiOmQ9ITA7YnJlYWsgYTtkZWZhdWx0OmQ9ITF9fWQmJihiLmZsYWdzfD00KX1udWxsIT09Yi5yZWYmJihiLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mil9UShiKTtyZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpV2koYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTY2KSk7Yz1FaChEaC5jdXJyZW50KTtFaChCaC5jdXJyZW50KTtpZihtaChiKSl7ZD1iLnN0YXRlTm9kZTtjPWIubWVtb2l6ZWRQcm9wcztkW05mXT1iO2lmKGY9ZC5ub2RlVmFsdWUhPT1jKWlmKGE9XG5kaCxudWxsIT09YSlzd2l0Y2goYS50YWcpe2Nhc2UgMzp6ZihkLm5vZGVWYWx1ZSxjLDAhPT0oYS5tb2RlJjEpKTticmVhaztjYXNlIDU6ITAhPT1hLm1lbW9pemVkUHJvcHMuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZ6ZihkLm5vZGVWYWx1ZSxjLDAhPT0oYS5tb2RlJjEpKX1mJiYoYi5mbGFnc3w9NCl9ZWxzZSBkPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksZFtOZl09YixiLnN0YXRlTm9kZT1kfVEoYik7cmV0dXJuIG51bGw7Y2FzZSAxMzpFKEspO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKEkmJm51bGwhPT1laCYmMCE9PShiLm1vZGUmMSkmJjA9PT0oYi5mbGFncyYxMjgpKXtmb3IoZD1laDtkOylkPUtmKGQubmV4dFNpYmxpbmcpO25oKCk7Yi5mbGFnc3w9OTg1NjA7cmV0dXJuIGJ9aWYobnVsbCE9PWQmJm51bGwhPT1kLmRlaHlkcmF0ZWQpe2Q9bWgoYik7aWYobnVsbD09PWEpe2lmKCFkKXRocm93IEVycm9yKHAoMzE4KSk7ZD1cbmIubWVtb2l6ZWRTdGF0ZTtkPW51bGwhPT1kP2QuZGVoeWRyYXRlZDpudWxsO2lmKCFkKXRocm93IEVycm9yKHAoMzE3KSk7ZFtOZl09Yn1lbHNlIG5oKCksMD09PShiLmZsYWdzJjEyOCkmJihiLm1lbW9pemVkU3RhdGU9bnVsbCksYi5mbGFnc3w9NDtRKGIpO3JldHVybiBudWxsfW51bGwhPT1maCYmKFppKGZoKSxmaD1udWxsKTtpZigwIT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gYi5sYW5lcz1jLGI7ZD1udWxsIT09ZDtjPSExO251bGw9PT1hP21oKGIpOmM9bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZTtkIT09YyYmZCYmKGIuY2hpbGQuZmxhZ3N8PTgxOTIsMCE9PShiLm1vZGUmMSkmJihudWxsPT09YXx8MCE9PShLLmN1cnJlbnQmMSk/MD09PVImJihSPTMpOiRpKCkpKTtudWxsIT09Yi51cGRhdGVRdWV1ZSYmKGIuZmxhZ3N8PTQpO1EoYik7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBHaCgpLFVpKGEsYiksbnVsbD09PWEmJnJmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLFEoYiksXG5udWxsO2Nhc2UgMTA6cmV0dXJuIHFnKGIudHlwZS5fY29udGV4dCksUShiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIFlmKGIudHlwZSkmJlpmKCksUShiKSxudWxsO2Nhc2UgMTk6RShLKTtmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09ZilyZXR1cm4gUShiKSxudWxsO2Q9MCE9PShiLmZsYWdzJjEyOCk7Zz1mLnJlbmRlcmluZztpZihudWxsPT09ZylpZihkKVhpKGYsITEpO2Vsc2V7aWYoMCE9PVJ8fG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmMTI4KSlmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7Zz1KaChhKTtpZihudWxsIT09Zyl7Yi5mbGFnc3w9MTI4O1hpKGYsITEpO2Q9Zy51cGRhdGVRdWV1ZTtudWxsIT09ZCYmKGIudXBkYXRlUXVldWU9ZCxiLmZsYWdzfD00KTtiLnN1YnRyZWVGbGFncz0wO2Q9Yztmb3IoYz1iLmNoaWxkO251bGwhPT1jOylmPWMsYT1kLGYuZmxhZ3MmPTE0NjgwMDY2LGc9Zi5hbHRlcm5hdGUsbnVsbD09PWc/KGYuY2hpbGRMYW5lcz0wLGYubGFuZXM9YSxmLmNoaWxkPVxubnVsbCxmLnN1YnRyZWVGbGFncz0wLGYubWVtb2l6ZWRQcm9wcz1udWxsLGYubWVtb2l6ZWRTdGF0ZT1udWxsLGYudXBkYXRlUXVldWU9bnVsbCxmLmRlcGVuZGVuY2llcz1udWxsLGYuc3RhdGVOb2RlPW51bGwpOihmLmNoaWxkTGFuZXM9Zy5jaGlsZExhbmVzLGYubGFuZXM9Zy5sYW5lcyxmLmNoaWxkPWcuY2hpbGQsZi5zdWJ0cmVlRmxhZ3M9MCxmLmRlbGV0aW9ucz1udWxsLGYubWVtb2l6ZWRQcm9wcz1nLm1lbW9pemVkUHJvcHMsZi5tZW1vaXplZFN0YXRlPWcubWVtb2l6ZWRTdGF0ZSxmLnVwZGF0ZVF1ZXVlPWcudXBkYXRlUXVldWUsZi50eXBlPWcudHlwZSxhPWcuZGVwZW5kZW5jaWVzLGYuZGVwZW5kZW5jaWVzPW51bGw9PT1hP251bGw6e2xhbmVzOmEubGFuZXMsZmlyc3RDb250ZXh0OmEuZmlyc3RDb250ZXh0fSksYz1jLnNpYmxpbmc7RyhLLEsuY3VycmVudCYxfDIpO3JldHVybiBiLmNoaWxkfWE9YS5zaWJsaW5nfW51bGwhPT1mLnRhaWwmJkIoKT5haiYmKGIuZmxhZ3N8PVxuMTI4LGQ9ITAsWGkoZiwhMSksYi5sYW5lcz00MTk0MzA0KX1lbHNle2lmKCFkKWlmKGE9SmgoZyksbnVsbCE9PWEpe2lmKGIuZmxhZ3N8PTEyOCxkPSEwLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGIudXBkYXRlUXVldWU9YyxiLmZsYWdzfD00KSxYaShmLCEwKSxudWxsPT09Zi50YWlsJiZcImhpZGRlblwiPT09Zi50YWlsTW9kZSYmIWcuYWx0ZXJuYXRlJiYhSSlyZXR1cm4gUShiKSxudWxsfWVsc2UgMipCKCktZi5yZW5kZXJpbmdTdGFydFRpbWU+YWomJjEwNzM3NDE4MjQhPT1jJiYoYi5mbGFnc3w9MTI4LGQ9ITAsWGkoZiwhMSksYi5sYW5lcz00MTk0MzA0KTtmLmlzQmFja3dhcmRzPyhnLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWcpOihjPWYubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZzpiLmNoaWxkPWcsZi5sYXN0PWcpfWlmKG51bGwhPT1mLnRhaWwpcmV0dXJuIGI9Zi50YWlsLGYucmVuZGVyaW5nPWIsZi50YWlsPWIuc2libGluZyxmLnJlbmRlcmluZ1N0YXJ0VGltZT1cbkIoKSxiLnNpYmxpbmc9bnVsbCxjPUsuY3VycmVudCxHKEssZD9jJjF8MjpjJjEpLGI7UShiKTtyZXR1cm4gbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIGJqKCksZD1udWxsIT09Yi5tZW1vaXplZFN0YXRlLG51bGwhPT1hJiZudWxsIT09YS5tZW1vaXplZFN0YXRlIT09ZCYmKGIuZmxhZ3N8PTgxOTIpLGQmJjAhPT0oYi5tb2RlJjEpPzAhPT0oY2omMTA3Mzc0MTgyNCkmJihRKGIpLGIuc3VidHJlZUZsYWdzJjYmJihiLmZsYWdzfD04MTkyKSk6UShiKSxudWxsO2Nhc2UgMjQ6cmV0dXJuIG51bGw7Y2FzZSAyNTpyZXR1cm4gbnVsbH10aHJvdyBFcnJvcihwKDE1NixiLnRhZykpO312YXIgZGo9dGEuUmVhY3RDdXJyZW50T3duZXIsdGc9ITE7ZnVuY3Rpb24gZWooYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT96aChiLG51bGwsYyxkKTp5aChiLGEuY2hpbGQsYyxkKX1cbmZ1bmN0aW9uIGZqKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjtzZyhiLGUpO2Q9VWgoYSxiLGMsZCxmLGUpO2M9WmgoKTtpZihudWxsIT09YSYmIXRnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTIwNTMsYS5sYW5lcyY9fmUsZ2ooYSxiLGUpO0kmJmMmJmJoKGIpO2IuZmxhZ3N8PTE7ZWooYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBoaihhLGIsYyxkLGUpe2lmKG51bGw9PT1hKXt2YXIgZj1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJiFpaihmKSYmdm9pZCAwPT09Zi5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZixqaihhLGIsZixkLGUpO2E9dmgoYy50eXBlLG51bGwsZCxiLGIubW9kZSxlKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zj1hLmNoaWxkO2lmKDA9PT0oYS5sYW5lcyZlKSl7dmFyIGc9Zi5tZW1vaXplZFByb3BzO2M9Yy5jb21wYXJlO2M9bnVsbCE9PWM/YzpIZTtpZihjKGcsZCkmJmEucmVmPT09Yi5yZWYpcmV0dXJuIGdqKGEsYixlKX1iLmZsYWdzfD0xO2E9dGgoZixkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBqaihhLGIsYyxkLGUpe2lmKG51bGwhPT1hKXt2YXIgZj1hLm1lbW9pemVkUHJvcHM7aWYoSGUoZixkKSYmYS5yZWY9PT1iLnJlZilpZih0Zz0hMSxiLnBlbmRpbmdQcm9wcz1kPWYsMCE9PShhLmxhbmVzJmUpKTAhPT0oYS5mbGFncyYxMzEwNzIpJiYodGc9ITApO2Vsc2UgcmV0dXJuIGIubGFuZXM9YS5sYW5lcyxnaihhLGIsZSl9cmV0dXJuIGtqKGEsYixjLGQsZSl9XG5mdW5jdGlvbiBsaihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLmNoaWxkcmVuLGY9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7aWYoXCJoaWRkZW5cIj09PWQubW9kZSlpZigwPT09KGIubW9kZSYxKSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9LEcobWosY2opLGNqfD1jO2Vsc2UgaWYoMCE9PShjJjEwNzM3NDE4MjQpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjAsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH0sZD1udWxsIT09Zj9mLmJhc2VMYW5lczpjLEcobWosY2opLGNqfD1kO2Vsc2UgcmV0dXJuIGE9bnVsbCE9PWY/Zi5iYXNlTGFuZXN8YzpjLGIubGFuZXM9Yi5jaGlsZExhbmVzPTEwNzM3NDE4MjQsYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6YSxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfSxiLnVwZGF0ZVF1ZXVlPW51bGwsRyhtaixjaiksY2p8PWEsbnVsbDtcbmVsc2UgbnVsbCE9PWY/KGQ9Zi5iYXNlTGFuZXN8YyxiLm1lbW9pemVkU3RhdGU9bnVsbCk6ZD1jLEcobWosY2opLGNqfD1kO2VqKGEsYixlLGMpO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIG5qKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyfWZ1bmN0aW9uIGtqKGEsYixjLGQsZSl7dmFyIGY9WWYoYyk/V2Y6SC5jdXJyZW50O2Y9WGYoYixmKTtzZyhiLGUpO2M9VWgoYSxiLGMsZCxmLGUpO2Q9WmgoKTtpZihudWxsIT09YSYmIXRnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTIwNTMsYS5sYW5lcyY9fmUsZ2ooYSxiLGUpO0kmJmQmJmJoKGIpO2IuZmxhZ3N8PTE7ZWooYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBvaihhLGIsYyxkLGUpe2lmKFlmKGMpKXt2YXIgZj0hMDtiZyhiKX1lbHNlIGY9ITE7c2coYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9MiksT2coYixjLGQpLFFnKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPXVnKGwpOihsPVlmKGMpP1dmOkguY3VycmVudCxsPVhmKGIsbCkpO3ZhciBuPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHU9XCJmdW5jdGlvblwiPT09dHlwZW9mIG58fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3V8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZQZyhiLGcsZCxsKTt3Zz0hMTt2YXIgcT1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1xO0VnKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHxxIT09a3x8VmYuY3VycmVudHx8d2c/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuJiYoSWcoYixjLG4sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPXdnfHxOZyhiLGMsaCxkLHEsayxsKSk/KHV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09XG50eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9ayksZy5wcm9wcz1kLGcuc3RhdGU9ayxnLmNvbnRleHQ9bCxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpLGQ9ITEpfWVsc2V7Zz1iLnN0YXRlTm9kZTt5ZyhhLGIpO2g9Yi5tZW1vaXplZFByb3BzO2w9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOmtnKGIudHlwZSxoKTtnLnByb3BzPWw7dT1iLnBlbmRpbmdQcm9wcztxPWcuY29udGV4dDtrPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09az9rPXVnKGspOihrPVlmKGMpP1dmOkguY3VycmVudCxrPVhmKGIsaykpO3ZhciB5PWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOyhuPVwiZnVuY3Rpb25cIj09PVxudHlwZW9mIHl8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09dXx8cSE9PWspJiZQZyhiLGcsZCxrKTt3Zz0hMTtxPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXE7RWcoYixkLGcsZSk7dmFyIG09Yi5tZW1vaXplZFN0YXRlO2ghPT11fHxxIT09bXx8VmYuY3VycmVudHx8d2c/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiB5JiYoSWcoYixjLHksZCksbT1iLm1lbW9pemVkU3RhdGUpLChsPXdnfHxOZyhiLGMsbCxkLHEsbSxrKXx8ITEpPyhufHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJlxuZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsbSxrKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLG0saykpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5mbGFnc3w9MTAyNCkpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnE9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTEwMjQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1tKSxnLnByb3BzPWQsZy5zdGF0ZT1tLGcuY29udGV4dD1cbmssZD1sKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZxPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnE9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0xMDI0KSxkPSExKX1yZXR1cm4gcGooYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gcGooYSxiLGMsZCxlLGYpe25qKGEsYik7dmFyIGc9MCE9PShiLmZsYWdzJjEyOCk7aWYoIWQmJiFnKXJldHVybiBlJiZjZyhiLGMsITEpLGdqKGEsYixmKTtkPWIuc3RhdGVOb2RlO2RqLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZmxhZ3N8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9eWgoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD15aChiLG51bGwsaCxmKSk6ZWooYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmY2coYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBxaihhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0PyRmKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJiRmKGEsYi5jb250ZXh0LCExKTtGaChhLGIuY29udGFpbmVySW5mbyl9XG5mdW5jdGlvbiByaihhLGIsYyxkLGUpe25oKCk7b2goZSk7Yi5mbGFnc3w9MjU2O2VqKGEsYixjLGQpO3JldHVybiBiLmNoaWxkfXZhciBzaj17ZGVoeWRyYXRlZDpudWxsLHRyZWVDb250ZXh0Om51bGwscmV0cnlMYW5lOjB9O2Z1bmN0aW9uIHRqKGEpe3JldHVybntiYXNlTGFuZXM6YSxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfX1mdW5jdGlvbiB1aihhLGIpe3JldHVybntiYXNlTGFuZXM6YS5iYXNlTGFuZXN8YixjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczphLnRyYW5zaXRpb25zfX1cbmZ1bmN0aW9uIHZqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPUsuY3VycmVudCxmPSExLGc9MCE9PShiLmZsYWdzJjEyOCksaDsoaD1nKXx8KGg9bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGU/ITE6MCE9PShlJjIpKTtpZihoKWY9ITAsYi5mbGFncyY9LTEyOTtlbHNlIGlmKG51bGw9PT1hfHxudWxsIT09YS5tZW1vaXplZFN0YXRlKWV8PTE7RyhLLGUmMSk7aWYobnVsbD09PWEpe2toKGIpO2E9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiYoYT1hLmRlaHlkcmF0ZWQsbnVsbCE9PWEpKXJldHVybiAwPT09KGIubW9kZSYxKT9iLmxhbmVzPTE6XCIkIVwiPT09YS5kYXRhP2IubGFuZXM9ODpiLmxhbmVzPTEwNzM3NDE4MjQsbnVsbDtlPWQuY2hpbGRyZW47YT1kLmZhbGxiYWNrO3JldHVybiBmPyhkPWIubW9kZSxmPWIuY2hpbGQsZT17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmV9LDA9PT0oZCYxKSYmbnVsbCE9PWY/KGYuY2hpbGRMYW5lcz0wLGYucGVuZGluZ1Byb3BzPVxuZSk6Zj13aihlLGQsMCxudWxsKSxhPXhoKGEsZCxjLG51bGwpLGYucmV0dXJuPWIsYS5yZXR1cm49YixmLnNpYmxpbmc9YSxiLmNoaWxkPWYsYi5jaGlsZC5tZW1vaXplZFN0YXRlPXRqKGMpLGIubWVtb2l6ZWRTdGF0ZT1zaixhKTp4aihiLGUpfWU9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtoPWUuZGVoeWRyYXRlZDtpZihudWxsIT09aCl7aWYoZyl7aWYoYi5mbGFncyYyNTYpcmV0dXJuIGIuZmxhZ3MmPS0yNTcseWooYSxiLGMsRXJyb3IocCg0MjIpKSk7aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSlyZXR1cm4gYi5jaGlsZD1hLmNoaWxkLGIuZmxhZ3N8PTEyOCxudWxsO2Y9ZC5mYWxsYmFjaztlPWIubW9kZTtkPXdqKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmQuY2hpbGRyZW59LGUsMCxudWxsKTtmPXhoKGYsZSxjLG51bGwpO2YuZmxhZ3N8PTI7ZC5yZXR1cm49YjtmLnJldHVybj1iO2Quc2libGluZz1mO2IuY2hpbGQ9ZDswIT09KGIubW9kZSYxKSYmeWgoYixhLmNoaWxkLFxubnVsbCxjKTtiLmNoaWxkLm1lbW9pemVkU3RhdGU9dGooYyk7Yi5tZW1vaXplZFN0YXRlPXNqO3JldHVybiBmfWlmKDA9PT0oYi5tb2RlJjEpKWI9eWooYSxiLGMsbnVsbCk7ZWxzZSBpZihcIiQhXCI9PT1oLmRhdGEpYj15aihhLGIsYyxFcnJvcihwKDQxOSkpKTtlbHNlIGlmKGQ9MCE9PShjJmEuY2hpbGRMYW5lcyksdGd8fGQpe2Q9UDtpZihudWxsIT09ZCl7c3dpdGNoKGMmLWMpe2Nhc2UgNDpmPTI7YnJlYWs7Y2FzZSAxNjpmPTg7YnJlYWs7Y2FzZSA2NDpjYXNlIDEyODpjYXNlIDI1NjpjYXNlIDUxMjpjYXNlIDEwMjQ6Y2FzZSAyMDQ4OmNhc2UgNDA5NjpjYXNlIDgxOTI6Y2FzZSAxNjM4NDpjYXNlIDMyNzY4OmNhc2UgNjU1MzY6Y2FzZSAxMzEwNzI6Y2FzZSAyNjIxNDQ6Y2FzZSA1MjQyODg6Y2FzZSAxMDQ4NTc2OmNhc2UgMjA5NzE1MjpjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OmY9MzI7YnJlYWs7Y2FzZSA1MzY4NzA5MTI6Zj1cbjI2ODQzNTQ1NjticmVhaztkZWZhdWx0OmY9MH1kPTAhPT0oZiYoZC5zdXNwZW5kZWRMYW5lc3xjKSk/MDpmOzAhPT1kJiZkIT09ZS5yZXRyeUxhbmUmJihlLnJldHJ5TGFuZT1kLExnKGEsZCwtMSkpfSRpKCk7Yj15aihhLGIsYyxFcnJvcihwKDQyMSkpKX1lbHNlXCIkP1wiPT09aC5kYXRhPyhiLmZsYWdzfD0xMjgsYi5jaGlsZD1hLmNoaWxkLGI9emouYmluZChudWxsLGEpLGguX3JlYWN0UmV0cnk9YixiPW51bGwpOihjPWUudHJlZUNvbnRleHQsZWg9S2YoaC5uZXh0U2libGluZyksZGg9YixJPSEwLGZoPW51bGwsbnVsbCE9PWMmJihWZ1tXZysrXT1ZZyxWZ1tXZysrXT1aZyxWZ1tXZysrXT1YZyxZZz1jLmlkLFpnPWMub3ZlcmZsb3csWGc9YiksYj14aihiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuKSxiLmZsYWdzfD00MDk2KTtyZXR1cm4gYn1pZihmKXJldHVybiBkPUFqKGEsYixkLmNoaWxkcmVuLGQuZmFsbGJhY2ssYyksZj1iLmNoaWxkLGU9YS5jaGlsZC5tZW1vaXplZFN0YXRlLFxuZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP3RqKGMpOnVqKGUsYyksZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9c2osZDtjPUJqKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWlmKGYpcmV0dXJuIGQ9QWooYSxiLGQuY2hpbGRyZW4sZC5mYWxsYmFjayxjKSxmPWIuY2hpbGQsZT1hLmNoaWxkLm1lbW9pemVkU3RhdGUsZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP3RqKGMpOnVqKGUsYyksZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9c2osZDtjPUJqKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWZ1bmN0aW9uIHhqKGEsYil7Yj13aih7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpifSxhLm1vZGUsMCxudWxsKTtiLnJldHVybj1hO3JldHVybiBhLmNoaWxkPWJ9XG5mdW5jdGlvbiBCaihhLGIsYyxkKXt2YXIgZT1hLmNoaWxkO2E9ZS5zaWJsaW5nO2M9dGgoZSx7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpjfSk7MD09PShiLm1vZGUmMSkmJihjLmxhbmVzPWQpO2MucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGw7bnVsbCE9PWEmJihkPWIuZGVsZXRpb25zLG51bGw9PT1kPyhiLmRlbGV0aW9ucz1bYV0sYi5mbGFnc3w9MTYpOmQucHVzaChhKSk7cmV0dXJuIGIuY2hpbGQ9Y31cbmZ1bmN0aW9uIEFqKGEsYixjLGQsZSl7dmFyIGY9Yi5tb2RlO2E9YS5jaGlsZDt2YXIgZz1hLnNpYmxpbmcsaD17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmN9OzA9PT0oZiYxKSYmYi5jaGlsZCE9PWE/KGM9Yi5jaGlsZCxjLmNoaWxkTGFuZXM9MCxjLnBlbmRpbmdQcm9wcz1oLGIuZGVsZXRpb25zPW51bGwpOihjPXRoKGEsaCksYy5zdWJ0cmVlRmxhZ3M9YS5zdWJ0cmVlRmxhZ3MmMTQ2ODAwNjQpO251bGwhPT1nP2Q9dGgoZyxkKTooZD14aChkLGYsZSxudWxsKSxkLmZsYWdzfD0yKTtkLnJldHVybj1iO2MucmV0dXJuPWI7Yy5zaWJsaW5nPWQ7Yi5jaGlsZD1jO3JldHVybiBkfWZ1bmN0aW9uIHlqKGEsYixjLGQpe251bGwhPT1kJiZvaChkKTt5aChiLGEuY2hpbGQsbnVsbCxjKTthPXhqKGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4pO2EuZmxhZ3N8PTI7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGF9XG5mdW5jdGlvbiBDaihhLGIsYyl7YS5sYW5lc3w9Yjt2YXIgZD1hLmFsdGVybmF0ZTtudWxsIT09ZCYmKGQubGFuZXN8PWIpO3JnKGEucmV0dXJuLGIsYyl9ZnVuY3Rpb24gRGooYSxiLGMsZCxlKXt2YXIgZj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWY/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLHJlbmRlcmluZ1N0YXJ0VGltZTowLGxhc3Q6ZCx0YWlsOmMsdGFpbE1vZGU6ZX06KGYuaXNCYWNrd2FyZHM9YixmLnJlbmRlcmluZz1udWxsLGYucmVuZGVyaW5nU3RhcnRUaW1lPTAsZi5sYXN0PWQsZi50YWlsPWMsZi50YWlsTW9kZT1lKX1cbmZ1bmN0aW9uIEVqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQucmV2ZWFsT3JkZXIsZj1kLnRhaWw7ZWooYSxiLGQuY2hpbGRyZW4sYyk7ZD1LLmN1cnJlbnQ7aWYoMCE9PShkJjIpKWQ9ZCYxfDIsYi5mbGFnc3w9MTI4O2Vsc2V7aWYobnVsbCE9PWEmJjAhPT0oYS5mbGFncyYxMjgpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmQ2ooYSxjLGIpO2Vsc2UgaWYoMTk9PT1hLnRhZylDaihhLGMsYik7ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWIpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YilicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31kJj0xfUcoSyxkKTtpZigwPT09KGIubW9kZSYxKSliLm1lbW9pemVkU3RhdGU9XG5udWxsO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJmb3J3YXJkc1wiOmM9Yi5jaGlsZDtmb3IoZT1udWxsO251bGwhPT1jOylhPWMuYWx0ZXJuYXRlLG51bGwhPT1hJiZudWxsPT09SmgoYSkmJihlPWMpLGM9Yy5zaWJsaW5nO2M9ZTtudWxsPT09Yz8oZT1iLmNoaWxkLGIuY2hpbGQ9bnVsbCk6KGU9Yy5zaWJsaW5nLGMuc2libGluZz1udWxsKTtEaihiLCExLGUsYyxmKTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PUpoKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX1EaihiLCEwLGMsbnVsbCxmKTticmVhaztjYXNlIFwidG9nZXRoZXJcIjpEaihiLCExLG51bGwsbnVsbCx2b2lkIDApO2JyZWFrO2RlZmF1bHQ6Yi5tZW1vaXplZFN0YXRlPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBnaihhLGIsYyl7bnVsbCE9PWEmJihiLmRlcGVuZGVuY2llcz1hLmRlcGVuZGVuY2llcyk7Rmd8PWIubGFuZXM7aWYoMD09PShjJmIuY2hpbGRMYW5lcykpcmV0dXJuIG51bGw7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHAoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPXRoKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz10aChhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gRmooYSxiLGMpe3N3aXRjaChiLnRhZyl7Y2FzZSAzOnFqKGIpO25oKCk7YnJlYWs7Y2FzZSA1OkhoKGIpO2JyZWFrO2Nhc2UgMTpZZihiLnR5cGUpJiZiZyhiKTticmVhaztjYXNlIDQ6RmgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOnZhciBkPWIudHlwZS5fY29udGV4dCxlPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTtHKGxnLGQuX2N1cnJlbnRWYWx1ZSk7ZC5fY3VycmVudFZhbHVlPWU7YnJlYWs7Y2FzZSAxMzpkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCl7aWYobnVsbCE9PWQuZGVoeWRyYXRlZClyZXR1cm4gRyhLLEsuY3VycmVudCYxKSxiLmZsYWdzfD0xMjgsbnVsbDtpZigwIT09KGMmYi5jaGlsZC5jaGlsZExhbmVzKSlyZXR1cm4gdmooYSxiLGMpO0coSyxLLmN1cnJlbnQmMSk7YT1naihhLGIsYyk7cmV0dXJuIG51bGwhPT1hP2Euc2libGluZzpudWxsfUcoSyxLLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPTAhPT0oYyZcbmIuY2hpbGRMYW5lcyk7aWYoMCE9PShhLmZsYWdzJjEyOCkpe2lmKGQpcmV0dXJuIEVqKGEsYixjKTtiLmZsYWdzfD0xMjh9ZT1iLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihlLnJlbmRlcmluZz1udWxsLGUudGFpbD1udWxsLGUubGFzdEVmZmVjdD1udWxsKTtHKEssSy5jdXJyZW50KTtpZihkKWJyZWFrO2Vsc2UgcmV0dXJuIG51bGw7Y2FzZSAyMjpjYXNlIDIzOnJldHVybiBiLmxhbmVzPTAsbGooYSxiLGMpfXJldHVybiBnaihhLGIsYyl9XG5mdW5jdGlvbiBHaihhLGIpe2NoKGIpO3N3aXRjaChiLnRhZyl7Y2FzZSAxOnJldHVybiBZZihiLnR5cGUpJiZaZigpLGE9Yi5mbGFncyxhJjY1NTM2PyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgMzpyZXR1cm4gR2goKSxFKFZmKSxFKEgpLExoKCksYT1iLmZsYWdzLDAhPT0oYSY2NTUzNikmJjA9PT0oYSYxMjgpPyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgNTpyZXR1cm4gSWgoYiksbnVsbDtjYXNlIDEzOkUoSyk7YT1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe2lmKG51bGw9PT1iLmFsdGVybmF0ZSl0aHJvdyBFcnJvcihwKDM0MCkpO25oKCl9YT1iLmZsYWdzO3JldHVybiBhJjY1NTM2PyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgMTk6cmV0dXJuIEUoSyksbnVsbDtjYXNlIDQ6cmV0dXJuIEdoKCksbnVsbDtjYXNlIDEwOnJldHVybiBxZyhiLnR5cGUuX2NvbnRleHQpLG51bGw7Y2FzZSAyMjpjYXNlIDIzOnJldHVybiBiaigpLFxubnVsbDtjYXNlIDI0OnJldHVybiBudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fXZhciBIaj0hMSxTPSExLElqPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrU2V0P1dlYWtTZXQ6U2V0LFQ9bnVsbDtmdW5jdGlvbiBKaihhLGIpe3ZhciBjPWEucmVmO2lmKG51bGwhPT1jKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjKXRyeXtjKG51bGwpfWNhdGNoKGQpe1UoYSxiLGQpfWVsc2UgYy5jdXJyZW50PW51bGx9ZnVuY3Rpb24gS2ooYSxiLGMpe3RyeXtjKCl9Y2F0Y2goZCl7VShhLGIsZCl9fXZhciBMaj0hMTtcbmZ1bmN0aW9uIE1qKGEsYil7QmY9Y2Q7YT1MZSgpO2lmKE1lKGEpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBhKXZhciBjPXtzdGFydDphLnNlbGVjdGlvblN0YXJ0LGVuZDphLnNlbGVjdGlvbkVuZH07ZWxzZSBhOntjPShjPWEub3duZXJEb2N1bWVudCkmJmMuZGVmYXVsdFZpZXd8fHdpbmRvdzt2YXIgZD1jLmdldFNlbGVjdGlvbiYmYy5nZXRTZWxlY3Rpb24oKTtpZihkJiYwIT09ZC5yYW5nZUNvdW50KXtjPWQuYW5jaG9yTm9kZTt2YXIgZT1kLmFuY2hvck9mZnNldCxmPWQuZm9jdXNOb2RlO2Q9ZC5mb2N1c09mZnNldDt0cnl7Yy5ub2RlVHlwZSxmLm5vZGVUeXBlfWNhdGNoKFope2M9bnVsbDticmVhayBhfXZhciBnPTAsaD0tMSxrPS0xLGw9MCxuPTAsdT1hLHE9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB5Ozspe3UhPT1jfHwwIT09ZSYmMyE9PXUubm9kZVR5cGV8fChoPWcrZSk7dSE9PWZ8fDAhPT1kJiYzIT09dS5ub2RlVHlwZXx8KGs9ZytkKTszPT09dS5ub2RlVHlwZSYmKGcrPVxudS5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KHk9dS5maXJzdENoaWxkKSlicmVhaztxPXU7dT15fWZvcig7Oyl7aWYodT09PWEpYnJlYWsgYjtxPT09YyYmKytsPT09ZSYmKGg9Zyk7cT09PWYmJisrbj09PWQmJihrPWcpO2lmKG51bGwhPT0oeT11Lm5leHRTaWJsaW5nKSlicmVhazt1PXE7cT11LnBhcmVudE5vZGV9dT15fWM9LTE9PT1ofHwtMT09PWs/bnVsbDp7c3RhcnQ6aCxlbmQ6a319ZWxzZSBjPW51bGx9Yz1jfHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBjPW51bGw7Q2Y9e2ZvY3VzZWRFbGVtOmEsc2VsZWN0aW9uUmFuZ2U6Y307Y2Q9ITE7Zm9yKFQ9YjtudWxsIT09VDspaWYoYj1ULGE9Yi5jaGlsZCwwIT09KGIuc3VidHJlZUZsYWdzJjEwMjgpJiZudWxsIT09YSlhLnJldHVybj1iLFQ9YTtlbHNlIGZvcig7bnVsbCE9PVQ7KXtiPVQ7dHJ5e3ZhciBtPWIuYWx0ZXJuYXRlO2lmKDAhPT0oYi5mbGFncyYxMDI0KSlzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6YnJlYWs7XG5jYXNlIDE6aWYobnVsbCE9PW0pe3ZhciB3PW0ubWVtb2l6ZWRQcm9wcyxKPW0ubWVtb2l6ZWRTdGF0ZSx2PWIuc3RhdGVOb2RlLHg9di5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP3c6a2coYi50eXBlLHcpLEopO3YuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9eH1icmVhaztjYXNlIDM6dmFyIHI9Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZigxPT09ci5ub2RlVHlwZSlyLnRleHRDb250ZW50PVwiXCI7ZWxzZSBpZig5PT09ci5ub2RlVHlwZSl7dmFyIEY9ci5ib2R5O251bGwhPUYmJihGLnRleHRDb250ZW50PVwiXCIpfWJyZWFrO2Nhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MykpO319Y2F0Y2goWil7VShiLGIucmV0dXJuLFopfWE9Yi5zaWJsaW5nO2lmKG51bGwhPT1hKXthLnJldHVybj1iLnJldHVybjtUPWE7YnJlYWt9VD1iLnJldHVybn1tPUxqO0xqPSExO3JldHVybiBtfVxuZnVuY3Rpb24gTmooYSxiLGMpe3ZhciBkPWIudXBkYXRlUXVldWU7ZD1udWxsIT09ZD9kLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09ZCl7dmFyIGU9ZD1kLm5leHQ7ZG97aWYoKGUudGFnJmEpPT09YSl7dmFyIGY9ZS5kZXN0cm95O2UuZGVzdHJveT12b2lkIDA7dm9pZCAwIT09ZiYmS2ooYixjLGYpfWU9ZS5uZXh0fXdoaWxlKGUhPT1kKX19ZnVuY3Rpb24gT2ooYSxiKXtiPWIudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7dmFyIGM9Yj1iLm5leHQ7ZG97aWYoKGMudGFnJmEpPT09YSl7dmFyIGQ9Yy5jcmVhdGU7Yy5kZXN0cm95PWQoKX1jPWMubmV4dH13aGlsZShjIT09Yil9fWZ1bmN0aW9uIFBqKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKXt2YXIgYz1hLnN0YXRlTm9kZTtzd2l0Y2goYS50YWcpe2Nhc2UgNTphPWM7YnJlYWs7ZGVmYXVsdDphPWN9XCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpiLmN1cnJlbnQ9YX19XG5mdW5jdGlvbiBRaihhKXt2YXIgYj1hLmFsdGVybmF0ZTtudWxsIT09YiYmKGEuYWx0ZXJuYXRlPW51bGwsUWooYikpO2EuY2hpbGQ9bnVsbDthLmRlbGV0aW9ucz1udWxsO2Euc2libGluZz1udWxsOzU9PT1hLnRhZyYmKGI9YS5zdGF0ZU5vZGUsbnVsbCE9PWImJihkZWxldGUgYltOZl0sZGVsZXRlIGJbT2ZdLGRlbGV0ZSBiW25mXSxkZWxldGUgYltQZl0sZGVsZXRlIGJbUWZdKSk7YS5zdGF0ZU5vZGU9bnVsbDthLnJldHVybj1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5tZW1vaXplZFByb3BzPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLnN0YXRlTm9kZT1udWxsO2EudXBkYXRlUXVldWU9bnVsbH1mdW5jdGlvbiBSaihhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIFNqKGEpe2E6Zm9yKDs7KXtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fFJqKGEucmV0dXJuKSlyZXR1cm4gbnVsbDthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47Zm9yKGE9YS5zaWJsaW5nOzUhPT1hLnRhZyYmNiE9PWEudGFnJiYxOCE9PWEudGFnOyl7aWYoYS5mbGFncyYyKWNvbnRpbnVlIGE7aWYobnVsbD09PWEuY2hpbGR8fDQ9PT1hLnRhZyljb250aW51ZSBhO2Vsc2UgYS5jaGlsZC5yZXR1cm49YSxhPWEuY2hpbGR9aWYoIShhLmZsYWdzJjIpKXJldHVybiBhLnN0YXRlTm9kZX19XG5mdW5jdGlvbiBUaihhLGIsYyl7dmFyIGQ9YS50YWc7aWYoNT09PWR8fDY9PT1kKWE9YS5zdGF0ZU5vZGUsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9QWYpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoVGooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylUaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBVaihhLGIsYyl7dmFyIGQ9YS50YWc7aWYoNT09PWR8fDY9PT1kKWE9YS5zdGF0ZU5vZGUsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFVqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspVWooYSxiLGMpLGE9YS5zaWJsaW5nfXZhciBWPW51bGwsVmo9ITE7ZnVuY3Rpb24gV2ooYSxiLGMpe2ZvcihjPWMuY2hpbGQ7bnVsbCE9PWM7KVhqKGEsYixjKSxjPWMuc2libGluZ31cbmZ1bmN0aW9uIFhqKGEsYixjKXtpZihrYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGtjLm9uQ29tbWl0RmliZXJVbm1vdW50KXRyeXtrYy5vbkNvbW1pdEZpYmVyVW5tb3VudChqYyxjKX1jYXRjaChoKXt9c3dpdGNoKGMudGFnKXtjYXNlIDU6U3x8SmooYyxiKTtjYXNlIDY6dmFyIGQ9VixlPVZqO1Y9bnVsbDtXaihhLGIsYyk7Vj1kO1ZqPWU7bnVsbCE9PVYmJihWaj8oYT1WLGM9Yy5zdGF0ZU5vZGUsOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGMpOmEucmVtb3ZlQ2hpbGQoYykpOlYucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpKTticmVhaztjYXNlIDE4Om51bGwhPT1WJiYoVmo/KGE9VixjPWMuc3RhdGVOb2RlLDg9PT1hLm5vZGVUeXBlP0pmKGEucGFyZW50Tm9kZSxjKToxPT09YS5ub2RlVHlwZSYmSmYoYSxjKSxhZChhKSk6SmYoVixjLnN0YXRlTm9kZSkpO2JyZWFrO2Nhc2UgNDpkPVY7ZT1WajtWPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87Vmo9ITA7XG5XaihhLGIsYyk7Vj1kO1ZqPWU7YnJlYWs7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmlmKCFTJiYoZD1jLnVwZGF0ZVF1ZXVlLG51bGwhPT1kJiYoZD1kLmxhc3RFZmZlY3QsbnVsbCE9PWQpKSl7ZT1kPWQubmV4dDtkb3t2YXIgZj1lLGc9Zi5kZXN0cm95O2Y9Zi50YWc7dm9pZCAwIT09ZyYmKDAhPT0oZiYyKT9LaihjLGIsZyk6MCE9PShmJjQpJiZLaihjLGIsZykpO2U9ZS5uZXh0fXdoaWxlKGUhPT1kKX1XaihhLGIsYyk7YnJlYWs7Y2FzZSAxOmlmKCFTJiYoSmooYyxiKSxkPWMuc3RhdGVOb2RlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxVbm1vdW50KSl0cnl7ZC5wcm9wcz1jLm1lbW9pemVkUHJvcHMsZC5zdGF0ZT1jLm1lbW9pemVkU3RhdGUsZC5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGgpe1UoYyxiLGgpfVdqKGEsYixjKTticmVhaztjYXNlIDIxOldqKGEsYixjKTticmVhaztjYXNlIDIyOmMubW9kZSYxPyhTPShkPVMpfHxudWxsIT09XG5jLm1lbW9pemVkU3RhdGUsV2ooYSxiLGMpLFM9ZCk6V2ooYSxiLGMpO2JyZWFrO2RlZmF1bHQ6V2ooYSxiLGMpfX1mdW5jdGlvbiBZaihhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBJaik7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPVpqLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxuZnVuY3Rpb24gYWsoYSxiKXt2YXIgYz1iLmRlbGV0aW9ucztpZihudWxsIT09Yylmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXTt0cnl7dmFyIGY9YSxnPWIsaD1nO2E6Zm9yKDtudWxsIT09aDspe3N3aXRjaChoLnRhZyl7Y2FzZSA1OlY9aC5zdGF0ZU5vZGU7Vmo9ITE7YnJlYWsgYTtjYXNlIDM6Vj1oLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1ZqPSEwO2JyZWFrIGE7Y2FzZSA0OlY9aC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztWaj0hMDticmVhayBhfWg9aC5yZXR1cm59aWYobnVsbD09PVYpdGhyb3cgRXJyb3IocCgxNjApKTtYaihmLGcsZSk7Vj1udWxsO1ZqPSExO3ZhciBrPWUuYWx0ZXJuYXRlO251bGwhPT1rJiYoay5yZXR1cm49bnVsbCk7ZS5yZXR1cm49bnVsbH1jYXRjaChsKXtVKGUsYixsKX19aWYoYi5zdWJ0cmVlRmxhZ3MmMTI4NTQpZm9yKGI9Yi5jaGlsZDtudWxsIT09YjspYmsoYixhKSxiPWIuc2libGluZ31cbmZ1bmN0aW9uIGJrKGEsYil7dmFyIGM9YS5hbHRlcm5hdGUsZD1hLmZsYWdzO3N3aXRjaChhLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmFrKGIsYSk7Y2soYSk7aWYoZCY0KXt0cnl7TmooMyxhLGEucmV0dXJuKSxPaigzLGEpfWNhdGNoKG0pe1UoYSxhLnJldHVybixtKX10cnl7TmooNSxhLGEucmV0dXJuKX1jYXRjaChtKXtVKGEsYS5yZXR1cm4sbSl9fWJyZWFrO2Nhc2UgMTphayhiLGEpO2NrKGEpO2QmNTEyJiZudWxsIT09YyYmSmooYyxjLnJldHVybik7YnJlYWs7Y2FzZSA1OmFrKGIsYSk7Y2soYSk7ZCY1MTImJm51bGwhPT1jJiZKaihjLGMucmV0dXJuKTtpZihhLmZsYWdzJjMyKXt2YXIgZT1hLnN0YXRlTm9kZTt0cnl7bmIoZSxcIlwiKX1jYXRjaChtKXtVKGEsYS5yZXR1cm4sbSl9fWlmKGQmNCYmKGU9YS5zdGF0ZU5vZGUsbnVsbCE9ZSkpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcyxnPW51bGwhPT1jP2MubWVtb2l6ZWRQcm9wczpmLGg9YS50eXBlLGs9YS51cGRhdGVRdWV1ZTtcbmEudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09ayl0cnl7XCJpbnB1dFwiPT09aCYmXCJyYWRpb1wiPT09Zi50eXBlJiZudWxsIT1mLm5hbWUmJlphKGUsZik7dWIoaCxnKTt2YXIgbD11YihoLGYpO2ZvcihnPTA7ZzxrLmxlbmd0aDtnKz0yKXt2YXIgbj1rW2ddLHU9a1tnKzFdO1wic3R5bGVcIj09PW4/cmIoZSx1KTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1uP21iKGUsdSk6XCJjaGlsZHJlblwiPT09bj9uYihlLHUpOnNhKGUsbix1LGwpfXN3aXRjaChoKXtjYXNlIFwiaW5wdXRcIjokYShlLGYpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGUsZik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOnZhciBxPWUuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZTtlLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFmLm11bHRpcGxlO3ZhciB5PWYudmFsdWU7bnVsbCE9eT9lYihlLCEhZi5tdWx0aXBsZSx5LCExKTpxIT09ISFmLm11bHRpcGxlJiYobnVsbCE9Zi5kZWZhdWx0VmFsdWU/ZWIoZSwhIWYubXVsdGlwbGUsXG5mLmRlZmF1bHRWYWx1ZSwhMCk6ZWIoZSwhIWYubXVsdGlwbGUsZi5tdWx0aXBsZT9bXTpcIlwiLCExKSl9ZVtPZl09Zn1jYXRjaChtKXtVKGEsYS5yZXR1cm4sbSl9fWJyZWFrO2Nhc2UgNjphayhiLGEpO2NrKGEpO2lmKGQmNCl7aWYobnVsbD09PWEuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTYyKSk7bD1hLnN0YXRlTm9kZTtuPWEubWVtb2l6ZWRQcm9wczt0cnl7bC5ub2RlVmFsdWU9bn1jYXRjaChtKXtVKGEsYS5yZXR1cm4sbSl9fWJyZWFrO2Nhc2UgMzphayhiLGEpO2NrKGEpO2lmKGQmNCYmbnVsbCE9PWMmJmMubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpdHJ5e2FkKGIuY29udGFpbmVySW5mbyl9Y2F0Y2gobSl7VShhLGEucmV0dXJuLG0pfWJyZWFrO2Nhc2UgNDphayhiLGEpO2NrKGEpO2JyZWFrO2Nhc2UgMTM6YWsoYixhKTtjayhhKTtsPWEuY2hpbGQ7bC5mbGFncyY4MTkyJiZudWxsIT09bC5tZW1vaXplZFN0YXRlJiYobnVsbD09PWwuYWx0ZXJuYXRlfHxudWxsPT09bC5hbHRlcm5hdGUubWVtb2l6ZWRTdGF0ZSkmJlxuKGRrPUIoKSk7ZCY0JiZZaihhKTticmVhaztjYXNlIDIyOmw9bnVsbCE9PWMmJm51bGwhPT1jLm1lbW9pemVkU3RhdGU7YS5tb2RlJjE/KFM9KG49Uyl8fGwsYWsoYixhKSxTPW4pOmFrKGIsYSk7Y2soYSk7aWYoZCY4MTkyKXtuPW51bGwhPT1hLm1lbW9pemVkU3RhdGU7YTpmb3IodT1udWxsLHE9YTs7KXtpZig1PT09cS50YWcpe2lmKG51bGw9PT11KXt1PXE7dHJ5e2U9cS5zdGF0ZU5vZGUsbj8oZj1lLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLnNldFByb3BlcnR5P2Yuc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6Zi5kaXNwbGF5PVwibm9uZVwiKTooaD1xLnN0YXRlTm9kZSxrPXEubWVtb2l6ZWRQcm9wcy5zdHlsZSxnPXZvaWQgMCE9PWsmJm51bGwhPT1rJiZrLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9rLmRpc3BsYXk6bnVsbCxoLnN0eWxlLmRpc3BsYXk9cWIoXCJkaXNwbGF5XCIsZykpfWNhdGNoKG0pe1UoYSxhLnJldHVybixtKX19fWVsc2UgaWYoNj09PVxucS50YWcpe2lmKG51bGw9PT11KXRyeXtxLnN0YXRlTm9kZS5ub2RlVmFsdWU9bj9cIlwiOnEubWVtb2l6ZWRQcm9wc31jYXRjaChtKXtVKGEsYS5yZXR1cm4sbSl9fWVsc2UgaWYoKDIyIT09cS50YWcmJjIzIT09cS50YWd8fG51bGw9PT1xLm1lbW9pemVkU3RhdGV8fHE9PT1hKSYmbnVsbCE9PXEuY2hpbGQpe3EuY2hpbGQucmV0dXJuPXE7cT1xLmNoaWxkO2NvbnRpbnVlfWlmKHE9PT1hKWJyZWFrIGE7Zm9yKDtudWxsPT09cS5zaWJsaW5nOyl7aWYobnVsbD09PXEucmV0dXJufHxxLnJldHVybj09PWEpYnJlYWsgYTt1PT09cSYmKHU9bnVsbCk7cT1xLnJldHVybn11PT09cSYmKHU9bnVsbCk7cS5zaWJsaW5nLnJldHVybj1xLnJldHVybjtxPXEuc2libGluZ31pZihuJiYhbCYmMCE9PShhLm1vZGUmMSkpZm9yKFQ9YSxhPWEuY2hpbGQ7bnVsbCE9PWE7KXtmb3IobD1UPWE7bnVsbCE9PVQ7KXtuPVQ7dT1uLmNoaWxkO3N3aXRjaChuLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1Ok5qKDQsXG5uLG4ucmV0dXJuKTticmVhaztjYXNlIDE6SmoobixuLnJldHVybik7Zj1uLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnRXaWxsVW5tb3VudCl7cT1uO3k9bi5yZXR1cm47dHJ5e2U9cSxmLnByb3BzPWUubWVtb2l6ZWRQcm9wcyxmLnN0YXRlPWUubWVtb2l6ZWRTdGF0ZSxmLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2gobSl7VShxLHksbSl9fWJyZWFrO2Nhc2UgNTpKaihuLG4ucmV0dXJuKTticmVhaztjYXNlIDIyOmlmKG51bGwhPT1uLm1lbW9pemVkU3RhdGUpe2VrKGwpO2NvbnRpbnVlfX1udWxsIT09dT8odS5yZXR1cm49bixUPXUpOmVrKGwpfWE9YS5zaWJsaW5nfX1icmVhaztjYXNlIDE5OmFrKGIsYSk7Y2soYSk7ZCY0JiZZaihhKTticmVhaztjYXNlIDIxOmJyZWFrO2RlZmF1bHQ6YWsoYixhKSxjayhhKX19XG5mdW5jdGlvbiBjayhhKXt2YXIgYj1hLmZsYWdzO2lmKGImMil7dHJ5e2E6e2Zvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe2lmKFJqKGMpKXt2YXIgZD1jO2JyZWFrIGF9Yz1jLnJldHVybn10aHJvdyBFcnJvcihwKDE2MCkpO31zd2l0Y2goZC50YWcpe2Nhc2UgNTp2YXIgZT1kLnN0YXRlTm9kZTtkLmZsYWdzJjMyJiYobmIoZSxcIlwiKSxkLmZsYWdzJj0tMzMpO3ZhciBmPVNqKGEpO1VqKGEsZixlKTticmVhaztjYXNlIDM6Y2FzZSA0OnZhciBnPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saD1TaihhKTtUaihhLGgsZyk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MSkpO319Y2F0Y2goayl7VShhLGEucmV0dXJuLGspfWEuZmxhZ3MmPS0zfWImNDA5NiYmKGEuZmxhZ3MmPS00MDk3KX1mdW5jdGlvbiBmayhhLGIsYyl7VD1hO2drKGEsYixjKX1cbmZ1bmN0aW9uIGdrKGEsYixjKXtmb3IodmFyIGQ9MCE9PShhLm1vZGUmMSk7bnVsbCE9PVQ7KXt2YXIgZT1ULGY9ZS5jaGlsZDtpZigyMj09PWUudGFnJiZkKXt2YXIgZz1udWxsIT09ZS5tZW1vaXplZFN0YXRlfHxIajtpZighZyl7dmFyIGg9ZS5hbHRlcm5hdGUsaz1udWxsIT09aCYmbnVsbCE9PWgubWVtb2l6ZWRTdGF0ZXx8UztoPUhqO3ZhciBsPVM7SGo9ZztpZigoUz1rKSYmIWwpZm9yKFQ9ZTtudWxsIT09VDspZz1ULGs9Zy5jaGlsZCwyMj09PWcudGFnJiZudWxsIT09Zy5tZW1vaXplZFN0YXRlP2hrKGUpOm51bGwhPT1rPyhrLnJldHVybj1nLFQ9ayk6aGsoZSk7Zm9yKDtudWxsIT09ZjspVD1mLGdrKGYsYixjKSxmPWYuc2libGluZztUPWU7SGo9aDtTPWx9aWsoYSxiLGMpfWVsc2UgMCE9PShlLnN1YnRyZWVGbGFncyY4NzcyKSYmbnVsbCE9PWY/KGYucmV0dXJuPWUsVD1mKTppayhhLGIsYyl9fVxuZnVuY3Rpb24gaWsoYSl7Zm9yKDtudWxsIT09VDspe3ZhciBiPVQ7aWYoMCE9PShiLmZsYWdzJjg3NzIpKXt2YXIgYz1iLmFsdGVybmF0ZTt0cnl7aWYoMCE9PShiLmZsYWdzJjg3NzIpKXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpTfHxPaig1LGIpO2JyZWFrO2Nhc2UgMTp2YXIgZD1iLnN0YXRlTm9kZTtpZihiLmZsYWdzJjQmJiFTKWlmKG51bGw9PT1jKWQuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBlPWIuZWxlbWVudFR5cGU9PT1iLnR5cGU/Yy5tZW1vaXplZFByb3BzOmtnKGIudHlwZSxjLm1lbW9pemVkUHJvcHMpO2QuY29tcG9uZW50RGlkVXBkYXRlKGUsYy5tZW1vaXplZFN0YXRlLGQuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfXZhciBmPWIudXBkYXRlUXVldWU7bnVsbCE9PWYmJkdnKGIsZixkKTticmVhaztjYXNlIDM6dmFyIGc9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09Zyl7Yz1udWxsO2lmKG51bGwhPT1iLmNoaWxkKXN3aXRjaChiLmNoaWxkLnRhZyl7Y2FzZSA1OmM9XG5iLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6Yz1iLmNoaWxkLnN0YXRlTm9kZX1HZyhiLGcsYyl9YnJlYWs7Y2FzZSA1OnZhciBoPWIuc3RhdGVOb2RlO2lmKG51bGw9PT1jJiZiLmZsYWdzJjQpe2M9aDt2YXIgaz1iLm1lbW9pemVkUHJvcHM7c3dpdGNoKGIudHlwZSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjprLmF1dG9Gb2N1cyYmYy5mb2N1cygpO2JyZWFrO2Nhc2UgXCJpbWdcIjprLnNyYyYmKGMuc3JjPWsuc3JjKX19YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6aWYobnVsbD09PWIubWVtb2l6ZWRTdGF0ZSl7dmFyIGw9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWwpe3ZhciBuPWwubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09bil7dmFyIHU9bi5kZWh5ZHJhdGVkO251bGwhPT11JiZhZCh1KX19fWJyZWFrO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIxOmNhc2UgMjI6Y2FzZSAyMzpicmVhaztcbmRlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjMpKTt9U3x8Yi5mbGFncyY1MTImJlBqKGIpfWNhdGNoKHEpe1UoYixiLnJldHVybixxKX19aWYoYj09PWEpe1Q9bnVsbDticmVha31jPWIuc2libGluZztpZihudWxsIT09Yyl7Yy5yZXR1cm49Yi5yZXR1cm47VD1jO2JyZWFrfVQ9Yi5yZXR1cm59fWZ1bmN0aW9uIGVrKGEpe2Zvcig7bnVsbCE9PVQ7KXt2YXIgYj1UO2lmKGI9PT1hKXtUPW51bGw7YnJlYWt9dmFyIGM9Yi5zaWJsaW5nO2lmKG51bGwhPT1jKXtjLnJldHVybj1iLnJldHVybjtUPWM7YnJlYWt9VD1iLnJldHVybn19XG5mdW5jdGlvbiBoayhhKXtmb3IoO251bGwhPT1UOyl7dmFyIGI9VDt0cnl7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnZhciBjPWIucmV0dXJuO3RyeXtPaig0LGIpfWNhdGNoKGspe1UoYixjLGspfWJyZWFrO2Nhc2UgMTp2YXIgZD1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRNb3VudCl7dmFyIGU9Yi5yZXR1cm47dHJ5e2QuY29tcG9uZW50RGlkTW91bnQoKX1jYXRjaChrKXtVKGIsZSxrKX19dmFyIGY9Yi5yZXR1cm47dHJ5e1BqKGIpfWNhdGNoKGspe1UoYixmLGspfWJyZWFrO2Nhc2UgNTp2YXIgZz1iLnJldHVybjt0cnl7UGooYil9Y2F0Y2goayl7VShiLGcsayl9fX1jYXRjaChrKXtVKGIsYi5yZXR1cm4sayl9aWYoYj09PWEpe1Q9bnVsbDticmVha312YXIgaD1iLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWIucmV0dXJuO1Q9aDticmVha31UPWIucmV0dXJufX1cbnZhciBqaz1NYXRoLmNlaWwsa2s9dGEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixsaz10YS5SZWFjdEN1cnJlbnRPd25lcixtaz10YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxXPTAsUD1udWxsLFg9bnVsbCxZPTAsY2o9MCxtaj1UZigwKSxSPTAsbms9bnVsbCxGZz0wLG9rPTAscGs9MCxxaz1udWxsLHJrPW51bGwsZGs9MCxhaj1JbmZpbml0eSxzaz1udWxsLExpPSExLE1pPW51bGwsT2k9bnVsbCx0az0hMSx1az1udWxsLHZrPTAsd2s9MCx4az1udWxsLHlrPS0xLHprPTA7ZnVuY3Rpb24gSmcoKXtyZXR1cm4gMCE9PShXJjYpP0IoKTotMSE9PXlrP3lrOnlrPUIoKX1cbmZ1bmN0aW9uIEtnKGEpe2lmKDA9PT0oYS5tb2RlJjEpKXJldHVybiAxO2lmKDAhPT0oVyYyKSYmMCE9PVkpcmV0dXJuIFkmLVk7aWYobnVsbCE9PWpnLnRyYW5zaXRpb24pcmV0dXJuIDA9PT16ayYmKHprPXhjKCkpLHprO2E9QztpZigwIT09YSlyZXR1cm4gYTthPXdpbmRvdy5ldmVudDthPXZvaWQgMD09PWE/MTY6aWQoYS50eXBlKTtyZXR1cm4gYX1mdW5jdGlvbiBMZyhhLGIsYyl7aWYoNTA8d2spdGhyb3cgd2s9MCx4az1udWxsLEVycm9yKHAoMTg1KSk7dmFyIGQ9QWsoYSxiKTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDt6YyhkLGIsYyk7aWYoMD09PShXJjIpfHxkIT09UClkPT09UCYmKDA9PT0oVyYyKSYmKG9rfD1iKSw0PT09UiYmQmsoZCxZKSksQ2soZCxjKSwxPT09YiYmMD09PVcmJjA9PT0oYS5tb2RlJjEpJiYoYWo9QigpKzUwMCxlZyYmaWcoKSk7cmV0dXJuIGR9XG5mdW5jdGlvbiBBayhhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtjPWE7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWE7KWEuY2hpbGRMYW5lc3w9YixjPWEuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKSxjPWEsYT1hLnJldHVybjtyZXR1cm4gMz09PWMudGFnP2Muc3RhdGVOb2RlOm51bGx9ZnVuY3Rpb24gQmcoYSl7cmV0dXJuKG51bGwhPT1QfHxudWxsIT09dmcpJiYwIT09KGEubW9kZSYxKSYmMD09PShXJjIpfVxuZnVuY3Rpb24gQ2soYSxiKXt2YXIgYz1hLmNhbGxiYWNrTm9kZTt2YyhhLGIpO3ZhciBkPXRjKGEsYT09PVA/WTowKTtpZigwPT09ZCludWxsIT09YyYmYWMoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MDtlbHNlIGlmKGI9ZCYtZCxhLmNhbGxiYWNrUHJpb3JpdHkhPT1iKXtudWxsIT1jJiZhYyhjKTtpZigxPT09YikwPT09YS50YWc/aGcoRGsuYmluZChudWxsLGEpKTpnZyhEay5iaW5kKG51bGwsYSkpLElmKGZ1bmN0aW9uKCl7MD09PVcmJmlnKCl9KSxjPW51bGw7ZWxzZXtzd2l0Y2goQ2MoZCkpe2Nhc2UgMTpjPWVjO2JyZWFrO2Nhc2UgNDpjPWZjO2JyZWFrO2Nhc2UgMTY6Yz1nYzticmVhaztjYXNlIDUzNjg3MDkxMjpjPWljO2JyZWFrO2RlZmF1bHQ6Yz1nY31jPUVrKGMsRmsuYmluZChudWxsLGEpKX1hLmNhbGxiYWNrUHJpb3JpdHk9YjthLmNhbGxiYWNrTm9kZT1jfX1cbmZ1bmN0aW9uIEZrKGEsYil7eWs9LTE7ems9MDtpZigwIT09KFcmNikpdGhyb3cgRXJyb3IocCgzMjcpKTt2YXIgYz1hLmNhbGxiYWNrTm9kZTtpZihHaygpJiZhLmNhbGxiYWNrTm9kZSE9PWMpcmV0dXJuIG51bGw7dmFyIGQ9dGMoYSxhPT09UD9ZOjApO2lmKDA9PT1kKXJldHVybiBudWxsO2lmKDAhPT0oZCYzMCl8fDAhPT0oZCZhLmV4cGlyZWRMYW5lcyl8fGIpYj1IayhhLGQpO2Vsc2V7Yj1kO3ZhciBlPVc7V3w9Mjt2YXIgZj1JaygpO2lmKFAhPT1hfHxZIT09Yilzaz1udWxsLGFqPUIoKSs1MDAsSmsoYSxiKTtkbyB0cnl7S2soKTticmVha31jYXRjaChoKXtMayhhLGgpfXdoaWxlKDEpO3BnKCk7a2suY3VycmVudD1mO1c9ZTtudWxsIT09WD9iPTA6KFA9bnVsbCxZPTAsYj1SKX1pZigwIT09Yil7Mj09PWImJihlPXdjKGEpLDAhPT1lJiYoZD1lLGI9TWsoYSxlKSkpO2lmKDE9PT1iKXRocm93IGM9bmssSmsoYSwwKSxCayhhLGQpLENrKGEsQigpKSxjO2lmKDY9PT1iKUJrKGEsZCk7XG5lbHNle2U9YS5jdXJyZW50LmFsdGVybmF0ZTtpZigwPT09KGQmMzApJiYhTmsoZSkmJihiPUhrKGEsZCksMj09PWImJihmPXdjKGEpLDAhPT1mJiYoZD1mLGI9TWsoYSxmKSkpLDE9PT1iKSl0aHJvdyBjPW5rLEprKGEsMCksQmsoYSxkKSxDayhhLEIoKSksYzthLmZpbmlzaGVkV29yaz1lO2EuZmluaXNoZWRMYW5lcz1kO3N3aXRjaChiKXtjYXNlIDA6Y2FzZSAxOnRocm93IEVycm9yKHAoMzQ1KSk7Y2FzZSAyOk9rKGEscmssc2spO2JyZWFrO2Nhc2UgMzpCayhhLGQpO2lmKChkJjEzMDAyMzQyNCk9PT1kJiYoYj1kays1MDAtQigpLDEwPGIpKXtpZigwIT09dGMoYSwwKSlicmVhaztlPWEuc3VzcGVuZGVkTGFuZXM7aWYoKGUmZCkhPT1kKXtKZygpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9RWYoT2suYmluZChudWxsLGEscmssc2spLGIpO2JyZWFrfU9rKGEscmssc2spO2JyZWFrO2Nhc2UgNDpCayhhLGQpO2lmKChkJjQxOTQyNDApPT09XG5kKWJyZWFrO2I9YS5ldmVudFRpbWVzO2ZvcihlPS0xOzA8ZDspe3ZhciBnPTMxLW5jKGQpO2Y9MTw8ZztnPWJbZ107Zz5lJiYoZT1nKTtkJj1+Zn1kPWU7ZD1CKCktZDtkPSgxMjA+ZD8xMjA6NDgwPmQ/NDgwOjEwODA+ZD8xMDgwOjE5MjA+ZD8xOTIwOjNFMz5kPzNFMzo0MzIwPmQ/NDMyMDoxOTYwKmprKGQvMTk2MCkpLWQ7aWYoMTA8ZCl7YS50aW1lb3V0SGFuZGxlPUVmKE9rLmJpbmQobnVsbCxhLHJrLHNrKSxkKTticmVha31PayhhLHJrLHNrKTticmVhaztjYXNlIDU6T2soYSxyayxzayk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDMyOSkpO319fUNrKGEsQigpKTtyZXR1cm4gYS5jYWxsYmFja05vZGU9PT1jP0ZrLmJpbmQobnVsbCxhKTpudWxsfVxuZnVuY3Rpb24gTWsoYSxiKXt2YXIgYz1xazthLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQmJihKayhhLGIpLmZsYWdzfD0yNTYpO2E9SGsoYSxiKTsyIT09YSYmKGI9cmsscms9YyxudWxsIT09YiYmWmkoYikpO3JldHVybiBhfWZ1bmN0aW9uIFppKGEpe251bGw9PT1yaz9yaz1hOnJrLnB1c2guYXBwbHkocmssYSl9XG5mdW5jdGlvbiBOayhhKXtmb3IodmFyIGI9YTs7KXtpZihiLmZsYWdzJjE2Mzg0KXt2YXIgYz1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1jJiYoYz1jLnN0b3JlcyxudWxsIT09YykpZm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF0sZj1lLmdldFNuYXBzaG90O2U9ZS52YWx1ZTt0cnl7aWYoIUdlKGYoKSxlKSlyZXR1cm4hMX1jYXRjaChnKXtyZXR1cm4hMX19fWM9Yi5jaGlsZDtpZihiLnN1YnRyZWVGbGFncyYxNjM4NCYmbnVsbCE9PWMpYy5yZXR1cm49YixiPWM7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4hMDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiEwfVxuZnVuY3Rpb24gQmsoYSxiKXtiJj1+cGs7YiY9fm9rO2Euc3VzcGVuZGVkTGFuZXN8PWI7YS5waW5nZWRMYW5lcyY9fmI7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxiOyl7dmFyIGM9MzEtbmMoYiksZD0xPDxjO2FbY109LTE7YiY9fmR9fWZ1bmN0aW9uIERrKGEpe2lmKDAhPT0oVyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO0drKCk7dmFyIGI9dGMoYSwwKTtpZigwPT09KGImMSkpcmV0dXJuIENrKGEsQigpKSxudWxsO3ZhciBjPUhrKGEsYik7aWYoMCE9PWEudGFnJiYyPT09Yyl7dmFyIGQ9d2MoYSk7MCE9PWQmJihiPWQsYz1NayhhLGQpKX1pZigxPT09Yyl0aHJvdyBjPW5rLEprKGEsMCksQmsoYSxiKSxDayhhLEIoKSksYztpZig2PT09Yyl0aHJvdyBFcnJvcihwKDM0NSkpO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWI7T2soYSxyayxzayk7Q2soYSxCKCkpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gUGsoYSxiKXt2YXIgYz1XO1d8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7Vz1jLDA9PT1XJiYoYWo9QigpKzUwMCxlZyYmaWcoKSl9fWZ1bmN0aW9uIFFrKGEpe251bGwhPT11ayYmMD09PXVrLnRhZyYmMD09PShXJjYpJiZHaygpO3ZhciBiPVc7V3w9MTt2YXIgYz1tay50cmFuc2l0aW9uLGQ9Qzt0cnl7aWYobWsudHJhbnNpdGlvbj1udWxsLEM9MSxhKXJldHVybiBhKCl9ZmluYWxseXtDPWQsbWsudHJhbnNpdGlvbj1jLFc9YiwwPT09KFcmNikmJmlnKCl9fWZ1bmN0aW9uIGJqKCl7Y2o9bWouY3VycmVudDtFKG1qKX1cbmZ1bmN0aW9uIEprKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLEZmKGMpKTtpZihudWxsIT09WClmb3IoYz1YLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7Y2goZCk7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJlpmKCk7YnJlYWs7Y2FzZSAzOkdoKCk7RShWZik7RShIKTtMaCgpO2JyZWFrO2Nhc2UgNTpJaChkKTticmVhaztjYXNlIDQ6R2goKTticmVhaztjYXNlIDEzOkUoSyk7YnJlYWs7Y2FzZSAxOTpFKEspO2JyZWFrO2Nhc2UgMTA6cWcoZC50eXBlLl9jb250ZXh0KTticmVhaztjYXNlIDIyOmNhc2UgMjM6YmooKX1jPWMucmV0dXJufVA9YTtYPWE9dGgoYS5jdXJyZW50LG51bGwpO1k9Y2o9YjtSPTA7bms9bnVsbDtwaz1vaz1GZz0wO3JrPXFrPW51bGw7aWYobnVsbCE9PXZnKXtmb3IoYj1cbjA7Yjx2Zy5sZW5ndGg7YisrKWlmKGM9dmdbYl0sZD1jLmludGVybGVhdmVkLG51bGwhPT1kKXtjLmludGVybGVhdmVkPW51bGw7dmFyIGU9ZC5uZXh0LGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXt2YXIgZz1mLm5leHQ7Zi5uZXh0PWU7ZC5uZXh0PWd9Yy5wZW5kaW5nPWR9dmc9bnVsbH1yZXR1cm4gYX1cbmZ1bmN0aW9uIExrKGEsYil7ZG97dmFyIGM9WDt0cnl7cGcoKTtNaC5jdXJyZW50PVloO2lmKFBoKXtmb3IodmFyIGQ9TC5tZW1vaXplZFN0YXRlO251bGwhPT1kOyl7dmFyIGU9ZC5xdWV1ZTtudWxsIT09ZSYmKGUucGVuZGluZz1udWxsKTtkPWQubmV4dH1QaD0hMX1PaD0wO049TT1MPW51bGw7UWg9ITE7Umg9MDtsay5jdXJyZW50PW51bGw7aWYobnVsbD09PWN8fG51bGw9PT1jLnJldHVybil7Uj0xO25rPWI7WD1udWxsO2JyZWFrfWE6e3ZhciBmPWEsZz1jLnJldHVybixoPWMsaz1iO2I9WTtoLmZsYWdzfD0zMjc2ODtpZihudWxsIT09ayYmXCJvYmplY3RcIj09PXR5cGVvZiBrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay50aGVuKXt2YXIgbD1rLG49aCx1PW4udGFnO2lmKDA9PT0obi5tb2RlJjEpJiYoMD09PXV8fDExPT09dXx8MTU9PT11KSl7dmFyIHE9bi5hbHRlcm5hdGU7cT8obi51cGRhdGVRdWV1ZT1xLnVwZGF0ZVF1ZXVlLG4ubWVtb2l6ZWRTdGF0ZT1xLm1lbW9pemVkU3RhdGUsXG5uLmxhbmVzPXEubGFuZXMpOihuLnVwZGF0ZVF1ZXVlPW51bGwsbi5tZW1vaXplZFN0YXRlPW51bGwpfXZhciB5PVJpKGcpO2lmKG51bGwhPT15KXt5LmZsYWdzJj0tMjU3O1NpKHksZyxoLGYsYik7eS5tb2RlJjEmJlBpKGYsbCxiKTtiPXk7az1sO3ZhciBtPWIudXBkYXRlUXVldWU7aWYobnVsbD09PW0pe3ZhciB3PW5ldyBTZXQ7dy5hZGQoayk7Yi51cGRhdGVRdWV1ZT13fWVsc2UgbS5hZGQoayk7YnJlYWsgYX1lbHNle2lmKDA9PT0oYiYxKSl7UGkoZixsLGIpOyRpKCk7YnJlYWsgYX1rPUVycm9yKHAoNDI2KSl9fWVsc2UgaWYoSSYmaC5tb2RlJjEpe3ZhciBKPVJpKGcpO2lmKG51bGwhPT1KKXswPT09KEouZmxhZ3MmNjU1MzYpJiYoSi5mbGFnc3w9MjU2KTtTaShKLGcsaCxmLGIpO29oKGspO2JyZWFrIGF9fWY9azs0IT09UiYmKFI9Mik7bnVsbD09PXFrP3FrPVtmXTpxay5wdXNoKGYpO2s9SGkoayxoKTtoPWc7ZG97c3dpdGNoKGgudGFnKXtjYXNlIDM6aC5mbGFnc3w9NjU1MzY7XG5iJj0tYjtoLmxhbmVzfD1iO3ZhciB2PUtpKGgsayxiKTtEZyhoLHYpO2JyZWFrIGE7Y2FzZSAxOmY9azt2YXIgeD1oLnR5cGUscj1oLnN0YXRlTm9kZTtpZigwPT09KGguZmxhZ3MmMTI4KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB4LmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PXImJlwiZnVuY3Rpb25cIj09PXR5cGVvZiByLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PU9pfHwhT2kuaGFzKHIpKSkpe2guZmxhZ3N8PTY1NTM2O2ImPS1iO2gubGFuZXN8PWI7dmFyIEY9TmkoaCxmLGIpO0RnKGgsRik7YnJlYWsgYX19aD1oLnJldHVybn13aGlsZShudWxsIT09aCl9UmsoYyl9Y2F0Y2goWil7Yj1aO1g9PT1jJiZudWxsIT09YyYmKFg9Yz1jLnJldHVybik7Y29udGludWV9YnJlYWt9d2hpbGUoMSl9ZnVuY3Rpb24gSWsoKXt2YXIgYT1ray5jdXJyZW50O2trLmN1cnJlbnQ9WWg7cmV0dXJuIG51bGw9PT1hP1loOmF9XG5mdW5jdGlvbiAkaSgpe2lmKDA9PT1SfHwzPT09Unx8Mj09PVIpUj00O251bGw9PT1QfHwwPT09KEZnJjI2ODQzNTQ1NSkmJjA9PT0ob2smMjY4NDM1NDU1KXx8QmsoUCxZKX1mdW5jdGlvbiBIayhhLGIpe3ZhciBjPVc7V3w9Mjt2YXIgZD1JaygpO2lmKFAhPT1hfHxZIT09Yilzaz1udWxsLEprKGEsYik7ZG8gdHJ5e1NrKCk7YnJlYWt9Y2F0Y2goZSl7TGsoYSxlKX13aGlsZSgxKTtwZygpO1c9Yztray5jdXJyZW50PWQ7aWYobnVsbCE9PVgpdGhyb3cgRXJyb3IocCgyNjEpKTtQPW51bGw7WT0wO3JldHVybiBSfWZ1bmN0aW9uIFNrKCl7Zm9yKDtudWxsIT09WDspVGsoWCl9ZnVuY3Rpb24gS2soKXtmb3IoO251bGwhPT1YJiYhYmMoKTspVGsoWCl9ZnVuY3Rpb24gVGsoYSl7dmFyIGI9VWsoYS5hbHRlcm5hdGUsYSxjaik7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iP1JrKGEpOlg9Yjtsay5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBSayhhKXt2YXIgYj1hO2Rve3ZhciBjPWIuYWx0ZXJuYXRlO2E9Yi5yZXR1cm47aWYoMD09PShiLmZsYWdzJjMyNzY4KSl7aWYoYz1ZaShjLGIsY2opLG51bGwhPT1jKXtYPWM7cmV0dXJufX1lbHNle2M9R2ooYyxiKTtpZihudWxsIT09Yyl7Yy5mbGFncyY9MzI3Njc7WD1jO3JldHVybn1pZihudWxsIT09YSlhLmZsYWdzfD0zMjc2OCxhLnN1YnRyZWVGbGFncz0wLGEuZGVsZXRpb25zPW51bGw7ZWxzZXtSPTY7WD1udWxsO3JldHVybn19Yj1iLnNpYmxpbmc7aWYobnVsbCE9PWIpe1g9YjtyZXR1cm59WD1iPWF9d2hpbGUobnVsbCE9PWIpOzA9PT1SJiYoUj01KX1mdW5jdGlvbiBPayhhLGIsYyl7dmFyIGQ9QyxlPW1rLnRyYW5zaXRpb247dHJ5e21rLnRyYW5zaXRpb249bnVsbCxDPTEsVmsoYSxiLGMsZCl9ZmluYWxseXttay50cmFuc2l0aW9uPWUsQz1kfXJldHVybiBudWxsfVxuZnVuY3Rpb24gVmsoYSxiLGMsZCl7ZG8gR2soKTt3aGlsZShudWxsIT09dWspO2lmKDAhPT0oVyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO2M9YS5maW5pc2hlZFdvcms7dmFyIGU9YS5maW5pc2hlZExhbmVzO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcihwKDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7YS5jYWxsYmFja1ByaW9yaXR5PTA7dmFyIGY9Yy5sYW5lc3xjLmNoaWxkTGFuZXM7QWMoYSxmKTthPT09UCYmKFg9UD1udWxsLFk9MCk7MD09PShjLnN1YnRyZWVGbGFncyYyMDY0KSYmMD09PShjLmZsYWdzJjIwNjQpfHx0a3x8KHRrPSEwLEVrKGdjLGZ1bmN0aW9uKCl7R2soKTtyZXR1cm4gbnVsbH0pKTtmPTAhPT0oYy5mbGFncyYxNTk5MCk7aWYoMCE9PShjLnN1YnRyZWVGbGFncyYxNTk5MCl8fGYpe2Y9bWsudHJhbnNpdGlvbjttay50cmFuc2l0aW9uPW51bGw7XG52YXIgZz1DO0M9MTt2YXIgaD1XO1d8PTQ7bGsuY3VycmVudD1udWxsO01qKGEsYyk7YmsoYyxhKTtOZShDZik7Y2Q9ISFCZjtDZj1CZj1udWxsO2EuY3VycmVudD1jO2ZrKGMsYSxlKTtjYygpO1c9aDtDPWc7bWsudHJhbnNpdGlvbj1mfWVsc2UgYS5jdXJyZW50PWM7dGsmJih0az0hMSx1az1hLHZrPWUpO2Y9YS5wZW5kaW5nTGFuZXM7MD09PWYmJihPaT1udWxsKTtsYyhjLnN0YXRlTm9kZSxkKTtDayhhLEIoKSk7aWYobnVsbCE9PWIpZm9yKGQ9YS5vblJlY292ZXJhYmxlRXJyb3IsYz0wO2M8Yi5sZW5ndGg7YysrKWQoYltjXSk7aWYoTGkpdGhyb3cgTGk9ITEsYT1NaSxNaT1udWxsLGE7MCE9PSh2ayYxKSYmMCE9PWEudGFnJiZHaygpO2Y9YS5wZW5kaW5nTGFuZXM7MCE9PShmJjEpP2E9PT14az93aysrOih3az0wLHhrPWEpOndrPTA7aWcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIEdrKCl7aWYobnVsbCE9PXVrKXt2YXIgYT1DYyh2ayksYj1tay50cmFuc2l0aW9uLGM9Qzt0cnl7bWsudHJhbnNpdGlvbj1udWxsO0M9MTY+YT8xNjphO2lmKG51bGw9PT11ayl2YXIgZD0hMTtlbHNle2E9dWs7dWs9bnVsbDt2az0wO2lmKDAhPT0oVyY2KSl0aHJvdyBFcnJvcihwKDMzMSkpO3ZhciBlPVc7V3w9NDtmb3IoVD1hLmN1cnJlbnQ7bnVsbCE9PVQ7KXt2YXIgZj1ULGc9Zi5jaGlsZDtpZigwIT09KFQuZmxhZ3MmMTYpKXt2YXIgaD1mLmRlbGV0aW9ucztpZihudWxsIT09aCl7Zm9yKHZhciBrPTA7azxoLmxlbmd0aDtrKyspe3ZhciBsPWhba107Zm9yKFQ9bDtudWxsIT09VDspe3ZhciBuPVQ7c3dpdGNoKG4udGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1Ok5qKDgsbixmKX12YXIgdT1uLmNoaWxkO2lmKG51bGwhPT11KXUucmV0dXJuPW4sVD11O2Vsc2UgZm9yKDtudWxsIT09VDspe249VDt2YXIgcT1uLnNpYmxpbmcseT1uLnJldHVybjtRaihuKTtpZihuPT09XG5sKXtUPW51bGw7YnJlYWt9aWYobnVsbCE9PXEpe3EucmV0dXJuPXk7VD1xO2JyZWFrfVQ9eX19fXZhciBtPWYuYWx0ZXJuYXRlO2lmKG51bGwhPT1tKXt2YXIgdz1tLmNoaWxkO2lmKG51bGwhPT13KXttLmNoaWxkPW51bGw7ZG97dmFyIEo9dy5zaWJsaW5nO3cuc2libGluZz1udWxsO3c9Sn13aGlsZShudWxsIT09dyl9fVQ9Zn19aWYoMCE9PShmLnN1YnRyZWVGbGFncyYyMDY0KSYmbnVsbCE9PWcpZy5yZXR1cm49ZixUPWc7ZWxzZSBiOmZvcig7bnVsbCE9PVQ7KXtmPVQ7aWYoMCE9PShmLmZsYWdzJjIwNDgpKXN3aXRjaChmLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpOaig5LGYsZi5yZXR1cm4pfXZhciB2PWYuc2libGluZztpZihudWxsIT09dil7di5yZXR1cm49Zi5yZXR1cm47VD12O2JyZWFrIGJ9VD1mLnJldHVybn19dmFyIHg9YS5jdXJyZW50O2ZvcihUPXg7bnVsbCE9PVQ7KXtnPVQ7dmFyIHI9Zy5jaGlsZDtpZigwIT09KGcuc3VidHJlZUZsYWdzJjIwNjQpJiZudWxsIT09XG5yKXIucmV0dXJuPWcsVD1yO2Vsc2UgYjpmb3IoZz14O251bGwhPT1UOyl7aD1UO2lmKDAhPT0oaC5mbGFncyYyMDQ4KSl0cnl7c3dpdGNoKGgudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1Ok9qKDksaCl9fWNhdGNoKFope1UoaCxoLnJldHVybixaKX1pZihoPT09Zyl7VD1udWxsO2JyZWFrIGJ9dmFyIEY9aC5zaWJsaW5nO2lmKG51bGwhPT1GKXtGLnJldHVybj1oLnJldHVybjtUPUY7YnJlYWsgYn1UPWgucmV0dXJufX1XPWU7aWcoKTtpZihrYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGtjLm9uUG9zdENvbW1pdEZpYmVyUm9vdCl0cnl7a2Mub25Qb3N0Q29tbWl0RmliZXJSb290KGpjLGEpfWNhdGNoKFope31kPSEwfXJldHVybiBkfWZpbmFsbHl7Qz1jLG1rLnRyYW5zaXRpb249Yn19cmV0dXJuITF9ZnVuY3Rpb24gV2soYSxiLGMpe2I9SGkoYyxiKTtiPUtpKGEsYiwxKTtBZyhhLGIpO2I9SmcoKTthPUFrKGEsMSk7bnVsbCE9PWEmJih6YyhhLDEsYiksQ2soYSxiKSl9XG5mdW5jdGlvbiBVKGEsYixjKXtpZigzPT09YS50YWcpV2soYSxhLGMpO2Vsc2UgZm9yKDtudWxsIT09Yjspe2lmKDM9PT1iLnRhZyl7V2soYixhLGMpO2JyZWFrfWVsc2UgaWYoMT09PWIudGFnKXt2YXIgZD1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09T2l8fCFPaS5oYXMoZCkpKXthPUhpKGMsYSk7YT1OaShiLGEsMSk7QWcoYixhKTthPUpnKCk7Yj1BayhiLDEpO251bGwhPT1iJiYoemMoYiwxLGEpLENrKGIsYSkpO2JyZWFrfX1iPWIucmV0dXJufX1cbmZ1bmN0aW9uIFFpKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7Yj1KZygpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmYztQPT09YSYmKFkmYyk9PT1jJiYoND09PVJ8fDM9PT1SJiYoWSYxMzAwMjM0MjQpPT09WSYmNTAwPkIoKS1kaz9KayhhLDApOnBrfD1jKTtDayhhLGIpfWZ1bmN0aW9uIFhrKGEsYil7MD09PWImJigwPT09KGEubW9kZSYxKT9iPTE6KGI9cmMscmM8PD0xLDA9PT0ocmMmMTMwMDIzNDI0KSYmKHJjPTQxOTQzMDQpKSk7dmFyIGM9SmcoKTthPUFrKGEsYik7bnVsbCE9PWEmJih6YyhhLGIsYyksQ2soYSxjKSl9ZnVuY3Rpb24gemooYSl7dmFyIGI9YS5tZW1vaXplZFN0YXRlLGM9MDtudWxsIT09YiYmKGM9Yi5yZXRyeUxhbmUpO1hrKGEsYyl9XG5mdW5jdGlvbiBaaihhLGIpe3ZhciBjPTA7c3dpdGNoKGEudGFnKXtjYXNlIDEzOnZhciBkPWEuc3RhdGVOb2RlO3ZhciBlPWEubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGM9ZS5yZXRyeUxhbmUpO2JyZWFrO2Nhc2UgMTk6ZD1hLnN0YXRlTm9kZTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMzE0KSk7fW51bGwhPT1kJiZkLmRlbGV0ZShiKTtYayhhLGMpfXZhciBVaztcblVrPWZ1bmN0aW9uKGEsYixjKXtpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8VmYuY3VycmVudCl0Zz0hMDtlbHNle2lmKDA9PT0oYS5sYW5lcyZjKSYmMD09PShiLmZsYWdzJjEyOCkpcmV0dXJuIHRnPSExLEZqKGEsYixjKTt0Zz0wIT09KGEuZmxhZ3MmMTMxMDcyKT8hMDohMX1lbHNlIHRnPSExLEkmJjAhPT0oYi5mbGFncyYxMDQ4NTc2KSYmYWgoYixVZyxiLmluZGV4KTtiLmxhbmVzPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6dmFyIGQ9Yi50eXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7dmFyIGU9WGYoYixILmN1cnJlbnQpO3NnKGIsYyk7ZT1VaChudWxsLGIsZCxhLGUsYyk7dmFyIGY9WmgoKTtiLmZsYWdzfD0xO1wib2JqZWN0XCI9PT10eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZj9cbihiLnRhZz0xLGIubWVtb2l6ZWRTdGF0ZT1udWxsLGIudXBkYXRlUXVldWU9bnVsbCxZZihkKT8oZj0hMCxiZyhiKSk6Zj0hMSxiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsLHhnKGIpLGUudXBkYXRlcj1NZyxiLnN0YXRlTm9kZT1lLGUuX3JlYWN0SW50ZXJuYWxzPWIsUWcoYixkLGEsYyksYj1waihudWxsLGIsZCwhMCxmLGMpKTooYi50YWc9MCxJJiZmJiZiaChiKSxlaihudWxsLGIsZSxjKSxiPWIuY2hpbGQpO3JldHVybiBiO2Nhc2UgMTY6ZD1iLmVsZW1lbnRUeXBlO2E6e251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1kLl9pbml0O2Q9ZShkLl9wYXlsb2FkKTtiLnR5cGU9ZDtlPWIudGFnPVlrKGQpO2E9a2coZCxhKTtzd2l0Y2goZSl7Y2FzZSAwOmI9a2oobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTpiPW9qKG51bGwsYixcbmQsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1maihudWxsLGIsZCxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPWhqKG51bGwsYixkLGtnKGQudHlwZSxhKSxjKTticmVhayBhfXRocm93IEVycm9yKHAoMzA2LGQsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmtnKGQsZSksa2ooYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmtnKGQsZSksb2ooYSxiLGQsZSxjKTtjYXNlIDM6YTp7cWooYik7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IocCgzODcpKTtkPWIucGVuZGluZ1Byb3BzO2Y9Yi5tZW1vaXplZFN0YXRlO2U9Zi5lbGVtZW50O3lnKGEsYik7RWcoYixkLG51bGwsYyk7dmFyIGc9Yi5tZW1vaXplZFN0YXRlO2Q9Zy5lbGVtZW50O2lmKGYuaXNEZWh5ZHJhdGVkKWlmKGY9e2VsZW1lbnQ6ZCxpc0RlaHlkcmF0ZWQ6ITEsXG5jYWNoZTpnLmNhY2hlLHBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXM6Zy5wZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzLHRyYW5zaXRpb25zOmcudHJhbnNpdGlvbnN9LGIudXBkYXRlUXVldWUuYmFzZVN0YXRlPWYsYi5tZW1vaXplZFN0YXRlPWYsYi5mbGFncyYyNTYpe2U9RXJyb3IocCg0MjMpKTtiPXJqKGEsYixkLGMsZSk7YnJlYWsgYX1lbHNlIGlmKGQhPT1lKXtlPUVycm9yKHAoNDI0KSk7Yj1yaihhLGIsZCxjLGUpO2JyZWFrIGF9ZWxzZSBmb3IoZWg9S2YoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSxkaD1iLEk9ITAsZmg9bnVsbCxjPXpoKGIsbnVsbCxkLGMpLGIuY2hpbGQ9YztjOyljLmZsYWdzPWMuZmxhZ3MmLTN8NDA5NixjPWMuc2libGluZztlbHNle25oKCk7aWYoZD09PWUpe2I9Z2ooYSxiLGMpO2JyZWFrIGF9ZWooYSxiLGQsYyl9Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gSGgoYiksbnVsbD09PWEmJmtoKGIpLGQ9Yi50eXBlLGU9XG5iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsLGc9ZS5jaGlsZHJlbixEZihkLGUpP2c9bnVsbDpudWxsIT09ZiYmRGYoZCxmKSYmKGIuZmxhZ3N8PTMyKSxuaihhLGIpLGVqKGEsYixnLGMpLGIuY2hpbGQ7Y2FzZSA2OnJldHVybiBudWxsPT09YSYma2goYiksbnVsbDtjYXNlIDEzOnJldHVybiB2aihhLGIsYyk7Y2FzZSA0OnJldHVybiBGaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD15aChiLG51bGwsZCxjKTplaihhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmtnKGQsZSksZmooYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIGVqKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gZWooYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gZWooYSxcbmIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zj1iLm1lbW9pemVkUHJvcHM7Zz1lLnZhbHVlO0cobGcsZC5fY3VycmVudFZhbHVlKTtkLl9jdXJyZW50VmFsdWU9ZztpZihudWxsIT09ZilpZihHZShmLnZhbHVlLGcpKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIVZmLmN1cnJlbnQpe2I9Z2ooYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGY9Yi5jaGlsZCxudWxsIT09ZiYmKGYucmV0dXJuPWIpO251bGwhPT1mOyl7dmFyIGg9Zi5kZXBlbmRlbmNpZXM7aWYobnVsbCE9PWgpe2c9Zi5jaGlsZDtmb3IodmFyIGs9aC5maXJzdENvbnRleHQ7bnVsbCE9PWs7KXtpZihrLmNvbnRleHQ9PT1kKXtpZigxPT09Zi50YWcpe2s9emcoLTEsYyYtYyk7ay50YWc9Mjt2YXIgbD1mLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1sKXtsPWwuc2hhcmVkO3ZhciBuPWwucGVuZGluZztudWxsPT09bj9rLm5leHQ9XG5rOihrLm5leHQ9bi5uZXh0LG4ubmV4dD1rKTtsLnBlbmRpbmc9a319Zi5sYW5lc3w9YztrPWYuYWx0ZXJuYXRlO251bGwhPT1rJiYoay5sYW5lc3w9Yyk7cmcoZi5yZXR1cm4sYyxiKTtoLmxhbmVzfD1jO2JyZWFrfWs9ay5uZXh0fX1lbHNlIGlmKDEwPT09Zi50YWcpZz1mLnR5cGU9PT1iLnR5cGU/bnVsbDpmLmNoaWxkO2Vsc2UgaWYoMTg9PT1mLnRhZyl7Zz1mLnJldHVybjtpZihudWxsPT09Zyl0aHJvdyBFcnJvcihwKDM0MSkpO2cubGFuZXN8PWM7aD1nLmFsdGVybmF0ZTtudWxsIT09aCYmKGgubGFuZXN8PWMpO3JnKGcsYyxiKTtnPWYuc2libGluZ31lbHNlIGc9Zi5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1mO2Vsc2UgZm9yKGc9ZjtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9Zj1nLnNpYmxpbmc7aWYobnVsbCE9PWYpe2YucmV0dXJuPWcucmV0dXJuO2c9ZjticmVha31nPWcucmV0dXJufWY9Z31laihhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7XG5jYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGQ9Yi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sc2coYixjKSxlPXVnKGUpLGQ9ZChlKSxiLmZsYWdzfD0xLGVqKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZD1iLnR5cGUsZT1rZyhkLGIucGVuZGluZ1Byb3BzKSxlPWtnKGQudHlwZSxlKSxoaihhLGIsZCxlLGMpO2Nhc2UgMTU6cmV0dXJuIGpqKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6a2coZCxlKSxudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKSxiLnRhZz0xLFlmKGQpPyhhPSEwLGJnKGIpKTphPSExLHNnKGIsYyksT2coYixkLGUpLFFnKGIsZCxlLGMpLHBqKG51bGwsYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4gRWooYSxiLGMpO2Nhc2UgMjI6cmV0dXJuIGxqKGEsYixjKX10aHJvdyBFcnJvcihwKDE1NixcbmIudGFnKSk7fTtmdW5jdGlvbiBFayhhLGIpe3JldHVybiAkYihhLGIpfWZ1bmN0aW9uIFprKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5zdWJ0cmVlRmxhZ3M9dGhpcy5mbGFncz0wO3RoaXMuZGVsZXRpb25zPW51bGw7dGhpcy5jaGlsZExhbmVzPXRoaXMubGFuZXM9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIGhoKGEsYixjLGQpe3JldHVybiBuZXcgWmsoYSxiLGMsZCl9XG5mdW5jdGlvbiBpaihhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfWZ1bmN0aW9uIFlrKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBpaihhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09Q2EpcmV0dXJuIDExO2lmKGE9PT1GYSlyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiB0aChhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPWhoKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMudHlwZT1hLnR5cGUsYy5mbGFncz0wLGMuc3VidHJlZUZsYWdzPTAsYy5kZWxldGlvbnM9bnVsbCk7Yy5mbGFncz1hLmZsYWdzJjE0NjgwMDY0O2MuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXM7Yy5sYW5lcz1hLmxhbmVzO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7bGFuZXM6Yi5sYW5lcyxmaXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHR9O1xuYy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiB2aChhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpaWooYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2Ugd2E6cmV0dXJuIHhoKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgeGE6Zz04O2V8PTg7YnJlYWs7Y2FzZSB6YTpyZXR1cm4gYT1oaCgxMixjLGIsZXwyKSxhLmVsZW1lbnRUeXBlPXphLGEubGFuZXM9ZixhO2Nhc2UgRGE6cmV0dXJuIGE9aGgoMTMsYyxiLGUpLGEuZWxlbWVudFR5cGU9RGEsYS5sYW5lcz1mLGE7Y2FzZSBFYTpyZXR1cm4gYT1oaCgxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1FYSxhLmxhbmVzPWYsYTtjYXNlIEhhOnJldHVybiB3aihjLGUsZixiKTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgQWE6Zz0xMDticmVhayBhO2Nhc2UgQmE6Zz05O2JyZWFrIGE7Y2FzZSBDYTpnPTExO1xuYnJlYWsgYTtjYXNlIEZhOmc9MTQ7YnJlYWsgYTtjYXNlIEdhOmc9MTY7ZD1udWxsO2JyZWFrIGF9dGhyb3cgRXJyb3IocCgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1oaChnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5sYW5lcz1mO3JldHVybiBifWZ1bmN0aW9uIHhoKGEsYixjLGQpe2E9aGgoNyxhLGQsYik7YS5sYW5lcz1jO3JldHVybiBhfWZ1bmN0aW9uIHdqKGEsYixjLGQpe2E9aGgoMjIsYSxkLGIpO2EuZWxlbWVudFR5cGU9SGE7YS5sYW5lcz1jO2Euc3RhdGVOb2RlPXt9O3JldHVybiBhfWZ1bmN0aW9uIHVoKGEsYixjKXthPWhoKDYsYSxudWxsLGIpO2EubGFuZXM9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIHdoKGEsYixjKXtiPWhoKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmxhbmVzPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gJGsoYSxiLGMsZCxlKXt0aGlzLnRhZz1iO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMuZmluaXNoZWRXb3JrPXRoaXMucGluZ0NhY2hlPXRoaXMuY3VycmVudD10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLmNhbGxiYWNrTm9kZT10aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuY2FsbGJhY2tQcmlvcml0eT0wO3RoaXMuZXZlbnRUaW1lcz15YygwKTt0aGlzLmV4cGlyYXRpb25UaW1lcz15YygtMSk7dGhpcy5lbnRhbmdsZWRMYW5lcz10aGlzLmZpbmlzaGVkTGFuZXM9dGhpcy5tdXRhYmxlUmVhZExhbmVzPXRoaXMuZXhwaXJlZExhbmVzPXRoaXMucGluZ2VkTGFuZXM9dGhpcy5zdXNwZW5kZWRMYW5lcz10aGlzLnBlbmRpbmdMYW5lcz0wO3RoaXMuZW50YW5nbGVtZW50cz15YygwKTt0aGlzLmlkZW50aWZpZXJQcmVmaXg9ZDt0aGlzLm9uUmVjb3ZlcmFibGVFcnJvcj1lO3RoaXMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1cbm51bGx9ZnVuY3Rpb24gYWwoYSxiLGMsZCxlLGYsZyxoLGspe2E9bmV3ICRrKGEsYixjLGgsayk7MT09PWI/KGI9MSwhMD09PWYmJihifD04KSk6Yj0wO2Y9aGgoMyxudWxsLG51bGwsYik7YS5jdXJyZW50PWY7Zi5zdGF0ZU5vZGU9YTtmLm1lbW9pemVkU3RhdGU9e2VsZW1lbnQ6ZCxpc0RlaHlkcmF0ZWQ6YyxjYWNoZTpudWxsLHRyYW5zaXRpb25zOm51bGwscGVuZGluZ1N1c3BlbnNlQm91bmRhcmllczpudWxsfTt4ZyhmKTtyZXR1cm4gYX1mdW5jdGlvbiBibChhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOnZhLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxuZnVuY3Rpb24gY2woYSl7aWYoIWEpcmV0dXJuIFVmO2E9YS5fcmVhY3RJbnRlcm5hbHM7YTp7aWYoVWIoYSkhPT1hfHwxIT09YS50YWcpdGhyb3cgRXJyb3IocCgxNzApKTt2YXIgYj1hO2Rve3N3aXRjaChiLnRhZyl7Y2FzZSAzOmI9Yi5zdGF0ZU5vZGUuY29udGV4dDticmVhayBhO2Nhc2UgMTppZihZZihiLnR5cGUpKXtiPWIuc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGF9fWI9Yi5yZXR1cm59d2hpbGUobnVsbCE9PWIpO3Rocm93IEVycm9yKHAoMTcxKSk7fWlmKDE9PT1hLnRhZyl7dmFyIGM9YS50eXBlO2lmKFlmKGMpKXJldHVybiBhZyhhLGMsYil9cmV0dXJuIGJ9XG5mdW5jdGlvbiBkbChhLGIsYyxkLGUsZixnLGgsayl7YT1hbChjLGQsITAsYSxlLGYsZyxoLGspO2EuY29udGV4dD1jbChudWxsKTtjPWEuY3VycmVudDtkPUpnKCk7ZT1LZyhjKTtmPXpnKGQsZSk7Zi5jYWxsYmFjaz12b2lkIDAhPT1iJiZudWxsIT09Yj9iOm51bGw7QWcoYyxmKTthLmN1cnJlbnQubGFuZXM9ZTt6YyhhLGUsZCk7Q2soYSxkKTtyZXR1cm4gYX1mdW5jdGlvbiBlbChhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1KZygpLGc9S2coZSk7Yz1jbChjKTtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPXpnKGYsZyk7Yi5wYXlsb2FkPXtlbGVtZW50OmF9O2Q9dm9pZCAwPT09ZD9udWxsOmQ7bnVsbCE9PWQmJihiLmNhbGxiYWNrPWQpO0FnKGUsYik7YT1MZyhlLGcsZik7bnVsbCE9PWEmJkNnKGEsZSxnKTtyZXR1cm4gZ31cbmZ1bmN0aW9uIGZsKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gZ2woYSxiKXthPWEubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCl7dmFyIGM9YS5yZXRyeUxhbmU7YS5yZXRyeUxhbmU9MCE9PWMmJmM8Yj9jOmJ9fWZ1bmN0aW9uIGhsKGEsYil7Z2woYSxiKTsoYT1hLmFsdGVybmF0ZSkmJmdsKGEsYil9ZnVuY3Rpb24gaWwoKXtyZXR1cm4gbnVsbH12YXIgamw9XCJmdW5jdGlvblwiPT09dHlwZW9mIHJlcG9ydEVycm9yP3JlcG9ydEVycm9yOmZ1bmN0aW9uKGEpe2NvbnNvbGUuZXJyb3IoYSl9O2Z1bmN0aW9uIGtsKGEpe3RoaXMuX2ludGVybmFsUm9vdD1hfVxubGwucHJvdG90eXBlLnJlbmRlcj1rbC5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2ludGVybmFsUm9vdDtpZihudWxsPT09Yil0aHJvdyBFcnJvcihwKDQwOSkpO2VsKGEsYixudWxsLG51bGwpfTtsbC5wcm90b3R5cGUudW5tb3VudD1rbC5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX2ludGVybmFsUm9vdDtpZihudWxsIT09YSl7dGhpcy5faW50ZXJuYWxSb290PW51bGw7dmFyIGI9YS5jb250YWluZXJJbmZvO1FrKGZ1bmN0aW9uKCl7ZWwobnVsbCxhLG51bGwsbnVsbCl9KTtiW3RmXT1udWxsfX07ZnVuY3Rpb24gbGwoYSl7dGhpcy5faW50ZXJuYWxSb290PWF9XG5sbC5wcm90b3R5cGUudW5zdGFibGVfc2NoZWR1bGVIeWRyYXRpb249ZnVuY3Rpb24oYSl7aWYoYSl7dmFyIGI9R2MoKTthPXtibG9ja2VkT246bnVsbCx0YXJnZXQ6YSxwcmlvcml0eTpifTtmb3IodmFyIGM9MDtjPFBjLmxlbmd0aCYmMCE9PWImJmI8UGNbY10ucHJpb3JpdHk7YysrKTtQYy5zcGxpY2UoYywwLGEpOzA9PT1jJiZVYyhhKX19O2Z1bmN0aW9uIG1sKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlKX1mdW5jdGlvbiBubChhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9ZnVuY3Rpb24gb2woKXt9XG5mdW5jdGlvbiBwbChhLGIsYyxkLGUpe2lmKGUpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZj1kO2Q9ZnVuY3Rpb24oKXt2YXIgYT1mbChnKTtmLmNhbGwoYSl9fXZhciBnPWRsKGIsZCxhLDAsbnVsbCwhMSwhMSxcIlwiLG9sKTthLl9yZWFjdFJvb3RDb250YWluZXI9ZzthW3RmXT1nLmN1cnJlbnQ7cmYoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO1FrKCk7cmV0dXJuIGd9Zm9yKDtlPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGUpO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgaD1kO2Q9ZnVuY3Rpb24oKXt2YXIgYT1mbChrKTtoLmNhbGwoYSl9fXZhciBrPWFsKGEsMCwhMSxudWxsLG51bGwsITEsITEsXCJcIixvbCk7YS5fcmVhY3RSb290Q29udGFpbmVyPWs7YVt0Zl09ay5jdXJyZW50O3JmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtRayhmdW5jdGlvbigpe2VsKGIsayxjLGQpfSk7cmV0dXJuIGt9XG5mdW5jdGlvbiBxbChhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXt2YXIgZz1mO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1mbChnKTtoLmNhbGwoYSl9fWVsKGIsZyxhLGUpfWVsc2UgZz1wbChjLGIsYSxlLGQpO3JldHVybiBmbChnKX1EYz1mdW5jdGlvbihhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMzp2YXIgYj1hLnN0YXRlTm9kZTtpZihiLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpe3ZhciBjPXNjKGIucGVuZGluZ0xhbmVzKTswIT09YyYmKEJjKGIsY3wxKSxDayhiLEIoKSksMD09PShXJjYpJiYoYWo9QigpKzUwMCxpZygpKSl9YnJlYWs7Y2FzZSAxMzp2YXIgZD1KZygpO1FrKGZ1bmN0aW9uKCl7cmV0dXJuIExnKGEsMSxkKX0pO2hsKGEsMSl9fTtFYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1KZygpO0xnKGEsMTM0MjE3NzI4LGIpO2hsKGEsMTM0MjE3NzI4KX19O1xuRmM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9SmcoKSxjPUtnKGEpO0xnKGEsYyxiKTtobChhLGMpfX07R2M9ZnVuY3Rpb24oKXtyZXR1cm4gQ307SGM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1DO3RyeXtyZXR1cm4gQz1hLGIoKX1maW5hbGx5e0M9Y319O1xueGI9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjokYShhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9Q2IoZCk7aWYoIWUpdGhyb3cgRXJyb3IocCg5MCkpO1ZhKGQpOyRhKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmZWIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtGYj1QaztHYj1RaztcbnZhciBybD17dXNpbmdDbGllbnRFbnRyeVBvaW50OiExLEV2ZW50czpbQmIsdGUsQ2IsRGIsRWIsUGtdfSxzbD17ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6VmMsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxOC4xLjBcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9O1xudmFyIHRsPXtidW5kbGVUeXBlOnNsLmJ1bmRsZVR5cGUsdmVyc2lvbjpzbC52ZXJzaW9uLHJlbmRlcmVyUGFja2FnZU5hbWU6c2wucmVuZGVyZXJQYWNrYWdlTmFtZSxyZW5kZXJlckNvbmZpZzpzbC5yZW5kZXJlckNvbmZpZyxvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxvdmVycmlkZVByb3BzRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOm51bGwsc2V0RXJyb3JIYW5kbGVyOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjp0YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9WWIoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOnNsLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlfHxcbmlsLGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGwscmVjb25jaWxlclZlcnNpb246XCIxOC4xLjAtbmV4dC0yMmVkYjlmNzctMjAyMjA0MjZcIn07aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pe3ZhciB1bD1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoIXVsLmlzRGlzYWJsZWQmJnVsLnN1cHBvcnRzRmliZXIpdHJ5e2pjPXVsLmluamVjdCh0bCksa2M9dWx9Y2F0Y2goYSl7fX1leHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPXJsO1xuZXhwb3J0cy5jcmVhdGVQb3J0YWw9ZnVuY3Rpb24oYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZighbWwoYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gYmwoYSxiLG51bGwsYyl9O2V4cG9ydHMuY3JlYXRlUm9vdD1mdW5jdGlvbihhLGIpe2lmKCFtbChhKSl0aHJvdyBFcnJvcihwKDI5OSkpO3ZhciBjPSExLGQ9XCJcIixlPWpsO251bGwhPT1iJiZ2b2lkIDAhPT1iJiYoITA9PT1iLnVuc3RhYmxlX3N0cmljdE1vZGUmJihjPSEwKSx2b2lkIDAhPT1iLmlkZW50aWZpZXJQcmVmaXgmJihkPWIuaWRlbnRpZmllclByZWZpeCksdm9pZCAwIT09Yi5vblJlY292ZXJhYmxlRXJyb3ImJihlPWIub25SZWNvdmVyYWJsZUVycm9yKSk7Yj1hbChhLDEsITEsbnVsbCxudWxsLGMsITEsZCxlKTthW3RmXT1iLmN1cnJlbnQ7cmYoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO3JldHVybiBuZXcga2woYil9O1xuZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxzO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcihwKDE4OCkpO2E9T2JqZWN0LmtleXMoYSkuam9pbihcIixcIik7dGhyb3cgRXJyb3IocCgyNjgsYSkpO31hPVliKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07ZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSl7cmV0dXJuIFFrKGEpfTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFubChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBxbChudWxsLGEsYiwhMCxjKX07XG5leHBvcnRzLmh5ZHJhdGVSb290PWZ1bmN0aW9uKGEsYixjKXtpZighbWwoYSkpdGhyb3cgRXJyb3IocCg0MDUpKTt2YXIgZD1udWxsIT1jJiZjLmh5ZHJhdGVkU291cmNlc3x8bnVsbCxlPSExLGY9XCJcIixnPWpsO251bGwhPT1jJiZ2b2lkIDAhPT1jJiYoITA9PT1jLnVuc3RhYmxlX3N0cmljdE1vZGUmJihlPSEwKSx2b2lkIDAhPT1jLmlkZW50aWZpZXJQcmVmaXgmJihmPWMuaWRlbnRpZmllclByZWZpeCksdm9pZCAwIT09Yy5vblJlY292ZXJhYmxlRXJyb3ImJihnPWMub25SZWNvdmVyYWJsZUVycm9yKSk7Yj1kbChiLG51bGwsYSwxLG51bGwhPWM/YzpudWxsLGUsITEsZixnKTthW3RmXT1iLmN1cnJlbnQ7cmYoYSk7aWYoZClmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKWM9ZFthXSxlPWMuX2dldFZlcnNpb24sZT1lKGMuX3NvdXJjZSksbnVsbD09Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhP2IubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1bYyxlXTpiLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEucHVzaChjLFxuZSk7cmV0dXJuIG5ldyBsbChiKX07ZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMpe2lmKCFubChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBxbChudWxsLGEsYiwhMSxjKX07ZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFubChhKSl0aHJvdyBFcnJvcihwKDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oUWsoZnVuY3Rpb24oKXtxbChudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbdGZdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1QaztcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIW5sKGMpKXRocm93IEVycm9yKHAoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbHMpdGhyb3cgRXJyb3IocCgzOCkpO3JldHVybiBxbChhLGIsYywhMSxkKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTguMS4wLW5leHQtMjJlZGI5Zjc3LTIwMjIwNDI2XCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBtID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBtLmNyZWF0ZVJvb3Q7XG4gIGV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBtLmh5ZHJhdGVSb290O1xufSBlbHNlIHtcbiAgdmFyIGkgPSBtLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBmdW5jdGlvbihjLCBvKSB7XG4gICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbS5jcmVhdGVSb290KGMsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgZXhwb3J0cy5oeWRyYXRlUm9vdCA9IGZ1bmN0aW9uKGMsIGgsIG8pIHtcbiAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBtLmh5ZHJhdGVSb290KGMsIGgsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4yXG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGI9NjAxMDMsYz02MDEwNixkPTYwMTA3LGU9NjAxMDgsZj02MDExNCxnPTYwMTA5LGg9NjAxMTAsaz02MDExMixsPTYwMTEzLG09NjAxMjAsbj02MDExNSxwPTYwMTE2LHE9NjAxMjEscj02MDEyMix1PTYwMTE3LHY9NjAxMjksdz02MDEzMTtcbmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3Ipe3ZhciB4PVN5bWJvbC5mb3I7Yj14KFwicmVhY3QuZWxlbWVudFwiKTtjPXgoXCJyZWFjdC5wb3J0YWxcIik7ZD14KFwicmVhY3QuZnJhZ21lbnRcIik7ZT14KFwicmVhY3Quc3RyaWN0X21vZGVcIik7Zj14KFwicmVhY3QucHJvZmlsZXJcIik7Zz14KFwicmVhY3QucHJvdmlkZXJcIik7aD14KFwicmVhY3QuY29udGV4dFwiKTtrPXgoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTtsPXgoXCJyZWFjdC5zdXNwZW5zZVwiKTttPXgoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpO249eChcInJlYWN0Lm1lbW9cIik7cD14KFwicmVhY3QubGF6eVwiKTtxPXgoXCJyZWFjdC5ibG9ja1wiKTtyPXgoXCJyZWFjdC5zZXJ2ZXIuYmxvY2tcIik7dT14KFwicmVhY3QuZnVuZGFtZW50YWxcIik7dj14KFwicmVhY3QuZGVidWdfdHJhY2VfbW9kZVwiKTt3PXgoXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpfVxuZnVuY3Rpb24geShhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdD1hLiQkdHlwZW9mO3N3aXRjaCh0KXtjYXNlIGI6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgZDpjYXNlIGY6Y2FzZSBlOmNhc2UgbDpjYXNlIG06cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgaDpjYXNlIGs6Y2FzZSBwOmNhc2UgbjpjYXNlIGc6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gdH19Y2FzZSBjOnJldHVybiB0fX19dmFyIHo9ZyxBPWIsQj1rLEM9ZCxEPXAsRT1uLEY9YyxHPWYsSD1lLEk9bDtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1oO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPXo7ZXhwb3J0cy5FbGVtZW50PUE7ZXhwb3J0cy5Gb3J3YXJkUmVmPUI7ZXhwb3J0cy5GcmFnbWVudD1DO2V4cG9ydHMuTGF6eT1EO2V4cG9ydHMuTWVtbz1FO2V4cG9ydHMuUG9ydGFsPUY7ZXhwb3J0cy5Qcm9maWxlcj1HO2V4cG9ydHMuU3RyaWN0TW9kZT1IO1xuZXhwb3J0cy5TdXNwZW5zZT1JO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oKXtyZXR1cm4hMX07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1ofTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09Z307ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWJ9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09a307ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09ZH07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1wfTtleHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PW59O1xuZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWN9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWZ9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09ZX07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09bH07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWR8fGE9PT1mfHxhPT09dnx8YT09PWV8fGE9PT1sfHxhPT09bXx8YT09PXd8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09cHx8YS4kJHR5cGVvZj09PW58fGEuJCR0eXBlb2Y9PT1nfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT11fHxhLiQkdHlwZW9mPT09cXx8YVswXT09PXIpPyEwOiExfTtcbmV4cG9ydHMudHlwZU9mPXk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYj1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSxjPVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIiksZD1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIiksZT1TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIiksZj1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksZz1TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIiksaD1TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSxrPVN5bWJvbC5mb3IoXCJyZWFjdC5zZXJ2ZXJfY29udGV4dFwiKSxsPVN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSxtPVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSxuPVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpLHA9U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIikscT1TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKSx0PVN5bWJvbC5mb3IoXCJyZWFjdC5vZmZzY3JlZW5cIiksdTt1PVN5bWJvbC5mb3IoXCJyZWFjdC5tb2R1bGUucmVmZXJlbmNlXCIpO1xuZnVuY3Rpb24gdihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgcj1hLiQkdHlwZW9mO3N3aXRjaChyKXtjYXNlIGI6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgZDpjYXNlIGY6Y2FzZSBlOmNhc2UgbTpjYXNlIG46cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgazpjYXNlIGg6Y2FzZSBsOmNhc2UgcTpjYXNlIHA6Y2FzZSBnOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHJ9fWNhc2UgYzpyZXR1cm4gcn19fWV4cG9ydHMuQ29udGV4dENvbnN1bWVyPWg7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9ZztleHBvcnRzLkVsZW1lbnQ9YjtleHBvcnRzLkZvcndhcmRSZWY9bDtleHBvcnRzLkZyYWdtZW50PWQ7ZXhwb3J0cy5MYXp5PXE7ZXhwb3J0cy5NZW1vPXA7ZXhwb3J0cy5Qb3J0YWw9YztleHBvcnRzLlByb2ZpbGVyPWY7ZXhwb3J0cy5TdHJpY3RNb2RlPWU7ZXhwb3J0cy5TdXNwZW5zZT1tO1xuZXhwb3J0cy5TdXNwZW5zZUxpc3Q9bjtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1mdW5jdGlvbigpe3JldHVybiExfTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09aH07ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PWd9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1ifTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PWx9O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PWR9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09cX07ZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1wfTtcbmV4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1jfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1mfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PWV9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PW19O2V4cG9ydHMuaXNTdXNwZW5zZUxpc3Q9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1ufTtcbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1kfHxhPT09Znx8YT09PWV8fGE9PT1tfHxhPT09bnx8YT09PXR8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09cXx8YS4kJHR5cGVvZj09PXB8fGEuJCR0eXBlb2Y9PT1nfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWx8fGEuJCR0eXBlb2Y9PT11fHx2b2lkIDAhPT1hLmdldE1vZHVsZUlkKT8hMDohMX07ZXhwb3J0cy50eXBlT2Y9djtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBmPXJlcXVpcmUoXCJyZWFjdFwiKSxrPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLGw9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLG09T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxuPWYuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQuUmVhY3RDdXJyZW50T3duZXIscD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gcShjLGEsZyl7dmFyIGIsZD17fSxlPW51bGwsaD1udWxsO3ZvaWQgMCE9PWcmJihlPVwiXCIrZyk7dm9pZCAwIT09YS5rZXkmJihlPVwiXCIrYS5rZXkpO3ZvaWQgMCE9PWEucmVmJiYoaD1hLnJlZik7Zm9yKGIgaW4gYSltLmNhbGwoYSxiKSYmIXAuaGFzT3duUHJvcGVydHkoYikmJihkW2JdPWFbYl0pO2lmKGMmJmMuZGVmYXVsdFByb3BzKWZvcihiIGluIGE9Yy5kZWZhdWx0UHJvcHMsYSl2b2lkIDA9PT1kW2JdJiYoZFtiXT1hW2JdKTtyZXR1cm57JCR0eXBlb2Y6ayx0eXBlOmMsa2V5OmUscmVmOmgscHJvcHM6ZCxfb3duZXI6bi5jdXJyZW50fX1leHBvcnRzLkZyYWdtZW50PWw7ZXhwb3J0cy5qc3g9cTtleHBvcnRzLmpzeHM9cTtcbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgbD1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSxuPVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIikscD1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIikscT1TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIikscj1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksdD1TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIiksdT1TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSx2PVN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSx3PVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSx4PVN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLHk9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIiksej1TeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gQShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9eiYmYVt6XXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxudmFyIEI9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEM9T2JqZWN0LmFzc2lnbixEPXt9O2Z1bmN0aW9uIEUoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZXx8Qn1FLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O1xuRS5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKFwic2V0U3RhdGUoLi4uKTogdGFrZXMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcyB0byB1cGRhdGUgb3IgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMuXCIpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07RS5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRigpe31GLnByb3RvdHlwZT1FLnByb3RvdHlwZTtmdW5jdGlvbiBHKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWV8fEJ9dmFyIEg9Ry5wcm90b3R5cGU9bmV3IEY7XG5ILmNvbnN0cnVjdG9yPUc7QyhILEUucHJvdG90eXBlKTtILmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBJPUFycmF5LmlzQXJyYXksSj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEs9e2N1cnJlbnQ6bnVsbH0sTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsZSl7dmFyIGQsYz17fSxrPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGQgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGs9XCJcIitiLmtleSksYilKLmNhbGwoYixkKSYmIUwuaGFzT3duUHJvcGVydHkoZCkmJihjW2RdPWJbZF0pO3ZhciBnPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZyljLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGcpe2Zvcih2YXIgZj1BcnJheShnKSxtPTA7bTxnO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2MuY2hpbGRyZW49Zn1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZCBpbiBnPWEuZGVmYXVsdFByb3BzLGcpdm9pZCAwPT09Y1tkXSYmKGNbZF09Z1tkXSk7cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLGtleTprLHJlZjpoLHByb3BzOmMsX293bmVyOksuY3VycmVudH19XG5mdW5jdGlvbiBOKGEsYil7cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBPKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1sfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrYS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgUD0vXFwvKy9nO2Z1bmN0aW9uIFEoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoXCJcIithLmtleSk6Yi50b1N0cmluZygzNil9XG5mdW5jdGlvbiBSKGEsYixlLGQsYyl7dmFyIGs9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWt8fFwiYm9vbGVhblwiPT09aylhPW51bGw7dmFyIGg9ITE7aWYobnVsbD09PWEpaD0hMDtlbHNlIHN3aXRjaChrKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmg9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGw6Y2FzZSBuOmg9ITB9fWlmKGgpcmV0dXJuIGg9YSxjPWMoaCksYT1cIlwiPT09ZD9cIi5cIitRKGgsMCk6ZCxJKGMpPyhlPVwiXCIsbnVsbCE9YSYmKGU9YS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpLFIoYyxiLGUsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYX0pKTpudWxsIT1jJiYoTyhjKSYmKGM9TihjLGUrKCFjLmtleXx8aCYmaC5rZXk9PT1jLmtleT9cIlwiOihcIlwiK2Mua2V5KS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpK2EpKSxiLnB1c2goYykpLDE7aD0wO2Q9XCJcIj09PWQ/XCIuXCI6ZCtcIjpcIjtpZihJKGEpKWZvcih2YXIgZz0wO2c8YS5sZW5ndGg7ZysrKXtrPVxuYVtnXTt2YXIgZj1kK1EoayxnKTtoKz1SKGssYixlLGYsYyl9ZWxzZSBpZihmPUEoYSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGc9MDshKGs9YS5uZXh0KCkpLmRvbmU7KWs9ay52YWx1ZSxmPWQrUShrLGcrKyksaCs9UihrLGIsZSxmLGMpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWspdGhyb3cgYj1TdHJpbmcoYSksRXJyb3IoXCJPYmplY3RzIGFyZSBub3QgdmFsaWQgYXMgYSBSZWFjdCBjaGlsZCAoZm91bmQ6IFwiKyhcIltvYmplY3QgT2JqZWN0XVwiPT09Yj9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpiKStcIikuIElmIHlvdSBtZWFudCB0byByZW5kZXIgYSBjb2xsZWN0aW9uIG9mIGNoaWxkcmVuLCB1c2UgYW4gYXJyYXkgaW5zdGVhZC5cIik7cmV0dXJuIGh9XG5mdW5jdGlvbiBTKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBkPVtdLGM9MDtSKGEsZCxcIlwiLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGIuY2FsbChlLGEsYysrKX0pO3JldHVybiBkfWZ1bmN0aW9uIFQoYSl7aWYoLTE9PT1hLl9zdGF0dXMpe3ZhciBiPWEuX3Jlc3VsdDtiPWIoKTtiLnRoZW4oZnVuY3Rpb24oYil7aWYoMD09PWEuX3N0YXR1c3x8LTE9PT1hLl9zdGF0dXMpYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWJ9LGZ1bmN0aW9uKGIpe2lmKDA9PT1hLl9zdGF0dXN8fC0xPT09YS5fc3RhdHVzKWEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1ifSk7LTE9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MCxhLl9yZXN1bHQ9Yil9aWYoMT09PWEuX3N0YXR1cylyZXR1cm4gYS5fcmVzdWx0LmRlZmF1bHQ7dGhyb3cgYS5fcmVzdWx0O31cbnZhciBVPXtjdXJyZW50Om51bGx9LFY9e3RyYW5zaXRpb246bnVsbH0sVz17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpVLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOlYsUmVhY3RDdXJyZW50T3duZXI6S307ZXhwb3J0cy5DaGlsZHJlbj17bWFwOlMsZm9yRWFjaDpmdW5jdGlvbihhLGIsZSl7UyhhLGZ1bmN0aW9uKCl7Yi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGUpfSxjb3VudDpmdW5jdGlvbihhKXt2YXIgYj0wO1MoYSxmdW5jdGlvbigpe2IrK30pO3JldHVybiBifSx0b0FycmF5OmZ1bmN0aW9uKGEpe3JldHVybiBTKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KXx8W119LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIU8oYSkpdGhyb3cgRXJyb3IoXCJSZWFjdC5DaGlsZHJlbi5vbmx5IGV4cGVjdGVkIHRvIHJlY2VpdmUgYSBzaW5nbGUgUmVhY3QgZWxlbWVudCBjaGlsZC5cIik7cmV0dXJuIGF9fTtleHBvcnRzLkNvbXBvbmVudD1FO2V4cG9ydHMuRnJhZ21lbnQ9cDtcbmV4cG9ydHMuUHJvZmlsZXI9cjtleHBvcnRzLlB1cmVDb21wb25lbnQ9RztleHBvcnRzLlN0cmljdE1vZGU9cTtleHBvcnRzLlN1c3BlbnNlPXc7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1XO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKFwiUmVhY3QuY2xvbmVFbGVtZW50KC4uLik6IFRoZSBhcmd1bWVudCBtdXN0IGJlIGEgUmVhY3QgZWxlbWVudCwgYnV0IHlvdSBwYXNzZWQgXCIrYStcIi5cIik7dmFyIGQ9Qyh7fSxhLnByb3BzKSxjPWEua2V5LGs9YS5yZWYsaD1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYsaD1LLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoYz1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGc9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoZiBpbiBiKUouY2FsbChiLGYpJiYhTC5oYXNPd25Qcm9wZXJ0eShmKSYmKGRbZl09dm9pZCAwPT09YltmXSYmdm9pZCAwIT09Zz9nW2ZdOmJbZl0pfXZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGYpe2c9QXJyYXkoZik7XG5mb3IodmFyIG09MDttPGY7bSsrKWdbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1nfXJldHVybnskJHR5cGVvZjpsLHR5cGU6YS50eXBlLGtleTpjLHJlZjprLHByb3BzOmQsX293bmVyOmh9fTtleHBvcnRzLmNyZWF0ZUNvbnRleHQ9ZnVuY3Rpb24oYSl7YT17JCR0eXBlb2Y6dSxfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGwsX2RlZmF1bHRWYWx1ZTpudWxsLF9nbG9iYWxOYW1lOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnQsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PU07ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtcbmV4cG9ydHMuZm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6dixyZW5kZXI6YX19O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnQ9TztleHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnksX3BheWxvYWQ6e19zdGF0dXM6LTEsX3Jlc3VsdDphfSxfaW5pdDpUfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOngsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnN0YXJ0VHJhbnNpdGlvbj1mdW5jdGlvbihhKXt2YXIgYj1WLnRyYW5zaXRpb247Vi50cmFuc2l0aW9uPXt9O3RyeXthKCl9ZmluYWxseXtWLnRyYW5zaXRpb249Yn19O2V4cG9ydHMudW5zdGFibGVfYWN0PWZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoXCJhY3QoLi4uKSBpcyBub3Qgc3VwcG9ydGVkIGluIHByb2R1Y3Rpb24gYnVpbGRzIG9mIFJlYWN0LlwiKTt9O1xuZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlQ29udGV4dChhKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZURlZmVycmVkVmFsdWU9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VEZWZlcnJlZFZhbHVlKGEpfTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSWQ9ZnVuY3Rpb24oKXtyZXR1cm4gVS5jdXJyZW50LnVzZUlkKCl9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixlKX07XG5leHBvcnRzLnVzZUluc2VydGlvbkVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlSW5zZXJ0aW9uRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VMYXlvdXRFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VSZWR1Y2VyKGEsYixlKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VTdGF0ZShhKX07ZXhwb3J0cy51c2VTeW5jRXh0ZXJuYWxTdG9yZT1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VTeW5jRXh0ZXJuYWxTdG9yZShhLGIsZSl9O1xuZXhwb3J0cy51c2VUcmFuc2l0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIFUuY3VycmVudC51c2VUcmFuc2l0aW9uKCl9O2V4cG9ydHMudmVyc2lvbj1cIjE4LjEuMFwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7ZnVuY3Rpb24gZihhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7MDxjOyl7dmFyIGQ9Yy0xPj4+MSxlPWFbZF07aWYoMDxnKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBoKGEpe3JldHVybiAwPT09YS5sZW5ndGg/bnVsbDphWzBdfWZ1bmN0aW9uIGsoYSl7aWYoMD09PWEubGVuZ3RoKXJldHVybiBudWxsO3ZhciBiPWFbMF0sYz1hLnBvcCgpO2lmKGMhPT1iKXthWzBdPWM7YTpmb3IodmFyIGQ9MCxlPWEubGVuZ3RoLHc9ZT4+PjE7ZDx3Oyl7dmFyIG09MiooZCsxKS0xLEM9YVttXSxuPW0rMSx4PWFbbl07aWYoMD5nKEMsYykpbjxlJiYwPmcoeCxDKT8oYVtkXT14LGFbbl09YyxkPW4pOihhW2RdPUMsYVttXT1jLGQ9bSk7ZWxzZSBpZihuPGUmJjA+Zyh4LGMpKWFbZF09eCxhW25dPWMsZD1uO2Vsc2UgYnJlYWsgYX19cmV0dXJuIGJ9XG5mdW5jdGlvbiBnKGEsYil7dmFyIGM9YS5zb3J0SW5kZXgtYi5zb3J0SW5kZXg7cmV0dXJuIDAhPT1jP2M6YS5pZC1iLmlkfWlmKFwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3cpe3ZhciBsPXBlcmZvcm1hbmNlO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIGwubm93KCl9fWVsc2V7dmFyIHA9RGF0ZSxxPXAubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gcC5ub3coKS1xfX12YXIgcj1bXSx0PVtdLHU9MSx2PW51bGwseT0zLHo9ITEsQT0hMSxCPSExLEQ9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDpudWxsLEU9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6bnVsbCxGPVwidW5kZWZpbmVkXCIhPT10eXBlb2Ygc2V0SW1tZWRpYXRlP3NldEltbWVkaWF0ZTpudWxsO1xuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBuYXZpZ2F0b3ImJnZvaWQgMCE9PW5hdmlnYXRvci5zY2hlZHVsaW5nJiZ2b2lkIDAhPT1uYXZpZ2F0b3Iuc2NoZWR1bGluZy5pc0lucHV0UGVuZGluZyYmbmF2aWdhdG9yLnNjaGVkdWxpbmcuaXNJbnB1dFBlbmRpbmcuYmluZChuYXZpZ2F0b3Iuc2NoZWR1bGluZyk7ZnVuY3Rpb24gRyhhKXtmb3IodmFyIGI9aCh0KTtudWxsIT09Yjspe2lmKG51bGw9PT1iLmNhbGxiYWNrKWsodCk7ZWxzZSBpZihiLnN0YXJ0VGltZTw9YSlrKHQpLGIuc29ydEluZGV4PWIuZXhwaXJhdGlvblRpbWUsZihyLGIpO2Vsc2UgYnJlYWs7Yj1oKHQpfX1mdW5jdGlvbiBIKGEpe0I9ITE7RyhhKTtpZighQSlpZihudWxsIT09aChyKSlBPSEwLEkoSik7ZWxzZXt2YXIgYj1oKHQpO251bGwhPT1iJiZLKEgsYi5zdGFydFRpbWUtYSl9fVxuZnVuY3Rpb24gSihhLGIpe0E9ITE7QiYmKEI9ITEsRShMKSxMPS0xKTt6PSEwO3ZhciBjPXk7dHJ5e0coYik7Zm9yKHY9aChyKTtudWxsIT09diYmKCEodi5leHBpcmF0aW9uVGltZT5iKXx8YSYmIU0oKSk7KXt2YXIgZD12LmNhbGxiYWNrO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2LmNhbGxiYWNrPW51bGw7eT12LnByaW9yaXR5TGV2ZWw7dmFyIGU9ZCh2LmV4cGlyYXRpb25UaW1lPD1iKTtiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/di5jYWxsYmFjaz1lOnY9PT1oKHIpJiZrKHIpO0coYil9ZWxzZSBrKHIpO3Y9aChyKX1pZihudWxsIT09dil2YXIgdz0hMDtlbHNle3ZhciBtPWgodCk7bnVsbCE9PW0mJksoSCxtLnN0YXJ0VGltZS1iKTt3PSExfXJldHVybiB3fWZpbmFsbHl7dj1udWxsLHk9Yyx6PSExfX12YXIgTj0hMSxPPW51bGwsTD0tMSxQPTUsUT0tMTtcbmZ1bmN0aW9uIE0oKXtyZXR1cm4gZXhwb3J0cy51bnN0YWJsZV9ub3coKS1RPFA/ITE6ITB9ZnVuY3Rpb24gUigpe2lmKG51bGwhPT1PKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO1E9YTt2YXIgYj0hMDt0cnl7Yj1PKCEwLGEpfWZpbmFsbHl7Yj9TKCk6KE49ITEsTz1udWxsKX19ZWxzZSBOPSExfXZhciBTO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBGKVM9ZnVuY3Rpb24oKXtGKFIpfTtlbHNlIGlmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciBUPW5ldyBNZXNzYWdlQ2hhbm5lbCxVPVQucG9ydDI7VC5wb3J0MS5vbm1lc3NhZ2U9UjtTPWZ1bmN0aW9uKCl7VS5wb3N0TWVzc2FnZShudWxsKX19ZWxzZSBTPWZ1bmN0aW9uKCl7RChSLDApfTtmdW5jdGlvbiBJKGEpe089YTtOfHwoTj0hMCxTKCkpfWZ1bmN0aW9uIEsoYSxiKXtMPUQoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX1cbmV4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7ZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtBfHx6fHwoQT0hMCxJKEopKX07XG5leHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKGEpezA+YXx8MTI1PGE/Y29uc29sZS5lcnJvcihcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lIHJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHN1cHBvcnRlZFwiKTpQPTA8YT9NYXRoLmZsb29yKDFFMy9hKTo1fTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIHl9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gaChyKX07ZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaCh5KXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj15fXZhciBjPXk7eT1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7eT1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307XG5leHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludD1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmE9M312YXIgYz15O3k9YTt0cnl7cmV0dXJuIGIoKX1maW5hbGx5e3k9Y319O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWM/KGM9Yy5kZWxheSxjPVwibnVtYmVyXCI9PT10eXBlb2YgYyYmMDxjP2QrYzpkKTpjPWQ7c3dpdGNoKGEpe2Nhc2UgMTp2YXIgZT0tMTticmVhaztjYXNlIDI6ZT0yNTA7YnJlYWs7Y2FzZSA1OmU9MTA3Mzc0MTgyMzticmVhaztjYXNlIDQ6ZT0xRTQ7YnJlYWs7ZGVmYXVsdDplPTVFM31lPWMrZTthPXtpZDp1KyssY2FsbGJhY2s6Yixwcmlvcml0eUxldmVsOmEsc3RhcnRUaW1lOmMsZXhwaXJhdGlvblRpbWU6ZSxzb3J0SW5kZXg6LTF9O2M+ZD8oYS5zb3J0SW5kZXg9YyxmKHQsYSksbnVsbD09PWgocikmJmE9PT1oKHQpJiYoQj8oRShMKSxMPS0xKTpCPSEwLEsoSCxjLWQpKSk6KGEuc29ydEluZGV4PWUsZihyLGEpLEF8fHp8fChBPSEwLEkoSikpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPU07ZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9eTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz15O3k9Yjt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7eT1jfX19O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8vXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIsIGNvbXBhcmUsIGNvbXBhcmVDb250ZXh0KSB7XG4gIHZhciByZXQgPSBjb21wYXJlID8gY29tcGFyZS5jYWxsKGNvbXBhcmVDb250ZXh0LCBvYmpBLCBvYmpCKSA6IHZvaWQgMDtcblxuICBpZiAocmV0ICE9PSB2b2lkIDApIHtcbiAgICByZXR1cm4gISFyZXQ7XG4gIH1cblxuICBpZiAob2JqQSA9PT0gb2JqQikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSBcIm9iamVjdFwiIHx8ICFvYmpBIHx8IHR5cGVvZiBvYmpCICE9PSBcIm9iamVjdFwiIHx8ICFvYmpCKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBiSGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmJpbmQob2JqQik7XG5cbiAgLy8gVGVzdCBmb3IgQSdzIGtleXMgZGlmZmVyZW50IGZyb20gQi5cbiAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwga2V5c0EubGVuZ3RoOyBpZHgrKykge1xuICAgIHZhciBrZXkgPSBrZXlzQVtpZHhdO1xuXG4gICAgaWYgKCFiSGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZUEgPSBvYmpBW2tleV07XG4gICAgdmFyIHZhbHVlQiA9IG9iakJba2V5XTtcblxuICAgIHJldCA9IGNvbXBhcmUgPyBjb21wYXJlLmNhbGwoY29tcGFyZUNvbnRleHQsIHZhbHVlQSwgdmFsdWVCLCBrZXkpIDogdm9pZCAwO1xuXG4gICAgaWYgKHJldCA9PT0gZmFsc2UgfHwgKHJldCA9PT0gdm9pZCAwICYmIHZhbHVlQSAhPT0gdmFsdWVCKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHVzZS1zeW5jLWV4dGVybmFsLXN0b3JlLXNoaW0ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBlPXJlcXVpcmUoXCJyZWFjdFwiKTtmdW5jdGlvbiBoKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgaz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgT2JqZWN0LmlzP09iamVjdC5pczpoLGw9ZS51c2VTdGF0ZSxtPWUudXNlRWZmZWN0LG49ZS51c2VMYXlvdXRFZmZlY3QscD1lLnVzZURlYnVnVmFsdWU7ZnVuY3Rpb24gcShhLGIpe3ZhciBkPWIoKSxmPWwoe2luc3Q6e3ZhbHVlOmQsZ2V0U25hcHNob3Q6Yn19KSxjPWZbMF0uaW5zdCxnPWZbMV07bihmdW5jdGlvbigpe2MudmFsdWU9ZDtjLmdldFNuYXBzaG90PWI7cihjKSYmZyh7aW5zdDpjfSl9LFthLGQsYl0pO20oZnVuY3Rpb24oKXtyKGMpJiZnKHtpbnN0OmN9KTtyZXR1cm4gYShmdW5jdGlvbigpe3IoYykmJmcoe2luc3Q6Y30pfSl9LFthXSk7cChkKTtyZXR1cm4gZH1cbmZ1bmN0aW9uIHIoYSl7dmFyIGI9YS5nZXRTbmFwc2hvdDthPWEudmFsdWU7dHJ5e3ZhciBkPWIoKTtyZXR1cm4hayhhLGQpfWNhdGNoKGYpe3JldHVybiEwfX1mdW5jdGlvbiB0KGEsYil7cmV0dXJuIGIoKX12YXIgdT1cInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQ/dDpxO2V4cG9ydHMudXNlU3luY0V4dGVybmFsU3RvcmU9dm9pZCAwIT09ZS51c2VTeW5jRXh0ZXJuYWxTdG9yZT9lLnVzZVN5bmNFeHRlcm5hbFN0b3JlOnU7XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiB1c2Utc3luYy1leHRlcm5hbC1zdG9yZS1zaGltL3dpdGgtc2VsZWN0b3IucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBoPXJlcXVpcmUoXCJyZWFjdFwiKSxuPXJlcXVpcmUoXCJ1c2Utc3luYy1leHRlcm5hbC1zdG9yZS9zaGltXCIpO2Z1bmN0aW9uIHAoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciBxPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOnAscj1uLnVzZVN5bmNFeHRlcm5hbFN0b3JlLHQ9aC51c2VSZWYsdT1oLnVzZUVmZmVjdCx2PWgudXNlTWVtbyx3PWgudXNlRGVidWdWYWx1ZTtcbmV4cG9ydHMudXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3I9ZnVuY3Rpb24oYSxiLGUsbCxnKXt2YXIgYz10KG51bGwpO2lmKG51bGw9PT1jLmN1cnJlbnQpe3ZhciBmPXtoYXNWYWx1ZTohMSx2YWx1ZTpudWxsfTtjLmN1cnJlbnQ9Zn1lbHNlIGY9Yy5jdXJyZW50O2M9dihmdW5jdGlvbigpe2Z1bmN0aW9uIGEoYSl7aWYoIWMpe2M9ITA7ZD1hO2E9bChhKTtpZih2b2lkIDAhPT1nJiZmLmhhc1ZhbHVlKXt2YXIgYj1mLnZhbHVlO2lmKGcoYixhKSlyZXR1cm4gaz1ifXJldHVybiBrPWF9Yj1rO2lmKHEoZCxhKSlyZXR1cm4gYjt2YXIgZT1sKGEpO2lmKHZvaWQgMCE9PWcmJmcoYixlKSlyZXR1cm4gYjtkPWE7cmV0dXJuIGs9ZX12YXIgYz0hMSxkLGssbT12b2lkIDA9PT1lP251bGw6ZTtyZXR1cm5bZnVuY3Rpb24oKXtyZXR1cm4gYShiKCkpfSxudWxsPT09bT92b2lkIDA6ZnVuY3Rpb24oKXtyZXR1cm4gYShtKCkpfV19LFtiLGUsbCxnXSk7dmFyIGQ9cihhLGNbMF0sY1sxXSk7XG51KGZ1bmN0aW9uKCl7Zi5oYXNWYWx1ZT0hMDtmLnZhbHVlPWR9LFtkXSk7dyhkKTtyZXR1cm4gZH07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vY2pzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlLXNoaW0ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vY2pzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlLXNoaW0uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9janMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtc2hpbS93aXRoLXNlbGVjdG9yLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL2Nqcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS1zaGltL3dpdGgtc2VsZWN0b3IuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcblx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIG1vZHVsZTsgfTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIGRlZmluaXRpb24pIHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5mID0ge307XG4vLyBUaGlzIGZpbGUgY29udGFpbnMgb25seSB0aGUgZW50cnkgY2h1bmsuXG4vLyBUaGUgY2h1bmsgbG9hZGluZyBmdW5jdGlvbiBmb3IgYWRkaXRpb25hbCBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18uZSA9IGZ1bmN0aW9uKGNodW5rSWQpIHtcblx0cmV0dXJuIFByb21pc2UuYWxsKE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uZikucmVkdWNlKGZ1bmN0aW9uKHByb21pc2VzLCBrZXkpIHtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmZba2V5XShjaHVua0lkLCBwcm9taXNlcyk7XG5cdFx0cmV0dXJuIHByb21pc2VzO1xuXHR9LCBbXSkpO1xufTsiLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhc3luYyBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18udSA9IGZ1bmN0aW9uKGNodW5rSWQpIHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcInN0YXRpYy9qcy9cIiArIGNodW5rSWQgKyBcIi5idW5kbGUuanNcIjtcbn07IiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYXN5bmMgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm1pbmlDc3NGID0gZnVuY3Rpb24oY2h1bmtJZCkge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIHVuZGVmaW5lZDtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmosIHByb3ApIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOyB9IiwidmFyIGluUHJvZ3Jlc3MgPSB7fTtcbnZhciBkYXRhV2VicGFja1ByZWZpeCA9IFwiZGVtby1hcHA6XCI7XG4vLyBsb2FkU2NyaXB0IGZ1bmN0aW9uIHRvIGxvYWQgYSBzY3JpcHQgdmlhIHNjcmlwdCB0YWdcbl9fd2VicGFja19yZXF1aXJlX18ubCA9IGZ1bmN0aW9uKHVybCwgZG9uZSwga2V5LCBjaHVua0lkKSB7XG5cdGlmKGluUHJvZ3Jlc3NbdXJsXSkgeyBpblByb2dyZXNzW3VybF0ucHVzaChkb25lKTsgcmV0dXJuOyB9XG5cdHZhciBzY3JpcHQsIG5lZWRBdHRhY2g7XG5cdGlmKGtleSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc2NyaXB0cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIHMgPSBzY3JpcHRzW2ldO1xuXHRcdFx0aWYocy5nZXRBdHRyaWJ1dGUoXCJzcmNcIikgPT0gdXJsIHx8IHMuZ2V0QXR0cmlidXRlKFwiZGF0YS13ZWJwYWNrXCIpID09IGRhdGFXZWJwYWNrUHJlZml4ICsga2V5KSB7IHNjcmlwdCA9IHM7IGJyZWFrOyB9XG5cdFx0fVxuXHR9XG5cdGlmKCFzY3JpcHQpIHtcblx0XHRuZWVkQXR0YWNoID0gdHJ1ZTtcblx0XHRzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblxuXHRcdHNjcmlwdC5jaGFyc2V0ID0gJ3V0Zi04Jztcblx0XHRzY3JpcHQudGltZW91dCA9IDEyMDtcblx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5uYykge1xuXHRcdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIF9fd2VicGFja19yZXF1aXJlX18ubmMpO1xuXHRcdH1cblx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwiZGF0YS13ZWJwYWNrXCIsIGRhdGFXZWJwYWNrUHJlZml4ICsga2V5KTtcblx0XHRzY3JpcHQuc3JjID0gdXJsO1xuXHR9XG5cdGluUHJvZ3Jlc3NbdXJsXSA9IFtkb25lXTtcblx0dmFyIG9uU2NyaXB0Q29tcGxldGUgPSBmdW5jdGlvbihwcmV2LCBldmVudCkge1xuXHRcdC8vIGF2b2lkIG1lbSBsZWFrcyBpbiBJRS5cblx0XHRzY3JpcHQub25lcnJvciA9IHNjcmlwdC5vbmxvYWQgPSBudWxsO1xuXHRcdGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblx0XHR2YXIgZG9uZUZucyA9IGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRkZWxldGUgaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdHNjcmlwdC5wYXJlbnROb2RlICYmIHNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG5cdFx0ZG9uZUZucyAmJiBkb25lRm5zLmZvckVhY2goZnVuY3Rpb24oZm4pIHsgcmV0dXJuIGZuKGV2ZW50KTsgfSk7XG5cdFx0aWYocHJldikgcmV0dXJuIHByZXYoZXZlbnQpO1xuXHR9XG5cdDtcblx0dmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCB1bmRlZmluZWQsIHsgdHlwZTogJ3RpbWVvdXQnLCB0YXJnZXQ6IHNjcmlwdCB9KSwgMTIwMDAwKTtcblx0c2NyaXB0Lm9uZXJyb3IgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9uZXJyb3IpO1xuXHRzY3JpcHQub25sb2FkID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmxvYWQpO1xuXHRuZWVkQXR0YWNoICYmIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbn07IiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmNcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSBzY3JpcHRVcmwgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV0uc3JjXG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsICsgXCIuLi8uLi9cIjsiLCIvLyBubyBiYXNlVVJJXG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0MTc5OiAwXG59O1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmYuaiA9IGZ1bmN0aW9uKGNodW5rSWQsIHByb21pc2VzKSB7XG5cdFx0Ly8gSlNPTlAgY2h1bmsgbG9hZGluZyBmb3IgamF2YXNjcmlwdFxuXHRcdHZhciBpbnN0YWxsZWRDaHVua0RhdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSA/IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA6IHVuZGVmaW5lZDtcblx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEgIT09IDApIHsgLy8gMCBtZWFucyBcImFscmVhZHkgaW5zdGFsbGVkXCIuXG5cblx0XHRcdC8vIGEgUHJvbWlzZSBtZWFucyBcImN1cnJlbnRseSBsb2FkaW5nXCIuXG5cdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEpIHtcblx0XHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRDaHVua0RhdGFbMl0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYodHJ1ZSkgeyAvLyBhbGwgY2h1bmtzIGhhdmUgSlNcblx0XHRcdFx0XHQvLyBzZXR1cCBQcm9taXNlIGluIGNodW5rIGNhY2hlXG5cdFx0XHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHsgaW5zdGFsbGVkQ2h1bmtEYXRhID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gW3Jlc29sdmUsIHJlamVjdF07IH0pO1xuXHRcdFx0XHRcdHByb21pc2VzLnB1c2goaW5zdGFsbGVkQ2h1bmtEYXRhWzJdID0gcHJvbWlzZSk7XG5cblx0XHRcdFx0XHQvLyBzdGFydCBjaHVuayBsb2FkaW5nXG5cdFx0XHRcdFx0dmFyIHVybCA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIF9fd2VicGFja19yZXF1aXJlX18udShjaHVua0lkKTtcblx0XHRcdFx0XHQvLyBjcmVhdGUgZXJyb3IgYmVmb3JlIHN0YWNrIHVud291bmQgdG8gZ2V0IHVzZWZ1bCBzdGFja3RyYWNlIGxhdGVyXG5cdFx0XHRcdFx0dmFyIGVycm9yID0gbmV3IEVycm9yKCk7XG5cdFx0XHRcdFx0dmFyIGxvYWRpbmdFbmRlZCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0XHRcdFx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSkge1xuXHRcdFx0XHRcdFx0XHRpbnN0YWxsZWRDaHVua0RhdGEgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG5cdFx0XHRcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSAhPT0gMCkgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgZXJyb3JUeXBlID0gZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJyA/ICdtaXNzaW5nJyA6IGV2ZW50LnR5cGUpO1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZWFsU3JjID0gZXZlbnQgJiYgZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldC5zcmM7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IubWVzc2FnZSA9ICdMb2FkaW5nIGNodW5rICcgKyBjaHVua0lkICsgJyBmYWlsZWQuXFxuKCcgKyBlcnJvclR5cGUgKyAnOiAnICsgcmVhbFNyYyArICcpJztcblx0XHRcdFx0XHRcdFx0XHRlcnJvci5uYW1lID0gJ0NodW5rTG9hZEVycm9yJztcblx0XHRcdFx0XHRcdFx0XHRlcnJvci50eXBlID0gZXJyb3JUeXBlO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLnJlcXVlc3QgPSByZWFsU3JjO1xuXHRcdFx0XHRcdFx0XHRcdGluc3RhbGxlZENodW5rRGF0YVsxXShlcnJvcik7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubCh1cmwsIGxvYWRpbmdFbmRlZCwgXCJjaHVuay1cIiArIGNodW5rSWQsIGNodW5rSWQpO1xuXHRcdFx0XHR9IGVsc2UgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gMDtcblx0XHRcdH1cblx0XHR9XG59O1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG4vLyBubyBvbiBjaHVua3MgbG9hZGVkXG5cbi8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xudmFyIHdlYnBhY2tKc29ucENhbGxiYWNrID0gZnVuY3Rpb24ocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24sIGRhdGEpIHtcblx0dmFyIGNodW5rSWRzID0gZGF0YVswXTtcblx0dmFyIG1vcmVNb2R1bGVzID0gZGF0YVsxXTtcblx0dmFyIHJ1bnRpbWUgPSBkYXRhWzJdO1xuXHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcblx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG5cdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDA7XG5cdGlmKGNodW5rSWRzLnNvbWUoZnVuY3Rpb24oaWQpIHsgcmV0dXJuIGluc3RhbGxlZENodW5rc1tpZF0gIT09IDA7IH0pKSB7XG5cdFx0Zm9yKG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG5cdFx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8obW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm1bbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZihydW50aW1lKSB2YXIgcmVzdWx0ID0gcnVudGltZShfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblx0fVxuXHRpZihwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbikgcGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24oZGF0YSk7XG5cdGZvcig7aSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpICYmIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdWzBdKCk7XG5cdFx0fVxuXHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG5cdH1cblxufVxuXG52YXIgY2h1bmtMb2FkaW5nR2xvYmFsID0gc2VsZltcIndlYnBhY2tDaHVua2RlbW9fYXBwXCJdID0gc2VsZltcIndlYnBhY2tDaHVua2RlbW9fYXBwXCJdIHx8IFtdO1xuY2h1bmtMb2FkaW5nR2xvYmFsLmZvckVhY2god2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCAwKSk7XG5jaHVua0xvYWRpbmdHbG9iYWwucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrLmJpbmQobnVsbCwgY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2guYmluZChjaHVua0xvYWRpbmdHbG9iYWwpKTsiLCIvLyBEZWZhdWx0IHRvIGEgZHVtbXkgXCJiYXRjaFwiIGltcGxlbWVudGF0aW9uIHRoYXQganVzdCBydW5zIHRoZSBjYWxsYmFja1xuZnVuY3Rpb24gZGVmYXVsdE5vb3BCYXRjaChjYWxsYmFjaykge1xuICBjYWxsYmFjaygpO1xufVxuXG5sZXQgYmF0Y2ggPSBkZWZhdWx0Tm9vcEJhdGNoOyAvLyBBbGxvdyBpbmplY3RpbmcgYW5vdGhlciBiYXRjaGluZyBmdW5jdGlvbiBsYXRlclxuXG5leHBvcnQgY29uc3Qgc2V0QmF0Y2ggPSBuZXdCYXRjaCA9PiBiYXRjaCA9IG5ld0JhdGNoOyAvLyBTdXBwbHkgYSBnZXR0ZXIganVzdCB0byBza2lwIGRlYWxpbmcgd2l0aCBFU00gYmluZGluZ3NcblxuZXhwb3J0IGNvbnN0IGdldEJhdGNoID0gKCkgPT4gYmF0Y2g7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBjb25zdCBSZWFjdFJlZHV4Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBSZWFjdFJlZHV4Q29udGV4dC5kaXNwbGF5TmFtZSA9ICdSZWFjdFJlZHV4Jztcbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVhY3RSZWR1eENvbnRleHQ7IiwiaW1wb3J0IHsgdXNlQ29udGV4dCwgdXNlRGVidWdWYWx1ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVJlZHV4Q29udGV4dCBhcyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi91c2VSZWR1eENvbnRleHQnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuaW1wb3J0IHsgbm90SW5pdGlhbGl6ZWQgfSBmcm9tICcuLi91dGlscy91c2VTeW5jRXh0ZXJuYWxTdG9yZSc7XG5sZXQgdXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3IgPSBub3RJbml0aWFsaXplZDtcbmV4cG9ydCBjb25zdCBpbml0aWFsaXplVXNlU2VsZWN0b3IgPSBmbiA9PiB7XG4gIHVzZVN5bmNFeHRlcm5hbFN0b3JlV2l0aFNlbGVjdG9yID0gZm47XG59O1xuXG5jb25zdCByZWZFcXVhbGl0eSA9IChhLCBiKSA9PiBhID09PSBiO1xuLyoqXHJcbiAqIEhvb2sgZmFjdG9yeSwgd2hpY2ggY3JlYXRlcyBhIGB1c2VTZWxlY3RvcmAgaG9vayBib3VuZCB0byBhIGdpdmVuIGNvbnRleHQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhY3QuQ29udGV4dH0gW2NvbnRleHQ9UmVhY3RSZWR1eENvbnRleHRdIENvbnRleHQgcGFzc2VkIHRvIHlvdXIgYDxQcm92aWRlcj5gLlxyXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgYHVzZVNlbGVjdG9yYCBob29rIGJvdW5kIHRvIHRoZSBzcGVjaWZpZWQgY29udGV4dC5cclxuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9ySG9vayhjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQpIHtcbiAgY29uc3QgdXNlUmVkdXhDb250ZXh0ID0gY29udGV4dCA9PT0gUmVhY3RSZWR1eENvbnRleHQgPyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IDogKCkgPT4gdXNlQ29udGV4dChjb250ZXh0KTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVzZVNlbGVjdG9yKHNlbGVjdG9yLCBlcXVhbGl0eUZuID0gcmVmRXF1YWxpdHkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFlvdSBtdXN0IHBhc3MgYSBzZWxlY3RvciB0byB1c2VTZWxlY3RvcmApO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHNlbGVjdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgWW91IG11c3QgcGFzcyBhIGZ1bmN0aW9uIGFzIGEgc2VsZWN0b3IgdG8gdXNlU2VsZWN0b3JgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBlcXVhbGl0eUZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgWW91IG11c3QgcGFzcyBhIGZ1bmN0aW9uIGFzIGFuIGVxdWFsaXR5IGZ1bmN0aW9uIHRvIHVzZVNlbGVjdG9yYCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qge1xuICAgICAgc3RvcmUsXG4gICAgICBzdWJzY3JpcHRpb24sXG4gICAgICBnZXRTZXJ2ZXJTdGF0ZVxuICAgIH0gPSB1c2VSZWR1eENvbnRleHQoKTtcbiAgICBjb25zdCBzZWxlY3RlZFN0YXRlID0gdXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3Ioc3Vic2NyaXB0aW9uLmFkZE5lc3RlZFN1Yiwgc3RvcmUuZ2V0U3RhdGUsIGdldFNlcnZlclN0YXRlIHx8IHN0b3JlLmdldFN0YXRlLCBzZWxlY3RvciwgZXF1YWxpdHlGbik7XG4gICAgdXNlRGVidWdWYWx1ZShzZWxlY3RlZFN0YXRlKTtcbiAgICByZXR1cm4gc2VsZWN0ZWRTdGF0ZTtcbiAgfTtcbn1cbi8qKlxyXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSByZWR1eCBzdG9yZSdzIHN0YXRlLiBUaGlzIGhvb2sgdGFrZXMgYSBzZWxlY3RvciBmdW5jdGlvblxyXG4gKiBhcyBhbiBhcmd1bWVudC4gVGhlIHNlbGVjdG9yIGlzIGNhbGxlZCB3aXRoIHRoZSBzdG9yZSBzdGF0ZS5cclxuICpcclxuICogVGhpcyBob29rIHRha2VzIGFuIG9wdGlvbmFsIGVxdWFsaXR5IGNvbXBhcmlzb24gZnVuY3Rpb24gYXMgdGhlIHNlY29uZCBwYXJhbWV0ZXJcclxuICogdGhhdCBhbGxvd3MgeW91IHRvIGN1c3RvbWl6ZSB0aGUgd2F5IHRoZSBzZWxlY3RlZCBzdGF0ZSBpcyBjb21wYXJlZCB0byBkZXRlcm1pbmVcclxuICogd2hldGhlciB0aGUgY29tcG9uZW50IG5lZWRzIHRvIGJlIHJlLXJlbmRlcmVkLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZWxlY3RvciB0aGUgc2VsZWN0b3IgZnVuY3Rpb25cclxuICogQHBhcmFtIHtGdW5jdGlvbj19IGVxdWFsaXR5Rm4gdGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGRldGVybWluZSBlcXVhbGl0eVxyXG4gKlxyXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgc2VsZWN0ZWQgc3RhdGVcclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG4gKiBpbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG4gKlxyXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICgpID0+IHtcclxuICogICBjb25zdCBjb3VudGVyID0gdXNlU2VsZWN0b3Ioc3RhdGUgPT4gc3RhdGUuY291bnRlcilcclxuICogICByZXR1cm4gPGRpdj57Y291bnRlcn08L2Rpdj5cclxuICogfVxyXG4gKi9cblxuZXhwb3J0IGNvbnN0IHVzZVNlbGVjdG9yID0gLyojX19QVVJFX18qL2NyZWF0ZVNlbGVjdG9ySG9vaygpOyIsImltcG9ydCB7IGdldEJhdGNoIH0gZnJvbSAnLi9iYXRjaCc7IC8vIGVuY2Fwc3VsYXRlcyB0aGUgc3Vic2NyaXB0aW9uIGxvZ2ljIGZvciBjb25uZWN0aW5nIGEgY29tcG9uZW50IHRvIHRoZSByZWR1eCBzdG9yZSwgYXNcbi8vIHdlbGwgYXMgbmVzdGluZyBzdWJzY3JpcHRpb25zIG9mIGRlc2NlbmRhbnQgY29tcG9uZW50cywgc28gdGhhdCB3ZSBjYW4gZW5zdXJlIHRoZVxuLy8gYW5jZXN0b3IgY29tcG9uZW50cyByZS1yZW5kZXIgYmVmb3JlIGRlc2NlbmRhbnRzXG5cbmZ1bmN0aW9uIGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpIHtcbiAgY29uc3QgYmF0Y2ggPSBnZXRCYXRjaCgpO1xuICBsZXQgZmlyc3QgPSBudWxsO1xuICBsZXQgbGFzdCA9IG51bGw7XG4gIHJldHVybiB7XG4gICAgY2xlYXIoKSB7XG4gICAgICBmaXJzdCA9IG51bGw7XG4gICAgICBsYXN0ID0gbnVsbDtcbiAgICB9LFxuXG4gICAgbm90aWZ5KCkge1xuICAgICAgYmF0Y2goKCkgPT4ge1xuICAgICAgICBsZXQgbGlzdGVuZXIgPSBmaXJzdDtcblxuICAgICAgICB3aGlsZSAobGlzdGVuZXIpIHtcbiAgICAgICAgICBsaXN0ZW5lci5jYWxsYmFjaygpO1xuICAgICAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcblxuICAgIGdldCgpIHtcbiAgICAgIGxldCBsaXN0ZW5lcnMgPSBbXTtcbiAgICAgIGxldCBsaXN0ZW5lciA9IGZpcnN0O1xuXG4gICAgICB3aGlsZSAobGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBsaXN0ZW5lcnM7XG4gICAgfSxcblxuICAgIHN1YnNjcmliZShjYWxsYmFjaykge1xuICAgICAgbGV0IGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICBsZXQgbGlzdGVuZXIgPSBsYXN0ID0ge1xuICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgbmV4dDogbnVsbCxcbiAgICAgICAgcHJldjogbGFzdFxuICAgICAgfTtcblxuICAgICAgaWYgKGxpc3RlbmVyLnByZXYpIHtcbiAgICAgICAgbGlzdGVuZXIucHJldi5uZXh0ID0gbGlzdGVuZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmaXJzdCA9IGxpc3RlbmVyO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgIGlmICghaXNTdWJzY3JpYmVkIHx8IGZpcnN0ID09PSBudWxsKSByZXR1cm47XG4gICAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChsaXN0ZW5lci5uZXh0KSB7XG4gICAgICAgICAgbGlzdGVuZXIubmV4dC5wcmV2ID0gbGlzdGVuZXIucHJldjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsYXN0ID0gbGlzdGVuZXIucHJldjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0ZW5lci5wcmV2KSB7XG4gICAgICAgICAgbGlzdGVuZXIucHJldi5uZXh0ID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmaXJzdCA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gIH07XG59XG5cbmNvbnN0IG51bGxMaXN0ZW5lcnMgPSB7XG4gIG5vdGlmeSgpIHt9LFxuXG4gIGdldDogKCkgPT4gW11cbn07XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3Vic2NyaXB0aW9uKHN0b3JlLCBwYXJlbnRTdWIpIHtcbiAgbGV0IHVuc3Vic2NyaWJlO1xuICBsZXQgbGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcblxuICBmdW5jdGlvbiBhZGROZXN0ZWRTdWIobGlzdGVuZXIpIHtcbiAgICB0cnlTdWJzY3JpYmUoKTtcbiAgICByZXR1cm4gbGlzdGVuZXJzLnN1YnNjcmliZShsaXN0ZW5lcik7XG4gIH1cblxuICBmdW5jdGlvbiBub3RpZnlOZXN0ZWRTdWJzKCkge1xuICAgIGxpc3RlbmVycy5ub3RpZnkoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUNoYW5nZVdyYXBwZXIoKSB7XG4gICAgaWYgKHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlKSB7XG4gICAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzU3Vic2NyaWJlZCgpIHtcbiAgICByZXR1cm4gQm9vbGVhbih1bnN1YnNjcmliZSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cnlTdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF1bnN1YnNjcmliZSkge1xuICAgICAgdW5zdWJzY3JpYmUgPSBwYXJlbnRTdWIgPyBwYXJlbnRTdWIuYWRkTmVzdGVkU3ViKGhhbmRsZUNoYW5nZVdyYXBwZXIpIDogc3RvcmUuc3Vic2NyaWJlKGhhbmRsZUNoYW5nZVdyYXBwZXIpO1xuICAgICAgbGlzdGVuZXJzID0gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdHJ5VW5zdWJzY3JpYmUoKSB7XG4gICAgaWYgKHVuc3Vic2NyaWJlKSB7XG4gICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgdW5zdWJzY3JpYmUgPSB1bmRlZmluZWQ7XG4gICAgICBsaXN0ZW5lcnMuY2xlYXIoKTtcbiAgICAgIGxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gICAgfVxuICB9XG5cbiAgY29uc3Qgc3Vic2NyaXB0aW9uID0ge1xuICAgIGFkZE5lc3RlZFN1YixcbiAgICBub3RpZnlOZXN0ZWRTdWJzLFxuICAgIGhhbmRsZUNoYW5nZVdyYXBwZXIsXG4gICAgaXNTdWJzY3JpYmVkLFxuICAgIHRyeVN1YnNjcmliZSxcbiAgICB0cnlVbnN1YnNjcmliZSxcbiAgICBnZXRMaXN0ZW5lcnM6ICgpID0+IGxpc3RlbmVyc1xuICB9O1xuICByZXR1cm4gc3Vic2NyaXB0aW9uO1xufSIsImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSAncmVhY3QnOyAvLyBSZWFjdCBjdXJyZW50bHkgdGhyb3dzIGEgd2FybmluZyB3aGVuIHVzaW5nIHVzZUxheW91dEVmZmVjdCBvbiB0aGUgc2VydmVyLlxuLy8gVG8gZ2V0IGFyb3VuZCBpdCwgd2UgY2FuIGNvbmRpdGlvbmFsbHkgdXNlRWZmZWN0IG9uIHRoZSBzZXJ2ZXIgKG5vLW9wKSBhbmRcbi8vIHVzZUxheW91dEVmZmVjdCBpbiB0aGUgYnJvd3Nlci4gV2UgbmVlZCB1c2VMYXlvdXRFZmZlY3QgdG8gZW5zdXJlIHRoZSBzdG9yZVxuLy8gc3Vic2NyaXB0aW9uIGNhbGxiYWNrIGFsd2F5cyBoYXMgdGhlIHNlbGVjdG9yIGZyb20gdGhlIGxhdGVzdCByZW5kZXIgY29tbWl0XG4vLyBhdmFpbGFibGUsIG90aGVyd2lzZSBhIHN0b3JlIHVwZGF0ZSBtYXkgaGFwcGVuIGJldHdlZW4gcmVuZGVyIGFuZCB0aGUgZWZmZWN0LFxuLy8gd2hpY2ggbWF5IGNhdXNlIG1pc3NlZCB1cGRhdGVzOyB3ZSBhbHNvIG11c3QgZW5zdXJlIHRoZSBzdG9yZSBzdWJzY3JpcHRpb25cbi8vIGlzIGNyZWF0ZWQgc3luY2hyb25vdXNseSwgb3RoZXJ3aXNlIGEgc3RvcmUgdXBkYXRlIG1heSBvY2N1ciBiZWZvcmUgdGhlXG4vLyBzdWJzY3JpcHRpb24gaXMgY3JlYXRlZCBhbmQgYW4gaW5jb25zaXN0ZW50IHN0YXRlIG1heSBiZSBvYnNlcnZlZFxuLy8gTWF0Y2hlcyBsb2dpYyBpbiBSZWFjdCdzIGBzaGFyZWQvRXhlY3V0aW9uRW52aXJvbm1lbnRgIGZpbGVcblxuZXhwb3J0IGNvbnN0IGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcpO1xuZXhwb3J0IGNvbnN0IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgPSBjYW5Vc2VET00gPyB1c2VMYXlvdXRFZmZlY3QgOiB1c2VFZmZlY3Q7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vQ29udGV4dCc7XG5pbXBvcnQgeyBjcmVhdGVTdWJzY3JpcHRpb24gfSBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QnO1xuXG5mdW5jdGlvbiBQcm92aWRlcih7XG4gIHN0b3JlLFxuICBjb250ZXh0LFxuICBjaGlsZHJlbixcbiAgc2VydmVyU3RhdGVcbn0pIHtcbiAgY29uc3QgY29udGV4dFZhbHVlID0gdXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gY3JlYXRlU3Vic2NyaXB0aW9uKHN0b3JlKTtcbiAgICByZXR1cm4ge1xuICAgICAgc3RvcmUsXG4gICAgICBzdWJzY3JpcHRpb24sXG4gICAgICBnZXRTZXJ2ZXJTdGF0ZTogc2VydmVyU3RhdGUgPyAoKSA9PiBzZXJ2ZXJTdGF0ZSA6IHVuZGVmaW5lZFxuICAgIH07XG4gIH0sIFtzdG9yZSwgc2VydmVyU3RhdGVdKTtcbiAgY29uc3QgcHJldmlvdXNTdGF0ZSA9IHVzZU1lbW8oKCkgPT4gc3RvcmUuZ2V0U3RhdGUoKSwgW3N0b3JlXSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHN1YnNjcmlwdGlvblxuICAgIH0gPSBjb250ZXh0VmFsdWU7XG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3VicztcbiAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG5cbiAgICBpZiAocHJldmlvdXNTdGF0ZSAhPT0gc3RvcmUuZ2V0U3RhdGUoKSkge1xuICAgICAgc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IHVuZGVmaW5lZDtcbiAgICB9O1xuICB9LCBbY29udGV4dFZhbHVlLCBwcmV2aW91c1N0YXRlXSk7XG4gIGNvbnN0IENvbnRleHQgPSBjb250ZXh0IHx8IFJlYWN0UmVkdXhDb250ZXh0OyAvLyBAdHMtaWdub3JlICdBbnlBY3Rpb24nIGlzIGFzc2lnbmFibGUgdG8gdGhlIGNvbnN0cmFpbnQgb2YgdHlwZSAnQScsIGJ1dCAnQScgY291bGQgYmUgaW5zdGFudGlhdGVkIHdpdGggYSBkaWZmZXJlbnQgc3VidHlwZVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICB9LCBjaGlsZHJlbik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByb3ZpZGVyOyIsImltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0JztcbmltcG9ydCB7IHVzZVN0b3JlIGFzIHVzZURlZmF1bHRTdG9yZSwgY3JlYXRlU3RvcmVIb29rIH0gZnJvbSAnLi91c2VTdG9yZSc7XG4vKipcclxuICogSG9vayBmYWN0b3J5LCB3aGljaCBjcmVhdGVzIGEgYHVzZURpc3BhdGNoYCBob29rIGJvdW5kIHRvIGEgZ2l2ZW4gY29udGV4dC5cclxuICpcclxuICogQHBhcmFtIHtSZWFjdC5Db250ZXh0fSBbY29udGV4dD1SZWFjdFJlZHV4Q29udGV4dF0gQ29udGV4dCBwYXNzZWQgdG8geW91ciBgPFByb3ZpZGVyPmAuXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBgdXNlRGlzcGF0Y2hgIGhvb2sgYm91bmQgdG8gdGhlIHNwZWNpZmllZCBjb250ZXh0LlxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURpc3BhdGNoSG9vayhjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQpIHtcbiAgY29uc3QgdXNlU3RvcmUgPSAvLyBAdHMtaWdub3JlXG4gIGNvbnRleHQgPT09IFJlYWN0UmVkdXhDb250ZXh0ID8gdXNlRGVmYXVsdFN0b3JlIDogY3JlYXRlU3RvcmVIb29rKGNvbnRleHQpO1xuICByZXR1cm4gZnVuY3Rpb24gdXNlRGlzcGF0Y2goKSB7XG4gICAgY29uc3Qgc3RvcmUgPSB1c2VTdG9yZSgpOyAvLyBAdHMtaWdub3JlXG5cbiAgICByZXR1cm4gc3RvcmUuZGlzcGF0Y2g7XG4gIH07XG59XG4vKipcclxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgcmVkdXggYGRpc3BhdGNoYCBmdW5jdGlvbi5cclxuICpcclxuICogQHJldHVybnMge2FueXxmdW5jdGlvbn0gcmVkdXggc3RvcmUncyBgZGlzcGF0Y2hgIGZ1bmN0aW9uXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIGltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0J1xyXG4gKiBpbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG4gKlxyXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICh7IHZhbHVlIH0pID0+IHtcclxuICogICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKClcclxuICogICBjb25zdCBpbmNyZWFzZUNvdW50ZXIgPSB1c2VDYWxsYmFjaygoKSA9PiBkaXNwYXRjaCh7IHR5cGU6ICdpbmNyZWFzZS1jb3VudGVyJyB9KSwgW10pXHJcbiAqICAgcmV0dXJuIChcclxuICogICAgIDxkaXY+XHJcbiAqICAgICAgIDxzcGFuPnt2YWx1ZX08L3NwYW4+XHJcbiAqICAgICAgIDxidXR0b24gb25DbGljaz17aW5jcmVhc2VDb3VudGVyfT5JbmNyZWFzZSBjb3VudGVyPC9idXR0b24+XHJcbiAqICAgICA8L2Rpdj5cclxuICogICApXHJcbiAqIH1cclxuICovXG5cbmV4cG9ydCBjb25zdCB1c2VEaXNwYXRjaCA9IC8qI19fUFVSRV9fKi9jcmVhdGVEaXNwYXRjaEhvb2soKTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKHN0cmluZ3MsIHJhdykge1xuICBpZiAoIXJhdykge1xuICAgIHJhdyA9IHN0cmluZ3Muc2xpY2UoMCk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmZyZWV6ZShPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzdHJpbmdzLCB7XG4gICAgcmF3OiB7XG4gICAgICB2YWx1ZTogT2JqZWN0LmZyZWV6ZShyYXcpXG4gICAgfVxuICB9KSk7XG59IiwiLy8gVGhlIHByaW1hcnkgZW50cnkgcG9pbnQgYXNzdW1lcyB3ZSdyZSB3b3JraW5nIHdpdGggc3RhbmRhcmQgUmVhY3RET00vUk4sIGJ1dFxuLy8gb2xkZXIgdmVyc2lvbnMgdGhhdCBkbyBub3QgaW5jbHVkZSBgdXNlU3luY0V4dGVybmFsU3RvcmVgIChSZWFjdCAxNi45IC0gMTcueCkuXG4vLyBCZWNhdXNlIG9mIHRoYXQsIHRoZSB1c2VTeW5jRXh0ZXJuYWxTdG9yZSBjb21wYXQgc2hpbSBpcyBuZWVkZWQuXG5pbXBvcnQgeyB1c2VTeW5jRXh0ZXJuYWxTdG9yZSB9IGZyb20gJ3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlL3NoaW0nO1xuaW1wb3J0IHsgdXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3IgfSBmcm9tICd1c2Utc3luYy1leHRlcm5hbC1zdG9yZS9zaGltL3dpdGgtc2VsZWN0b3InO1xuaW1wb3J0IHsgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMgYXMgYmF0Y2ggfSBmcm9tICcuL3V0aWxzL3JlYWN0QmF0Y2hlZFVwZGF0ZXMnO1xuaW1wb3J0IHsgc2V0QmF0Y2ggfSBmcm9tICcuL3V0aWxzL2JhdGNoJztcbmltcG9ydCB7IGluaXRpYWxpemVVc2VTZWxlY3RvciB9IGZyb20gJy4vaG9va3MvdXNlU2VsZWN0b3InO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZUNvbm5lY3QgfSBmcm9tICcuL2NvbXBvbmVudHMvY29ubmVjdCc7XG5pbml0aWFsaXplVXNlU2VsZWN0b3IodXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3IpO1xuaW5pdGlhbGl6ZUNvbm5lY3QodXNlU3luY0V4dGVybmFsU3RvcmUpOyAvLyBFbmFibGUgYmF0Y2hlZCB1cGRhdGVzIGluIG91ciBzdWJzY3JpcHRpb25zIGZvciB1c2Vcbi8vIHdpdGggc3RhbmRhcmQgUmVhY3QgcmVuZGVyZXJzIChSZWFjdERPTSwgUmVhY3QgTmF0aXZlKVxuXG5zZXRCYXRjaChiYXRjaCk7XG5leHBvcnQgeyBiYXRjaCB9O1xuZXhwb3J0ICogZnJvbSAnLi9leHBvcnRzJzsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wicmVhY3RSZWR1eEZvcndhcmRlZFJlZlwiXTtcblxuLyogZXNsaW50LWRpc2FibGUgdmFsaWQtanNkb2MsIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycyAqL1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgdXNlTWVtbywgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNWYWxpZEVsZW1lbnRUeXBlLCBpc0NvbnRleHRDb25zdW1lciB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IGZyb20gJy4uL2Nvbm5lY3Qvc2VsZWN0b3JGYWN0b3J5JztcbmltcG9ydCB7IG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcnkgfSBmcm9tICcuLi9jb25uZWN0L21hcERpc3BhdGNoVG9Qcm9wcyc7XG5pbXBvcnQgeyBtYXBTdGF0ZVRvUHJvcHNGYWN0b3J5IH0gZnJvbSAnLi4vY29ubmVjdC9tYXBTdGF0ZVRvUHJvcHMnO1xuaW1wb3J0IHsgbWVyZ2VQcm9wc0ZhY3RvcnkgfSBmcm9tICcuLi9jb25uZWN0L21lcmdlUHJvcHMnO1xuaW1wb3J0IHsgY3JlYXRlU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuLi91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0JztcbmltcG9ydCBzaGFsbG93RXF1YWwgZnJvbSAnLi4vdXRpbHMvc2hhbGxvd0VxdWFsJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJy4uL3V0aWxzL3dhcm5pbmcnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL0NvbnRleHQnO1xuaW1wb3J0IHsgbm90SW5pdGlhbGl6ZWQgfSBmcm9tICcuLi91dGlscy91c2VTeW5jRXh0ZXJuYWxTdG9yZSc7XG5sZXQgdXNlU3luY0V4dGVybmFsU3RvcmUgPSBub3RJbml0aWFsaXplZDtcbmV4cG9ydCBjb25zdCBpbml0aWFsaXplQ29ubmVjdCA9IGZuID0+IHtcbiAgdXNlU3luY0V4dGVybmFsU3RvcmUgPSBmbjtcbn07IC8vIERlZmluZSBzb21lIGNvbnN0YW50IGFycmF5cyBqdXN0IHRvIGF2b2lkIHJlLWNyZWF0aW5nIHRoZXNlXG5cbmNvbnN0IEVNUFRZX0FSUkFZID0gW251bGwsIDBdO1xuY29uc3QgTk9fU1VCU0NSSVBUSU9OX0FSUkFZID0gW251bGwsIG51bGxdOyAvLyBBdHRlbXB0cyB0byBzdHJpbmdpZnkgd2hhdGV2ZXIgbm90LXJlYWxseS1hLWNvbXBvbmVudCB2YWx1ZSB3ZSB3ZXJlIGdpdmVuXG4vLyBmb3IgbG9nZ2luZyBpbiBhbiBlcnJvciBtZXNzYWdlXG5cbmNvbnN0IHN0cmluZ2lmeUNvbXBvbmVudCA9IENvbXAgPT4ge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShDb21wKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIFN0cmluZyhDb21wKTtcbiAgfVxufTtcblxuLy8gVGhpcyBpcyBcImp1c3RcIiBhIGB1c2VMYXlvdXRFZmZlY3RgLCBidXQgd2l0aCB0d28gbW9kaWZpY2F0aW9uczpcbi8vIC0gd2UgbmVlZCB0byBmYWxsIGJhY2sgdG8gYHVzZUVmZmVjdGAgaW4gU1NSIHRvIGF2b2lkIGFubm95aW5nIHdhcm5pbmdzXG4vLyAtIHdlIGV4dHJhY3QgdGhpcyB0byBhIHNlcGFyYXRlIGZ1bmN0aW9uIHRvIGF2b2lkIGNsb3Npbmcgb3ZlciB2YWx1ZXNcbi8vICAgYW5kIGNhdXNpbmcgbWVtb3J5IGxlYWtzXG5mdW5jdGlvbiB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0V2l0aEFyZ3MoZWZmZWN0RnVuYywgZWZmZWN0QXJncywgZGVwZW5kZW5jaWVzKSB7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4gZWZmZWN0RnVuYyguLi5lZmZlY3RBcmdzKSwgZGVwZW5kZW5jaWVzKTtcbn0gLy8gRWZmZWN0IGNhbGxiYWNrLCBleHRyYWN0ZWQ6IGFzc2lnbiB0aGUgbGF0ZXN0IHByb3BzIHZhbHVlcyB0byByZWZzIGZvciBsYXRlciB1c2FnZVxuXG5cbmZ1bmN0aW9uIGNhcHR1cmVXcmFwcGVyUHJvcHMobGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCB3cmFwcGVyUHJvcHMsIC8vIGFjdHVhbENoaWxkUHJvcHM6IHVua25vd24sXG5jaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLCBub3RpZnlOZXN0ZWRTdWJzKSB7XG4gIC8vIFdlIHdhbnQgdG8gY2FwdHVyZSB0aGUgd3JhcHBlciBwcm9wcyBhbmQgY2hpbGQgcHJvcHMgd2UgdXNlZCBmb3IgbGF0ZXIgY29tcGFyaXNvbnNcbiAgbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50ID0gd3JhcHBlclByb3BzO1xuICByZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50ID0gZmFsc2U7IC8vIElmIHRoZSByZW5kZXIgd2FzIGZyb20gYSBzdG9yZSB1cGRhdGUsIGNsZWFyIG91dCB0aGF0IHJlZmVyZW5jZSBhbmQgY2FzY2FkZSB0aGUgc3Vic2NyaWJlciB1cGRhdGVcblxuICBpZiAoY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50KSB7XG4gICAgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ID0gbnVsbDtcbiAgICBub3RpZnlOZXN0ZWRTdWJzKCk7XG4gIH1cbn0gLy8gRWZmZWN0IGNhbGxiYWNrLCBleHRyYWN0ZWQ6IHN1YnNjcmliZSB0byB0aGUgUmVkdXggc3RvcmUgb3IgbmVhcmVzdCBjb25uZWN0ZWQgYW5jZXN0b3IsXG4vLyBjaGVjayBmb3IgdXBkYXRlcyBhZnRlciBkaXNwYXRjaGVkIGFjdGlvbnMsIGFuZCB0cmlnZ2VyIHJlLXJlbmRlcnMuXG5cblxuZnVuY3Rpb24gc3Vic2NyaWJlVXBkYXRlcyhzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsIHN0b3JlLCBzdWJzY3JpcHRpb24sIGNoaWxkUHJvcHNTZWxlY3RvciwgbGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCBpc01vdW50ZWQsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnMsIC8vIGZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2g6IFJlYWN0LkRpc3BhdGNoPGFueT4sXG5hZGRpdGlvbmFsU3Vic2NyaWJlTGlzdGVuZXIpIHtcbiAgLy8gSWYgd2UncmUgbm90IHN1YnNjcmliZWQgdG8gdGhlIHN0b3JlLCBub3RoaW5nIHRvIGRvIGhlcmVcbiAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybiAoKSA9PiB7fTsgLy8gQ2FwdHVyZSB2YWx1ZXMgZm9yIGNoZWNraW5nIGlmIGFuZCB3aGVuIHRoaXMgY29tcG9uZW50IHVubW91bnRzXG5cbiAgbGV0IGRpZFVuc3Vic2NyaWJlID0gZmFsc2U7XG4gIGxldCBsYXN0VGhyb3duRXJyb3IgPSBudWxsOyAvLyBXZSdsbCBydW4gdGhpcyBjYWxsYmFjayBldmVyeSB0aW1lIGEgc3RvcmUgc3Vic2NyaXB0aW9uIHVwZGF0ZSBwcm9wYWdhdGVzIHRvIHRoaXMgY29tcG9uZW50XG5cbiAgY29uc3QgY2hlY2tGb3JVcGRhdGVzID0gKCkgPT4ge1xuICAgIGlmIChkaWRVbnN1YnNjcmliZSB8fCAhaXNNb3VudGVkLmN1cnJlbnQpIHtcbiAgICAgIC8vIERvbid0IHJ1biBzdGFsZSBsaXN0ZW5lcnMuXG4gICAgICAvLyBSZWR1eCBkb2Vzbid0IGd1YXJhbnRlZSB1bnN1YnNjcmlwdGlvbnMgaGFwcGVuIHVudGlsIG5leHQgZGlzcGF0Y2guXG4gICAgICByZXR1cm47XG4gICAgfSAvLyBUT0RPIFdlJ3JlIGN1cnJlbnRseSBjYWxsaW5nIGdldFN0YXRlIG91cnNlbHZlcyBoZXJlLCByYXRoZXIgdGhhbiBsZXR0aW5nIGB1U0VTYCBkbyBpdFxuXG5cbiAgICBjb25zdCBsYXRlc3RTdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICBsZXQgbmV3Q2hpbGRQcm9wcywgZXJyb3I7XG5cbiAgICB0cnkge1xuICAgICAgLy8gQWN0dWFsbHkgcnVuIHRoZSBzZWxlY3RvciB3aXRoIHRoZSBtb3N0IHJlY2VudCBzdG9yZSBzdGF0ZSBhbmQgd3JhcHBlciBwcm9wc1xuICAgICAgLy8gdG8gZGV0ZXJtaW5lIHdoYXQgdGhlIGNoaWxkIHByb3BzIHNob3VsZCBiZVxuICAgICAgbmV3Q2hpbGRQcm9wcyA9IGNoaWxkUHJvcHNTZWxlY3RvcihsYXRlc3RTdG9yZVN0YXRlLCBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGVycm9yID0gZTtcbiAgICAgIGxhc3RUaHJvd25FcnJvciA9IGU7XG4gICAgfVxuXG4gICAgaWYgKCFlcnJvcikge1xuICAgICAgbGFzdFRocm93bkVycm9yID0gbnVsbDtcbiAgICB9IC8vIElmIHRoZSBjaGlsZCBwcm9wcyBoYXZlbid0IGNoYW5nZWQsIG5vdGhpbmcgdG8gZG8gaGVyZSAtIGNhc2NhZGUgdGhlIHN1YnNjcmlwdGlvbiB1cGRhdGVcblxuXG4gICAgaWYgKG5ld0NoaWxkUHJvcHMgPT09IGxhc3RDaGlsZFByb3BzLmN1cnJlbnQpIHtcbiAgICAgIGlmICghcmVuZGVySXNTY2hlZHVsZWQuY3VycmVudCkge1xuICAgICAgICBub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNhdmUgcmVmZXJlbmNlcyB0byB0aGUgbmV3IGNoaWxkIHByb3BzLiAgTm90ZSB0aGF0IHdlIHRyYWNrIHRoZSBcImNoaWxkIHByb3BzIGZyb20gc3RvcmUgdXBkYXRlXCJcbiAgICAgIC8vIGFzIGEgcmVmIGluc3RlYWQgb2YgYSB1c2VTdGF0ZS91c2VSZWR1Y2VyIGJlY2F1c2Ugd2UgbmVlZCBhIHdheSB0byBkZXRlcm1pbmUgaWYgdGhhdCB2YWx1ZSBoYXNcbiAgICAgIC8vIGJlZW4gcHJvY2Vzc2VkLiAgSWYgdGhpcyB3ZW50IGludG8gdXNlU3RhdGUvdXNlUmVkdWNlciwgd2UgY291bGRuJ3QgY2xlYXIgb3V0IHRoZSB2YWx1ZSB3aXRob3V0XG4gICAgICAvLyBmb3JjaW5nIGFub3RoZXIgcmUtcmVuZGVyLCB3aGljaCB3ZSBkb24ndCB3YW50LlxuICAgICAgbGFzdENoaWxkUHJvcHMuY3VycmVudCA9IG5ld0NoaWxkUHJvcHM7XG4gICAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgPSBuZXdDaGlsZFByb3BzO1xuICAgICAgcmVuZGVySXNTY2hlZHVsZWQuY3VycmVudCA9IHRydWU7IC8vIFRPRE8gVGhpcyBpcyBoYWNreSBhbmQgbm90IGhvdyBgdVNFU2AgaXMgbWVhbnQgdG8gYmUgdXNlZFxuICAgICAgLy8gVHJpZ2dlciB0aGUgUmVhY3QgYHVzZVN5bmNFeHRlcm5hbFN0b3JlYCBzdWJzY3JpYmVyXG5cbiAgICAgIGFkZGl0aW9uYWxTdWJzY3JpYmVMaXN0ZW5lcigpO1xuICAgIH1cbiAgfTsgLy8gQWN0dWFsbHkgc3Vic2NyaWJlIHRvIHRoZSBuZWFyZXN0IGNvbm5lY3RlZCBhbmNlc3RvciAob3Igc3RvcmUpXG5cblxuICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IGNoZWNrRm9yVXBkYXRlcztcbiAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpOyAvLyBQdWxsIGRhdGEgZnJvbSB0aGUgc3RvcmUgYWZ0ZXIgZmlyc3QgcmVuZGVyIGluIGNhc2UgdGhlIHN0b3JlIGhhc1xuICAvLyBjaGFuZ2VkIHNpbmNlIHdlIGJlZ2FuLlxuXG4gIGNoZWNrRm9yVXBkYXRlcygpO1xuXG4gIGNvbnN0IHVuc3Vic2NyaWJlV3JhcHBlciA9ICgpID0+IHtcbiAgICBkaWRVbnN1YnNjcmliZSA9IHRydWU7XG4gICAgc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBudWxsO1xuXG4gICAgaWYgKGxhc3RUaHJvd25FcnJvcikge1xuICAgICAgLy8gSXQncyBwb3NzaWJsZSB0aGF0IHdlIGNhdWdodCBhbiBlcnJvciBkdWUgdG8gYSBiYWQgbWFwU3RhdGUgZnVuY3Rpb24sIGJ1dCB0aGVcbiAgICAgIC8vIHBhcmVudCByZS1yZW5kZXJlZCB3aXRob3V0IHRoaXMgY29tcG9uZW50IGFuZCB3ZSdyZSBhYm91dCB0byB1bm1vdW50LlxuICAgICAgLy8gVGhpcyBzaG91bGRuJ3QgaGFwcGVuIGFzIGxvbmcgYXMgd2UgZG8gdG9wLWRvd24gc3Vic2NyaXB0aW9ucyBjb3JyZWN0bHksIGJ1dFxuICAgICAgLy8gaWYgd2UgZXZlciBkbyB0aG9zZSB3cm9uZywgdGhpcyB0aHJvdyB3aWxsIHN1cmZhY2UgdGhlIGVycm9yIGluIG91ciB0ZXN0cy5cbiAgICAgIC8vIEluIHRoYXQgY2FzZSwgdGhyb3cgdGhlIGVycm9yIGZyb20gaGVyZSBzbyBpdCBkb2Vzbid0IGdldCBsb3N0LlxuICAgICAgdGhyb3cgbGFzdFRocm93bkVycm9yO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdW5zdWJzY3JpYmVXcmFwcGVyO1xufSAvLyBSZWR1Y2VyIGluaXRpYWwgc3RhdGUgY3JlYXRpb24gZm9yIG91ciB1cGRhdGUgcmVkdWNlclxuXG5cbmNvbnN0IGluaXRTdGF0ZVVwZGF0ZXMgPSAoKSA9PiBFTVBUWV9BUlJBWTtcblxuZnVuY3Rpb24gc3RyaWN0RXF1YWwoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn1cbi8qKlxyXG4gKiBJbmZlcnMgdGhlIHR5cGUgb2YgcHJvcHMgdGhhdCBhIGNvbm5lY3RvciB3aWxsIGluamVjdCBpbnRvIGEgY29tcG9uZW50LlxyXG4gKi9cblxuXG5sZXQgaGFzV2FybmVkQWJvdXREZXByZWNhdGVkUHVyZU9wdGlvbiA9IGZhbHNlO1xuLyoqXHJcbiAqIENvbm5lY3RzIGEgUmVhY3QgY29tcG9uZW50IHRvIGEgUmVkdXggc3RvcmUuXHJcbiAqXHJcbiAqIC0gV2l0aG91dCBhcmd1bWVudHMsIGp1c3Qgd3JhcHMgdGhlIGNvbXBvbmVudCwgd2l0aG91dCBjaGFuZ2luZyB0aGUgYmVoYXZpb3IgLyBwcm9wc1xyXG4gKlxyXG4gKiAtIElmIDIgcGFyYW1zIGFyZSBwYXNzZWQgKDNyZCBwYXJhbSwgbWVyZ2VQcm9wcywgaXMgc2tpcHBlZCksIGRlZmF1bHQgYmVoYXZpb3JcclxuICogaXMgdG8gb3ZlcnJpZGUgb3duUHJvcHMgKGFzIHN0YXRlZCBpbiB0aGUgZG9jcyksIHNvIHdoYXQgcmVtYWlucyBpcyBldmVyeXRoaW5nIHRoYXQnc1xyXG4gKiBub3QgYSBzdGF0ZSBvciBkaXNwYXRjaCBwcm9wXHJcbiAqXHJcbiAqIC0gV2hlbiAzcmQgcGFyYW0gaXMgcGFzc2VkLCB3ZSBkb24ndCBrbm93IGlmIG93blByb3BzIHByb3BhZ2F0ZSBhbmQgd2hldGhlciB0aGV5XHJcbiAqIHNob3VsZCBiZSB2YWxpZCBjb21wb25lbnQgcHJvcHMsIGJlY2F1c2UgaXQgZGVwZW5kcyBvbiBtZXJnZVByb3BzIGltcGxlbWVudGF0aW9uLlxyXG4gKiBBcyBzdWNoLCBpdCBpcyB0aGUgdXNlcidzIHJlc3BvbnNpYmlsaXR5IHRvIGV4dGVuZCBvd25Qcm9wcyBpbnRlcmZhY2UgZnJvbSBzdGF0ZSBvclxyXG4gKiBkaXNwYXRjaCBwcm9wcyBvciBib3RoIHdoZW4gYXBwbGljYWJsZVxyXG4gKlxyXG4gKiBAcGFyYW0gbWFwU3RhdGVUb1Byb3BzIEEgZnVuY3Rpb24gdGhhdCBleHRyYWN0cyB2YWx1ZXMgZnJvbSBzdGF0ZVxyXG4gKiBAcGFyYW0gbWFwRGlzcGF0Y2hUb1Byb3BzIFNldHVwIGZvciBkaXNwYXRjaGluZyBhY3Rpb25zXHJcbiAqIEBwYXJhbSBtZXJnZVByb3BzIE9wdGlvbmFsIGNhbGxiYWNrIHRvIG1lcmdlIHN0YXRlIGFuZCBkaXNwYXRjaCBwcm9wcyB0b2dldGhlclxyXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIGZvciBjb25maWd1cmluZyB0aGUgY29ubmVjdGlvblxyXG4gKlxyXG4gKi9cblxuZnVuY3Rpb24gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywge1xuICAvLyBUaGUgYHB1cmVgIG9wdGlvbiBoYXMgYmVlbiByZW1vdmVkLCBzbyBUUyBkb2Vzbid0IGxpa2UgdXMgZGVzdHJ1Y3R1cmluZyB0aGlzIHRvIGNoZWNrIGl0cyBleGlzdGVuY2UuXG4gIC8vIEB0cy1pZ25vcmVcbiAgcHVyZSxcbiAgYXJlU3RhdGVzRXF1YWwgPSBzdHJpY3RFcXVhbCxcbiAgYXJlT3duUHJvcHNFcXVhbCA9IHNoYWxsb3dFcXVhbCxcbiAgYXJlU3RhdGVQcm9wc0VxdWFsID0gc2hhbGxvd0VxdWFsLFxuICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gc2hhbGxvd0VxdWFsLFxuICAvLyB1c2UgUmVhY3QncyBmb3J3YXJkUmVmIHRvIGV4cG9zZSBhIHJlZiBvZiB0aGUgd3JhcHBlZCBjb21wb25lbnRcbiAgZm9yd2FyZFJlZiA9IGZhbHNlLFxuICAvLyB0aGUgY29udGV4dCBjb25zdW1lciB0byB1c2VcbiAgY29udGV4dCA9IFJlYWN0UmVkdXhDb250ZXh0XG59ID0ge30pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAocHVyZSAhPT0gdW5kZWZpbmVkICYmICFoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRQdXJlT3B0aW9uKSB7XG4gICAgICBoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRQdXJlT3B0aW9uID0gdHJ1ZTtcbiAgICAgIHdhcm5pbmcoJ1RoZSBgcHVyZWAgb3B0aW9uIGhhcyBiZWVuIHJlbW92ZWQuIGBjb25uZWN0YCBpcyBub3cgYWx3YXlzIGEgXCJwdXJlL21lbW9pemVkXCIgY29tcG9uZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgQ29udGV4dCA9IGNvbnRleHQ7XG4gIGNvbnN0IGluaXRNYXBTdGF0ZVRvUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHNGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcyk7XG4gIGNvbnN0IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3J5KG1hcERpc3BhdGNoVG9Qcm9wcyk7XG4gIGNvbnN0IGluaXRNZXJnZVByb3BzID0gbWVyZ2VQcm9wc0ZhY3RvcnkobWVyZ2VQcm9wcyk7XG4gIGNvbnN0IHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyA9IEJvb2xlYW4obWFwU3RhdGVUb1Byb3BzKTtcblxuICBjb25zdCB3cmFwV2l0aENvbm5lY3QgPSBXcmFwcGVkQ29tcG9uZW50ID0+IHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhaXNWYWxpZEVsZW1lbnRUeXBlKFdyYXBwZWRDb21wb25lbnQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFlvdSBtdXN0IHBhc3MgYSBjb21wb25lbnQgdG8gdGhlIGZ1bmN0aW9uIHJldHVybmVkIGJ5IGNvbm5lY3QuIEluc3RlYWQgcmVjZWl2ZWQgJHtzdHJpbmdpZnlDb21wb25lbnQoV3JhcHBlZENvbXBvbmVudCl9YCk7XG4gICAgfVxuXG4gICAgY29uc3Qgd3JhcHBlZENvbXBvbmVudE5hbWUgPSBXcmFwcGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IFdyYXBwZWRDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50JztcbiAgICBjb25zdCBkaXNwbGF5TmFtZSA9IGBDb25uZWN0KCR7d3JhcHBlZENvbXBvbmVudE5hbWV9KWA7XG4gICAgY29uc3Qgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyA9IHtcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIGRpc3BsYXlOYW1lLFxuICAgICAgd3JhcHBlZENvbXBvbmVudE5hbWUsXG4gICAgICBXcmFwcGVkQ29tcG9uZW50LFxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wcyxcbiAgICAgIGFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWxcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gQ29ubmVjdEZ1bmN0aW9uKHByb3BzKSB7XG4gICAgICBjb25zdCBbcHJvcHNDb250ZXh0LCByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmLCB3cmFwcGVyUHJvcHNdID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIC8vIERpc3Rpbmd1aXNoIGJldHdlZW4gYWN0dWFsIFwiZGF0YVwiIHByb3BzIHRoYXQgd2VyZSBwYXNzZWQgdG8gdGhlIHdyYXBwZXIgY29tcG9uZW50LFxuICAgICAgICAvLyBhbmQgdmFsdWVzIG5lZWRlZCB0byBjb250cm9sIGJlaGF2aW9yIChmb3J3YXJkZWQgcmVmcywgYWx0ZXJuYXRlIGNvbnRleHQgaW5zdGFuY2VzKS5cbiAgICAgICAgLy8gVG8gbWFpbnRhaW4gdGhlIHdyYXBwZXJQcm9wcyBvYmplY3QgcmVmZXJlbmNlLCBtZW1vaXplIHRoaXMgZGVzdHJ1Y3R1cmluZy5cbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIHJlYWN0UmVkdXhGb3J3YXJkZWRSZWZcbiAgICAgICAgfSA9IHByb3BzLFxuICAgICAgICAgICAgICB3cmFwcGVyUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICAgICAgICByZXR1cm4gW3Byb3BzLmNvbnRleHQsIHJlYWN0UmVkdXhGb3J3YXJkZWRSZWYsIHdyYXBwZXJQcm9wc107XG4gICAgICB9LCBbcHJvcHNdKTtcbiAgICAgIGNvbnN0IENvbnRleHRUb1VzZSA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICAvLyBVc2VycyBtYXkgb3B0aW9uYWxseSBwYXNzIGluIGEgY3VzdG9tIGNvbnRleHQgaW5zdGFuY2UgdG8gdXNlIGluc3RlYWQgb2Ygb3VyIFJlYWN0UmVkdXhDb250ZXh0LlxuICAgICAgICAvLyBNZW1vaXplIHRoZSBjaGVjayB0aGF0IGRldGVybWluZXMgd2hpY2ggY29udGV4dCBpbnN0YW5jZSB3ZSBzaG91bGQgdXNlLlxuICAgICAgICByZXR1cm4gcHJvcHNDb250ZXh0ICYmIHByb3BzQ29udGV4dC5Db25zdW1lciAmJiAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlzQ29udGV4dENvbnN1bWVyKCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChwcm9wc0NvbnRleHQuQ29uc3VtZXIsIG51bGwpKSA/IHByb3BzQ29udGV4dCA6IENvbnRleHQ7XG4gICAgICB9LCBbcHJvcHNDb250ZXh0LCBDb250ZXh0XSk7IC8vIFJldHJpZXZlIHRoZSBzdG9yZSBhbmQgYW5jZXN0b3Igc3Vic2NyaXB0aW9uIHZpYSBjb250ZXh0LCBpZiBhdmFpbGFibGVcblxuICAgICAgY29uc3QgY29udGV4dFZhbHVlID0gdXNlQ29udGV4dChDb250ZXh0VG9Vc2UpOyAvLyBUaGUgc3RvcmUgX211c3RfIGV4aXN0IGFzIGVpdGhlciBhIHByb3Agb3IgaW4gY29udGV4dC5cbiAgICAgIC8vIFdlJ2xsIGNoZWNrIHRvIHNlZSBpZiBpdCBfbG9va3NfIGxpa2UgYSBSZWR1eCBzdG9yZSBmaXJzdC5cbiAgICAgIC8vIFRoaXMgYWxsb3dzIHVzIHRvIHBhc3MgdGhyb3VnaCBhIGBzdG9yZWAgcHJvcCB0aGF0IGlzIGp1c3QgYSBwbGFpbiB2YWx1ZS5cblxuICAgICAgY29uc3QgZGlkU3RvcmVDb21lRnJvbVByb3BzID0gQm9vbGVhbihwcm9wcy5zdG9yZSkgJiYgQm9vbGVhbihwcm9wcy5zdG9yZS5nZXRTdGF0ZSkgJiYgQm9vbGVhbihwcm9wcy5zdG9yZS5kaXNwYXRjaCk7XG4gICAgICBjb25zdCBkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCA9IEJvb2xlYW4oY29udGV4dFZhbHVlKSAmJiBCb29sZWFuKGNvbnRleHRWYWx1ZS5zdG9yZSk7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFkaWRTdG9yZUNvbWVGcm9tUHJvcHMgJiYgIWRpZFN0b3JlQ29tZUZyb21Db250ZXh0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ291bGQgbm90IGZpbmQgXCJzdG9yZVwiIGluIHRoZSBjb250ZXh0IG9mIGAgKyBgXCIke2Rpc3BsYXlOYW1lfVwiLiBFaXRoZXIgd3JhcCB0aGUgcm9vdCBjb21wb25lbnQgaW4gYSA8UHJvdmlkZXI+LCBgICsgYG9yIHBhc3MgYSBjdXN0b20gUmVhY3QgY29udGV4dCBwcm92aWRlciB0byA8UHJvdmlkZXI+IGFuZCB0aGUgY29ycmVzcG9uZGluZyBgICsgYFJlYWN0IGNvbnRleHQgY29uc3VtZXIgdG8gJHtkaXNwbGF5TmFtZX0gaW4gY29ubmVjdCBvcHRpb25zLmApO1xuICAgICAgfSAvLyBCYXNlZCBvbiB0aGUgcHJldmlvdXMgY2hlY2ssIG9uZSBvZiB0aGVzZSBtdXN0IGJlIHRydWVcblxuXG4gICAgICBjb25zdCBzdG9yZSA9IGRpZFN0b3JlQ29tZUZyb21Qcm9wcyA/IHByb3BzLnN0b3JlIDogY29udGV4dFZhbHVlLnN0b3JlO1xuICAgICAgY29uc3QgZ2V0U2VydmVyU3RhdGUgPSBkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCA/IGNvbnRleHRWYWx1ZS5nZXRTZXJ2ZXJTdGF0ZSA6IHN0b3JlLmdldFN0YXRlO1xuICAgICAgY29uc3QgY2hpbGRQcm9wc1NlbGVjdG9yID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIC8vIFRoZSBjaGlsZCBwcm9wcyBzZWxlY3RvciBuZWVkcyB0aGUgc3RvcmUgcmVmZXJlbmNlIGFzIGFuIGlucHV0LlxuICAgICAgICAvLyBSZS1jcmVhdGUgdGhpcyBzZWxlY3RvciB3aGVuZXZlciB0aGUgc3RvcmUgY2hhbmdlcy5cbiAgICAgICAgcmV0dXJuIGRlZmF1bHRTZWxlY3RvckZhY3Rvcnkoc3RvcmUuZGlzcGF0Y2gsIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMpO1xuICAgICAgfSwgW3N0b3JlXSk7XG4gICAgICBjb25zdCBbc3Vic2NyaXB0aW9uLCBub3RpZnlOZXN0ZWRTdWJzXSA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuIE5PX1NVQlNDUklQVElPTl9BUlJBWTsgLy8gVGhpcyBTdWJzY3JpcHRpb24ncyBzb3VyY2Ugc2hvdWxkIG1hdGNoIHdoZXJlIHN0b3JlIGNhbWUgZnJvbTogcHJvcHMgdnMuIGNvbnRleHQuIEEgY29tcG9uZW50XG4gICAgICAgIC8vIGNvbm5lY3RlZCB0byB0aGUgc3RvcmUgdmlhIHByb3BzIHNob3VsZG4ndCB1c2Ugc3Vic2NyaXB0aW9uIGZyb20gY29udGV4dCwgb3IgdmljZSB2ZXJzYS5cblxuICAgICAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBjcmVhdGVTdWJzY3JpcHRpb24oc3RvcmUsIGRpZFN0b3JlQ29tZUZyb21Qcm9wcyA/IHVuZGVmaW5lZCA6IGNvbnRleHRWYWx1ZS5zdWJzY3JpcHRpb24pOyAvLyBgbm90aWZ5TmVzdGVkU3Vic2AgaXMgZHVwbGljYXRlZCB0byBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQgaW5cbiAgICAgICAgLy8gdGhlIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AsIHdoZXJlIGBzdWJzY3JpcHRpb25gIHdpbGwgdGhlbiBiZSBudWxsLiBUaGlzIGNhblxuICAgICAgICAvLyBwcm9iYWJseSBiZSBhdm9pZGVkIGlmIFN1YnNjcmlwdGlvbidzIGxpc3RlbmVycyBsb2dpYyBpcyBjaGFuZ2VkIHRvIG5vdCBjYWxsIGxpc3RlbmVyc1xuICAgICAgICAvLyB0aGF0IGhhdmUgYmVlbiB1bnN1YnNjcmliZWQgaW4gdGhlICBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLlxuXG4gICAgICAgIGNvbnN0IG5vdGlmeU5lc3RlZFN1YnMgPSBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3Vicy5iaW5kKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIHJldHVybiBbc3Vic2NyaXB0aW9uLCBub3RpZnlOZXN0ZWRTdWJzXTtcbiAgICAgIH0sIFtzdG9yZSwgZGlkU3RvcmVDb21lRnJvbVByb3BzLCBjb250ZXh0VmFsdWVdKTsgLy8gRGV0ZXJtaW5lIHdoYXQge3N0b3JlLCBzdWJzY3JpcHRpb259IHZhbHVlIHNob3VsZCBiZSBwdXQgaW50byBuZXN0ZWQgY29udGV4dCwgaWYgbmVjZXNzYXJ5LFxuICAgICAgLy8gYW5kIG1lbW9pemUgdGhhdCB2YWx1ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSBjb250ZXh0IHVwZGF0ZXMuXG5cbiAgICAgIGNvbnN0IG92ZXJyaWRkZW5Db250ZXh0VmFsdWUgPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgaWYgKGRpZFN0b3JlQ29tZUZyb21Qcm9wcykge1xuICAgICAgICAgIC8vIFRoaXMgY29tcG9uZW50IGlzIGRpcmVjdGx5IHN1YnNjcmliZWQgdG8gYSBzdG9yZSBmcm9tIHByb3BzLlxuICAgICAgICAgIC8vIFdlIGRvbid0IHdhbnQgZGVzY2VuZGFudHMgcmVhZGluZyBmcm9tIHRoaXMgc3RvcmUgLSBwYXNzIGRvd24gd2hhdGV2ZXJcbiAgICAgICAgICAvLyB0aGUgZXhpc3RpbmcgY29udGV4dCB2YWx1ZSBpcyBmcm9tIHRoZSBuZWFyZXN0IGNvbm5lY3RlZCBhbmNlc3Rvci5cbiAgICAgICAgICByZXR1cm4gY29udGV4dFZhbHVlO1xuICAgICAgICB9IC8vIE90aGVyd2lzZSwgcHV0IHRoaXMgY29tcG9uZW50J3Mgc3Vic2NyaXB0aW9uIGluc3RhbmNlIGludG8gY29udGV4dCwgc28gdGhhdFxuICAgICAgICAvLyBjb25uZWN0ZWQgZGVzY2VuZGFudHMgd29uJ3QgdXBkYXRlIHVudGlsIGFmdGVyIHRoaXMgY29tcG9uZW50IGlzIGRvbmVcblxuXG4gICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgY29udGV4dFZhbHVlLCB7XG4gICAgICAgICAgc3Vic2NyaXB0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSwgW2RpZFN0b3JlQ29tZUZyb21Qcm9wcywgY29udGV4dFZhbHVlLCBzdWJzY3JpcHRpb25dKTsgLy8gU2V0IHVwIHJlZnMgdG8gY29vcmRpbmF0ZSB2YWx1ZXMgYmV0d2VlbiB0aGUgc3Vic2NyaXB0aW9uIGVmZmVjdCBhbmQgdGhlIHJlbmRlciBsb2dpY1xuXG4gICAgICBjb25zdCBsYXN0Q2hpbGRQcm9wcyA9IHVzZVJlZigpO1xuICAgICAgY29uc3QgbGFzdFdyYXBwZXJQcm9wcyA9IHVzZVJlZih3cmFwcGVyUHJvcHMpO1xuICAgICAgY29uc3QgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSA9IHVzZVJlZigpO1xuICAgICAgY29uc3QgcmVuZGVySXNTY2hlZHVsZWQgPSB1c2VSZWYoZmFsc2UpO1xuICAgICAgY29uc3QgaXNQcm9jZXNzaW5nRGlzcGF0Y2ggPSB1c2VSZWYoZmFsc2UpO1xuICAgICAgY29uc3QgaXNNb3VudGVkID0gdXNlUmVmKGZhbHNlKTtcbiAgICAgIGNvbnN0IGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IgPSB1c2VSZWYoKTtcbiAgICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpc01vdW50ZWQuY3VycmVudCA9IHRydWU7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgaXNNb3VudGVkLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICAgIH0sIFtdKTtcbiAgICAgIGNvbnN0IGFjdHVhbENoaWxkUHJvcHNTZWxlY3RvciA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBjb25zdCBzZWxlY3RvciA9ICgpID0+IHtcbiAgICAgICAgICAvLyBUcmlja3kgbG9naWMgaGVyZTpcbiAgICAgICAgICAvLyAtIFRoaXMgcmVuZGVyIG1heSBoYXZlIGJlZW4gdHJpZ2dlcmVkIGJ5IGEgUmVkdXggc3RvcmUgdXBkYXRlIHRoYXQgcHJvZHVjZWQgbmV3IGNoaWxkIHByb3BzXG4gICAgICAgICAgLy8gLSBIb3dldmVyLCB3ZSBtYXkgaGF2ZSBnb3R0ZW4gbmV3IHdyYXBwZXIgcHJvcHMgYWZ0ZXIgdGhhdFxuICAgICAgICAgIC8vIElmIHdlIGhhdmUgbmV3IGNoaWxkIHByb3BzLCBhbmQgdGhlIHNhbWUgd3JhcHBlciBwcm9wcywgd2Uga25vdyB3ZSBzaG91bGQgdXNlIHRoZSBuZXcgY2hpbGQgcHJvcHMgYXMtaXMuXG4gICAgICAgICAgLy8gQnV0LCBpZiB3ZSBoYXZlIG5ldyB3cmFwcGVyIHByb3BzLCB0aG9zZSBtaWdodCBjaGFuZ2UgdGhlIGNoaWxkIHByb3BzLCBzbyB3ZSBoYXZlIHRvIHJlY2FsY3VsYXRlIHRoaW5ncy5cbiAgICAgICAgICAvLyBTbywgd2UnbGwgdXNlIHRoZSBjaGlsZCBwcm9wcyBmcm9tIHN0b3JlIHVwZGF0ZSBvbmx5IGlmIHRoZSB3cmFwcGVyIHByb3BzIGFyZSB0aGUgc2FtZSBhcyBsYXN0IHRpbWUuXG4gICAgICAgICAgaWYgKGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCAmJiB3cmFwcGVyUHJvcHMgPT09IGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudDtcbiAgICAgICAgICB9IC8vIFRPRE8gV2UncmUgcmVhZGluZyB0aGUgc3RvcmUgZGlyZWN0bHkgaW4gcmVuZGVyKCkgaGVyZS4gQmFkIGlkZWE/XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIGxpa2VseSBjYXVzZSBCYWQgVGhpbmdzIChUTSkgdG8gaGFwcGVuIGluIENvbmN1cnJlbnQgTW9kZS5cbiAgICAgICAgICAvLyBOb3RlIHRoYXQgd2UgZG8gdGhpcyBiZWNhdXNlIG9uIHJlbmRlcnMgX25vdF8gY2F1c2VkIGJ5IHN0b3JlIHVwZGF0ZXMsIHdlIG5lZWQgdGhlIGxhdGVzdCBzdG9yZSBzdGF0ZVxuICAgICAgICAgIC8vIHRvIGRldGVybWluZSB3aGF0IHRoZSBjaGlsZCBwcm9wcyBzaG91bGQgYmUuXG5cblxuICAgICAgICAgIHJldHVybiBjaGlsZFByb3BzU2VsZWN0b3Ioc3RvcmUuZ2V0U3RhdGUoKSwgd3JhcHBlclByb3BzKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gc2VsZWN0b3I7XG4gICAgICB9LCBbc3RvcmUsIHdyYXBwZXJQcm9wc10pOyAvLyBXZSBuZWVkIHRoaXMgdG8gZXhlY3V0ZSBzeW5jaHJvbm91c2x5IGV2ZXJ5IHRpbWUgd2UgcmUtcmVuZGVyLiBIb3dldmVyLCBSZWFjdCB3YXJuc1xuICAgICAgLy8gYWJvdXQgdXNlTGF5b3V0RWZmZWN0IGluIFNTUiwgc28gd2UgdHJ5IHRvIGRldGVjdCBlbnZpcm9ubWVudCBhbmQgZmFsbCBiYWNrIHRvXG4gICAgICAvLyBqdXN0IHVzZUVmZmVjdCBpbnN0ZWFkIHRvIGF2b2lkIHRoZSB3YXJuaW5nLCBzaW5jZSBuZWl0aGVyIHdpbGwgcnVuIGFueXdheS5cblxuICAgICAgY29uc3Qgc3Vic2NyaWJlRm9yUmVhY3QgPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgY29uc3Qgc3Vic2NyaWJlID0gcmVhY3RMaXN0ZW5lciA9PiB7XG4gICAgICAgICAgaWYgKCFzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7fTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gc3Vic2NyaWJlVXBkYXRlcyhzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsIHN0b3JlLCBzdWJzY3JpcHRpb24sIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICBjaGlsZFByb3BzU2VsZWN0b3IsIGxhc3RXcmFwcGVyUHJvcHMsIGxhc3RDaGlsZFByb3BzLCByZW5kZXJJc1NjaGVkdWxlZCwgaXNNb3VudGVkLCBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLCBub3RpZnlOZXN0ZWRTdWJzLCByZWFjdExpc3RlbmVyKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gc3Vic2NyaWJlO1xuICAgICAgfSwgW3N1YnNjcmlwdGlvbl0pO1xuICAgICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdFdpdGhBcmdzKGNhcHR1cmVXcmFwcGVyUHJvcHMsIFtsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIHdyYXBwZXJQcm9wcywgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSwgbm90aWZ5TmVzdGVkU3Vic10pO1xuICAgICAgbGV0IGFjdHVhbENoaWxkUHJvcHM7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGFjdHVhbENoaWxkUHJvcHMgPSB1c2VTeW5jRXh0ZXJuYWxTdG9yZSggLy8gVE9ETyBXZSdyZSBwYXNzaW5nIHRocm91Z2ggYSBiaWcgd3JhcHBlciB0aGF0IGRvZXMgYSBidW5jaCBvZiBleHRyYSBzaWRlIGVmZmVjdHMgYmVzaWRlcyBzdWJzY3JpYmluZ1xuICAgICAgICBzdWJzY3JpYmVGb3JSZWFjdCwgLy8gVE9ETyBUaGlzIGlzIGluY3JlZGlibHkgaGFja3kuIFdlJ3ZlIGFscmVhZHkgcHJvY2Vzc2VkIHRoZSBzdG9yZSB1cGRhdGUgYW5kIGNhbGN1bGF0ZWQgbmV3IGNoaWxkIHByb3BzLFxuICAgICAgICAvLyBUT0RPIGFuZCB3ZSdyZSBqdXN0IHBhc3NpbmcgdGhhdCB0aHJvdWdoIHNvIGl0IHRyaWdnZXJzIGEgcmUtcmVuZGVyIGZvciB1cyByYXRoZXIgdGhhbiByZWx5aW5nIG9uIGB1U0VTYC5cbiAgICAgICAgYWN0dWFsQ2hpbGRQcm9wc1NlbGVjdG9yLCBnZXRTZXJ2ZXJTdGF0ZSA/ICgpID0+IGNoaWxkUHJvcHNTZWxlY3RvcihnZXRTZXJ2ZXJTdGF0ZSgpLCB3cmFwcGVyUHJvcHMpIDogYWN0dWFsQ2hpbGRQcm9wc1NlbGVjdG9yKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBpZiAobGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50KSB7XG4gICAgICAgICAgO1xuICAgICAgICAgIGVyci5tZXNzYWdlICs9IGBcXG5UaGUgZXJyb3IgbWF5IGJlIGNvcnJlbGF0ZWQgd2l0aCB0aGlzIHByZXZpb3VzIGVycm9yOlxcbiR7bGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50LnN0YWNrfVxcblxcbmA7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG5cbiAgICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgICBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGFzdENoaWxkUHJvcHMuY3VycmVudCA9IGFjdHVhbENoaWxkUHJvcHM7XG4gICAgICB9KTsgLy8gTm93IHRoYXQgYWxsIHRoYXQncyBkb25lLCB3ZSBjYW4gZmluYWxseSB0cnkgdG8gYWN0dWFsbHkgcmVuZGVyIHRoZSBjaGlsZCBjb21wb25lbnQuXG4gICAgICAvLyBXZSBtZW1vaXplIHRoZSBlbGVtZW50cyBmb3IgdGhlIHJlbmRlcmVkIGNoaWxkIGNvbXBvbmVudCBhcyBhbiBvcHRpbWl6YXRpb24uXG5cbiAgICAgIGNvbnN0IHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIC8qI19fUFVSRV9fKi9cbiAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgYWN0dWFsQ2hpbGRQcm9wcywge1xuICAgICAgICAgICAgcmVmOiByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmXG4gICAgICAgICAgfSkpXG4gICAgICAgICk7XG4gICAgICB9LCBbcmVhY3RSZWR1eEZvcndhcmRlZFJlZiwgV3JhcHBlZENvbXBvbmVudCwgYWN0dWFsQ2hpbGRQcm9wc10pOyAvLyBJZiBSZWFjdCBzZWVzIHRoZSBleGFjdCBzYW1lIGVsZW1lbnQgcmVmZXJlbmNlIGFzIGxhc3QgdGltZSwgaXQgYmFpbHMgb3V0IG9mIHJlLXJlbmRlcmluZ1xuICAgICAgLy8gdGhhdCBjaGlsZCwgc2FtZSBhcyBpZiBpdCB3YXMgd3JhcHBlZCBpbiBSZWFjdC5tZW1vKCkgb3IgcmV0dXJuZWQgZmFsc2UgZnJvbSBzaG91bGRDb21wb25lbnRVcGRhdGUuXG5cbiAgICAgIGNvbnN0IHJlbmRlcmVkQ2hpbGQgPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgaWYgKHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykge1xuICAgICAgICAgIC8vIElmIHRoaXMgY29tcG9uZW50IGlzIHN1YnNjcmliZWQgdG8gc3RvcmUgdXBkYXRlcywgd2UgbmVlZCB0byBwYXNzIGl0cyBvd25cbiAgICAgICAgICAvLyBzdWJzY3JpcHRpb24gaW5zdGFuY2UgZG93biB0byBvdXIgZGVzY2VuZGFudHMuIFRoYXQgbWVhbnMgcmVuZGVyaW5nIHRoZSBzYW1lXG4gICAgICAgICAgLy8gQ29udGV4dCBpbnN0YW5jZSwgYW5kIHB1dHRpbmcgYSBkaWZmZXJlbnQgdmFsdWUgaW50byB0aGUgY29udGV4dC5cbiAgICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGV4dFRvVXNlLlByb3ZpZGVyLCB7XG4gICAgICAgICAgICB2YWx1ZTogb3ZlcnJpZGRlbkNvbnRleHRWYWx1ZVxuICAgICAgICAgIH0sIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50O1xuICAgICAgfSwgW0NvbnRleHRUb1VzZSwgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50LCBvdmVycmlkZGVuQ29udGV4dFZhbHVlXSk7XG4gICAgICByZXR1cm4gcmVuZGVyZWRDaGlsZDtcbiAgICB9XG5cbiAgICBjb25zdCBfQ29ubmVjdCA9IFJlYWN0Lm1lbW8oQ29ubmVjdEZ1bmN0aW9uKTtcblxuICAgIC8vIEFkZCBhIGhhY2t5IGNhc3QgdG8gZ2V0IHRoZSByaWdodCBvdXRwdXQgdHlwZVxuICAgIGNvbnN0IENvbm5lY3QgPSBfQ29ubmVjdDtcbiAgICBDb25uZWN0LldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgIENvbm5lY3QuZGlzcGxheU5hbWUgPSBDb25uZWN0RnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcblxuICAgIGlmIChmb3J3YXJkUmVmKSB7XG4gICAgICBjb25zdCBfZm9yd2FyZGVkID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBmb3J3YXJkQ29ubmVjdFJlZihwcm9wcywgcmVmKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbm5lY3QsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICAgIHJlYWN0UmVkdXhGb3J3YXJkZWRSZWY6IHJlZlxuICAgICAgICB9KSk7XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgZm9yd2FyZGVkID0gX2ZvcndhcmRlZDtcbiAgICAgIGZvcndhcmRlZC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICAgICAgZm9yd2FyZGVkLldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgICAgcmV0dXJuIGhvaXN0U3RhdGljcyhmb3J3YXJkZWQsIFdyYXBwZWRDb21wb25lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBob2lzdFN0YXRpY3MoQ29ubmVjdCwgV3JhcHBlZENvbXBvbmVudCk7XG4gIH07XG5cbiAgcmV0dXJuIHdyYXBXaXRoQ29ubmVjdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdDsiLCJmdW5jdGlvbiBzdHlsaXNfbWluIChXKSB7XG4gIGZ1bmN0aW9uIE0oZCwgYywgZSwgaCwgYSkge1xuICAgIGZvciAodmFyIG0gPSAwLCBiID0gMCwgdiA9IDAsIG4gPSAwLCBxLCBnLCB4ID0gMCwgSyA9IDAsIGssIHUgPSBrID0gcSA9IDAsIGwgPSAwLCByID0gMCwgSSA9IDAsIHQgPSAwLCBCID0gZS5sZW5ndGgsIEogPSBCIC0gMSwgeSwgZiA9ICcnLCBwID0gJycsIEYgPSAnJywgRyA9ICcnLCBDOyBsIDwgQjspIHtcbiAgICAgIGcgPSBlLmNoYXJDb2RlQXQobCk7XG4gICAgICBsID09PSBKICYmIDAgIT09IGIgKyBuICsgdiArIG0gJiYgKDAgIT09IGIgJiYgKGcgPSA0NyA9PT0gYiA/IDEwIDogNDcpLCBuID0gdiA9IG0gPSAwLCBCKyssIEorKyk7XG5cbiAgICAgIGlmICgwID09PSBiICsgbiArIHYgKyBtKSB7XG4gICAgICAgIGlmIChsID09PSBKICYmICgwIDwgciAmJiAoZiA9IGYucmVwbGFjZShOLCAnJykpLCAwIDwgZi50cmltKCkubGVuZ3RoKSkge1xuICAgICAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIGNhc2UgNTk6XG4gICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIGYgKz0gZS5jaGFyQXQobCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZyA9IDU5O1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgICAgY2FzZSAxMjM6XG4gICAgICAgICAgICBmID0gZi50cmltKCk7XG4gICAgICAgICAgICBxID0gZi5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgayA9IDE7XG5cbiAgICAgICAgICAgIGZvciAodCA9ICsrbDsgbCA8IEI7KSB7XG4gICAgICAgICAgICAgIHN3aXRjaCAoZyA9IGUuY2hhckNvZGVBdChsKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMTIzOlxuICAgICAgICAgICAgICAgICAgaysrO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDEyNTpcbiAgICAgICAgICAgICAgICAgIGstLTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZyA9IGUuY2hhckNvZGVBdChsICsgMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0MjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgICAgICAgICAgICBhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHUgPSBsICsgMTsgdSA8IEo7ICsrdSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGUuY2hhckNvZGVBdCh1KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoNDIgPT09IGcgJiYgNDIgPT09IGUuY2hhckNvZGVBdCh1IC0gMSkgJiYgbCArIDIgIT09IHUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHUgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoNDcgPT09IGcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHUgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHU7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA5MTpcbiAgICAgICAgICAgICAgICAgIGcrKztcblxuICAgICAgICAgICAgICAgIGNhc2UgNDA6XG4gICAgICAgICAgICAgICAgICBnKys7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDM0OlxuICAgICAgICAgICAgICAgIGNhc2UgMzk6XG4gICAgICAgICAgICAgICAgICBmb3IgKDsgbCsrIDwgSiAmJiBlLmNoYXJDb2RlQXQobCkgIT09IGc7KSB7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICgwID09PSBrKSBicmVhaztcbiAgICAgICAgICAgICAgbCsrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBrID0gZS5zdWJzdHJpbmcodCwgbCk7XG4gICAgICAgICAgICAwID09PSBxICYmIChxID0gKGYgPSBmLnJlcGxhY2UoY2EsICcnKS50cmltKCkpLmNoYXJDb2RlQXQoMCkpO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKHEpIHtcbiAgICAgICAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICAgICAgICAwIDwgciAmJiAoZiA9IGYucmVwbGFjZShOLCAnJykpO1xuICAgICAgICAgICAgICAgIGcgPSBmLmNoYXJDb2RlQXQoMSk7XG5cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTAwOlxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDk6XG4gICAgICAgICAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgICAgICAgICAgIHIgPSBjO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgciA9IE87XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgayA9IE0oYywgciwgaywgZywgYSArIDEpO1xuICAgICAgICAgICAgICAgIHQgPSBrLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAwIDwgQSAmJiAociA9IFgoTywgZiwgSSksIEMgPSBIKDMsIGssIHIsIGMsIEQsIHosIHQsIGcsIGEsIGgpLCBmID0gci5qb2luKCcnKSwgdm9pZCAwICE9PSBDICYmIDAgPT09ICh0ID0gKGsgPSBDLnRyaW0oKSkubGVuZ3RoKSAmJiAoZyA9IDAsIGsgPSAnJykpO1xuICAgICAgICAgICAgICAgIGlmICgwIDwgdCkgc3dpdGNoIChnKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgICAgICAgICAgZiA9IGYucmVwbGFjZShkYSwgZWEpO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDEwMDpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTA5OlxuICAgICAgICAgICAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICAgICAgICAgICAgayA9IGYgKyAneycgKyBrICsgJ30nO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDc6XG4gICAgICAgICAgICAgICAgICAgIGYgPSBmLnJlcGxhY2UoZmEsICckMSAkMicpO1xuICAgICAgICAgICAgICAgICAgICBrID0gZiArICd7JyArIGsgKyAnfSc7XG4gICAgICAgICAgICAgICAgICAgIGsgPSAxID09PSB3IHx8IDIgPT09IHcgJiYgTCgnQCcgKyBrLCAzKSA/ICdALXdlYmtpdC0nICsgayArICdAJyArIGsgOiAnQCcgKyBrO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgayA9IGYgKyBrLCAxMTIgPT09IGggJiYgKGsgPSAocCArPSBrLCAnJykpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBrID0gJyc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBrID0gTShjLCBYKGMsIGYsIEkpLCBrLCBoLCBhICsgMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEYgKz0gaztcbiAgICAgICAgICAgIGsgPSBJID0gciA9IHUgPSBxID0gMDtcbiAgICAgICAgICAgIGYgPSAnJztcbiAgICAgICAgICAgIGcgPSBlLmNoYXJDb2RlQXQoKytsKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAxMjU6XG4gICAgICAgICAgY2FzZSA1OTpcbiAgICAgICAgICAgIGYgPSAoMCA8IHIgPyBmLnJlcGxhY2UoTiwgJycpIDogZikudHJpbSgpO1xuICAgICAgICAgICAgaWYgKDEgPCAodCA9IGYubGVuZ3RoKSkgc3dpdGNoICgwID09PSB1ICYmIChxID0gZi5jaGFyQ29kZUF0KDApLCA0NSA9PT0gcSB8fCA5NiA8IHEgJiYgMTIzID4gcSkgJiYgKHQgPSAoZiA9IGYucmVwbGFjZSgnICcsICc6JykpLmxlbmd0aCksIDAgPCBBICYmIHZvaWQgMCAhPT0gKEMgPSBIKDEsIGYsIGMsIGQsIEQsIHosIHAubGVuZ3RoLCBoLCBhLCBoKSkgJiYgMCA9PT0gKHQgPSAoZiA9IEMudHJpbSgpKS5sZW5ndGgpICYmIChmID0gJ1xceDAwXFx4MDAnKSwgcSA9IGYuY2hhckNvZGVBdCgwKSwgZyA9IGYuY2hhckNvZGVBdCgxKSwgcSkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICAgICAgICBpZiAoMTA1ID09PSBnIHx8IDk5ID09PSBnKSB7XG4gICAgICAgICAgICAgICAgICBHICs9IGYgKyBlLmNoYXJBdChsKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIDU4ICE9PSBmLmNoYXJDb2RlQXQodCAtIDEpICYmIChwICs9IFAoZiwgcSwgZywgZi5jaGFyQ29kZUF0KDIpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBJID0gciA9IHUgPSBxID0gMDtcbiAgICAgICAgICAgIGYgPSAnJztcbiAgICAgICAgICAgIGcgPSBlLmNoYXJDb2RlQXQoKytsKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICA0NyA9PT0gYiA/IGIgPSAwIDogMCA9PT0gMSArIHEgJiYgMTA3ICE9PSBoICYmIDAgPCBmLmxlbmd0aCAmJiAociA9IDEsIGYgKz0gJ1xceDAwJyk7XG4gICAgICAgICAgMCA8IEEgKiBZICYmIEgoMCwgZiwgYywgZCwgRCwgeiwgcC5sZW5ndGgsIGgsIGEsIGgpO1xuICAgICAgICAgIHogPSAxO1xuICAgICAgICAgIEQrKztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDU5OlxuICAgICAgICBjYXNlIDEyNTpcbiAgICAgICAgICBpZiAoMCA9PT0gYiArIG4gKyB2ICsgbSkge1xuICAgICAgICAgICAgeisrO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgeisrO1xuICAgICAgICAgIHkgPSBlLmNoYXJBdChsKTtcblxuICAgICAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG4gKyBtICsgYikgc3dpdGNoICh4KSB7XG4gICAgICAgICAgICAgICAgY2FzZSA0NDpcbiAgICAgICAgICAgICAgICBjYXNlIDU4OlxuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgICAgICAgeSA9ICcnO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgMzIgIT09IGcgJiYgKHkgPSAnICcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgIHkgPSAnXFxcXDAnO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgeSA9ICdcXFxcZic7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICB5ID0gJ1xcXFx2JztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMzg6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgbSAmJiAociA9IEkgPSAxLCB5ID0gJ1xcZicgKyB5KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMTA4OlxuICAgICAgICAgICAgICBpZiAoMCA9PT0gbiArIGIgKyBtICsgRSAmJiAwIDwgdSkgc3dpdGNoIChsIC0gdSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgIDExMiA9PT0geCAmJiA1OCA9PT0gZS5jaGFyQ29kZUF0KGwgLSAzKSAmJiAoRSA9IHgpO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgMTExID09PSBLICYmIChFID0gSyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNTg6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgbSAmJiAodSA9IGwpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0NDpcbiAgICAgICAgICAgICAgMCA9PT0gYiArIHYgKyBuICsgbSAmJiAociA9IDEsIHkgKz0gJ1xccicpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgICAgIGNhc2UgMzk6XG4gICAgICAgICAgICAgIDAgPT09IGIgJiYgKG4gPSBuID09PSBnID8gMCA6IDAgPT09IG4gPyBnIDogbik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDkxOlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIHYgJiYgbSsrO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA5MzpcbiAgICAgICAgICAgICAgMCA9PT0gbiArIGIgKyB2ICYmIG0tLTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNDE6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgbSAmJiB2LS07XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgICAgICBpZiAoMCA9PT0gbiArIGIgKyBtKSB7XG4gICAgICAgICAgICAgICAgaWYgKDAgPT09IHEpIHN3aXRjaCAoMiAqIHggKyAzICogSykge1xuICAgICAgICAgICAgICAgICAgY2FzZSA1MzM6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBxID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdisrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNjQ6XG4gICAgICAgICAgICAgIDAgPT09IGIgKyB2ICsgbiArIG0gKyB1ICsgayAmJiAoayA9IDEpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0MjpcbiAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgIGlmICghKDAgPCBuICsgbSArIHYpKSBzd2l0Y2ggKGIpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICBzd2l0Y2ggKDIgKiBnICsgMyAqIGUuY2hhckNvZGVBdChsICsgMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyMzU6XG4gICAgICAgICAgICAgICAgICAgICAgYiA9IDQ3O1xuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjIwOlxuICAgICAgICAgICAgICAgICAgICAgIHQgPSBsLCBiID0gNDI7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA0MjpcbiAgICAgICAgICAgICAgICAgIDQ3ID09PSBnICYmIDQyID09PSB4ICYmIHQgKyAyICE9PSBsICYmICgzMyA9PT0gZS5jaGFyQ29kZUF0KHQgKyAyKSAmJiAocCArPSBlLnN1YnN0cmluZyh0LCBsICsgMSkpLCB5ID0gJycsIGIgPSAwKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIDAgPT09IGIgJiYgKGYgKz0geSk7XG4gICAgICB9XG5cbiAgICAgIEsgPSB4O1xuICAgICAgeCA9IGc7XG4gICAgICBsKys7XG4gICAgfVxuXG4gICAgdCA9IHAubGVuZ3RoO1xuXG4gICAgaWYgKDAgPCB0KSB7XG4gICAgICByID0gYztcbiAgICAgIGlmICgwIDwgQSAmJiAoQyA9IEgoMiwgcCwgciwgZCwgRCwgeiwgdCwgaCwgYSwgaCksIHZvaWQgMCAhPT0gQyAmJiAwID09PSAocCA9IEMpLmxlbmd0aCkpIHJldHVybiBHICsgcCArIEY7XG4gICAgICBwID0gci5qb2luKCcsJykgKyAneycgKyBwICsgJ30nO1xuXG4gICAgICBpZiAoMCAhPT0gdyAqIEUpIHtcbiAgICAgICAgMiAhPT0gdyB8fCBMKHAsIDIpIHx8IChFID0gMCk7XG5cbiAgICAgICAgc3dpdGNoIChFKSB7XG4gICAgICAgICAgY2FzZSAxMTE6XG4gICAgICAgICAgICBwID0gcC5yZXBsYWNlKGhhLCAnOi1tb3otJDEnKSArIHA7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTEyOlxuICAgICAgICAgICAgcCA9IHAucmVwbGFjZShRLCAnOjotd2Via2l0LWlucHV0LSQxJykgKyBwLnJlcGxhY2UoUSwgJzo6LW1vei0kMScpICsgcC5yZXBsYWNlKFEsICc6LW1zLWlucHV0LSQxJykgKyBwO1xuICAgICAgICB9XG5cbiAgICAgICAgRSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIEcgKyBwICsgRjtcbiAgfVxuXG4gIGZ1bmN0aW9uIFgoZCwgYywgZSkge1xuICAgIHZhciBoID0gYy50cmltKCkuc3BsaXQoaWEpO1xuICAgIGMgPSBoO1xuICAgIHZhciBhID0gaC5sZW5ndGgsXG4gICAgICAgIG0gPSBkLmxlbmd0aDtcblxuICAgIHN3aXRjaCAobSkge1xuICAgICAgY2FzZSAwOlxuICAgICAgY2FzZSAxOlxuICAgICAgICB2YXIgYiA9IDA7XG5cbiAgICAgICAgZm9yIChkID0gMCA9PT0gbSA/ICcnIDogZFswXSArICcgJzsgYiA8IGE7ICsrYikge1xuICAgICAgICAgIGNbYl0gPSBaKGQsIGNbYl0sIGUpLnRyaW0oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB2YXIgdiA9IGIgPSAwO1xuXG4gICAgICAgIGZvciAoYyA9IFtdOyBiIDwgYTsgKytiKSB7XG4gICAgICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCBtOyArK24pIHtcbiAgICAgICAgICAgIGNbdisrXSA9IFooZFtuXSArICcgJywgaFtiXSwgZSkudHJpbSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIGM7XG4gIH1cblxuICBmdW5jdGlvbiBaKGQsIGMsIGUpIHtcbiAgICB2YXIgaCA9IGMuY2hhckNvZGVBdCgwKTtcbiAgICAzMyA+IGggJiYgKGggPSAoYyA9IGMudHJpbSgpKS5jaGFyQ29kZUF0KDApKTtcblxuICAgIHN3aXRjaCAoaCkge1xuICAgICAgY2FzZSAzODpcbiAgICAgICAgcmV0dXJuIGMucmVwbGFjZShGLCAnJDEnICsgZC50cmltKCkpO1xuXG4gICAgICBjYXNlIDU4OlxuICAgICAgICByZXR1cm4gZC50cmltKCkgKyBjLnJlcGxhY2UoRiwgJyQxJyArIGQudHJpbSgpKTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKDAgPCAxICogZSAmJiAwIDwgYy5pbmRleE9mKCdcXGYnKSkgcmV0dXJuIGMucmVwbGFjZShGLCAoNTggPT09IGQuY2hhckNvZGVBdCgwKSA/ICcnIDogJyQxJykgKyBkLnRyaW0oKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGQgKyBjO1xuICB9XG5cbiAgZnVuY3Rpb24gUChkLCBjLCBlLCBoKSB7XG4gICAgdmFyIGEgPSBkICsgJzsnLFxuICAgICAgICBtID0gMiAqIGMgKyAzICogZSArIDQgKiBoO1xuXG4gICAgaWYgKDk0NCA9PT0gbSkge1xuICAgICAgZCA9IGEuaW5kZXhPZignOicsIDkpICsgMTtcbiAgICAgIHZhciBiID0gYS5zdWJzdHJpbmcoZCwgYS5sZW5ndGggLSAxKS50cmltKCk7XG4gICAgICBiID0gYS5zdWJzdHJpbmcoMCwgZCkudHJpbSgpICsgYiArICc7JztcbiAgICAgIHJldHVybiAxID09PSB3IHx8IDIgPT09IHcgJiYgTChiLCAxKSA/ICctd2Via2l0LScgKyBiICsgYiA6IGI7XG4gICAgfVxuXG4gICAgaWYgKDAgPT09IHcgfHwgMiA9PT0gdyAmJiAhTChhLCAxKSkgcmV0dXJuIGE7XG5cbiAgICBzd2l0Y2ggKG0pIHtcbiAgICAgIGNhc2UgMTAxNTpcbiAgICAgICAgcmV0dXJuIDk3ID09PSBhLmNoYXJDb2RlQXQoMTApID8gJy13ZWJraXQtJyArIGEgKyBhIDogYTtcblxuICAgICAgY2FzZSA5NTE6XG4gICAgICAgIHJldHVybiAxMTYgPT09IGEuY2hhckNvZGVBdCgzKSA/ICctd2Via2l0LScgKyBhICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgOTYzOlxuICAgICAgICByZXR1cm4gMTEwID09PSBhLmNoYXJDb2RlQXQoNSkgPyAnLXdlYmtpdC0nICsgYSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDEwMDk6XG4gICAgICAgIGlmICgxMDAgIT09IGEuY2hhckNvZGVBdCg0KSkgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTY5OlxuICAgICAgY2FzZSA5NDI6XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgOTc4OlxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1vei0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgMTAxOTpcbiAgICAgIGNhc2UgOTgzOlxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1vei0nICsgYSArICctbXMtJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDg4MzpcbiAgICAgICAgaWYgKDQ1ID09PSBhLmNoYXJDb2RlQXQoOCkpIHJldHVybiAnLXdlYmtpdC0nICsgYSArIGE7XG4gICAgICAgIGlmICgwIDwgYS5pbmRleE9mKCdpbWFnZS1zZXQoJywgMTEpKSByZXR1cm4gYS5yZXBsYWNlKGphLCAnJDEtd2Via2l0LSQyJykgKyBhO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA5MzI6XG4gICAgICAgIGlmICg0NSA9PT0gYS5jaGFyQ29kZUF0KDQpKSBzd2l0Y2ggKGEuY2hhckNvZGVBdCg1KSkge1xuICAgICAgICAgIGNhc2UgMTAzOlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LWJveC0nICsgYS5yZXBsYWNlKCctZ3JvdycsICcnKSArICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYS5yZXBsYWNlKCdncm93JywgJ3Bvc2l0aXZlJykgKyBhO1xuXG4gICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBhLnJlcGxhY2UoJ3NocmluaycsICduZWdhdGl2ZScpICsgYTtcblxuICAgICAgICAgIGNhc2UgOTg6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBhLnJlcGxhY2UoJ2Jhc2lzJywgJ3ByZWZlcnJlZC1zaXplJykgKyBhO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDk2NDpcbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy1mbGV4LScgKyBhICsgYTtcblxuICAgICAgY2FzZSAxMDIzOlxuICAgICAgICBpZiAoOTkgIT09IGEuY2hhckNvZGVBdCg4KSkgYnJlYWs7XG4gICAgICAgIGIgPSBhLnN1YnN0cmluZyhhLmluZGV4T2YoJzonLCAxNSkpLnJlcGxhY2UoJ2ZsZXgtJywgJycpLnJlcGxhY2UoJ3NwYWNlLWJldHdlZW4nLCAnanVzdGlmeScpO1xuICAgICAgICByZXR1cm4gJy13ZWJraXQtYm94LXBhY2snICsgYiArICctd2Via2l0LScgKyBhICsgJy1tcy1mbGV4LXBhY2snICsgYiArIGE7XG5cbiAgICAgIGNhc2UgMTAwNTpcbiAgICAgICAgcmV0dXJuIGthLnRlc3QoYSkgPyBhLnJlcGxhY2UoYWEsICc6LXdlYmtpdC0nKSArIGEucmVwbGFjZShhYSwgJzotbW96LScpICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgMWUzOlxuICAgICAgICBiID0gYS5zdWJzdHJpbmcoMTMpLnRyaW0oKTtcbiAgICAgICAgYyA9IGIuaW5kZXhPZignLScpICsgMTtcblxuICAgICAgICBzd2l0Y2ggKGIuY2hhckNvZGVBdCgwKSArIGIuY2hhckNvZGVBdChjKSkge1xuICAgICAgICAgIGNhc2UgMjI2OlxuICAgICAgICAgICAgYiA9IGEucmVwbGFjZShHLCAndGInKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyMzI6XG4gICAgICAgICAgICBiID0gYS5yZXBsYWNlKEcsICd0Yi1ybCcpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDIyMDpcbiAgICAgICAgICAgIGIgPSBhLnJlcGxhY2UoRywgJ2xyJyk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGIgKyBhO1xuXG4gICAgICBjYXNlIDEwMTc6XG4gICAgICAgIGlmICgtMSA9PT0gYS5pbmRleE9mKCdzdGlja3knLCA5KSkgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTc1OlxuICAgICAgICBjID0gKGEgPSBkKS5sZW5ndGggLSAxMDtcbiAgICAgICAgYiA9ICgzMyA9PT0gYS5jaGFyQ29kZUF0KGMpID8gYS5zdWJzdHJpbmcoMCwgYykgOiBhKS5zdWJzdHJpbmcoZC5pbmRleE9mKCc6JywgNykgKyAxKS50cmltKCk7XG5cbiAgICAgICAgc3dpdGNoIChtID0gYi5jaGFyQ29kZUF0KDApICsgKGIuY2hhckNvZGVBdCg3KSB8IDApKSB7XG4gICAgICAgICAgY2FzZSAyMDM6XG4gICAgICAgICAgICBpZiAoMTExID4gYi5jaGFyQ29kZUF0KDgpKSBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgYSA9IGEucmVwbGFjZShiLCAnLXdlYmtpdC0nICsgYikgKyAnOycgKyBhO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDIwNzpcbiAgICAgICAgICBjYXNlIDEwMjpcbiAgICAgICAgICAgIGEgPSBhLnJlcGxhY2UoYiwgJy13ZWJraXQtJyArICgxMDIgPCBtID8gJ2lubGluZS0nIDogJycpICsgJ2JveCcpICsgJzsnICsgYS5yZXBsYWNlKGIsICctd2Via2l0LScgKyBiKSArICc7JyArIGEucmVwbGFjZShiLCAnLW1zLScgKyBiICsgJ2JveCcpICsgJzsnICsgYTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhICsgJzsnO1xuXG4gICAgICBjYXNlIDkzODpcbiAgICAgICAgaWYgKDQ1ID09PSBhLmNoYXJDb2RlQXQoNSkpIHN3aXRjaCAoYS5jaGFyQ29kZUF0KDYpKSB7XG4gICAgICAgICAgY2FzZSAxMDU6XG4gICAgICAgICAgICByZXR1cm4gYiA9IGEucmVwbGFjZSgnLWl0ZW1zJywgJycpLCAnLXdlYmtpdC0nICsgYSArICctd2Via2l0LWJveC0nICsgYiArICctbXMtZmxleC0nICsgYiArIGE7XG5cbiAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC1pdGVtLScgKyBhLnJlcGxhY2UoYmEsICcnKSArIGE7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy1mbGV4LWxpbmUtcGFjaycgKyBhLnJlcGxhY2UoJ2FsaWduLWNvbnRlbnQnLCAnJykucmVwbGFjZShiYSwgJycpICsgYTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA5NzM6XG4gICAgICBjYXNlIDk4OTpcbiAgICAgICAgaWYgKDQ1ICE9PSBhLmNoYXJDb2RlQXQoMykgfHwgMTIyID09PSBhLmNoYXJDb2RlQXQoNCkpIGJyZWFrO1xuXG4gICAgICBjYXNlIDkzMTpcbiAgICAgIGNhc2UgOTUzOlxuICAgICAgICBpZiAoITAgPT09IGxhLnRlc3QoZCkpIHJldHVybiAxMTUgPT09IChiID0gZC5zdWJzdHJpbmcoZC5pbmRleE9mKCc6JykgKyAxKSkuY2hhckNvZGVBdCgwKSA/IFAoZC5yZXBsYWNlKCdzdHJldGNoJywgJ2ZpbGwtYXZhaWxhYmxlJyksIGMsIGUsIGgpLnJlcGxhY2UoJzpmaWxsLWF2YWlsYWJsZScsICc6c3RyZXRjaCcpIDogYS5yZXBsYWNlKGIsICctd2Via2l0LScgKyBiKSArIGEucmVwbGFjZShiLCAnLW1vei0nICsgYi5yZXBsYWNlKCdmaWxsLScsICcnKSkgKyBhO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA5NjI6XG4gICAgICAgIGlmIChhID0gJy13ZWJraXQtJyArIGEgKyAoMTAyID09PSBhLmNoYXJDb2RlQXQoNSkgPyAnLW1zLScgKyBhIDogJycpICsgYSwgMjExID09PSBlICsgaCAmJiAxMDUgPT09IGEuY2hhckNvZGVBdCgxMykgJiYgMCA8IGEuaW5kZXhPZigndHJhbnNmb3JtJywgMTApKSByZXR1cm4gYS5zdWJzdHJpbmcoMCwgYS5pbmRleE9mKCc7JywgMjcpICsgMSkucmVwbGFjZShtYSwgJyQxLXdlYmtpdC0kMicpICsgYTtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEwoZCwgYykge1xuICAgIHZhciBlID0gZC5pbmRleE9mKDEgPT09IGMgPyAnOicgOiAneycpLFxuICAgICAgICBoID0gZC5zdWJzdHJpbmcoMCwgMyAhPT0gYyA/IGUgOiAxMCk7XG4gICAgZSA9IGQuc3Vic3RyaW5nKGUgKyAxLCBkLmxlbmd0aCAtIDEpO1xuICAgIHJldHVybiBSKDIgIT09IGMgPyBoIDogaC5yZXBsYWNlKG5hLCAnJDEnKSwgZSwgYyk7XG4gIH1cblxuICBmdW5jdGlvbiBlYShkLCBjKSB7XG4gICAgdmFyIGUgPSBQKGMsIGMuY2hhckNvZGVBdCgwKSwgYy5jaGFyQ29kZUF0KDEpLCBjLmNoYXJDb2RlQXQoMikpO1xuICAgIHJldHVybiBlICE9PSBjICsgJzsnID8gZS5yZXBsYWNlKG9hLCAnIG9yICgkMSknKS5zdWJzdHJpbmcoNCkgOiAnKCcgKyBjICsgJyknO1xuICB9XG5cbiAgZnVuY3Rpb24gSChkLCBjLCBlLCBoLCBhLCBtLCBiLCB2LCBuLCBxKSB7XG4gICAgZm9yICh2YXIgZyA9IDAsIHggPSBjLCB3OyBnIDwgQTsgKytnKSB7XG4gICAgICBzd2l0Y2ggKHcgPSBTW2ddLmNhbGwoQiwgZCwgeCwgZSwgaCwgYSwgbSwgYiwgdiwgbiwgcSkpIHtcbiAgICAgICAgY2FzZSB2b2lkIDA6XG4gICAgICAgIGNhc2UgITE6XG4gICAgICAgIGNhc2UgITA6XG4gICAgICAgIGNhc2UgbnVsbDpcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHggPSB3O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh4ICE9PSBjKSByZXR1cm4geDtcbiAgfVxuXG4gIGZ1bmN0aW9uIFQoZCkge1xuICAgIHN3aXRjaCAoZCkge1xuICAgICAgY2FzZSB2b2lkIDA6XG4gICAgICBjYXNlIG51bGw6XG4gICAgICAgIEEgPSBTLmxlbmd0aCA9IDA7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGQpIFNbQSsrXSA9IGQ7ZWxzZSBpZiAoJ29iamVjdCcgPT09IHR5cGVvZiBkKSBmb3IgKHZhciBjID0gMCwgZSA9IGQubGVuZ3RoOyBjIDwgZTsgKytjKSB7XG4gICAgICAgICAgVChkW2NdKTtcbiAgICAgICAgfSBlbHNlIFkgPSAhIWQgfCAwO1xuICAgIH1cblxuICAgIHJldHVybiBUO1xuICB9XG5cbiAgZnVuY3Rpb24gVShkKSB7XG4gICAgZCA9IGQucHJlZml4O1xuICAgIHZvaWQgMCAhPT0gZCAmJiAoUiA9IG51bGwsIGQgPyAnZnVuY3Rpb24nICE9PSB0eXBlb2YgZCA/IHcgPSAxIDogKHcgPSAyLCBSID0gZCkgOiB3ID0gMCk7XG4gICAgcmV0dXJuIFU7XG4gIH1cblxuICBmdW5jdGlvbiBCKGQsIGMpIHtcbiAgICB2YXIgZSA9IGQ7XG4gICAgMzMgPiBlLmNoYXJDb2RlQXQoMCkgJiYgKGUgPSBlLnRyaW0oKSk7XG4gICAgViA9IGU7XG4gICAgZSA9IFtWXTtcblxuICAgIGlmICgwIDwgQSkge1xuICAgICAgdmFyIGggPSBIKC0xLCBjLCBlLCBlLCBELCB6LCAwLCAwLCAwLCAwKTtcbiAgICAgIHZvaWQgMCAhPT0gaCAmJiAnc3RyaW5nJyA9PT0gdHlwZW9mIGggJiYgKGMgPSBoKTtcbiAgICB9XG5cbiAgICB2YXIgYSA9IE0oTywgZSwgYywgMCwgMCk7XG4gICAgMCA8IEEgJiYgKGggPSBIKC0yLCBhLCBlLCBlLCBELCB6LCBhLmxlbmd0aCwgMCwgMCwgMCksIHZvaWQgMCAhPT0gaCAmJiAoYSA9IGgpKTtcbiAgICBWID0gJyc7XG4gICAgRSA9IDA7XG4gICAgeiA9IEQgPSAxO1xuICAgIHJldHVybiBhO1xuICB9XG5cbiAgdmFyIGNhID0gL15cXDArL2csXG4gICAgICBOID0gL1tcXDBcXHJcXGZdL2csXG4gICAgICBhYSA9IC86ICovZyxcbiAgICAgIGthID0gL3pvb3xncmEvLFxuICAgICAgbWEgPSAvKFssOiBdKSh0cmFuc2Zvcm0pL2csXG4gICAgICBpYSA9IC8sXFxyKz8vZyxcbiAgICAgIEYgPSAvKFtcXHRcXHJcXG4gXSkqXFxmPyYvZyxcbiAgICAgIGZhID0gL0Aoa1xcdyspXFxzKihcXFMqKVxccyovLFxuICAgICAgUSA9IC86OihwbGFjZSkvZyxcbiAgICAgIGhhID0gLzoocmVhZC1vbmx5KS9nLFxuICAgICAgRyA9IC9bc3ZoXVxcdystW3RibHJdezJ9LyxcbiAgICAgIGRhID0gL1xcKFxccyooLiopXFxzKlxcKS9nLFxuICAgICAgb2EgPSAvKFtcXHNcXFNdKj8pOy9nLFxuICAgICAgYmEgPSAvLXNlbGZ8ZmxleC0vZyxcbiAgICAgIG5hID0gL1teXSo/KDpbcnBdW2VsXWFbXFx3LV0rKVteXSovLFxuICAgICAgbGEgPSAvc3RyZXRjaHw6XFxzKlxcdytcXC0oPzpjb250ZXxhdmFpbCkvLFxuICAgICAgamEgPSAvKFteLV0pKGltYWdlLXNldFxcKCkvLFxuICAgICAgeiA9IDEsXG4gICAgICBEID0gMSxcbiAgICAgIEUgPSAwLFxuICAgICAgdyA9IDEsXG4gICAgICBPID0gW10sXG4gICAgICBTID0gW10sXG4gICAgICBBID0gMCxcbiAgICAgIFIgPSBudWxsLFxuICAgICAgWSA9IDAsXG4gICAgICBWID0gJyc7XG4gIEIudXNlID0gVDtcbiAgQi5zZXQgPSBVO1xuICB2b2lkIDAgIT09IFcgJiYgVShXKTtcbiAgcmV0dXJuIEI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0eWxpc19taW47XG4iLCJ2YXIgdW5pdGxlc3NLZXlzID0ge1xuICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogMSxcbiAgYm9yZGVySW1hZ2VPdXRzZXQ6IDEsXG4gIGJvcmRlckltYWdlU2xpY2U6IDEsXG4gIGJvcmRlckltYWdlV2lkdGg6IDEsXG4gIGJveEZsZXg6IDEsXG4gIGJveEZsZXhHcm91cDogMSxcbiAgYm94T3JkaW5hbEdyb3VwOiAxLFxuICBjb2x1bW5Db3VudDogMSxcbiAgY29sdW1uczogMSxcbiAgZmxleDogMSxcbiAgZmxleEdyb3c6IDEsXG4gIGZsZXhQb3NpdGl2ZTogMSxcbiAgZmxleFNocmluazogMSxcbiAgZmxleE5lZ2F0aXZlOiAxLFxuICBmbGV4T3JkZXI6IDEsXG4gIGdyaWRSb3c6IDEsXG4gIGdyaWRSb3dFbmQ6IDEsXG4gIGdyaWRSb3dTcGFuOiAxLFxuICBncmlkUm93U3RhcnQ6IDEsXG4gIGdyaWRDb2x1bW46IDEsXG4gIGdyaWRDb2x1bW5FbmQ6IDEsXG4gIGdyaWRDb2x1bW5TcGFuOiAxLFxuICBncmlkQ29sdW1uU3RhcnQ6IDEsXG4gIG1zR3JpZFJvdzogMSxcbiAgbXNHcmlkUm93U3BhbjogMSxcbiAgbXNHcmlkQ29sdW1uOiAxLFxuICBtc0dyaWRDb2x1bW5TcGFuOiAxLFxuICBmb250V2VpZ2h0OiAxLFxuICBsaW5lSGVpZ2h0OiAxLFxuICBvcGFjaXR5OiAxLFxuICBvcmRlcjogMSxcbiAgb3JwaGFuczogMSxcbiAgdGFiU2l6ZTogMSxcbiAgd2lkb3dzOiAxLFxuICB6SW5kZXg6IDEsXG4gIHpvb206IDEsXG4gIFdlYmtpdExpbmVDbGFtcDogMSxcbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogMSxcbiAgZmxvb2RPcGFjaXR5OiAxLFxuICBzdG9wT3BhY2l0eTogMSxcbiAgc3Ryb2tlRGFzaGFycmF5OiAxLFxuICBzdHJva2VEYXNob2Zmc2V0OiAxLFxuICBzdHJva2VNaXRlcmxpbWl0OiAxLFxuICBzdHJva2VPcGFjaXR5OiAxLFxuICBzdHJva2VXaWR0aDogMVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdW5pdGxlc3NLZXlzO1xuIiwiZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICB2YXIgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgIGlmIChjYWNoZVthcmddID09PSB1bmRlZmluZWQpIGNhY2hlW2FyZ10gPSBmbihhcmcpO1xuICAgIHJldHVybiBjYWNoZVthcmddO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZW1vaXplO1xuIiwiaW1wb3J0IG1lbW9pemUgZnJvbSAnQGVtb3Rpb24vbWVtb2l6ZSc7XG5cbnZhciByZWFjdFByb3BzUmVnZXggPSAvXigoY2hpbGRyZW58ZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8a2V5fHJlZnxhdXRvRm9jdXN8ZGVmYXVsdFZhbHVlfGRlZmF1bHRDaGVja2VkfGlubmVySFRNTHxzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmd8c3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nfHZhbHVlTGlua3xhYmJyfGFjY2VwdHxhY2NlcHRDaGFyc2V0fGFjY2Vzc0tleXxhY3Rpb258YWxsb3d8YWxsb3dVc2VyTWVkaWF8YWxsb3dQYXltZW50UmVxdWVzdHxhbGxvd0Z1bGxTY3JlZW58YWxsb3dUcmFuc3BhcmVuY3l8YWx0fGFzeW5jfGF1dG9Db21wbGV0ZXxhdXRvUGxheXxjYXB0dXJlfGNlbGxQYWRkaW5nfGNlbGxTcGFjaW5nfGNoYWxsZW5nZXxjaGFyU2V0fGNoZWNrZWR8Y2l0ZXxjbGFzc0lEfGNsYXNzTmFtZXxjb2xzfGNvbFNwYW58Y29udGVudHxjb250ZW50RWRpdGFibGV8Y29udGV4dE1lbnV8Y29udHJvbHN8Y29udHJvbHNMaXN0fGNvb3Jkc3xjcm9zc09yaWdpbnxkYXRhfGRhdGVUaW1lfGRlY29kaW5nfGRlZmF1bHR8ZGVmZXJ8ZGlyfGRpc2FibGVkfGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlfGRvd25sb2FkfGRyYWdnYWJsZXxlbmNUeXBlfGVudGVyS2V5SGludHxmb3JtfGZvcm1BY3Rpb258Zm9ybUVuY1R5cGV8Zm9ybU1ldGhvZHxmb3JtTm9WYWxpZGF0ZXxmb3JtVGFyZ2V0fGZyYW1lQm9yZGVyfGhlYWRlcnN8aGVpZ2h0fGhpZGRlbnxoaWdofGhyZWZ8aHJlZkxhbmd8aHRtbEZvcnxodHRwRXF1aXZ8aWR8aW5wdXRNb2RlfGludGVncml0eXxpc3xrZXlQYXJhbXN8a2V5VHlwZXxraW5kfGxhYmVsfGxhbmd8bGlzdHxsb2FkaW5nfGxvb3B8bG93fG1hcmdpbkhlaWdodHxtYXJnaW5XaWR0aHxtYXh8bWF4TGVuZ3RofG1lZGlhfG1lZGlhR3JvdXB8bWV0aG9kfG1pbnxtaW5MZW5ndGh8bXVsdGlwbGV8bXV0ZWR8bmFtZXxub25jZXxub1ZhbGlkYXRlfG9wZW58b3B0aW11bXxwYXR0ZXJufHBsYWNlaG9sZGVyfHBsYXlzSW5saW5lfHBvc3RlcnxwcmVsb2FkfHByb2ZpbGV8cmFkaW9Hcm91cHxyZWFkT25seXxyZWZlcnJlclBvbGljeXxyZWx8cmVxdWlyZWR8cmV2ZXJzZWR8cm9sZXxyb3dzfHJvd1NwYW58c2FuZGJveHxzY29wZXxzY29wZWR8c2Nyb2xsaW5nfHNlYW1sZXNzfHNlbGVjdGVkfHNoYXBlfHNpemV8c2l6ZXN8c2xvdHxzcGFufHNwZWxsQ2hlY2t8c3JjfHNyY0RvY3xzcmNMYW5nfHNyY1NldHxzdGFydHxzdGVwfHN0eWxlfHN1bW1hcnl8dGFiSW5kZXh8dGFyZ2V0fHRpdGxlfHRyYW5zbGF0ZXx0eXBlfHVzZU1hcHx2YWx1ZXx3aWR0aHx3bW9kZXx3cmFwfGFib3V0fGRhdGF0eXBlfGlubGlzdHxwcmVmaXh8cHJvcGVydHl8cmVzb3VyY2V8dHlwZW9mfHZvY2FifGF1dG9DYXBpdGFsaXplfGF1dG9Db3JyZWN0fGF1dG9TYXZlfGNvbG9yfGluY3JlbWVudGFsfGZhbGxiYWNrfGluZXJ0fGl0ZW1Qcm9wfGl0ZW1TY29wZXxpdGVtVHlwZXxpdGVtSUR8aXRlbVJlZnxvbnxvcHRpb258cmVzdWx0c3xzZWN1cml0eXx1bnNlbGVjdGFibGV8YWNjZW50SGVpZ2h0fGFjY3VtdWxhdGV8YWRkaXRpdmV8YWxpZ25tZW50QmFzZWxpbmV8YWxsb3dSZW9yZGVyfGFscGhhYmV0aWN8YW1wbGl0dWRlfGFyYWJpY0Zvcm18YXNjZW50fGF0dHJpYnV0ZU5hbWV8YXR0cmlidXRlVHlwZXxhdXRvUmV2ZXJzZXxhemltdXRofGJhc2VGcmVxdWVuY3l8YmFzZWxpbmVTaGlmdHxiYXNlUHJvZmlsZXxiYm94fGJlZ2lufGJpYXN8Ynl8Y2FsY01vZGV8Y2FwSGVpZ2h0fGNsaXB8Y2xpcFBhdGhVbml0c3xjbGlwUGF0aHxjbGlwUnVsZXxjb2xvckludGVycG9sYXRpb258Y29sb3JJbnRlcnBvbGF0aW9uRmlsdGVyc3xjb2xvclByb2ZpbGV8Y29sb3JSZW5kZXJpbmd8Y29udGVudFNjcmlwdFR5cGV8Y29udGVudFN0eWxlVHlwZXxjdXJzb3J8Y3h8Y3l8ZHxkZWNlbGVyYXRlfGRlc2NlbnR8ZGlmZnVzZUNvbnN0YW50fGRpcmVjdGlvbnxkaXNwbGF5fGRpdmlzb3J8ZG9taW5hbnRCYXNlbGluZXxkdXJ8ZHh8ZHl8ZWRnZU1vZGV8ZWxldmF0aW9ufGVuYWJsZUJhY2tncm91bmR8ZW5kfGV4cG9uZW50fGV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWR8ZmlsbHxmaWxsT3BhY2l0eXxmaWxsUnVsZXxmaWx0ZXJ8ZmlsdGVyUmVzfGZpbHRlclVuaXRzfGZsb29kQ29sb3J8Zmxvb2RPcGFjaXR5fGZvY3VzYWJsZXxmb250RmFtaWx5fGZvbnRTaXplfGZvbnRTaXplQWRqdXN0fGZvbnRTdHJldGNofGZvbnRTdHlsZXxmb250VmFyaWFudHxmb250V2VpZ2h0fGZvcm1hdHxmcm9tfGZyfGZ4fGZ5fGcxfGcyfGdseXBoTmFtZXxnbHlwaE9yaWVudGF0aW9uSG9yaXpvbnRhbHxnbHlwaE9yaWVudGF0aW9uVmVydGljYWx8Z2x5cGhSZWZ8Z3JhZGllbnRUcmFuc2Zvcm18Z3JhZGllbnRVbml0c3xoYW5naW5nfGhvcml6QWR2WHxob3Jpek9yaWdpblh8aWRlb2dyYXBoaWN8aW1hZ2VSZW5kZXJpbmd8aW58aW4yfGludGVyY2VwdHxrfGsxfGsyfGszfGs0fGtlcm5lbE1hdHJpeHxrZXJuZWxVbml0TGVuZ3RofGtlcm5pbmd8a2V5UG9pbnRzfGtleVNwbGluZXN8a2V5VGltZXN8bGVuZ3RoQWRqdXN0fGxldHRlclNwYWNpbmd8bGlnaHRpbmdDb2xvcnxsaW1pdGluZ0NvbmVBbmdsZXxsb2NhbHxtYXJrZXJFbmR8bWFya2VyTWlkfG1hcmtlclN0YXJ0fG1hcmtlckhlaWdodHxtYXJrZXJVbml0c3xtYXJrZXJXaWR0aHxtYXNrfG1hc2tDb250ZW50VW5pdHN8bWFza1VuaXRzfG1hdGhlbWF0aWNhbHxtb2RlfG51bU9jdGF2ZXN8b2Zmc2V0fG9wYWNpdHl8b3BlcmF0b3J8b3JkZXJ8b3JpZW50fG9yaWVudGF0aW9ufG9yaWdpbnxvdmVyZmxvd3xvdmVybGluZVBvc2l0aW9ufG92ZXJsaW5lVGhpY2tuZXNzfHBhbm9zZTF8cGFpbnRPcmRlcnxwYXRoTGVuZ3RofHBhdHRlcm5Db250ZW50VW5pdHN8cGF0dGVyblRyYW5zZm9ybXxwYXR0ZXJuVW5pdHN8cG9pbnRlckV2ZW50c3xwb2ludHN8cG9pbnRzQXRYfHBvaW50c0F0WXxwb2ludHNBdFp8cHJlc2VydmVBbHBoYXxwcmVzZXJ2ZUFzcGVjdFJhdGlvfHByaW1pdGl2ZVVuaXRzfHJ8cmFkaXVzfHJlZlh8cmVmWXxyZW5kZXJpbmdJbnRlbnR8cmVwZWF0Q291bnR8cmVwZWF0RHVyfHJlcXVpcmVkRXh0ZW5zaW9uc3xyZXF1aXJlZEZlYXR1cmVzfHJlc3RhcnR8cmVzdWx0fHJvdGF0ZXxyeHxyeXxzY2FsZXxzZWVkfHNoYXBlUmVuZGVyaW5nfHNsb3BlfHNwYWNpbmd8c3BlY3VsYXJDb25zdGFudHxzcGVjdWxhckV4cG9uZW50fHNwZWVkfHNwcmVhZE1ldGhvZHxzdGFydE9mZnNldHxzdGREZXZpYXRpb258c3RlbWh8c3RlbXZ8c3RpdGNoVGlsZXN8c3RvcENvbG9yfHN0b3BPcGFjaXR5fHN0cmlrZXRocm91Z2hQb3NpdGlvbnxzdHJpa2V0aHJvdWdoVGhpY2tuZXNzfHN0cmluZ3xzdHJva2V8c3Ryb2tlRGFzaGFycmF5fHN0cm9rZURhc2hvZmZzZXR8c3Ryb2tlTGluZWNhcHxzdHJva2VMaW5lam9pbnxzdHJva2VNaXRlcmxpbWl0fHN0cm9rZU9wYWNpdHl8c3Ryb2tlV2lkdGh8c3VyZmFjZVNjYWxlfHN5c3RlbUxhbmd1YWdlfHRhYmxlVmFsdWVzfHRhcmdldFh8dGFyZ2V0WXx0ZXh0QW5jaG9yfHRleHREZWNvcmF0aW9ufHRleHRSZW5kZXJpbmd8dGV4dExlbmd0aHx0b3x0cmFuc2Zvcm18dTF8dTJ8dW5kZXJsaW5lUG9zaXRpb258dW5kZXJsaW5lVGhpY2tuZXNzfHVuaWNvZGV8dW5pY29kZUJpZGl8dW5pY29kZVJhbmdlfHVuaXRzUGVyRW18dkFscGhhYmV0aWN8dkhhbmdpbmd8dklkZW9ncmFwaGljfHZNYXRoZW1hdGljYWx8dmFsdWVzfHZlY3RvckVmZmVjdHx2ZXJzaW9ufHZlcnRBZHZZfHZlcnRPcmlnaW5YfHZlcnRPcmlnaW5ZfHZpZXdCb3h8dmlld1RhcmdldHx2aXNpYmlsaXR5fHdpZHRoc3x3b3JkU3BhY2luZ3x3cml0aW5nTW9kZXx4fHhIZWlnaHR8eDF8eDJ8eENoYW5uZWxTZWxlY3Rvcnx4bGlua0FjdHVhdGV8eGxpbmtBcmNyb2xlfHhsaW5rSHJlZnx4bGlua1JvbGV8eGxpbmtTaG93fHhsaW5rVGl0bGV8eGxpbmtUeXBlfHhtbEJhc2V8eG1sbnN8eG1sbnNYbGlua3x4bWxMYW5nfHhtbFNwYWNlfHl8eTF8eTJ8eUNoYW5uZWxTZWxlY3Rvcnx6fHpvb21BbmRQYW58Zm9yfGNsYXNzfGF1dG9mb2N1cyl8KChbRGRdW0FhXVtUdF1bQWFdfFtBYV1bUnJdW0lpXVtBYV18eCktLiopKSQvOyAvLyBodHRwczovL2VzYmVuY2guY29tL2JlbmNoLzViZmVlNjhhNGNkN2U2MDA5ZWY2MWQyM1xuXG52YXIgaXNQcm9wVmFsaWQgPSAvKiAjX19QVVJFX18gKi9tZW1vaXplKGZ1bmN0aW9uIChwcm9wKSB7XG4gIHJldHVybiByZWFjdFByb3BzUmVnZXgudGVzdChwcm9wKSB8fCBwcm9wLmNoYXJDb2RlQXQoMCkgPT09IDExMVxuICAvKiBvICovXG4gICYmIHByb3AuY2hhckNvZGVBdCgxKSA9PT0gMTEwXG4gIC8qIG4gKi9cbiAgJiYgcHJvcC5jaGFyQ29kZUF0KDIpIDwgOTE7XG59XG4vKiBaKzEgKi9cbik7XG5cbmV4cG9ydCBkZWZhdWx0IGlzUHJvcFZhbGlkO1xuIiwiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgSW50ZXJwb2xhdGlvbiB9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGRlZmF1bHQgKFxuICBzdHJpbmdzOiBBcnJheTxzdHJpbmc+LFxuICBpbnRlcnBvbGF0aW9uczogQXJyYXk8SW50ZXJwb2xhdGlvbj5cbik6IEFycmF5PEludGVycG9sYXRpb24+ID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gW3N0cmluZ3NbMF1dO1xuXG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSBpbnRlcnBvbGF0aW9ucy5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgIHJlc3VsdC5wdXNoKGludGVycG9sYXRpb25zW2ldLCBzdHJpbmdzW2kgKyAxXSk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIEBmbG93XG5pbXBvcnQgeyB0eXBlT2YgfSBmcm9tICdyZWFjdC1pcyc7XG5cbmV4cG9ydCBkZWZhdWx0ICh4OiBhbnkpOiBib29sZWFuID0+XG4gIHggIT09IG51bGwgJiZcbiAgdHlwZW9mIHggPT09ICdvYmplY3QnICYmXG4gICh4LnRvU3RyaW5nID8geC50b1N0cmluZygpIDogT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHgpKSA9PT0gJ1tvYmplY3QgT2JqZWN0XScgJiZcbiAgIXR5cGVPZih4KTtcbiIsIi8vIEBmbG93XG5leHBvcnQgY29uc3QgRU1QVFlfQVJSQVkgPSBPYmplY3QuZnJlZXplKFtdKTtcbmV4cG9ydCBjb25zdCBFTVBUWV9PQkpFQ1QgPSBPYmplY3QuZnJlZXplKHt9KTtcbiIsIi8vIEBmbG93XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0Z1bmN0aW9uKHRlc3Q6IGFueSk6IGJvb2xlYW4gJWNoZWNrcyB7XG4gIHJldHVybiB0eXBlb2YgdGVzdCA9PT0gJ2Z1bmN0aW9uJztcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7IElTdHlsZWRDb21wb25lbnQgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENvbXBvbmVudE5hbWUoXG4gIHRhcmdldDogJFByb3BlcnR5VHlwZTxJU3R5bGVkQ29tcG9uZW50LCAndGFyZ2V0Jz5cbik6IHN0cmluZyB7XG4gIHJldHVybiAoXG4gICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB0eXBlb2YgdGFyZ2V0ID09PSAnc3RyaW5nJyAmJiB0YXJnZXQgOiBmYWxzZSkgfHxcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgdGFyZ2V0LmRpc3BsYXlOYW1lIHx8XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIHRhcmdldC5uYW1lIHx8XG4gICAgJ0NvbXBvbmVudCdcbiAgKTtcbn1cbiIsIi8vIEBmbG93XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1N0eWxlZENvbXBvbmVudCh0YXJnZXQ6IGFueSk6IGJvb2xlYW4gJWNoZWNrcyB7XG4gIHJldHVybiB0YXJnZXQgJiYgdHlwZW9mIHRhcmdldC5zdHlsZWRDb21wb25lbnRJZCA9PT0gJ3N0cmluZyc7XG59XG4iLCIvLyBAZmxvd1xuXG5kZWNsYXJlIHZhciBTQ19ESVNBQkxFX1NQRUVEWTogP2Jvb2xlYW47XG5kZWNsYXJlIHZhciBfX1ZFUlNJT05fXzogc3RyaW5nO1xuXG5leHBvcnQgY29uc3QgU0NfQVRUUjogc3RyaW5nID1cbiAgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAocHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX1NDX0FUVFIgfHwgcHJvY2Vzcy5lbnYuU0NfQVRUUikpIHx8XG4gICdkYXRhLXN0eWxlZCc7XG5cbmV4cG9ydCBjb25zdCBTQ19BVFRSX0FDVElWRSA9ICdhY3RpdmUnO1xuZXhwb3J0IGNvbnN0IFNDX0FUVFJfVkVSU0lPTiA9ICdkYXRhLXN0eWxlZC12ZXJzaW9uJztcbmV4cG9ydCBjb25zdCBTQ19WRVJTSU9OID0gX19WRVJTSU9OX187XG5leHBvcnQgY29uc3QgU1BMSVRURVIgPSAnLyohc2MqL1xcbic7XG5cbmV4cG9ydCBjb25zdCBJU19CUk9XU0VSID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ0hUTUxFbGVtZW50JyBpbiB3aW5kb3c7XG5cbmV4cG9ydCBjb25zdCBESVNBQkxFX1NQRUVEWSA9XG4gIEJvb2xlYW4odHlwZW9mIFNDX0RJU0FCTEVfU1BFRURZID09PSAnYm9vbGVhbidcbiAgICA/IFNDX0RJU0FCTEVfU1BFRURZXG4gICAgOiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBwcm9jZXNzLmVudi5SRUFDVF9BUFBfU0NfRElTQUJMRV9TUEVFRFkgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MuZW52LlJFQUNUX0FQUF9TQ19ESVNBQkxFX1NQRUVEWSAhPT0gJydcbiAgICAgID8gcHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX1NDX0RJU0FCTEVfU1BFRURZID09PSAnZmFsc2UnID8gZmFsc2UgOiBwcm9jZXNzLmVudi5SRUFDVF9BUFBfU0NfRElTQUJMRV9TUEVFRFlcbiAgICAgIDogKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgcHJvY2Vzcy5lbnYuU0NfRElTQUJMRV9TUEVFRFkgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MuZW52LlNDX0RJU0FCTEVfU1BFRURZICE9PSAnJ1xuICAgICAgICA/IHByb2Nlc3MuZW52LlNDX0RJU0FCTEVfU1BFRURZID09PSAnZmFsc2UnID8gZmFsc2UgOiBwcm9jZXNzLmVudi5TQ19ESVNBQkxFX1NQRUVEWVxuICAgICAgICA6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcbiAgICAgIClcbiAgICApKTtcblxuLy8gU2hhcmVkIGVtcHR5IGV4ZWN1dGlvbiBjb250ZXh0IHdoZW4gZ2VuZXJhdGluZyBzdGF0aWMgc3R5bGVzXG5leHBvcnQgY29uc3QgU1RBVElDX0VYRUNVVElPTl9DT05URVhUID0ge307XG4iLCIvLyBAZmxvd1xuaW1wb3J0IGVycm9yTWFwIGZyb20gJy4vZXJyb3JzJztcblxuY29uc3QgRVJST1JTID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGVycm9yTWFwIDoge307XG5cbi8qKlxuICogc3VwZXIgYmFzaWMgdmVyc2lvbiBvZiBzcHJpbnRmXG4gKi9cbmZ1bmN0aW9uIGZvcm1hdCguLi5hcmdzKSB7XG4gIGxldCBhID0gYXJnc1swXTtcbiAgY29uc3QgYiA9IFtdO1xuXG4gIGZvciAobGV0IGMgPSAxLCBsZW4gPSBhcmdzLmxlbmd0aDsgYyA8IGxlbjsgYyArPSAxKSB7XG4gICAgYi5wdXNoKGFyZ3NbY10pO1xuICB9XG5cbiAgYi5mb3JFYWNoKGQgPT4ge1xuICAgIGEgPSBhLnJlcGxhY2UoLyVbYS16XS8sIGQpO1xuICB9KTtcblxuICByZXR1cm4gYTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYW4gZXJyb3IgZmlsZSBvdXQgb2YgZXJyb3JzLm1kIGZvciBkZXZlbG9wbWVudCBhbmQgYSBzaW1wbGUgd2ViIGxpbmsgdG8gdGhlIGZ1bGwgZXJyb3JzXG4gKiBpbiBwcm9kdWN0aW9uIG1vZGUuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRocm93U3R5bGVkQ29tcG9uZW50c0Vycm9yKFxuICBjb2RlOiBzdHJpbmcgfCBudW1iZXIsXG4gIC4uLmludGVycG9sYXRpb25zOiBBcnJheTxhbnk+XG4pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgQW4gZXJyb3Igb2NjdXJyZWQuIFNlZSBodHRwczovL2dpdC5pby9KVUlhRSMke2NvZGV9IGZvciBtb3JlIGluZm9ybWF0aW9uLiR7XG4gICAgICAgIGludGVycG9sYXRpb25zLmxlbmd0aCA+IDAgPyBgIEFyZ3M6ICR7aW50ZXJwb2xhdGlvbnMuam9pbignLCAnKX1gIDogJydcbiAgICAgIH1gXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0KEVSUk9SU1tjb2RlXSwgLi4uaW50ZXJwb2xhdGlvbnMpLnRyaW0oKSk7XG4gIH1cbn1cbiIsIi8vIEBmbG93XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11c2UtYmVmb3JlLWRlZmluZSAqL1xuXG5pbXBvcnQgdHlwZSB7IEdyb3VwZWRUYWcsIFRhZyB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgU1BMSVRURVIgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IHRocm93U3R5bGVkRXJyb3IgZnJvbSAnLi4vdXRpbHMvZXJyb3InO1xuXG4vKiogQ3JlYXRlIGEgR3JvdXBlZFRhZyB3aXRoIGFuIHVuZGVybHlpbmcgVGFnIGltcGxlbWVudGF0aW9uICovXG5leHBvcnQgY29uc3QgbWFrZUdyb3VwZWRUYWcgPSAodGFnOiBUYWcpOiBHcm91cGVkVGFnID0+IHtcbiAgcmV0dXJuIG5ldyBEZWZhdWx0R3JvdXBlZFRhZyh0YWcpO1xufTtcblxuY29uc3QgQkFTRV9TSVpFID0gMSA8PCA5O1xuXG5jbGFzcyBEZWZhdWx0R3JvdXBlZFRhZyBpbXBsZW1lbnRzIEdyb3VwZWRUYWcge1xuICBncm91cFNpemVzOiBVaW50MzJBcnJheTtcblxuICBsZW5ndGg6IG51bWJlcjtcblxuICB0YWc6IFRhZztcblxuICBjb25zdHJ1Y3Rvcih0YWc6IFRhZykge1xuICAgIHRoaXMuZ3JvdXBTaXplcyA9IG5ldyBVaW50MzJBcnJheShCQVNFX1NJWkUpO1xuICAgIHRoaXMubGVuZ3RoID0gQkFTRV9TSVpFO1xuICAgIHRoaXMudGFnID0gdGFnO1xuICB9XG5cbiAgaW5kZXhPZkdyb3VwKGdyb3VwOiBudW1iZXIpOiBudW1iZXIge1xuICAgIGxldCBpbmRleCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBncm91cDsgaSsrKSB7XG4gICAgICBpbmRleCArPSB0aGlzLmdyb3VwU2l6ZXNbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgaW5zZXJ0UnVsZXMoZ3JvdXA6IG51bWJlciwgcnVsZXM6IHN0cmluZ1tdKTogdm9pZCB7XG4gICAgaWYgKGdyb3VwID49IHRoaXMuZ3JvdXBTaXplcy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IG9sZEJ1ZmZlciA9IHRoaXMuZ3JvdXBTaXplcztcbiAgICAgIGNvbnN0IG9sZFNpemUgPSBvbGRCdWZmZXIubGVuZ3RoO1xuXG4gICAgICBsZXQgbmV3U2l6ZSA9IG9sZFNpemU7XG4gICAgICB3aGlsZSAoZ3JvdXAgPj0gbmV3U2l6ZSkge1xuICAgICAgICBuZXdTaXplIDw8PSAxO1xuICAgICAgICBpZiAobmV3U2l6ZSA8IDApIHtcbiAgICAgICAgICB0aHJvd1N0eWxlZEVycm9yKDE2LCBgJHtncm91cH1gKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmdyb3VwU2l6ZXMgPSBuZXcgVWludDMyQXJyYXkobmV3U2l6ZSk7XG4gICAgICB0aGlzLmdyb3VwU2l6ZXMuc2V0KG9sZEJ1ZmZlcik7XG4gICAgICB0aGlzLmxlbmd0aCA9IG5ld1NpemU7XG5cbiAgICAgIGZvciAobGV0IGkgPSBvbGRTaXplOyBpIDwgbmV3U2l6ZTsgaSsrKSB7XG4gICAgICAgIHRoaXMuZ3JvdXBTaXplc1tpXSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHJ1bGVJbmRleCA9IHRoaXMuaW5kZXhPZkdyb3VwKGdyb3VwICsgMSk7XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBydWxlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLnRhZy5pbnNlcnRSdWxlKHJ1bGVJbmRleCwgcnVsZXNbaV0pKSB7XG4gICAgICAgIHRoaXMuZ3JvdXBTaXplc1tncm91cF0rKztcbiAgICAgICAgcnVsZUluZGV4Kys7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY2xlYXJHcm91cChncm91cDogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKGdyb3VwIDwgdGhpcy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGxlbmd0aCA9IHRoaXMuZ3JvdXBTaXplc1tncm91cF07XG4gICAgICBjb25zdCBzdGFydEluZGV4ID0gdGhpcy5pbmRleE9mR3JvdXAoZ3JvdXApO1xuICAgICAgY29uc3QgZW5kSW5kZXggPSBzdGFydEluZGV4ICsgbGVuZ3RoO1xuXG4gICAgICB0aGlzLmdyb3VwU2l6ZXNbZ3JvdXBdID0gMDtcblxuICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0SW5kZXg7IGkgPCBlbmRJbmRleDsgaSsrKSB7XG4gICAgICAgIHRoaXMudGFnLmRlbGV0ZVJ1bGUoc3RhcnRJbmRleCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0R3JvdXAoZ3JvdXA6IG51bWJlcik6IHN0cmluZyB7XG4gICAgbGV0IGNzcyA9ICcnO1xuICAgIGlmIChncm91cCA+PSB0aGlzLmxlbmd0aCB8fCB0aGlzLmdyb3VwU2l6ZXNbZ3JvdXBdID09PSAwKSB7XG4gICAgICByZXR1cm4gY3NzO1xuICAgIH1cblxuICAgIGNvbnN0IGxlbmd0aCA9IHRoaXMuZ3JvdXBTaXplc1tncm91cF07XG4gICAgY29uc3Qgc3RhcnRJbmRleCA9IHRoaXMuaW5kZXhPZkdyb3VwKGdyb3VwKTtcbiAgICBjb25zdCBlbmRJbmRleCA9IHN0YXJ0SW5kZXggKyBsZW5ndGg7XG5cbiAgICBmb3IgKGxldCBpID0gc3RhcnRJbmRleDsgaSA8IGVuZEluZGV4OyBpKyspIHtcbiAgICAgIGNzcyArPSBgJHt0aGlzLnRhZy5nZXRSdWxlKGkpfSR7U1BMSVRURVJ9YDtcbiAgICB9XG5cbiAgICByZXR1cm4gY3NzO1xuICB9XG59XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgdGhyb3dTdHlsZWRFcnJvciBmcm9tICcuLi91dGlscy9lcnJvcic7XG5cbmNvbnN0IE1BWF9TTUkgPSAxIDw8IDMxIC0gMTtcblxubGV0IGdyb3VwSURSZWdpc3RlcjogTWFwPHN0cmluZywgbnVtYmVyPiA9IG5ldyBNYXAoKTtcbmxldCByZXZlcnNlUmVnaXN0ZXI6IE1hcDxudW1iZXIsIHN0cmluZz4gPSBuZXcgTWFwKCk7XG5sZXQgbmV4dEZyZWVHcm91cCA9IDE7XG5cbmV4cG9ydCBjb25zdCByZXNldEdyb3VwSWRzID0gKCkgPT4ge1xuICBncm91cElEUmVnaXN0ZXIgPSBuZXcgTWFwKCk7XG4gIHJldmVyc2VSZWdpc3RlciA9IG5ldyBNYXAoKTtcbiAgbmV4dEZyZWVHcm91cCA9IDE7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0R3JvdXBGb3JJZCA9IChpZDogc3RyaW5nKTogbnVtYmVyID0+IHtcbiAgaWYgKGdyb3VwSURSZWdpc3Rlci5oYXMoaWQpKSB7XG4gICAgcmV0dXJuIChncm91cElEUmVnaXN0ZXIuZ2V0KGlkKTogYW55KTtcbiAgfVxuXG4gIHdoaWxlIChyZXZlcnNlUmVnaXN0ZXIuaGFzKG5leHRGcmVlR3JvdXApKSB7XG4gICAgbmV4dEZyZWVHcm91cCsrO1xuICB9XG5cbiAgY29uc3QgZ3JvdXAgPSBuZXh0RnJlZUdyb3VwKys7XG5cbiAgaWYgKFxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAoKGdyb3VwIHwgMCkgPCAwIHx8IGdyb3VwID4gTUFYX1NNSSlcbiAgKSB7XG4gICAgdGhyb3dTdHlsZWRFcnJvcigxNiwgYCR7Z3JvdXB9YCk7XG4gIH1cblxuICBncm91cElEUmVnaXN0ZXIuc2V0KGlkLCBncm91cCk7XG4gIHJldmVyc2VSZWdpc3Rlci5zZXQoZ3JvdXAsIGlkKTtcbiAgcmV0dXJuIGdyb3VwO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldElkRm9yR3JvdXAgPSAoZ3JvdXA6IG51bWJlcik6IHZvaWQgfCBzdHJpbmcgPT4ge1xuICByZXR1cm4gcmV2ZXJzZVJlZ2lzdGVyLmdldChncm91cCk7XG59O1xuXG5leHBvcnQgY29uc3Qgc2V0R3JvdXBGb3JJZCA9IChpZDogc3RyaW5nLCBncm91cDogbnVtYmVyKSA9PiB7XG4gIGlmIChncm91cCA+PSBuZXh0RnJlZUdyb3VwKSB7XG4gICAgbmV4dEZyZWVHcm91cCA9IGdyb3VwICsgMTtcbiAgfVxuXG4gIGdyb3VwSURSZWdpc3Rlci5zZXQoaWQsIGdyb3VwKTtcbiAgcmV2ZXJzZVJlZ2lzdGVyLnNldChncm91cCwgaWQpO1xufTtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCB7IFNQTElUVEVSLCBTQ19BVFRSLCBTQ19BVFRSX0FDVElWRSwgU0NfQVRUUl9WRVJTSU9OLCBTQ19WRVJTSU9OIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IGdldElkRm9yR3JvdXAsIHNldEdyb3VwRm9ySWQgfSBmcm9tICcuL0dyb3VwSURBbGxvY2F0b3InO1xuaW1wb3J0IHR5cGUgeyBTaGVldCB9IGZyb20gJy4vdHlwZXMnO1xuXG5jb25zdCBTRUxFQ1RPUiA9IGBzdHlsZVske1NDX0FUVFJ9XVske1NDX0FUVFJfVkVSU0lPTn09XCIke1NDX1ZFUlNJT059XCJdYDtcbmNvbnN0IE1BUktFUl9SRSA9IG5ldyBSZWdFeHAoYF4ke1NDX0FUVFJ9XFxcXC5nKFxcXFxkKylcXFxcW2lkPVwiKFtcXFxcd1xcXFxkLV0rKVwiXFxcXF0uKj9cIihbXlwiXSopYCk7XG5cbmV4cG9ydCBjb25zdCBvdXRwdXRTaGVldCA9IChzaGVldDogU2hlZXQpID0+IHtcbiAgY29uc3QgdGFnID0gc2hlZXQuZ2V0VGFnKCk7XG4gIGNvbnN0IHsgbGVuZ3RoIH0gPSB0YWc7XG5cbiAgbGV0IGNzcyA9ICcnO1xuICBmb3IgKGxldCBncm91cCA9IDA7IGdyb3VwIDwgbGVuZ3RoOyBncm91cCsrKSB7XG4gICAgY29uc3QgaWQgPSBnZXRJZEZvckdyb3VwKGdyb3VwKTtcbiAgICBpZiAoaWQgPT09IHVuZGVmaW5lZCkgY29udGludWU7XG5cbiAgICBjb25zdCBuYW1lcyA9IHNoZWV0Lm5hbWVzLmdldChpZCk7XG4gICAgY29uc3QgcnVsZXMgPSB0YWcuZ2V0R3JvdXAoZ3JvdXApO1xuICAgIGlmICghbmFtZXMgfHwgIXJ1bGVzIHx8ICFuYW1lcy5zaXplKSBjb250aW51ZTtcblxuICAgIGNvbnN0IHNlbGVjdG9yID0gYCR7U0NfQVRUUn0uZyR7Z3JvdXB9W2lkPVwiJHtpZH1cIl1gO1xuXG4gICAgbGV0IGNvbnRlbnQgPSAnJztcbiAgICBpZiAobmFtZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbmFtZXMuZm9yRWFjaChuYW1lID0+IHtcbiAgICAgICAgaWYgKG5hbWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnRlbnQgKz0gYCR7bmFtZX0sYDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gTk9URTogSXQncyBlYXNpZXIgdG8gY29sbGVjdCBydWxlcyBhbmQgaGF2ZSB0aGUgbWFya2VyXG4gICAgLy8gYWZ0ZXIgdGhlIGFjdHVhbCBydWxlcyB0byBzaW1wbGlmeSB0aGUgcmVoeWRyYXRpb25cbiAgICBjc3MgKz0gYCR7cnVsZXN9JHtzZWxlY3Rvcn17Y29udGVudDpcIiR7Y29udGVudH1cIn0ke1NQTElUVEVSfWA7XG4gIH1cblxuICByZXR1cm4gY3NzO1xufTtcblxuY29uc3QgcmVoeWRyYXRlTmFtZXNGcm9tQ29udGVudCA9IChzaGVldDogU2hlZXQsIGlkOiBzdHJpbmcsIGNvbnRlbnQ6IHN0cmluZykgPT4ge1xuICBjb25zdCBuYW1lcyA9IGNvbnRlbnQuc3BsaXQoJywnKTtcbiAgbGV0IG5hbWU7XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBuYW1lcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBpZiAoKG5hbWUgPSBuYW1lc1tpXSkpIHtcbiAgICAgIHNoZWV0LnJlZ2lzdGVyTmFtZShpZCwgbmFtZSk7XG4gICAgfVxuICB9XG59O1xuXG5jb25zdCByZWh5ZHJhdGVTaGVldEZyb21UYWcgPSAoc2hlZXQ6IFNoZWV0LCBzdHlsZTogSFRNTFN0eWxlRWxlbWVudCkgPT4ge1xuICBjb25zdCBwYXJ0cyA9IChzdHlsZS50ZXh0Q29udGVudCB8fCAnJykuc3BsaXQoU1BMSVRURVIpO1xuICBjb25zdCBydWxlczogc3RyaW5nW10gPSBbXTtcblxuICBmb3IgKGxldCBpID0gMCwgbCA9IHBhcnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGNvbnN0IHBhcnQgPSBwYXJ0c1tpXS50cmltKCk7XG4gICAgaWYgKCFwYXJ0KSBjb250aW51ZTtcblxuICAgIGNvbnN0IG1hcmtlciA9IHBhcnQubWF0Y2goTUFSS0VSX1JFKTtcblxuICAgIGlmIChtYXJrZXIpIHtcbiAgICAgIGNvbnN0IGdyb3VwID0gcGFyc2VJbnQobWFya2VyWzFdLCAxMCkgfCAwO1xuICAgICAgY29uc3QgaWQgPSBtYXJrZXJbMl07XG5cbiAgICAgIGlmIChncm91cCAhPT0gMCkge1xuICAgICAgICAvLyBSZWh5ZHJhdGUgY29tcG9uZW50SWQgdG8gZ3JvdXAgaW5kZXggbWFwcGluZ1xuICAgICAgICBzZXRHcm91cEZvcklkKGlkLCBncm91cCk7XG4gICAgICAgIC8vIFJlaHlkcmF0ZSBuYW1lcyBhbmQgcnVsZXNcbiAgICAgICAgLy8gbG9va3MgbGlrZTogZGF0YS1zdHlsZWQuZzExW2lkPVwiaWRBXCJde2NvbnRlbnQ6XCJuYW1lQSxcIn1cbiAgICAgICAgcmVoeWRyYXRlTmFtZXNGcm9tQ29udGVudChzaGVldCwgaWQsIG1hcmtlclszXSk7XG4gICAgICAgIHNoZWV0LmdldFRhZygpLmluc2VydFJ1bGVzKGdyb3VwLCBydWxlcyk7XG4gICAgICB9XG5cbiAgICAgIHJ1bGVzLmxlbmd0aCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJ1bGVzLnB1c2gocGFydCk7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgY29uc3QgcmVoeWRyYXRlU2hlZXQgPSAoc2hlZXQ6IFNoZWV0KSA9PiB7XG4gIGNvbnN0IG5vZGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChTRUxFQ1RPUik7XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBub2Rlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBjb25zdCBub2RlID0gKChub2Rlc1tpXTogYW55KTogSFRNTFN0eWxlRWxlbWVudCk7XG4gICAgaWYgKG5vZGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoU0NfQVRUUikgIT09IFNDX0FUVFJfQUNUSVZFKSB7XG4gICAgICByZWh5ZHJhdGVTaGVldEZyb21UYWcoc2hlZXQsIG5vZGUpO1xuXG4gICAgICBpZiAobm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG4iLCIvLyBAZmxvd1xuLyogZXNsaW50LWRpc2FibGUgY2FtZWxjYXNlLCBuby11bmRlZiAqL1xuXG5kZWNsYXJlIHZhciB3aW5kb3c6IHsgX193ZWJwYWNrX25vbmNlX186IHN0cmluZyB9O1xuXG5jb25zdCBnZXROb25jZSA9ICgpID0+IHtcblxuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcbiAgICA/IHR5cGVvZiB3aW5kb3cuX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnXG4gICAgICA/IHdpbmRvdy5fX3dlYnBhY2tfbm9uY2VfX1xuICAgICAgOiBudWxsXG4gICAgOiBudWxsO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0Tm9uY2U7XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgeyBTQ19BVFRSLCBTQ19BVFRSX0FDVElWRSwgU0NfQVRUUl9WRVJTSU9OLCBTQ19WRVJTSU9OIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCBnZXROb25jZSBmcm9tICcuLi91dGlscy9ub25jZSc7XG5pbXBvcnQgdGhyb3dTdHlsZWRFcnJvciBmcm9tICcuLi91dGlscy9lcnJvcic7XG5cbmNvbnN0IEVMRU1FTlRfVFlQRSA9IDE7IC8qIE5vZGUuRUxFTUVOVF9UWVBFICovXG5cbi8qKiBGaW5kIGxhc3Qgc3R5bGUgZWxlbWVudCBpZiBhbnkgaW5zaWRlIHRhcmdldCAqL1xuY29uc3QgZmluZExhc3RTdHlsZVRhZyA9ICh0YXJnZXQ6IEhUTUxFbGVtZW50KTogdm9pZCB8IEhUTUxTdHlsZUVsZW1lbnQgPT4ge1xuICBjb25zdCB7IGNoaWxkTm9kZXMgfSA9IHRhcmdldDtcblxuICBmb3IgKGxldCBpID0gY2hpbGROb2Rlcy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgY29uc3QgY2hpbGQgPSAoKGNoaWxkTm9kZXNbaV06IGFueSk6ID9IVE1MRWxlbWVudCk7XG4gICAgaWYgKGNoaWxkICYmIGNoaWxkLm5vZGVUeXBlID09PSBFTEVNRU5UX1RZUEUgJiYgY2hpbGQuaGFzQXR0cmlidXRlKFNDX0FUVFIpKSB7XG4gICAgICByZXR1cm4gKChjaGlsZDogYW55KTogSFRNTFN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbi8qKiBDcmVhdGUgYSBzdHlsZSBlbGVtZW50IGluc2lkZSBgdGFyZ2V0YCBvciA8aGVhZD4gYWZ0ZXIgdGhlIGxhc3QgKi9cbmV4cG9ydCBjb25zdCBtYWtlU3R5bGVUYWcgPSAodGFyZ2V0PzogSFRNTEVsZW1lbnQpOiBIVE1MU3R5bGVFbGVtZW50ID0+IHtcbiAgY29uc3QgaGVhZCA9ICgoZG9jdW1lbnQuaGVhZDogYW55KTogSFRNTEVsZW1lbnQpO1xuICBjb25zdCBwYXJlbnQgPSB0YXJnZXQgfHwgaGVhZDtcbiAgY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICBjb25zdCBwcmV2U3R5bGUgPSBmaW5kTGFzdFN0eWxlVGFnKHBhcmVudCk7XG4gIGNvbnN0IG5leHRTaWJsaW5nID0gcHJldlN0eWxlICE9PSB1bmRlZmluZWQgPyBwcmV2U3R5bGUubmV4dFNpYmxpbmcgOiBudWxsO1xuXG4gIHN0eWxlLnNldEF0dHJpYnV0ZShTQ19BVFRSLCBTQ19BVFRSX0FDVElWRSk7XG4gIHN0eWxlLnNldEF0dHJpYnV0ZShTQ19BVFRSX1ZFUlNJT04sIFNDX1ZFUlNJT04pO1xuXG4gIGNvbnN0IG5vbmNlID0gZ2V0Tm9uY2UoKTtcblxuICBpZiAobm9uY2UpIHN0eWxlLnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBub25jZSk7XG5cbiAgcGFyZW50Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dFNpYmxpbmcpO1xuXG4gIHJldHVybiBzdHlsZTtcbn07XG5cbi8qKiBHZXQgdGhlIENTU1N0eWxlU2hlZXQgaW5zdGFuY2UgZm9yIGEgZ2l2ZW4gc3R5bGUgZWxlbWVudCAqL1xuZXhwb3J0IGNvbnN0IGdldFNoZWV0ID0gKHRhZzogSFRNTFN0eWxlRWxlbWVudCk6IENTU1N0eWxlU2hlZXQgPT4ge1xuICBpZiAodGFnLnNoZWV0KSB7XG4gICAgcmV0dXJuICgodGFnLnNoZWV0OiBhbnkpOiBDU1NTdHlsZVNoZWV0KTtcbiAgfVxuXG4gIC8vIEF2b2lkIEZpcmVmb3ggcXVpcmsgd2hlcmUgdGhlIHN0eWxlIGVsZW1lbnQgbWlnaHQgbm90IGhhdmUgYSBzaGVldCBwcm9wZXJ0eVxuICBjb25zdCB7IHN0eWxlU2hlZXRzIH0gPSBkb2N1bWVudDtcbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBzdHlsZVNoZWV0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBjb25zdCBzaGVldCA9IHN0eWxlU2hlZXRzW2ldO1xuICAgIGlmIChzaGVldC5vd25lck5vZGUgPT09IHRhZykge1xuICAgICAgcmV0dXJuICgoc2hlZXQ6IGFueSk6IENTU1N0eWxlU2hlZXQpO1xuICAgIH1cbiAgfVxuXG4gIHRocm93U3R5bGVkRXJyb3IoMTcpO1xuICByZXR1cm4gKHVuZGVmaW5lZDogYW55KTtcbn07XG4iLCIvLyBAZmxvd1xuLyogZXNsaW50LWRpc2FibGUgbm8tdXNlLWJlZm9yZS1kZWZpbmUgKi9cblxuaW1wb3J0IHsgbWFrZVN0eWxlVGFnLCBnZXRTaGVldCB9IGZyb20gJy4vZG9tJztcbmltcG9ydCB0eXBlIHsgU2hlZXRPcHRpb25zLCBUYWcgfSBmcm9tICcuL3R5cGVzJztcblxuLyoqIENyZWF0ZSBhIENTU1N0eWxlU2hlZXQtbGlrZSB0YWcgZGVwZW5kaW5nIG9uIHRoZSBlbnZpcm9ubWVudCAqL1xuZXhwb3J0IGNvbnN0IG1ha2VUYWcgPSAoeyBpc1NlcnZlciwgdXNlQ1NTT01JbmplY3Rpb24sIHRhcmdldCB9OiBTaGVldE9wdGlvbnMpOiBUYWcgPT4ge1xuICBpZiAoaXNTZXJ2ZXIpIHtcbiAgICByZXR1cm4gbmV3IFZpcnR1YWxUYWcodGFyZ2V0KTtcbiAgfSBlbHNlIGlmICh1c2VDU1NPTUluamVjdGlvbikge1xuICAgIHJldHVybiBuZXcgQ1NTT01UYWcodGFyZ2V0KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IFRleHRUYWcodGFyZ2V0KTtcbiAgfVxufTtcblxuZXhwb3J0IGNsYXNzIENTU09NVGFnIGltcGxlbWVudHMgVGFnIHtcbiAgZWxlbWVudDogSFRNTFN0eWxlRWxlbWVudDtcblxuICBzaGVldDogQ1NTU3R5bGVTaGVldDtcblxuICBsZW5ndGg6IG51bWJlcjtcblxuICBjb25zdHJ1Y3Rvcih0YXJnZXQ/OiBIVE1MRWxlbWVudCkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSAodGhpcy5lbGVtZW50ID0gbWFrZVN0eWxlVGFnKHRhcmdldCkpO1xuXG4gICAgLy8gQXZvaWQgRWRnZSBidWcgd2hlcmUgZW1wdHkgc3R5bGUgZWxlbWVudHMgZG9uJ3QgY3JlYXRlIHNoZWV0c1xuICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpKTtcblxuICAgIHRoaXMuc2hlZXQgPSBnZXRTaGVldChlbGVtZW50KTtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gIH1cblxuICBpbnNlcnRSdWxlKGluZGV4OiBudW1iZXIsIHJ1bGU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLnNoZWV0Lmluc2VydFJ1bGUocnVsZSwgaW5kZXgpO1xuICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKF9lcnJvcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGRlbGV0ZVJ1bGUoaW5kZXg6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuc2hlZXQuZGVsZXRlUnVsZShpbmRleCk7XG4gICAgdGhpcy5sZW5ndGgtLTtcbiAgfVxuXG4gIGdldFJ1bGUoaW5kZXg6IG51bWJlcik6IHN0cmluZyB7XG4gICAgY29uc3QgcnVsZSA9IHRoaXMuc2hlZXQuY3NzUnVsZXNbaW5kZXhdO1xuICAgIC8vIEF2b2lkIElFMTEgcXVpcmsgd2hlcmUgY3NzVGV4dCBpcyBpbmFjY2Vzc2libGUgb24gc29tZSBpbnZhbGlkIHJ1bGVzXG4gICAgaWYgKHJ1bGUgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgcnVsZS5jc3NUZXh0ID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHJ1bGUuY3NzVGV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxufVxuXG4vKiogQSBUYWcgdGhhdCBlbXVsYXRlcyB0aGUgQ1NTU3R5bGVTaGVldCBBUEkgYnV0IHVzZXMgdGV4dCBub2RlcyAqL1xuZXhwb3J0IGNsYXNzIFRleHRUYWcgaW1wbGVtZW50cyBUYWcge1xuICBlbGVtZW50OiBIVE1MU3R5bGVFbGVtZW50O1xuXG4gIG5vZGVzOiBOb2RlTGlzdDxOb2RlPjtcblxuICBsZW5ndGg6IG51bWJlcjtcblxuICBjb25zdHJ1Y3Rvcih0YXJnZXQ/OiBIVE1MRWxlbWVudCkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSAodGhpcy5lbGVtZW50ID0gbWFrZVN0eWxlVGFnKHRhcmdldCkpO1xuICAgIHRoaXMubm9kZXMgPSBlbGVtZW50LmNoaWxkTm9kZXM7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICB9XG5cbiAgaW5zZXJ0UnVsZShpbmRleDogbnVtYmVyLCBydWxlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBpZiAoaW5kZXggPD0gdGhpcy5sZW5ndGggJiYgaW5kZXggPj0gMCkge1xuICAgICAgY29uc3Qgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHJ1bGUpO1xuICAgICAgY29uc3QgcmVmTm9kZSA9IHRoaXMubm9kZXNbaW5kZXhdO1xuICAgICAgdGhpcy5lbGVtZW50Lmluc2VydEJlZm9yZShub2RlLCByZWZOb2RlIHx8IG51bGwpO1xuICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZGVsZXRlUnVsZShpbmRleDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5lbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMubm9kZXNbaW5kZXhdKTtcbiAgICB0aGlzLmxlbmd0aC0tO1xuICB9XG5cbiAgZ2V0UnVsZShpbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBpZiAoaW5kZXggPCB0aGlzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZXNbaW5kZXhdLnRleHRDb250ZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG59XG5cbi8qKiBBIGNvbXBsZXRlbHkgdmlydHVhbCAoc2VydmVyLXNpZGUpIFRhZyB0aGF0IGRvZXNuJ3QgbWFuaXB1bGF0ZSB0aGUgRE9NICovXG5leHBvcnQgY2xhc3MgVmlydHVhbFRhZyBpbXBsZW1lbnRzIFRhZyB7XG4gIHJ1bGVzOiBzdHJpbmdbXTtcblxuICBsZW5ndGg6IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcihfdGFyZ2V0PzogSFRNTEVsZW1lbnQpIHtcbiAgICB0aGlzLnJ1bGVzID0gW107XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICB9XG5cbiAgaW5zZXJ0UnVsZShpbmRleDogbnVtYmVyLCBydWxlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBpZiAoaW5kZXggPD0gdGhpcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMucnVsZXMuc3BsaWNlKGluZGV4LCAwLCBydWxlKTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGRlbGV0ZVJ1bGUoaW5kZXg6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMucnVsZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB0aGlzLmxlbmd0aC0tO1xuICB9XG5cbiAgZ2V0UnVsZShpbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBpZiAoaW5kZXggPCB0aGlzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMucnVsZXNbaW5kZXhdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHsgRElTQUJMRV9TUEVFRFksIElTX0JST1dTRVIgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgRU1QVFlfT0JKRUNUIH0gZnJvbSAnLi4vdXRpbHMvZW1wdGllcyc7XG5pbXBvcnQgeyBtYWtlR3JvdXBlZFRhZyB9IGZyb20gJy4vR3JvdXBlZFRhZyc7XG5pbXBvcnQgeyBnZXRHcm91cEZvcklkIH0gZnJvbSAnLi9Hcm91cElEQWxsb2NhdG9yJztcbmltcG9ydCB7IG91dHB1dFNoZWV0LCByZWh5ZHJhdGVTaGVldCB9IGZyb20gJy4vUmVoeWRyYXRpb24nO1xuaW1wb3J0IHsgbWFrZVRhZyB9IGZyb20gJy4vVGFnJztcbmltcG9ydCB0eXBlIHsgR3JvdXBlZFRhZywgU2hlZXQsIFNoZWV0T3B0aW9ucyB9IGZyb20gJy4vdHlwZXMnO1xuXG5sZXQgU0hPVUxEX1JFSFlEUkFURSA9IElTX0JST1dTRVI7XG5cbnR5cGUgU2hlZXRDb25zdHJ1Y3RvckFyZ3MgPSB7XG4gIGlzU2VydmVyPzogYm9vbGVhbixcbiAgdXNlQ1NTT01JbmplY3Rpb24/OiBib29sZWFuLFxuICB0YXJnZXQ/OiBIVE1MRWxlbWVudCxcbn07XG5cbnR5cGUgR2xvYmFsU3R5bGVzQWxsb2NhdGlvbk1hcCA9IHsgW2tleTogc3RyaW5nXTogbnVtYmVyIH07XG50eXBlIE5hbWVzQWxsb2NhdGlvbk1hcCA9IE1hcDxzdHJpbmcsIFNldDxzdHJpbmc+PjtcblxuY29uc3QgZGVmYXVsdE9wdGlvbnM6IFNoZWV0T3B0aW9ucyA9IHtcbiAgaXNTZXJ2ZXI6ICFJU19CUk9XU0VSLFxuICB1c2VDU1NPTUluamVjdGlvbjogIURJU0FCTEVfU1BFRURZLFxufTtcblxuLyoqIENvbnRhaW5zIHRoZSBtYWluIHN0eWxlc2hlZXQgbG9naWMgZm9yIHN0cmluZ2lmaWNhdGlvbiBhbmQgY2FjaGluZyAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3R5bGVTaGVldCBpbXBsZW1lbnRzIFNoZWV0IHtcbiAgZ3M6IEdsb2JhbFN0eWxlc0FsbG9jYXRpb25NYXA7XG5cbiAgbmFtZXM6IE5hbWVzQWxsb2NhdGlvbk1hcDtcblxuICBvcHRpb25zOiBTaGVldE9wdGlvbnM7XG5cbiAgc2VydmVyOiBib29sZWFuO1xuXG4gIHRhZzogdm9pZCB8IEdyb3VwZWRUYWc7XG5cbiAgLyoqIFJlZ2lzdGVyIGEgZ3JvdXAgSUQgdG8gZ2l2ZSBpdCBhbiBpbmRleCAqL1xuICBzdGF0aWMgcmVnaXN0ZXJJZChpZDogc3RyaW5nKTogbnVtYmVyIHtcbiAgICByZXR1cm4gZ2V0R3JvdXBGb3JJZChpZCk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBvcHRpb25zOiBTaGVldENvbnN0cnVjdG9yQXJncyA9IEVNUFRZX09CSkVDVCxcbiAgICBnbG9iYWxTdHlsZXM/OiBHbG9iYWxTdHlsZXNBbGxvY2F0aW9uTWFwID0ge30sXG4gICAgbmFtZXM/OiBOYW1lc0FsbG9jYXRpb25NYXBcbiAgKSB7XG4gICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgLi4uZGVmYXVsdE9wdGlvbnMsXG4gICAgICAuLi5vcHRpb25zLFxuICAgIH07XG5cbiAgICB0aGlzLmdzID0gZ2xvYmFsU3R5bGVzO1xuICAgIHRoaXMubmFtZXMgPSBuZXcgTWFwKG5hbWVzKTtcbiAgICB0aGlzLnNlcnZlciA9ICEhb3B0aW9ucy5pc1NlcnZlcjtcblxuICAgIC8vIFdlIHJlaHlkcmF0ZSBvbmx5IG9uY2UgYW5kIHVzZSB0aGUgc2hlZXQgdGhhdCBpcyBjcmVhdGVkIGZpcnN0XG4gICAgaWYgKCF0aGlzLnNlcnZlciAmJiBJU19CUk9XU0VSICYmIFNIT1VMRF9SRUhZRFJBVEUpIHtcbiAgICAgIFNIT1VMRF9SRUhZRFJBVEUgPSBmYWxzZTtcbiAgICAgIHJlaHlkcmF0ZVNoZWV0KHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIHJlY29uc3RydWN0V2l0aE9wdGlvbnMob3B0aW9uczogU2hlZXRDb25zdHJ1Y3RvckFyZ3MsIHdpdGhOYW1lcz86IGJvb2xlYW4gPSB0cnVlKSB7XG4gICAgcmV0dXJuIG5ldyBTdHlsZVNoZWV0KFxuICAgICAgeyAuLi50aGlzLm9wdGlvbnMsIC4uLm9wdGlvbnMgfSxcbiAgICAgIHRoaXMuZ3MsXG4gICAgICAod2l0aE5hbWVzICYmIHRoaXMubmFtZXMpIHx8IHVuZGVmaW5lZFxuICAgICk7XG4gIH1cblxuICBhbGxvY2F0ZUdTSW5zdGFuY2UoaWQ6IHN0cmluZykge1xuICAgIHJldHVybiAodGhpcy5nc1tpZF0gPSAodGhpcy5nc1tpZF0gfHwgMCkgKyAxKTtcbiAgfVxuXG4gIC8qKiBMYXppbHkgaW5pdGlhbGlzZXMgYSBHcm91cGVkVGFnIGZvciB3aGVuIGl0J3MgYWN0dWFsbHkgbmVlZGVkICovXG4gIGdldFRhZygpOiBHcm91cGVkVGFnIHtcbiAgICByZXR1cm4gdGhpcy50YWcgfHwgKHRoaXMudGFnID0gbWFrZUdyb3VwZWRUYWcobWFrZVRhZyh0aGlzLm9wdGlvbnMpKSk7XG4gIH1cblxuICAvKiogQ2hlY2sgd2hldGhlciBhIG5hbWUgaXMga25vd24gZm9yIGNhY2hpbmcgKi9cbiAgaGFzTmFtZUZvcklkKGlkOiBzdHJpbmcsIG5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLm5hbWVzLmhhcyhpZCkgJiYgKHRoaXMubmFtZXMuZ2V0KGlkKTogYW55KS5oYXMobmFtZSk7XG4gIH1cblxuICAvKiogTWFyayBhIGdyb3VwJ3MgbmFtZSBhcyBrbm93biBmb3IgY2FjaGluZyAqL1xuICByZWdpc3Rlck5hbWUoaWQ6IHN0cmluZywgbmFtZTogc3RyaW5nKSB7XG4gICAgZ2V0R3JvdXBGb3JJZChpZCk7XG5cbiAgICBpZiAoIXRoaXMubmFtZXMuaGFzKGlkKSkge1xuICAgICAgY29uc3QgZ3JvdXBOYW1lcyA9IG5ldyBTZXQoKTtcbiAgICAgIGdyb3VwTmFtZXMuYWRkKG5hbWUpO1xuICAgICAgdGhpcy5uYW1lcy5zZXQoaWQsIGdyb3VwTmFtZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAodGhpcy5uYW1lcy5nZXQoaWQpOiBhbnkpLmFkZChuYW1lKTtcbiAgICB9XG4gIH1cblxuICAvKiogSW5zZXJ0IG5ldyBydWxlcyB3aGljaCBhbHNvIG1hcmtzIHRoZSBuYW1lIGFzIGtub3duICovXG4gIGluc2VydFJ1bGVzKGlkOiBzdHJpbmcsIG5hbWU6IHN0cmluZywgcnVsZXM6IHN0cmluZ1tdKSB7XG4gICAgdGhpcy5yZWdpc3Rlck5hbWUoaWQsIG5hbWUpO1xuICAgIHRoaXMuZ2V0VGFnKCkuaW5zZXJ0UnVsZXMoZ2V0R3JvdXBGb3JJZChpZCksIHJ1bGVzKTtcbiAgfVxuXG4gIC8qKiBDbGVhcnMgYWxsIGNhY2hlZCBuYW1lcyBmb3IgYSBnaXZlbiBncm91cCBJRCAqL1xuICBjbGVhck5hbWVzKGlkOiBzdHJpbmcpIHtcbiAgICBpZiAodGhpcy5uYW1lcy5oYXMoaWQpKSB7XG4gICAgICAodGhpcy5uYW1lcy5nZXQoaWQpOiBhbnkpLmNsZWFyKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqIENsZWFycyBhbGwgcnVsZXMgZm9yIGEgZ2l2ZW4gZ3JvdXAgSUQgKi9cbiAgY2xlYXJSdWxlcyhpZDogc3RyaW5nKSB7XG4gICAgdGhpcy5nZXRUYWcoKS5jbGVhckdyb3VwKGdldEdyb3VwRm9ySWQoaWQpKTtcbiAgICB0aGlzLmNsZWFyTmFtZXMoaWQpO1xuICB9XG5cbiAgLyoqIENsZWFycyB0aGUgZW50aXJlIHRhZyB3aGljaCBkZWxldGVzIGFsbCBydWxlcyBidXQgbm90IGl0cyBuYW1lcyAqL1xuICBjbGVhclRhZygpIHtcbiAgICAvLyBOT1RFOiBUaGlzIGRvZXMgbm90IGNsZWFyIHRoZSBuYW1lcywgc2luY2UgaXQncyBvbmx5IHVzZWQgZHVyaW5nIFNTUlxuICAgIC8vIHNvIHRoYXQgd2UgY2FuIGNvbnRpbnVvdXNseSBvdXRwdXQgb25seSBuZXcgcnVsZXNcbiAgICB0aGlzLnRhZyA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8qKiBPdXRwdXRzIHRoZSBjdXJyZW50IHNoZWV0IGFzIGEgQ1NTIHN0cmluZyB3aXRoIG1hcmtlcnMgZm9yIFNTUiAqL1xuICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIHJldHVybiBvdXRwdXRTaGVldCh0aGlzKTtcbiAgfVxufVxuIiwiLy8gQGZsb3dcbi8qIGVzbGludC1kaXNhYmxlIG5vLWJpdHdpc2UgKi9cblxuY29uc3QgQURfUkVQTEFDRVJfUiA9IC8oYSkoZCkvZ2k7XG5cbi8qIFRoaXMgaXMgdGhlIFwiY2FwYWNpdHlcIiBvZiBvdXIgYWxwaGFiZXQgaS5lLiAyeDI2IGZvciBhbGwgbGV0dGVycyBwbHVzIHRoZWlyIGNhcGl0YWxpc2VkXG4gKiBjb3VudGVycGFydHMgKi9cbmNvbnN0IGNoYXJzTGVuZ3RoID0gNTI7XG5cbi8qIHN0YXJ0IGF0IDc1IGZvciAnYScgdW50aWwgJ3onICgyNSkgYW5kIHRoZW4gc3RhcnQgYXQgNjUgZm9yIGNhcGl0YWxpc2VkIGxldHRlcnMgKi9cbmNvbnN0IGdldEFscGhhYmV0aWNDaGFyID0gKGNvZGU6IG51bWJlcik6IHN0cmluZyA9PlxuICBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUgKyAoY29kZSA+IDI1ID8gMzkgOiA5NykpO1xuXG4vKiBpbnB1dCBhIG51bWJlciwgdXN1YWxseSBhIGhhc2ggYW5kIGNvbnZlcnQgaXQgdG8gYmFzZS01MiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2VuZXJhdGVBbHBoYWJldGljTmFtZShjb2RlOiBudW1iZXIpOiBzdHJpbmcge1xuICBsZXQgbmFtZSA9ICcnO1xuICBsZXQgeDtcblxuICAvKiBnZXQgYSBjaGFyIGFuZCBkaXZpZGUgYnkgYWxwaGFiZXQtbGVuZ3RoICovXG4gIGZvciAoeCA9IE1hdGguYWJzKGNvZGUpOyB4ID4gY2hhcnNMZW5ndGg7IHggPSAoeCAvIGNoYXJzTGVuZ3RoKSB8IDApIHtcbiAgICBuYW1lID0gZ2V0QWxwaGFiZXRpY0NoYXIoeCAlIGNoYXJzTGVuZ3RoKSArIG5hbWU7XG4gIH1cblxuICByZXR1cm4gKGdldEFscGhhYmV0aWNDaGFyKHggJSBjaGFyc0xlbmd0aCkgKyBuYW1lKS5yZXBsYWNlKEFEX1JFUExBQ0VSX1IsICckMS0kMicpO1xufVxuIiwiLy8gQGZsb3dcbi8qIGVzbGludC1kaXNhYmxlICovXG5cbmV4cG9ydCBjb25zdCBTRUVEID0gNTM4MTtcblxuLy8gV2hlbiB3ZSBoYXZlIHNlcGFyYXRlIHN0cmluZ3MgaXQncyB1c2VmdWwgdG8gcnVuIGEgcHJvZ3Jlc3NpdmVcbi8vIHZlcnNpb24gb2YgZGpiMiB3aGVyZSB3ZSBwcmV0ZW5kIHRoYXQgd2UncmUgc3RpbGwgbG9vcGluZyBvdmVyXG4vLyB0aGUgc2FtZSBzdHJpbmdcbmV4cG9ydCBjb25zdCBwaGFzaCA9IChoOiBudW1iZXIsIHg6IHN0cmluZyk6IG51bWJlciA9PiB7XG4gIGxldCBpID0geC5sZW5ndGg7XG5cbiAgd2hpbGUgKGkpIHtcbiAgICBoID0gKGggKiAzMykgXiB4LmNoYXJDb2RlQXQoLS1pKTtcbiAgfVxuXG4gIHJldHVybiBoO1xufTtcblxuLy8gVGhpcyBpcyBhIGRqYjIgaGFzaGluZyBmdW5jdGlvblxuZXhwb3J0IGNvbnN0IGhhc2ggPSAoeDogc3RyaW5nKTogbnVtYmVyID0+IHtcbiAgcmV0dXJuIHBoYXNoKFNFRUQsIHgpO1xufTtcbiIsIi8vIEBmbG93XG5pbXBvcnQgaXNGdW5jdGlvbiBmcm9tICcuL2lzRnVuY3Rpb24nO1xuaW1wb3J0IGlzU3R5bGVkQ29tcG9uZW50IGZyb20gJy4vaXNTdHlsZWRDb21wb25lbnQnO1xuaW1wb3J0IHR5cGUgeyBSdWxlU2V0IH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1N0YXRpY1J1bGVzKHJ1bGVzOiBSdWxlU2V0KTogYm9vbGVhbiB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcnVsZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBydWxlID0gcnVsZXNbaV07XG5cbiAgICBpZiAoaXNGdW5jdGlvbihydWxlKSAmJiAhaXNTdHlsZWRDb21wb25lbnQocnVsZSkpIHtcbiAgICAgIC8vIGZ1bmN0aW9ucyBhcmUgYWxsb3dlZCB0byBiZSBzdGF0aWMgaWYgdGhleSdyZSBqdXN0IGJlaW5nXG4gICAgICAvLyB1c2VkIHRvIGdldCB0aGUgY2xhc3NuYW1lIG9mIGEgbmVzdGVkIHN0eWxlZCBjb21wb25lbnRcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgeyBTQ19WRVJTSU9OIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCBTdHlsZVNoZWV0IGZyb20gJy4uL3NoZWV0JztcbmltcG9ydCB0eXBlIHsgUnVsZVNldCwgU3RyaW5naWZpZXIgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgZmxhdHRlbiBmcm9tICcuLi91dGlscy9mbGF0dGVuJztcbmltcG9ydCBnZW5lcmF0ZU5hbWUgZnJvbSAnLi4vdXRpbHMvZ2VuZXJhdGVBbHBoYWJldGljTmFtZSc7XG5pbXBvcnQgeyBoYXNoLCBwaGFzaCB9IGZyb20gJy4uL3V0aWxzL2hhc2gnO1xuaW1wb3J0IGlzU3RhdGljUnVsZXMgZnJvbSAnLi4vdXRpbHMvaXNTdGF0aWNSdWxlcyc7XG5cbmNvbnN0IFNFRUQgPSBoYXNoKFNDX1ZFUlNJT04pO1xuXG4vKipcbiAqIENvbXBvbmVudFN0eWxlIGlzIGFsbCB0aGUgQ1NTLXNwZWNpZmljIHN0dWZmLCBub3QgdGhlIFJlYWN0LXNwZWNpZmljIHN0dWZmLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wb25lbnRTdHlsZSB7XG4gIGJhc2VIYXNoOiBudW1iZXI7XG5cbiAgYmFzZVN0eWxlOiA/Q29tcG9uZW50U3R5bGU7XG5cbiAgY29tcG9uZW50SWQ6IHN0cmluZztcblxuICBpc1N0YXRpYzogYm9vbGVhbjtcblxuICBydWxlczogUnVsZVNldDtcblxuICBzdGF0aWNSdWxlc0lkOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocnVsZXM6IFJ1bGVTZXQsIGNvbXBvbmVudElkOiBzdHJpbmcsIGJhc2VTdHlsZT86IENvbXBvbmVudFN0eWxlKSB7XG4gICAgdGhpcy5ydWxlcyA9IHJ1bGVzO1xuICAgIHRoaXMuc3RhdGljUnVsZXNJZCA9ICcnO1xuICAgIHRoaXMuaXNTdGF0aWMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAoYmFzZVN0eWxlID09PSB1bmRlZmluZWQgfHwgYmFzZVN0eWxlLmlzU3RhdGljKSAmJlxuICAgICAgaXNTdGF0aWNSdWxlcyhydWxlcyk7XG4gICAgdGhpcy5jb21wb25lbnRJZCA9IGNvbXBvbmVudElkO1xuXG4gICAgLy8gU0NfVkVSU0lPTiBnaXZlcyB1cyBpc29sYXRpb24gYmV0d2VlbiBtdWx0aXBsZSBydW50aW1lcyBvbiB0aGUgcGFnZSBhdCBvbmNlXG4gICAgLy8gdGhpcyBpcyBpbXByb3ZlZCBmdXJ0aGVyIHdpdGggdXNlIG9mIHRoZSBiYWJlbCBwbHVnaW4gXCJuYW1lc3BhY2VcIiBmZWF0dXJlXG4gICAgdGhpcy5iYXNlSGFzaCA9IHBoYXNoKFNFRUQsIGNvbXBvbmVudElkKTtcblxuICAgIHRoaXMuYmFzZVN0eWxlID0gYmFzZVN0eWxlO1xuXG4gICAgLy8gTk9URTogVGhpcyByZWdpc3RlcnMgdGhlIGNvbXBvbmVudElkLCB3aGljaCBlbnN1cmVzIGEgY29uc2lzdGVudCBvcmRlclxuICAgIC8vIGZvciB0aGlzIGNvbXBvbmVudCdzIHN0eWxlcyBjb21wYXJlZCB0byBvdGhlcnNcbiAgICBTdHlsZVNoZWV0LnJlZ2lzdGVySWQoY29tcG9uZW50SWQpO1xuICB9XG5cbiAgLypcbiAgICogRmxhdHRlbnMgYSBydWxlIHNldCBpbnRvIHZhbGlkIENTU1xuICAgKiBIYXNoZXMgaXQsIHdyYXBzIHRoZSB3aG9sZSBjaHVuayBpbiBhIC5oYXNoMTIzNCB7fVxuICAgKiBSZXR1cm5zIHRoZSBoYXNoIHRvIGJlIGluamVjdGVkIG9uIHJlbmRlcigpXG4gICAqICovXG4gIGdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKGV4ZWN1dGlvbkNvbnRleHQ6IE9iamVjdCwgc3R5bGVTaGVldDogU3R5bGVTaGVldCwgc3R5bGlzOiBTdHJpbmdpZmllcikge1xuICAgIGNvbnN0IHsgY29tcG9uZW50SWQgfSA9IHRoaXM7XG5cbiAgICBjb25zdCBuYW1lcyA9IFtdO1xuXG4gICAgaWYgKHRoaXMuYmFzZVN0eWxlKSB7XG4gICAgICBuYW1lcy5wdXNoKHRoaXMuYmFzZVN0eWxlLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKGV4ZWN1dGlvbkNvbnRleHQsIHN0eWxlU2hlZXQsIHN0eWxpcykpO1xuICAgIH1cblxuICAgIC8vIGZvcmNlIGR5bmFtaWMgY2xhc3NuYW1lcyBpZiB1c2VyLXN1cHBsaWVkIHN0eWxpcyBwbHVnaW5zIGFyZSBpbiB1c2VcbiAgICBpZiAodGhpcy5pc1N0YXRpYyAmJiAhc3R5bGlzLmhhc2gpIHtcbiAgICAgIGlmICh0aGlzLnN0YXRpY1J1bGVzSWQgJiYgc3R5bGVTaGVldC5oYXNOYW1lRm9ySWQoY29tcG9uZW50SWQsIHRoaXMuc3RhdGljUnVsZXNJZCkpIHtcbiAgICAgICAgbmFtZXMucHVzaCh0aGlzLnN0YXRpY1J1bGVzSWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgY3NzU3RhdGljID0gZmxhdHRlbih0aGlzLnJ1bGVzLCBleGVjdXRpb25Db250ZXh0LCBzdHlsZVNoZWV0LCBzdHlsaXMpLmpvaW4oJycpO1xuICAgICAgICBjb25zdCBuYW1lID0gZ2VuZXJhdGVOYW1lKHBoYXNoKHRoaXMuYmFzZUhhc2gsIGNzc1N0YXRpYykgPj4+IDApO1xuXG4gICAgICAgIGlmICghc3R5bGVTaGVldC5oYXNOYW1lRm9ySWQoY29tcG9uZW50SWQsIG5hbWUpKSB7XG4gICAgICAgICAgY29uc3QgY3NzU3RhdGljRm9ybWF0dGVkID0gc3R5bGlzKGNzc1N0YXRpYywgYC4ke25hbWV9YCwgdW5kZWZpbmVkLCBjb21wb25lbnRJZCk7XG5cbiAgICAgICAgICBzdHlsZVNoZWV0Lmluc2VydFJ1bGVzKGNvbXBvbmVudElkLCBuYW1lLCBjc3NTdGF0aWNGb3JtYXR0ZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgbmFtZXMucHVzaChuYW1lKTtcbiAgICAgICAgdGhpcy5zdGF0aWNSdWxlc0lkID0gbmFtZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgeyBsZW5ndGggfSA9IHRoaXMucnVsZXM7XG4gICAgICBsZXQgZHluYW1pY0hhc2ggPSBwaGFzaCh0aGlzLmJhc2VIYXNoLCBzdHlsaXMuaGFzaCk7XG4gICAgICBsZXQgY3NzID0gJyc7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgcGFydFJ1bGUgPSB0aGlzLnJ1bGVzW2ldO1xuXG4gICAgICAgIGlmICh0eXBlb2YgcGFydFJ1bGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgY3NzICs9IHBhcnRSdWxlO1xuXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIGR5bmFtaWNIYXNoID0gcGhhc2goZHluYW1pY0hhc2gsIHBhcnRSdWxlICsgaSk7XG4gICAgICAgIH0gZWxzZSBpZiAocGFydFJ1bGUpIHtcbiAgICAgICAgICBjb25zdCBwYXJ0Q2h1bmsgPSBmbGF0dGVuKHBhcnRSdWxlLCBleGVjdXRpb25Db250ZXh0LCBzdHlsZVNoZWV0LCBzdHlsaXMpO1xuICAgICAgICAgIGNvbnN0IHBhcnRTdHJpbmcgPSBBcnJheS5pc0FycmF5KHBhcnRDaHVuaykgPyBwYXJ0Q2h1bmsuam9pbignJykgOiBwYXJ0Q2h1bms7XG4gICAgICAgICAgZHluYW1pY0hhc2ggPSBwaGFzaChkeW5hbWljSGFzaCwgcGFydFN0cmluZyArIGkpO1xuICAgICAgICAgIGNzcyArPSBwYXJ0U3RyaW5nO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChjc3MpIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IGdlbmVyYXRlTmFtZShkeW5hbWljSGFzaCA+Pj4gMCk7XG5cbiAgICAgICAgaWYgKCFzdHlsZVNoZWV0Lmhhc05hbWVGb3JJZChjb21wb25lbnRJZCwgbmFtZSkpIHtcbiAgICAgICAgICBjb25zdCBjc3NGb3JtYXR0ZWQgPSBzdHlsaXMoY3NzLCBgLiR7bmFtZX1gLCB1bmRlZmluZWQsIGNvbXBvbmVudElkKTtcbiAgICAgICAgICBzdHlsZVNoZWV0Lmluc2VydFJ1bGVzKGNvbXBvbmVudElkLCBuYW1lLCBjc3NGb3JtYXR0ZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgbmFtZXMucHVzaChuYW1lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmFtZXMuam9pbignICcpO1xuICB9XG59XG4iLCJpbXBvcnQgU3R5bGlzIGZyb20gJ0BlbW90aW9uL3N0eWxpcyc7XG5pbXBvcnQgeyB0eXBlIFN0cmluZ2lmaWVyIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgRU1QVFlfQVJSQVksIEVNUFRZX09CSkVDVCB9IGZyb20gJy4vZW1wdGllcyc7XG5pbXBvcnQgdGhyb3dTdHlsZWRFcnJvciBmcm9tICcuL2Vycm9yJztcbmltcG9ydCB7IHBoYXNoLCBTRUVEIH0gZnJvbSAnLi9oYXNoJztcbmltcG9ydCBpbnNlcnRSdWxlUGx1Z2luIGZyb20gJy4vc3R5bGlzUGx1Z2luSW5zZXJ0UnVsZSc7XG5cbmNvbnN0IENPTU1FTlRfUkVHRVggPSAvXlxccypcXC9cXC8uKiQvZ207XG5jb25zdCBDT01QTEVYX1NFTEVDVE9SX1BSRUZJWCA9IFsnOicsICdbJywgJy4nLCAnIyddO1xuXG50eXBlIFN0eWxpc0luc3RhbmNlQ29uc3RydWN0b3JBcmdzID0ge1xuICBvcHRpb25zPzogT2JqZWN0LFxuICBwbHVnaW5zPzogQXJyYXk8RnVuY3Rpb24+LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlU3R5bGlzSW5zdGFuY2Uoe1xuICBvcHRpb25zID0gRU1QVFlfT0JKRUNULFxuICBwbHVnaW5zID0gRU1QVFlfQVJSQVksXG59OiBTdHlsaXNJbnN0YW5jZUNvbnN0cnVjdG9yQXJncyA9IEVNUFRZX09CSkVDVCkge1xuICBjb25zdCBzdHlsaXMgPSBuZXcgU3R5bGlzKG9wdGlvbnMpO1xuXG4gIC8vIFdyYXAgYGluc2VydFJ1bGVQbHVnaW4gdG8gYnVpbGQgYSBsaXN0IG9mIHJ1bGVzLFxuICAvLyBhbmQgdGhlbiBtYWtlIG91ciBvd24gcGx1Z2luIHRvIHJldHVybiB0aGUgcnVsZXMuIFRoaXNcbiAgLy8gbWFrZXMgaXQgZWFzaWVyIHRvIGhvb2sgaW50byB0aGUgZXhpc3RpbmcgU1NSIGFyY2hpdGVjdHVyZVxuXG4gIGxldCBwYXJzaW5nUnVsZXMgPSBbXTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgY29uc3QgcmV0dXJuUnVsZXNQbHVnaW4gPSBjb250ZXh0ID0+IHtcbiAgICBpZiAoY29udGV4dCA9PT0gLTIpIHtcbiAgICAgIGNvbnN0IHBhcnNlZFJ1bGVzID0gcGFyc2luZ1J1bGVzO1xuICAgICAgcGFyc2luZ1J1bGVzID0gW107XG4gICAgICByZXR1cm4gcGFyc2VkUnVsZXM7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHBhcnNlUnVsZXNQbHVnaW4gPSBpbnNlcnRSdWxlUGx1Z2luKHJ1bGUgPT4ge1xuICAgIHBhcnNpbmdSdWxlcy5wdXNoKHJ1bGUpO1xuICB9KTtcblxuICBsZXQgX2NvbXBvbmVudElkOiBzdHJpbmc7XG4gIGxldCBfc2VsZWN0b3I6IHN0cmluZztcbiAgbGV0IF9zZWxlY3RvclJlZ2V4cDogUmVnRXhwO1xuICBsZXQgX2NvbnNlY3V0aXZlU2VsZlJlZlJlZ0V4cDogUmVnRXhwO1xuXG4gIGNvbnN0IHNlbGZSZWZlcmVuY2VSZXBsYWNlciA9IChtYXRjaCwgb2Zmc2V0LCBzdHJpbmcpID0+IHtcbiAgICBpZiAoXG4gICAgICAvLyBkbyBub3QgcmVwbGFjZSB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBpZiBpdCBpcyBjb21wbGV4IChoYXMgYSBtb2RpZmllcilcbiAgICAgIChvZmZzZXQgPT09IDAgPyBDT01QTEVYX1NFTEVDVE9SX1BSRUZJWC5pbmRleE9mKHN0cmluZ1tfc2VsZWN0b3IubGVuZ3RoXSkgPT09IC0xIDogdHJ1ZSkgJiZcbiAgICAgIC8vIG5vIGNvbnNlY3V0aXZlIHNlbGYgcmVmcyAoLmIuYik7IHRoYXQgaXMgYSBwcmVjZWRlbmNlIGJvb3N0IGFuZCB0cmVhdGVkIGRpZmZlcmVudGx5XG4gICAgICAhc3RyaW5nLm1hdGNoKF9jb25zZWN1dGl2ZVNlbGZSZWZSZWdFeHApXG4gICAgKSB7XG4gICAgICByZXR1cm4gYC4ke19jb21wb25lbnRJZH1gO1xuICAgIH1cblxuICAgIHJldHVybiBtYXRjaDtcbiAgfTtcblxuICAvKipcbiAgICogV2hlbiB3cml0aW5nIGEgc3R5bGUgbGlrZVxuICAgKlxuICAgKiAmICsgJiB7XG4gICAqICAgY29sb3I6IHJlZDtcbiAgICogfVxuICAgKlxuICAgKiBUaGUgc2Vjb25kIGFtcGVyc2FuZCBzaG91bGQgYmUgYSByZWZlcmVuY2UgdG8gdGhlIHN0YXRpYyBjb21wb25lbnQgY2xhc3MuIHN0eWxpc1xuICAgKiBoYXMgbm8ga25vd2xlZGdlIG9mIHN0YXRpYyBjbGFzcyBzbyB3ZSBoYXZlIHRvIGludGVsbGlnZW50bHkgcmVwbGFjZSB0aGUgYmFzZSBzZWxlY3Rvci5cbiAgICpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3RoeXN1bHRhbi9zdHlsaXMuanMvdHJlZS92My41LjQjcGx1Z2lucyA8LSBtb3JlIGluZm8gYWJvdXQgdGhlIGNvbnRleHQgcGhhc2UgdmFsdWVzXG4gICAqIFwiMlwiIG1lYW5zIHRoaXMgcGx1Z2luIGlzIHRha2luZyBlZmZlY3QgYXQgdGhlIHZlcnkgZW5kIGFmdGVyIGFsbCBvdGhlciBwcm9jZXNzaW5nIGlzIGNvbXBsZXRlXG4gICAqL1xuICBjb25zdCBzZWxmUmVmZXJlbmNlUmVwbGFjZW1lbnRQbHVnaW4gPSAoY29udGV4dCwgXywgc2VsZWN0b3JzKSA9PiB7XG4gICAgaWYgKGNvbnRleHQgPT09IDIgJiYgc2VsZWN0b3JzLmxlbmd0aCAmJiBzZWxlY3RvcnNbMF0ubGFzdEluZGV4T2YoX3NlbGVjdG9yKSA+IDApIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgc2VsZWN0b3JzWzBdID0gc2VsZWN0b3JzWzBdLnJlcGxhY2UoX3NlbGVjdG9yUmVnZXhwLCBzZWxmUmVmZXJlbmNlUmVwbGFjZXIpO1xuICAgIH1cbiAgfTtcblxuICBzdHlsaXMudXNlKFsuLi5wbHVnaW5zLCBzZWxmUmVmZXJlbmNlUmVwbGFjZW1lbnRQbHVnaW4sIHBhcnNlUnVsZXNQbHVnaW4sIHJldHVyblJ1bGVzUGx1Z2luXSk7XG5cbiAgZnVuY3Rpb24gc3RyaW5naWZ5UnVsZXMoY3NzLCBzZWxlY3RvciwgcHJlZml4LCBjb21wb25lbnRJZCA9ICcmJyk6IFN0cmluZ2lmaWVyIHtcbiAgICBjb25zdCBmbGF0Q1NTID0gY3NzLnJlcGxhY2UoQ09NTUVOVF9SRUdFWCwgJycpO1xuICAgIGNvbnN0IGNzc1N0ciA9IHNlbGVjdG9yICYmIHByZWZpeCA/IGAke3ByZWZpeH0gJHtzZWxlY3Rvcn0geyAke2ZsYXRDU1N9IH1gIDogZmxhdENTUztcblxuICAgIC8vIHN0eWxpcyBoYXMgbm8gY29uY2VwdCBvZiBzdGF0ZSB0byBiZSBwYXNzZWQgdG8gcGx1Z2luc1xuICAgIC8vIGJ1dCBzaW5jZSBKUyBpcyBzaW5nbGUtdGhyZWFkZWQsIHdlIGNhbiByZWx5IG9uIHRoYXQgdG8gZW5zdXJlXG4gICAgLy8gdGhlc2UgcHJvcGVydGllcyBzdGF5IGluIHN5bmMgd2l0aCB0aGUgY3VycmVudCBzdHlsaXMgcnVuXG4gICAgX2NvbXBvbmVudElkID0gY29tcG9uZW50SWQ7XG4gICAgX3NlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgX3NlbGVjdG9yUmVnZXhwID0gbmV3IFJlZ0V4cChgXFxcXCR7X3NlbGVjdG9yfVxcXFxiYCwgJ2cnKTtcbiAgICBfY29uc2VjdXRpdmVTZWxmUmVmUmVnRXhwID0gbmV3IFJlZ0V4cChgKFxcXFwke19zZWxlY3Rvcn1cXFxcYil7Mix9YCk7XG5cbiAgICByZXR1cm4gc3R5bGlzKHByZWZpeCB8fCAhc2VsZWN0b3IgPyAnJyA6IHNlbGVjdG9yLCBjc3NTdHIpO1xuICB9XG5cbiAgc3RyaW5naWZ5UnVsZXMuaGFzaCA9IHBsdWdpbnMubGVuZ3RoXG4gICAgPyBwbHVnaW5zXG4gICAgICAgIC5yZWR1Y2UoKGFjYywgcGx1Z2luKSA9PiB7XG4gICAgICAgICAgaWYgKCFwbHVnaW4ubmFtZSkge1xuICAgICAgICAgICAgdGhyb3dTdHlsZWRFcnJvcigxNSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHBoYXNoKGFjYywgcGx1Z2luLm5hbWUpO1xuICAgICAgICB9LCBTRUVEKVxuICAgICAgICAudG9TdHJpbmcoKVxuICAgIDogJyc7XG5cbiAgcmV0dXJuIHN0cmluZ2lmeVJ1bGVzO1xufVxuIiwiLyoqXG4gKiBNSVQgTGljZW5zZVxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNiBTdWx0YW4gVGFyaW1vXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZlxuICogdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSxcbiAqIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vclxuICogc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuICogY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4gKiBPUiBJTVBMSUVEIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSxcbiAqIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1JcbiAqIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc2VydFJ1bGUpIHtcbiAgY29uc3QgZGVsaW1pdGVyID0gJy8qfCovJztcbiAgY29uc3QgbmVlZGxlID0gYCR7ZGVsaW1pdGVyfX1gO1xuXG4gIGZ1bmN0aW9uIHRvU2hlZXQoYmxvY2spIHtcbiAgICBpZiAoYmxvY2spIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGluc2VydFJ1bGUoYCR7YmxvY2t9fWApO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcnVsZVNoZWV0KFxuICAgIGNvbnRleHQsXG4gICAgY29udGVudCxcbiAgICBzZWxlY3RvcnMsXG4gICAgcGFyZW50cyxcbiAgICBsaW5lLFxuICAgIGNvbHVtbixcbiAgICBsZW5ndGgsXG4gICAgbnMsXG4gICAgZGVwdGgsXG4gICAgYXRcbiAgKSB7XG4gICAgc3dpdGNoIChjb250ZXh0KSB7XG4gICAgICAvLyBwcm9wZXJ0eVxuICAgICAgY2FzZSAxOlxuICAgICAgICAvLyBAaW1wb3J0XG4gICAgICAgIGlmIChkZXB0aCA9PT0gMCAmJiBjb250ZW50LmNoYXJDb2RlQXQoMCkgPT09IDY0KSByZXR1cm4gaW5zZXJ0UnVsZShgJHtjb250ZW50fTtgKSwgJyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgLy8gc2VsZWN0b3JcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgaWYgKG5zID09PSAwKSByZXR1cm4gY29udGVudCArIGRlbGltaXRlcjtcbiAgICAgICAgYnJlYWs7XG4gICAgICAvLyBhdC1ydWxlXG4gICAgICBjYXNlIDM6XG4gICAgICAgIHN3aXRjaCAobnMpIHtcbiAgICAgICAgICAvLyBAZm9udC1mYWNlLCBAcGFnZVxuICAgICAgICAgIGNhc2UgMTAyOlxuICAgICAgICAgIGNhc2UgMTEyOlxuICAgICAgICAgICAgcmV0dXJuIGluc2VydFJ1bGUoc2VsZWN0b3JzWzBdICsgY29udGVudCksICcnO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gY29udGVudCArIChhdCA9PT0gMCA/IGRlbGltaXRlciA6ICcnKTtcbiAgICAgICAgfVxuICAgICAgY2FzZSAtMjpcbiAgICAgICAgY29udGVudC5zcGxpdChuZWVkbGUpLmZvckVhY2godG9TaGVldCk7XG4gICAgfVxuICB9O1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCBSZWFjdCwgeyB0eXBlIENvbnRleHQsIHR5cGUgTm9kZSwgdXNlQ29udGV4dCwgdXNlRWZmZWN0LCB1c2VNZW1vLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzaGFsbG93ZXF1YWwgZnJvbSAnc2hhbGxvd2VxdWFsJztcbmltcG9ydCBTdHlsZVNoZWV0IGZyb20gJy4uL3NoZWV0JztcbmltcG9ydCB0eXBlIHsgU3RyaW5naWZpZXIgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgY3JlYXRlU3R5bGlzSW5zdGFuY2UgZnJvbSAnLi4vdXRpbHMvc3R5bGlzJztcblxudHlwZSBQcm9wcyA9IHtcbiAgY2hpbGRyZW4/OiBOb2RlLFxuICBkaXNhYmxlQ1NTT01JbmplY3Rpb24/OiBib29sZWFuLFxuICBkaXNhYmxlVmVuZG9yUHJlZml4ZXM/OiBib29sZWFuLFxuICBzaGVldD86IFN0eWxlU2hlZXQsXG4gIHN0eWxpc1BsdWdpbnM/OiBBcnJheTxGdW5jdGlvbj4sXG4gIHRhcmdldD86IEhUTUxFbGVtZW50LFxufTtcblxuZXhwb3J0IGNvbnN0IFN0eWxlU2hlZXRDb250ZXh0OiBDb250ZXh0PFN0eWxlU2hlZXQgfCB2b2lkPiA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoKTtcbmV4cG9ydCBjb25zdCBTdHlsZVNoZWV0Q29uc3VtZXIgPSBTdHlsZVNoZWV0Q29udGV4dC5Db25zdW1lcjtcbmV4cG9ydCBjb25zdCBTdHlsaXNDb250ZXh0OiBDb250ZXh0PFN0cmluZ2lmaWVyIHwgdm9pZD4gPSBSZWFjdC5jcmVhdGVDb250ZXh0KCk7XG5leHBvcnQgY29uc3QgU3R5bGlzQ29uc3VtZXIgPSBTdHlsaXNDb250ZXh0LkNvbnN1bWVyO1xuXG5leHBvcnQgY29uc3QgbWFzdGVyU2hlZXQ6IFN0eWxlU2hlZXQgPSBuZXcgU3R5bGVTaGVldCgpO1xuZXhwb3J0IGNvbnN0IG1hc3RlclN0eWxpczogU3RyaW5naWZpZXIgPSBjcmVhdGVTdHlsaXNJbnN0YW5jZSgpO1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlU3R5bGVTaGVldCgpOiBTdHlsZVNoZWV0IHtcbiAgcmV0dXJuIHVzZUNvbnRleHQoU3R5bGVTaGVldENvbnRleHQpIHx8IG1hc3RlclNoZWV0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlU3R5bGlzKCk6IFN0cmluZ2lmaWVyIHtcbiAgcmV0dXJuIHVzZUNvbnRleHQoU3R5bGlzQ29udGV4dCkgfHwgbWFzdGVyU3R5bGlzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTdHlsZVNoZWV0TWFuYWdlcihwcm9wczogUHJvcHMpIHtcbiAgY29uc3QgW3BsdWdpbnMsIHNldFBsdWdpbnNdID0gdXNlU3RhdGUocHJvcHMuc3R5bGlzUGx1Z2lucyk7XG4gIGNvbnN0IGNvbnRleHRTdHlsZVNoZWV0ID0gdXNlU3R5bGVTaGVldCgpO1xuXG4gIGNvbnN0IHN0eWxlU2hlZXQgPSB1c2VNZW1vKCgpID0+IHtcbiAgICBsZXQgc2hlZXQgPSBjb250ZXh0U3R5bGVTaGVldDtcblxuICAgIGlmIChwcm9wcy5zaGVldCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICBzaGVldCA9IHByb3BzLnNoZWV0O1xuICAgIH0gZWxzZSBpZiAocHJvcHMudGFyZ2V0KSB7XG4gICAgICBzaGVldCA9IHNoZWV0LnJlY29uc3RydWN0V2l0aE9wdGlvbnMoeyB0YXJnZXQ6IHByb3BzLnRhcmdldCB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgaWYgKHByb3BzLmRpc2FibGVDU1NPTUluamVjdGlvbikge1xuICAgICAgc2hlZXQgPSBzaGVldC5yZWNvbnN0cnVjdFdpdGhPcHRpb25zKHsgdXNlQ1NTT01JbmplY3Rpb246IGZhbHNlIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBzaGVldDtcbiAgfSwgW3Byb3BzLmRpc2FibGVDU1NPTUluamVjdGlvbiwgcHJvcHMuc2hlZXQsIHByb3BzLnRhcmdldF0pO1xuXG4gIGNvbnN0IHN0eWxpcyA9IHVzZU1lbW8oXG4gICAgKCkgPT5cbiAgICAgIGNyZWF0ZVN0eWxpc0luc3RhbmNlKHtcbiAgICAgICAgb3B0aW9uczogeyBwcmVmaXg6ICFwcm9wcy5kaXNhYmxlVmVuZG9yUHJlZml4ZXMgfSxcbiAgICAgICAgcGx1Z2lucyxcbiAgICAgIH0pLFxuICAgIFtwcm9wcy5kaXNhYmxlVmVuZG9yUHJlZml4ZXMsIHBsdWdpbnNdXG4gICk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIXNoYWxsb3dlcXVhbChwbHVnaW5zLCBwcm9wcy5zdHlsaXNQbHVnaW5zKSkgc2V0UGx1Z2lucyhwcm9wcy5zdHlsaXNQbHVnaW5zKTtcbiAgfSwgW3Byb3BzLnN0eWxpc1BsdWdpbnNdKTtcblxuICByZXR1cm4gKFxuICAgIDxTdHlsZVNoZWV0Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17c3R5bGVTaGVldH0+XG4gICAgICA8U3R5bGlzQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17c3R5bGlzfT5cbiAgICAgICAge3Byb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcbiAgICAgICAgICA/IFJlYWN0LkNoaWxkcmVuLm9ubHkocHJvcHMuY2hpbGRyZW4pXG4gICAgICAgICAgOiBwcm9wcy5jaGlsZHJlbn1cbiAgICAgIDwvU3R5bGlzQ29udGV4dC5Qcm92aWRlcj5cbiAgICA8L1N0eWxlU2hlZXRDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCBTdHlsZVNoZWV0IGZyb20gJy4uL3NoZWV0JztcbmltcG9ydCB7IHR5cGUgU3RyaW5naWZpZXIgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgdGhyb3dTdHlsZWRFcnJvciBmcm9tICcuLi91dGlscy9lcnJvcic7XG5pbXBvcnQgeyBtYXN0ZXJTdHlsaXMgfSBmcm9tICcuL1N0eWxlU2hlZXRNYW5hZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgS2V5ZnJhbWVzIHtcbiAgaWQ6IHN0cmluZztcblxuICBuYW1lOiBzdHJpbmc7XG5cbiAgcnVsZXM6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIHJ1bGVzOiBzdHJpbmcpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuaWQgPSBgc2Mta2V5ZnJhbWVzLSR7bmFtZX1gO1xuICAgIHRoaXMucnVsZXMgPSBydWxlcztcbiAgfVxuXG4gIGluamVjdCA9IChzdHlsZVNoZWV0OiBTdHlsZVNoZWV0LCBzdHlsaXNJbnN0YW5jZTogU3RyaW5naWZpZXIgPSBtYXN0ZXJTdHlsaXMpID0+IHtcbiAgICBjb25zdCByZXNvbHZlZE5hbWUgPSB0aGlzLm5hbWUgKyBzdHlsaXNJbnN0YW5jZS5oYXNoO1xuXG4gICAgaWYgKCFzdHlsZVNoZWV0Lmhhc05hbWVGb3JJZCh0aGlzLmlkLCByZXNvbHZlZE5hbWUpKSB7XG4gICAgICBzdHlsZVNoZWV0Lmluc2VydFJ1bGVzKFxuICAgICAgICB0aGlzLmlkLFxuICAgICAgICByZXNvbHZlZE5hbWUsXG4gICAgICAgIHN0eWxpc0luc3RhbmNlKHRoaXMucnVsZXMsIHJlc29sdmVkTmFtZSwgJ0BrZXlmcmFtZXMnKVxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgdG9TdHJpbmcgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHRocm93U3R5bGVkRXJyb3IoMTIsIFN0cmluZyh0aGlzLm5hbWUpKTtcbiAgfTtcblxuICBnZXROYW1lKHN0eWxpc0luc3RhbmNlOiBTdHJpbmdpZmllciA9IG1hc3RlclN0eWxpcykge1xuICAgIHJldHVybiB0aGlzLm5hbWUgKyBzdHlsaXNJbnN0YW5jZS5oYXNoO1xuICB9XG59XG4iLCIvLyBAZmxvd1xuXG4vKipcbiAqIGlubGluZWQgdmVyc2lvbiBvZlxuICogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2ZianMvYmxvYi9tYXN0ZXIvcGFja2FnZXMvZmJqcy9zcmMvY29yZS9oeXBoZW5hdGVTdHlsZU5hbWUuanNcbiAqL1xuXG5jb25zdCB1cHBlcmNhc2VDaGVjayA9IC8oW0EtWl0pLztcbmNvbnN0IHVwcGVyY2FzZVBhdHRlcm4gPSAvKFtBLVpdKS9nO1xuY29uc3QgbXNQYXR0ZXJuID0gL15tcy0vO1xuY29uc3QgcHJlZml4QW5kTG93ZXJDYXNlID0gKGNoYXI6IHN0cmluZyk6IHN0cmluZyA9PiBgLSR7Y2hhci50b0xvd2VyQ2FzZSgpfWA7XG5cbi8qKlxuICogSHlwaGVuYXRlcyBhIGNhbWVsY2FzZWQgQ1NTIHByb3BlcnR5IG5hbWUsIGZvciBleGFtcGxlOlxuICpcbiAqICAgPiBoeXBoZW5hdGVTdHlsZU5hbWUoJ2JhY2tncm91bmRDb2xvcicpXG4gKiAgIDwgXCJiYWNrZ3JvdW5kLWNvbG9yXCJcbiAqICAgPiBoeXBoZW5hdGVTdHlsZU5hbWUoJ01velRyYW5zaXRpb24nKVxuICogICA8IFwiLW1vei10cmFuc2l0aW9uXCJcbiAqICAgPiBoeXBoZW5hdGVTdHlsZU5hbWUoJ21zVHJhbnNpdGlvbicpXG4gKiAgIDwgXCItbXMtdHJhbnNpdGlvblwiXG4gKlxuICogQXMgTW9kZXJuaXpyIHN1Z2dlc3RzIChodHRwOi8vbW9kZXJuaXpyLmNvbS9kb2NzLyNwcmVmaXhlZCksIGFuIGBtc2AgcHJlZml4XG4gKiBpcyBjb252ZXJ0ZWQgdG8gYC1tcy1gLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaHlwaGVuYXRlU3R5bGVOYW1lKHN0cmluZzogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIHVwcGVyY2FzZUNoZWNrLnRlc3Qoc3RyaW5nKVxuICA/IHN0cmluZ1xuICAgIC5yZXBsYWNlKHVwcGVyY2FzZVBhdHRlcm4sIHByZWZpeEFuZExvd2VyQ2FzZSlcbiAgICAucmVwbGFjZShtc1BhdHRlcm4sICctbXMtJylcbiAgOiBzdHJpbmc7XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHsgaXNFbGVtZW50IH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IGdldENvbXBvbmVudE5hbWUgZnJvbSAnLi9nZXRDb21wb25lbnROYW1lJztcbmltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbic7XG5pbXBvcnQgaXNTdGF0ZWxlc3NGdW5jdGlvbiBmcm9tICcuL2lzU3RhdGVsZXNzRnVuY3Rpb24nO1xuaW1wb3J0IGlzUGxhaW5PYmplY3QgZnJvbSAnLi9pc1BsYWluT2JqZWN0JztcbmltcG9ydCBpc1N0eWxlZENvbXBvbmVudCBmcm9tICcuL2lzU3R5bGVkQ29tcG9uZW50JztcbmltcG9ydCBLZXlmcmFtZXMgZnJvbSAnLi4vbW9kZWxzL0tleWZyYW1lcyc7XG5pbXBvcnQgaHlwaGVuYXRlIGZyb20gJy4vaHlwaGVuYXRlU3R5bGVOYW1lJztcbmltcG9ydCBhZGRVbml0SWZOZWVkZWQgZnJvbSAnLi9hZGRVbml0SWZOZWVkZWQnO1xuaW1wb3J0IHsgdHlwZSBTdHJpbmdpZmllciB9IGZyb20gJy4uL3R5cGVzJztcblxuLyoqXG4gKiBJdCdzIGZhbHNpc2ggbm90IGZhbHN5IGJlY2F1c2UgMCBpcyBhbGxvd2VkLlxuICovXG5jb25zdCBpc0ZhbHNpc2ggPSBjaHVuayA9PiBjaHVuayA9PT0gdW5kZWZpbmVkIHx8IGNodW5rID09PSBudWxsIHx8IGNodW5rID09PSBmYWxzZSB8fCBjaHVuayA9PT0gJyc7XG5cbmV4cG9ydCBjb25zdCBvYmpUb0Nzc0FycmF5ID0gKG9iajogT2JqZWN0LCBwcmV2S2V5Pzogc3RyaW5nKTogQXJyYXk8c3RyaW5nIHwgRnVuY3Rpb24+ID0+IHtcbiAgY29uc3QgcnVsZXMgPSBbXTtcblxuICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICBpZiAoIW9iai5oYXNPd25Qcm9wZXJ0eShrZXkpIHx8IGlzRmFsc2lzaChvYmpba2V5XSkpIGNvbnRpbnVlO1xuXG4gICAgaWYgKChBcnJheS5pc0FycmF5KG9ialtrZXldKSAmJiBvYmpba2V5XS5pc0NzcykgfHwgaXNGdW5jdGlvbihvYmpba2V5XSkpIHtcbiAgICAgIHJ1bGVzLnB1c2goYCR7aHlwaGVuYXRlKGtleSl9OmAsIG9ialtrZXldLCAnOycpO1xuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChvYmpba2V5XSkpIHtcbiAgICAgIHJ1bGVzLnB1c2goLi4ub2JqVG9Dc3NBcnJheShvYmpba2V5XSwga2V5KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJ1bGVzLnB1c2goYCR7aHlwaGVuYXRlKGtleSl9OiAke2FkZFVuaXRJZk5lZWRlZChrZXksIG9ialtrZXldKX07YCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHByZXZLZXkgPyBbYCR7cHJldktleX0ge2AsIC4uLnJ1bGVzLCAnfSddIDogcnVsZXM7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmbGF0dGVuKFxuICBjaHVuazogYW55LFxuICBleGVjdXRpb25Db250ZXh0OiA/T2JqZWN0LFxuICBzdHlsZVNoZWV0OiA/T2JqZWN0LFxuICBzdHlsaXNJbnN0YW5jZTogP1N0cmluZ2lmaWVyXG4pOiBhbnkge1xuICBpZiAoQXJyYXkuaXNBcnJheShjaHVuaykpIHtcbiAgICBjb25zdCBydWxlU2V0ID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2h1bmsubGVuZ3RoLCByZXN1bHQ7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgcmVzdWx0ID0gZmxhdHRlbihjaHVua1tpXSwgZXhlY3V0aW9uQ29udGV4dCwgc3R5bGVTaGVldCwgc3R5bGlzSW5zdGFuY2UpO1xuXG4gICAgICBpZiAocmVzdWx0ID09PSAnJykgY29udGludWU7XG4gICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdCkpIHJ1bGVTZXQucHVzaCguLi5yZXN1bHQpO1xuICAgICAgZWxzZSBydWxlU2V0LnB1c2gocmVzdWx0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcnVsZVNldDtcbiAgfVxuXG4gIGlmIChpc0ZhbHNpc2goY2h1bmspKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgLyogSGFuZGxlIG90aGVyIGNvbXBvbmVudHMgKi9cbiAgaWYgKGlzU3R5bGVkQ29tcG9uZW50KGNodW5rKSkge1xuICAgIHJldHVybiBgLiR7Y2h1bmsuc3R5bGVkQ29tcG9uZW50SWR9YDtcbiAgfVxuXG4gIC8qIEVpdGhlciBleGVjdXRlIG9yIGRlZmVyIHRoZSBmdW5jdGlvbiAqL1xuICBpZiAoaXNGdW5jdGlvbihjaHVuaykpIHtcbiAgICBpZiAoaXNTdGF0ZWxlc3NGdW5jdGlvbihjaHVuaykgJiYgZXhlY3V0aW9uQ29udGV4dCkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gY2h1bmsoZXhlY3V0aW9uQ29udGV4dCk7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzRWxlbWVudChyZXN1bHQpKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICBgJHtnZXRDb21wb25lbnROYW1lKFxuICAgICAgICAgICAgY2h1bmtcbiAgICAgICAgICApfSBpcyBub3QgYSBzdHlsZWQgY29tcG9uZW50IGFuZCBjYW5ub3QgYmUgcmVmZXJyZWQgdG8gdmlhIGNvbXBvbmVudCBzZWxlY3Rvci4gU2VlIGh0dHBzOi8vd3d3LnN0eWxlZC1jb21wb25lbnRzLmNvbS9kb2NzL2FkdmFuY2VkI3JlZmVycmluZy10by1vdGhlci1jb21wb25lbnRzIGZvciBtb3JlIGRldGFpbHMuYFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmxhdHRlbihyZXN1bHQsIGV4ZWN1dGlvbkNvbnRleHQsIHN0eWxlU2hlZXQsIHN0eWxpc0luc3RhbmNlKTtcbiAgICB9IGVsc2UgcmV0dXJuIGNodW5rO1xuICB9XG5cbiAgaWYgKGNodW5rIGluc3RhbmNlb2YgS2V5ZnJhbWVzKSB7XG4gICAgaWYgKHN0eWxlU2hlZXQpIHtcbiAgICAgIGNodW5rLmluamVjdChzdHlsZVNoZWV0LCBzdHlsaXNJbnN0YW5jZSk7XG4gICAgICByZXR1cm4gY2h1bmsuZ2V0TmFtZShzdHlsaXNJbnN0YW5jZSk7XG4gICAgfSBlbHNlIHJldHVybiBjaHVuaztcbiAgfVxuXG4gIC8qIEhhbmRsZSBvYmplY3RzICovXG4gIHJldHVybiBpc1BsYWluT2JqZWN0KGNodW5rKSA/IG9ialRvQ3NzQXJyYXkoY2h1bmspIDogY2h1bmsudG9TdHJpbmcoKTtcbn1cbiIsIi8vIEBmbG93XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1N0YXRlbGVzc0Z1bmN0aW9uKHRlc3Q6IGFueSk6IGJvb2xlYW4ge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiB0ZXN0ID09PSAnZnVuY3Rpb24nXG4gICAgJiYgIShcbiAgICAgIHRlc3QucHJvdG90eXBlXG4gICAgICAmJiB0ZXN0LnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50XG4gICAgKVxuICApO1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCB1bml0bGVzcyBmcm9tICdAZW1vdGlvbi91bml0bGVzcyc7XG5cbi8vIFRha2VuIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvYjg3YWFiZGZlMWI3NDYxZTczMzFhYmIzNjAxZDllNmJiMjc1NDRiYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL3NoYXJlZC9kYW5nZXJvdXNTdHlsZVZhbHVlLmpzXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRVbml0SWZOZWVkZWQobmFtZTogc3RyaW5nLCB2YWx1ZTogYW55KTogYW55IHtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FtaWxhamFjay9lc2xpbnQtcGx1Z2luLWZsb3d0eXBlLWVycm9ycy9pc3N1ZXMvMTMzXG4gIC8vICRGbG93Rml4TWVcbiAgaWYgKHZhbHVlID09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicgfHwgdmFsdWUgPT09ICcnKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgdmFsdWUgIT09IDAgJiYgIShuYW1lIGluIHVuaXRsZXNzKSkge1xuICAgIHJldHVybiBgJHt2YWx1ZX1weGA7IC8vIFByZXN1bWVzIGltcGxpY2l0ICdweCcgc3VmZml4IGZvciB1bml0bGVzcyBudW1iZXJzXG4gIH1cblxuICByZXR1cm4gU3RyaW5nKHZhbHVlKS50cmltKCk7XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IGludGVybGVhdmUgZnJvbSAnLi4vdXRpbHMvaW50ZXJsZWF2ZSc7XG5pbXBvcnQgaXNQbGFpbk9iamVjdCBmcm9tICcuLi91dGlscy9pc1BsYWluT2JqZWN0JztcbmltcG9ydCB7IEVNUFRZX0FSUkFZIH0gZnJvbSAnLi4vdXRpbHMvZW1wdGllcyc7XG5pbXBvcnQgaXNGdW5jdGlvbiBmcm9tICcuLi91dGlscy9pc0Z1bmN0aW9uJztcbmltcG9ydCBmbGF0dGVuIGZyb20gJy4uL3V0aWxzL2ZsYXR0ZW4nO1xuaW1wb3J0IHR5cGUgeyBJbnRlcnBvbGF0aW9uLCBSdWxlU2V0LCBTdHlsZXMgfSBmcm9tICcuLi90eXBlcyc7XG5cbi8qKlxuICogVXNlZCB3aGVuIGZsYXR0ZW5pbmcgb2JqZWN0IHN0eWxlcyB0byBkZXRlcm1pbmUgaWYgd2Ugc2hvdWxkXG4gKiBleHBhbmQgYW4gYXJyYXkgb2Ygc3R5bGVzLlxuICovXG5jb25zdCBhZGRUYWcgPSBhcmcgPT4ge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgYXJnLmlzQ3NzID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gYXJnO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3NzKHN0eWxlczogU3R5bGVzLCAuLi5pbnRlcnBvbGF0aW9uczogQXJyYXk8SW50ZXJwb2xhdGlvbj4pOiBSdWxlU2V0IHtcbiAgaWYgKGlzRnVuY3Rpb24oc3R5bGVzKSB8fCBpc1BsYWluT2JqZWN0KHN0eWxlcykpIHtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgcmV0dXJuIGFkZFRhZyhmbGF0dGVuKGludGVybGVhdmUoRU1QVFlfQVJSQVksIFtzdHlsZXMsIC4uLmludGVycG9sYXRpb25zXSkpKTtcbiAgfVxuXG4gIGlmIChpbnRlcnBvbGF0aW9ucy5sZW5ndGggPT09IDAgJiYgc3R5bGVzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2Ygc3R5bGVzWzBdID09PSAnc3RyaW5nJykge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICByZXR1cm4gc3R5bGVzO1xuICB9XG5cbiAgLy8gJEZsb3dGaXhNZVxuICByZXR1cm4gYWRkVGFnKGZsYXR0ZW4oaW50ZXJsZWF2ZShzdHlsZXMsIGludGVycG9sYXRpb25zKSkpO1xufVxuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHsgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuXG5jb25zdCBpbnZhbGlkSG9va0NhbGxSZSA9IC9pbnZhbGlkIGhvb2sgY2FsbC9pO1xuY29uc3Qgc2VlbiA9IG5ldyBTZXQoKTtcblxuZXhwb3J0IGNvbnN0IGNoZWNrRHluYW1pY0NyZWF0aW9uID0gKGRpc3BsYXlOYW1lOiBzdHJpbmcsIGNvbXBvbmVudElkPzogc3RyaW5nKSA9PiB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uc3QgcGFyc2VkSWRTdHJpbmcgPSBjb21wb25lbnRJZCA/IGAgd2l0aCB0aGUgaWQgb2YgXCIke2NvbXBvbmVudElkfVwiYCA6ICcnO1xuICAgIGNvbnN0IG1lc3NhZ2UgPVxuICAgICAgYFRoZSBjb21wb25lbnQgJHtkaXNwbGF5TmFtZX0ke3BhcnNlZElkU3RyaW5nfSBoYXMgYmVlbiBjcmVhdGVkIGR5bmFtaWNhbGx5LlxcbmAgK1xuICAgICAgXCJZb3UgbWF5IHNlZSB0aGlzIHdhcm5pbmcgYmVjYXVzZSB5b3UndmUgY2FsbGVkIHN0eWxlZCBpbnNpZGUgYW5vdGhlciBjb21wb25lbnQuXFxuXCIgK1xuICAgICAgJ1RvIHJlc29sdmUgdGhpcyBvbmx5IGNyZWF0ZSBuZXcgU3R5bGVkQ29tcG9uZW50cyBvdXRzaWRlIG9mIGFueSByZW5kZXIgbWV0aG9kIGFuZCBmdW5jdGlvbiBjb21wb25lbnQuJztcblxuICAgIC8vIElmIGEgaG9vayBpcyBjYWxsZWQgb3V0c2lkZSBvZiBhIGNvbXBvbmVudDpcbiAgICAvLyBSZWFjdCAxNyBhbmQgZWFybGllciB0aHJvdyBhbiBlcnJvclxuICAgIC8vIFJlYWN0IDE4IGFuZCBhYm92ZSB1c2UgY29uc29sZS5lcnJvclxuXG4gICAgY29uc3Qgb3JpZ2luYWxDb25zb2xlRXJyb3IgPSBjb25zb2xlLmVycm9yIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgIHRyeSB7XG4gICAgICBsZXQgZGlkTm90Q2FsbEludmFsaWRIb29rID0gdHJ1ZVxuICAgICAgLyogJEZsb3dJZ25vcmVbY2Fubm90LXdyaXRlXSAqL1xuICAgICAgY29uc29sZS5lcnJvciA9IChjb25zb2xlRXJyb3JNZXNzYWdlLCAuLi5jb25zb2xlRXJyb3JBcmdzKSA9PiB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgLy8gVGhlIGVycm9yIGhlcmUgaXMgZXhwZWN0ZWQsIHNpbmNlIHdlJ3JlIGV4cGVjdGluZyBhbnl0aGluZyB0aGF0IHVzZXMgYGNoZWNrRHluYW1pY0NyZWF0aW9uYCB0b1xuICAgICAgLy8gYmUgY2FsbGVkIG91dHNpZGUgb2YgYSBSZWFjdCBjb21wb25lbnQuXG4gICAgICAgIGlmIChpbnZhbGlkSG9va0NhbGxSZS50ZXN0KGNvbnNvbGVFcnJvck1lc3NhZ2UpKSB7XG4gICAgICAgICAgZGlkTm90Q2FsbEludmFsaWRIb29rID0gZmFsc2VcbiAgICAgICAgICAvLyBUaGlzIHNob3VsZG4ndCBoYXBwZW4sIGJ1dCByZXNldHMgYHdhcm5pbmdTZWVuYCBpZiB3ZSBoYWQgdGhpcyBlcnJvciBoYXBwZW4gaW50ZXJtaXR0ZW50bHlcbiAgICAgICAgICBzZWVuLmRlbGV0ZShtZXNzYWdlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvcmlnaW5hbENvbnNvbGVFcnJvcihjb25zb2xlRXJyb3JNZXNzYWdlLCAuLi5jb25zb2xlRXJyb3JBcmdzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gV2UgcHVycG9zZWZ1bGx5IGNhbGwgYHVzZVJlZmAgb3V0c2lkZSBvZiBhIGNvbXBvbmVudCBhbmQgZXhwZWN0IGl0IHRvIHRocm93XG4gICAgICAvLyBJZiBpdCBkb2Vzbid0LCB0aGVuIHdlJ3JlIGluc2lkZSBhbm90aGVyIGNvbXBvbmVudC5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgICAgdXNlUmVmKCk7XG5cbiAgICAgIGlmIChkaWROb3RDYWxsSW52YWxpZEhvb2sgJiYgIXNlZW4uaGFzKG1lc3NhZ2UpKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbiAgICAgICAgc2Vlbi5hZGQobWVzc2FnZSk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIFRoZSBlcnJvciBoZXJlIGlzIGV4cGVjdGVkLCBzaW5jZSB3ZSdyZSBleHBlY3RpbmcgYW55dGhpbmcgdGhhdCB1c2VzIGBjaGVja0R5bmFtaWNDcmVhdGlvbmAgdG9cbiAgICAgIC8vIGJlIGNhbGxlZCBvdXRzaWRlIG9mIGEgUmVhY3QgY29tcG9uZW50LlxuICAgICAgaWYgKGludmFsaWRIb29rQ2FsbFJlLnRlc3QoZXJyb3IubWVzc2FnZSkpIHtcbiAgICAgICAgLy8gVGhpcyBzaG91bGRuJ3QgaGFwcGVuLCBidXQgcmVzZXRzIGB3YXJuaW5nU2VlbmAgaWYgd2UgaGFkIHRoaXMgZXJyb3IgaGFwcGVuIGludGVybWl0dGVudGx5XG4gICAgICAgIHNlZW4uZGVsZXRlKG1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICAvKiAkRmxvd0lnbm9yZVtjYW5ub3Qtd3JpdGVdICovXG4gICAgICBjb25zb2xlLmVycm9yID0gb3JpZ2luYWxDb25zb2xlRXJyb3I7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgIH1cbiAgfVxufTtcbiIsIi8vIEBmbG93XG5pbXBvcnQgeyBFTVBUWV9PQkpFQ1QgfSBmcm9tICcuL2VtcHRpZXMnO1xuXG50eXBlIFByb3BzID0ge1xuICB0aGVtZT86IGFueSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IChwcm9wczogUHJvcHMsIHByb3ZpZGVkVGhlbWU6IGFueSwgZGVmYXVsdFByb3BzOiBhbnkgPSBFTVBUWV9PQkpFQ1QpID0+IHtcbiAgcmV0dXJuIChwcm9wcy50aGVtZSAhPT0gZGVmYXVsdFByb3BzLnRoZW1lICYmIHByb3BzLnRoZW1lKSB8fCBwcm92aWRlZFRoZW1lIHx8IGRlZmF1bHRQcm9wcy50aGVtZTtcbn07XG4iLCIvLyBAZmxvd1xuXG4vLyBTb3VyY2U6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3NvbS0xLyNzZXJpYWxpemUtYW4taWRlbnRpZmllclxuLy8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCBub24tbGV0dGVyIGZpcnN0IHN5bWJvbHMgYXJlIG5vdCBzdXBwb3J0ZWRcbmNvbnN0IGVzY2FwZVJlZ2V4ID0gL1shXCIjJCUmJygpKissLi86Ozw9Pj9AW1xcXFxcXF1eYHt8fX4tXSsvZztcblxuY29uc3QgZGFzaGVzQXRFbmRzID0gLyheLXwtJCkvZztcblxuLyoqXG4gKiBUT0RPOiBFeHBsb3JlIHVzaW5nIENTUy5lc2NhcGUgd2hlbiBpdCBiZWNvbWVzIG1vcmUgYXZhaWxhYmxlXG4gKiBpbiBldmVyZ3JlZW4gYnJvd3NlcnMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVzY2FwZShzdHI6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiAoXG4gICAgc3RyXG4gICAgICAvLyBSZXBsYWNlIGFsbCBwb3NzaWJsZSBDU1Mgc2VsZWN0b3JzXG4gICAgICAucmVwbGFjZShlc2NhcGVSZWdleCwgJy0nKVxuXG4gICAgICAvLyBSZW1vdmUgZXh0cmFuZW91cyBoeXBoZW5zIGF0IHRoZSBzdGFydCBhbmQgZW5kXG4gICAgICAucmVwbGFjZShkYXNoZXNBdEVuZHMsICcnKVxuICApO1xufVxuIiwiLy8gQGZsb3dcbi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgZ2VuZXJhdGVBbHBoYWJldGljTmFtZSBmcm9tICcuL2dlbmVyYXRlQWxwaGFiZXRpY05hbWUnO1xuaW1wb3J0IHsgaGFzaCB9IGZyb20gJy4vaGFzaCc7XG5cbmV4cG9ydCBkZWZhdWx0IChzdHI6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIHJldHVybiBnZW5lcmF0ZUFscGhhYmV0aWNOYW1lKGhhc2goc3RyKSA+Pj4gMCk7XG59O1xuIiwiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgSVN0eWxlZENvbXBvbmVudCB9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNUYWcodGFyZ2V0OiAkUHJvcGVydHlUeXBlPElTdHlsZWRDb21wb25lbnQsICd0YXJnZXQnPik6IGJvb2xlYW4gJWNoZWNrcyB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHRhcmdldCA9PT0gJ3N0cmluZycgJiZcbiAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJ1xuICAgICAgPyB0YXJnZXQuY2hhckF0KDApID09PSB0YXJnZXQuY2hhckF0KDApLnRvTG93ZXJDYXNlKClcbiAgICAgIDogdHJ1ZSlcbiAgKTtcbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlICovXG4vKipcbiAgbWl4aW4tZGVlcDsgaHR0cHM6Ly9naXRodWIuY29tL2pvbnNjaGxpbmtlcnQvbWl4aW4tZGVlcFxuICBJbmxpbmVkIHN1Y2ggdGhhdCBpdCB3aWxsIGJlIGNvbnNpc3RlbnRseSB0cmFuc3BpbGVkIHRvIGFuIElFLWNvbXBhdGlibGUgc3ludGF4LlxuXG4gIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXG4gIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBKb24gU2NobGlua2VydC5cblxuICBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG4gIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG4gIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAgVEhFIFNPRlRXQVJFLlxuKi9cblxuY29uc3QgaXNPYmplY3QgPSB2YWwgPT4ge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnICYmIHZhbCAhPT0gbnVsbCAmJiAhQXJyYXkuaXNBcnJheSh2YWwpKVxuICApO1xufTtcblxuY29uc3QgaXNWYWxpZEtleSA9IGtleSA9PiB7XG4gIHJldHVybiBrZXkgIT09ICdfX3Byb3RvX18nICYmIGtleSAhPT0gJ2NvbnN0cnVjdG9yJyAmJiBrZXkgIT09ICdwcm90b3R5cGUnO1xufTtcblxuZnVuY3Rpb24gbWl4aW4odGFyZ2V0LCB2YWwsIGtleSkge1xuICBjb25zdCBvYmogPSB0YXJnZXRba2V5XTtcbiAgaWYgKGlzT2JqZWN0KHZhbCkgJiYgaXNPYmplY3Qob2JqKSkge1xuICAgIG1peGluRGVlcChvYmosIHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWl4aW5EZWVwKHRhcmdldCwgLi4ucmVzdCkge1xuICBmb3IgKGNvbnN0IG9iaiBvZiByZXN0KSB7XG4gICAgaWYgKGlzT2JqZWN0KG9iaikpIHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgICAgICBpZiAoaXNWYWxpZEtleShrZXkpKSB7XG4gICAgICAgICAgbWl4aW4odGFyZ2V0LCBvYmpba2V5XSwga2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQsIHVzZU1lbW8sIHR5cGUgRWxlbWVudCwgdHlwZSBDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHRocm93U3R5bGVkRXJyb3IgZnJvbSAnLi4vdXRpbHMvZXJyb3InO1xuaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi4vdXRpbHMvaXNGdW5jdGlvbic7XG5cbmV4cG9ydCB0eXBlIFRoZW1lID0geyBba2V5OiBzdHJpbmddOiBtaXhlZCB9O1xuXG50eXBlIFRoZW1lQXJndW1lbnQgPSBUaGVtZSB8ICgob3V0ZXJUaGVtZT86IFRoZW1lKSA9PiBUaGVtZSk7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIGNoaWxkcmVuPzogRWxlbWVudDxhbnk+LFxuICB0aGVtZTogVGhlbWVBcmd1bWVudCxcbn07XG5cbmV4cG9ydCBjb25zdCBUaGVtZUNvbnRleHQ6IENvbnRleHQ8VGhlbWUgfCB2b2lkPiA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoKTtcblxuZXhwb3J0IGNvbnN0IFRoZW1lQ29uc3VtZXIgPSBUaGVtZUNvbnRleHQuQ29uc3VtZXI7XG5cbmZ1bmN0aW9uIG1lcmdlVGhlbWUodGhlbWU6IFRoZW1lQXJndW1lbnQsIG91dGVyVGhlbWU/OiBUaGVtZSk6IFRoZW1lIHtcbiAgaWYgKCF0aGVtZSkge1xuICAgIHJldHVybiB0aHJvd1N0eWxlZEVycm9yKDE0KTtcbiAgfVxuXG4gIGlmIChpc0Z1bmN0aW9uKHRoZW1lKSkge1xuICAgIGNvbnN0IG1lcmdlZFRoZW1lID0gdGhlbWUob3V0ZXJUaGVtZSk7XG5cbiAgICBpZiAoXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAobWVyZ2VkVGhlbWUgPT09IG51bGwgfHwgQXJyYXkuaXNBcnJheShtZXJnZWRUaGVtZSkgfHwgdHlwZW9mIG1lcmdlZFRoZW1lICE9PSAnb2JqZWN0JylcbiAgICApIHtcbiAgICAgIHJldHVybiB0aHJvd1N0eWxlZEVycm9yKDcpO1xuICAgIH1cblxuICAgIHJldHVybiBtZXJnZWRUaGVtZTtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHRoZW1lKSB8fCB0eXBlb2YgdGhlbWUgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIHRocm93U3R5bGVkRXJyb3IoOCk7XG4gIH1cblxuICByZXR1cm4gb3V0ZXJUaGVtZSA/IHsgLi4ub3V0ZXJUaGVtZSwgLi4udGhlbWUgfSA6IHRoZW1lO1xufVxuXG4vKipcbiAqIFByb3ZpZGUgYSB0aGVtZSB0byBhbiBlbnRpcmUgcmVhY3QgY29tcG9uZW50IHRyZWUgdmlhIGNvbnRleHRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVGhlbWVQcm92aWRlcihwcm9wczogUHJvcHMpIHtcbiAgY29uc3Qgb3V0ZXJUaGVtZSA9IHVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcbiAgY29uc3QgdGhlbWVDb250ZXh0ID0gdXNlTWVtbygoKSA9PiBtZXJnZVRoZW1lKHByb3BzLnRoZW1lLCBvdXRlclRoZW1lKSwgW1xuICAgIHByb3BzLnRoZW1lLFxuICAgIG91dGVyVGhlbWUsXG4gIF0pO1xuXG4gIGlmICghcHJvcHMuY2hpbGRyZW4pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiA8VGhlbWVDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt0aGVtZUNvbnRleHR9Pntwcm9wcy5jaGlsZHJlbn08L1RoZW1lQ29udGV4dC5Qcm92aWRlcj47XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHZhbGlkQXR0ciBmcm9tICdAZW1vdGlvbi9pcy1wcm9wLXZhbGlkJztcbmltcG9ydCBob2lzdCBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgUmVhY3QsIHsgY3JlYXRlRWxlbWVudCwgdHlwZSBSZWYsIHVzZUNvbnRleHQsIHVzZURlYnVnVmFsdWUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBTQ19WRVJTSU9OIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB0eXBlIHtcbiAgQXR0cnMsXG4gIElTdHlsZWRDb21wb25lbnQsXG4gIElTdHlsZWRTdGF0aWNzLFxuICBSdWxlU2V0LFxuICBTaG91bGRGb3J3YXJkUHJvcCxcbiAgVGFyZ2V0LFxufSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBjaGVja0R5bmFtaWNDcmVhdGlvbiB9IGZyb20gJy4uL3V0aWxzL2NoZWNrRHluYW1pY0NyZWF0aW9uJztcbmltcG9ydCBjcmVhdGVXYXJuVG9vTWFueUNsYXNzZXMgZnJvbSAnLi4vdXRpbHMvY3JlYXRlV2FyblRvb01hbnlDbGFzc2VzJztcbmltcG9ydCBkZXRlcm1pbmVUaGVtZSBmcm9tICcuLi91dGlscy9kZXRlcm1pbmVUaGVtZSc7XG5pbXBvcnQgeyBFTVBUWV9BUlJBWSwgRU1QVFlfT0JKRUNUIH0gZnJvbSAnLi4vdXRpbHMvZW1wdGllcyc7XG5pbXBvcnQgZXNjYXBlIGZyb20gJy4uL3V0aWxzL2VzY2FwZSc7XG5pbXBvcnQgZ2VuZXJhdGVDb21wb25lbnRJZCBmcm9tICcuLi91dGlscy9nZW5lcmF0ZUNvbXBvbmVudElkJztcbmltcG9ydCBnZW5lcmF0ZURpc3BsYXlOYW1lIGZyb20gJy4uL3V0aWxzL2dlbmVyYXRlRGlzcGxheU5hbWUnO1xuaW1wb3J0IGdldENvbXBvbmVudE5hbWUgZnJvbSAnLi4vdXRpbHMvZ2V0Q29tcG9uZW50TmFtZSc7XG5pbXBvcnQgaXNGdW5jdGlvbiBmcm9tICcuLi91dGlscy9pc0Z1bmN0aW9uJztcbmltcG9ydCBpc1N0eWxlZENvbXBvbmVudCBmcm9tICcuLi91dGlscy9pc1N0eWxlZENvbXBvbmVudCc7XG5pbXBvcnQgaXNUYWcgZnJvbSAnLi4vdXRpbHMvaXNUYWcnO1xuaW1wb3J0IGpvaW5TdHJpbmdzIGZyb20gJy4uL3V0aWxzL2pvaW5TdHJpbmdzJztcbmltcG9ydCBtZXJnZSBmcm9tICcuLi91dGlscy9taXhpbkRlZXAnO1xuaW1wb3J0IENvbXBvbmVudFN0eWxlIGZyb20gJy4vQ29tcG9uZW50U3R5bGUnO1xuaW1wb3J0IHsgdXNlU3R5bGVTaGVldCwgdXNlU3R5bGlzIH0gZnJvbSAnLi9TdHlsZVNoZWV0TWFuYWdlcic7XG5pbXBvcnQgeyBUaGVtZUNvbnRleHQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuXG5jb25zdCBpZGVudGlmaWVycyA9IHt9O1xuXG4vKiBXZSBkZXBlbmQgb24gY29tcG9uZW50cyBoYXZpbmcgdW5pcXVlIElEcyAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVJZChkaXNwbGF5TmFtZT86IHN0cmluZywgcGFyZW50Q29tcG9uZW50SWQ/OiBzdHJpbmcpIHtcbiAgY29uc3QgbmFtZSA9IHR5cGVvZiBkaXNwbGF5TmFtZSAhPT0gJ3N0cmluZycgPyAnc2MnIDogZXNjYXBlKGRpc3BsYXlOYW1lKTtcbiAgLy8gRW5zdXJlIHRoYXQgbm8gZGlzcGxheU5hbWUgY2FuIGxlYWQgdG8gZHVwbGljYXRlIGNvbXBvbmVudElkc1xuICBpZGVudGlmaWVyc1tuYW1lXSA9IChpZGVudGlmaWVyc1tuYW1lXSB8fCAwKSArIDE7XG5cbiAgY29uc3QgY29tcG9uZW50SWQgPSBgJHtuYW1lfS0ke2dlbmVyYXRlQ29tcG9uZW50SWQoXG4gICAgLy8gU0NfVkVSU0lPTiBnaXZlcyB1cyBpc29sYXRpb24gYmV0d2VlbiBtdWx0aXBsZSBydW50aW1lcyBvbiB0aGUgcGFnZSBhdCBvbmNlXG4gICAgLy8gdGhpcyBpcyBpbXByb3ZlZCBmdXJ0aGVyIHdpdGggdXNlIG9mIHRoZSBiYWJlbCBwbHVnaW4gXCJuYW1lc3BhY2VcIiBmZWF0dXJlXG4gICAgU0NfVkVSU0lPTiArIG5hbWUgKyBpZGVudGlmaWVyc1tuYW1lXVxuICApfWA7XG5cbiAgcmV0dXJuIHBhcmVudENvbXBvbmVudElkID8gYCR7cGFyZW50Q29tcG9uZW50SWR9LSR7Y29tcG9uZW50SWR9YCA6IGNvbXBvbmVudElkO1xufVxuXG5mdW5jdGlvbiB1c2VSZXNvbHZlZEF0dHJzPENvbmZpZz4odGhlbWU6IGFueSA9IEVNUFRZX09CSkVDVCwgcHJvcHM6IENvbmZpZywgYXR0cnM6IEF0dHJzKSB7XG4gIC8vIE5PVEU6IGNhbid0IG1lbW9pemUgdGhpc1xuICAvLyByZXR1cm5zIFtjb250ZXh0LCByZXNvbHZlZEF0dHJzXVxuICAvLyB3aGVyZSByZXNvbHZlZEF0dHJzIGlzIG9ubHkgdGhlIHRoaW5ncyBpbmplY3RlZCBieSB0aGUgYXR0cnMgdGhlbXNlbHZlc1xuICBjb25zdCBjb250ZXh0ID0geyAuLi5wcm9wcywgdGhlbWUgfTtcbiAgY29uc3QgcmVzb2x2ZWRBdHRycyA9IHt9O1xuXG4gIGF0dHJzLmZvckVhY2goYXR0ckRlZiA9PiB7XG4gICAgbGV0IHJlc29sdmVkQXR0ckRlZiA9IGF0dHJEZWY7XG4gICAgbGV0IGtleTtcblxuICAgIGlmIChpc0Z1bmN0aW9uKHJlc29sdmVkQXR0ckRlZikpIHtcbiAgICAgIHJlc29sdmVkQXR0ckRlZiA9IHJlc29sdmVkQXR0ckRlZihjb250ZXh0KTtcbiAgICB9XG5cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBndWFyZC1mb3ItaW4gKi9cbiAgICBmb3IgKGtleSBpbiByZXNvbHZlZEF0dHJEZWYpIHtcbiAgICAgIGNvbnRleHRba2V5XSA9IHJlc29sdmVkQXR0cnNba2V5XSA9XG4gICAgICAgIGtleSA9PT0gJ2NsYXNzTmFtZSdcbiAgICAgICAgICA/IGpvaW5TdHJpbmdzKHJlc29sdmVkQXR0cnNba2V5XSwgcmVzb2x2ZWRBdHRyRGVmW2tleV0pXG4gICAgICAgICAgOiByZXNvbHZlZEF0dHJEZWZba2V5XTtcbiAgICB9XG4gICAgLyogZXNsaW50LWVuYWJsZSBndWFyZC1mb3ItaW4gKi9cbiAgfSk7XG5cbiAgcmV0dXJuIFtjb250ZXh0LCByZXNvbHZlZEF0dHJzXTtcbn1cblxuZnVuY3Rpb24gdXNlSW5qZWN0ZWRTdHlsZTxUPihcbiAgY29tcG9uZW50U3R5bGU6IENvbXBvbmVudFN0eWxlLFxuICBpc1N0YXRpYzogYm9vbGVhbixcbiAgcmVzb2x2ZWRBdHRyczogVCxcbiAgd2FyblRvb01hbnlDbGFzc2VzPzogJENhbGw8dHlwZW9mIGNyZWF0ZVdhcm5Ub29NYW55Q2xhc3Nlcywgc3RyaW5nLCBzdHJpbmc+XG4pIHtcbiAgY29uc3Qgc3R5bGVTaGVldCA9IHVzZVN0eWxlU2hlZXQoKTtcbiAgY29uc3Qgc3R5bGlzID0gdXNlU3R5bGlzKCk7XG5cbiAgY29uc3QgY2xhc3NOYW1lID0gaXNTdGF0aWNcbiAgICA/IGNvbXBvbmVudFN0eWxlLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKEVNUFRZX09CSkVDVCwgc3R5bGVTaGVldCwgc3R5bGlzKVxuICAgIDogY29tcG9uZW50U3R5bGUuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXMocmVzb2x2ZWRBdHRycywgc3R5bGVTaGVldCwgc3R5bGlzKTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHVzZURlYnVnVmFsdWUoY2xhc3NOYW1lKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhaXNTdGF0aWMgJiYgd2FyblRvb01hbnlDbGFzc2VzKSB7XG4gICAgd2FyblRvb01hbnlDbGFzc2VzKGNsYXNzTmFtZSk7XG4gIH1cblxuICByZXR1cm4gY2xhc3NOYW1lO1xufVxuXG5mdW5jdGlvbiB1c2VTdHlsZWRDb21wb25lbnRJbXBsKFxuICBmb3J3YXJkZWRDb21wb25lbnQ6IElTdHlsZWRDb21wb25lbnQsXG4gIHByb3BzOiBPYmplY3QsXG4gIGZvcndhcmRlZFJlZjogUmVmPGFueT4sXG4gIGlzU3RhdGljOiBib29sZWFuXG4pIHtcbiAgY29uc3Qge1xuICAgIGF0dHJzOiBjb21wb25lbnRBdHRycyxcbiAgICBjb21wb25lbnRTdHlsZSxcbiAgICBkZWZhdWx0UHJvcHMsXG4gICAgZm9sZGVkQ29tcG9uZW50SWRzLFxuICAgIHNob3VsZEZvcndhcmRQcm9wLFxuICAgIHN0eWxlZENvbXBvbmVudElkLFxuICAgIHRhcmdldCxcbiAgfSA9IGZvcndhcmRlZENvbXBvbmVudDtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHVzZURlYnVnVmFsdWUoc3R5bGVkQ29tcG9uZW50SWQpO1xuXG4gIC8vIE5PVEU6IHRoZSBub24taG9va3MgdmVyc2lvbiBvbmx5IHN1YnNjcmliZXMgdG8gdGhpcyB3aGVuICFjb21wb25lbnRTdHlsZS5pc1N0YXRpYyxcbiAgLy8gYnV0IHRoYXQnZCBiZSBhZ2FpbnN0IHRoZSBydWxlcy1vZi1ob29rcy4gV2UgY291bGQgYmUgbmF1Z2h0eSBhbmQgZG8gaXQgYW55d2F5IGFzIGl0XG4gIC8vIHNob3VsZCBiZSBhbiBpbW11dGFibGUgdmFsdWUsIGJ1dCBiZWhhdmUgZm9yIG5vdy5cbiAgY29uc3QgdGhlbWUgPSBkZXRlcm1pbmVUaGVtZShwcm9wcywgdXNlQ29udGV4dChUaGVtZUNvbnRleHQpLCBkZWZhdWx0UHJvcHMpO1xuXG4gIGNvbnN0IFtjb250ZXh0LCBhdHRyc10gPSB1c2VSZXNvbHZlZEF0dHJzKHRoZW1lIHx8IEVNUFRZX09CSkVDVCwgcHJvcHMsIGNvbXBvbmVudEF0dHJzKTtcblxuICBjb25zdCBnZW5lcmF0ZWRDbGFzc05hbWUgPSB1c2VJbmplY3RlZFN0eWxlKFxuICAgIGNvbXBvbmVudFN0eWxlLFxuICAgIGlzU3RhdGljLFxuICAgIGNvbnRleHQsXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGZvcndhcmRlZENvbXBvbmVudC53YXJuVG9vTWFueUNsYXNzZXMgOiB1bmRlZmluZWRcbiAgKTtcblxuICBjb25zdCByZWZUb0ZvcndhcmQgPSBmb3J3YXJkZWRSZWY7XG5cbiAgY29uc3QgZWxlbWVudFRvQmVDcmVhdGVkOiBUYXJnZXQgPSBhdHRycy4kYXMgfHwgcHJvcHMuJGFzIHx8IGF0dHJzLmFzIHx8IHByb3BzLmFzIHx8IHRhcmdldDtcblxuICBjb25zdCBpc1RhcmdldFRhZyA9IGlzVGFnKGVsZW1lbnRUb0JlQ3JlYXRlZCk7XG4gIGNvbnN0IGNvbXB1dGVkUHJvcHMgPSBhdHRycyAhPT0gcHJvcHMgPyB7IC4uLnByb3BzLCAuLi5hdHRycyB9IDogcHJvcHM7XG4gIGNvbnN0IHByb3BzRm9yRWxlbWVudCA9IHt9O1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgZm9yIChjb25zdCBrZXkgaW4gY29tcHV0ZWRQcm9wcykge1xuICAgIGlmIChrZXlbMF0gPT09ICckJyB8fCBrZXkgPT09ICdhcycpIGNvbnRpbnVlO1xuICAgIGVsc2UgaWYgKGtleSA9PT0gJ2ZvcndhcmRlZEFzJykge1xuICAgICAgcHJvcHNGb3JFbGVtZW50LmFzID0gY29tcHV0ZWRQcm9wc1trZXldO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICBzaG91bGRGb3J3YXJkUHJvcFxuICAgICAgICA/IHNob3VsZEZvcndhcmRQcm9wKGtleSwgdmFsaWRBdHRyLCBlbGVtZW50VG9CZUNyZWF0ZWQpXG4gICAgICAgIDogaXNUYXJnZXRUYWdcbiAgICAgICAgPyB2YWxpZEF0dHIoa2V5KVxuICAgICAgICA6IHRydWVcbiAgICApIHtcbiAgICAgIC8vIERvbid0IHBhc3MgdGhyb3VnaCBub24gSFRNTCB0YWdzIHRocm91Z2ggdG8gSFRNTCBlbGVtZW50c1xuICAgICAgcHJvcHNGb3JFbGVtZW50W2tleV0gPSBjb21wdXRlZFByb3BzW2tleV07XG4gICAgfVxuICB9XG5cbiAgaWYgKHByb3BzLnN0eWxlICYmIGF0dHJzLnN0eWxlICE9PSBwcm9wcy5zdHlsZSkge1xuICAgIHByb3BzRm9yRWxlbWVudC5zdHlsZSA9IHsgLi4ucHJvcHMuc3R5bGUsIC4uLmF0dHJzLnN0eWxlIH07XG4gIH1cblxuICBwcm9wc0ZvckVsZW1lbnQuY2xhc3NOYW1lID0gQXJyYXkucHJvdG90eXBlXG4gICAgLmNvbmNhdChcbiAgICAgIGZvbGRlZENvbXBvbmVudElkcyxcbiAgICAgIHN0eWxlZENvbXBvbmVudElkLFxuICAgICAgZ2VuZXJhdGVkQ2xhc3NOYW1lICE9PSBzdHlsZWRDb21wb25lbnRJZCA/IGdlbmVyYXRlZENsYXNzTmFtZSA6IG51bGwsXG4gICAgICBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBhdHRycy5jbGFzc05hbWVcbiAgICApXG4gICAgLmZpbHRlcihCb29sZWFuKVxuICAgIC5qb2luKCcgJyk7XG5cbiAgcHJvcHNGb3JFbGVtZW50LnJlZiA9IHJlZlRvRm9yd2FyZDtcblxuICByZXR1cm4gY3JlYXRlRWxlbWVudChlbGVtZW50VG9CZUNyZWF0ZWQsIHByb3BzRm9yRWxlbWVudCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlZENvbXBvbmVudChcbiAgdGFyZ2V0OiAkUHJvcGVydHlUeXBlPElTdHlsZWRDb21wb25lbnQsICd0YXJnZXQnPixcbiAgb3B0aW9uczoge1xuICAgIGF0dHJzPzogQXR0cnMsXG4gICAgY29tcG9uZW50SWQ6IHN0cmluZyxcbiAgICBkaXNwbGF5TmFtZT86IHN0cmluZyxcbiAgICBwYXJlbnRDb21wb25lbnRJZD86IHN0cmluZyxcbiAgICBzaG91bGRGb3J3YXJkUHJvcD86IFNob3VsZEZvcndhcmRQcm9wLFxuICB9LFxuICBydWxlczogUnVsZVNldFxuKSB7XG4gIGNvbnN0IGlzVGFyZ2V0U3R5bGVkQ29tcCA9IGlzU3R5bGVkQ29tcG9uZW50KHRhcmdldCk7XG4gIGNvbnN0IGlzQ29tcG9zaXRlQ29tcG9uZW50ID0gIWlzVGFnKHRhcmdldCk7XG5cbiAgY29uc3Qge1xuICAgIGF0dHJzID0gRU1QVFlfQVJSQVksXG4gICAgY29tcG9uZW50SWQgPSBnZW5lcmF0ZUlkKG9wdGlvbnMuZGlzcGxheU5hbWUsIG9wdGlvbnMucGFyZW50Q29tcG9uZW50SWQpLFxuICAgIGRpc3BsYXlOYW1lID0gZ2VuZXJhdGVEaXNwbGF5TmFtZSh0YXJnZXQpLFxuICB9ID0gb3B0aW9ucztcblxuICBjb25zdCBzdHlsZWRDb21wb25lbnRJZCA9XG4gICAgb3B0aW9ucy5kaXNwbGF5TmFtZSAmJiBvcHRpb25zLmNvbXBvbmVudElkXG4gICAgICA/IGAke2VzY2FwZShvcHRpb25zLmRpc3BsYXlOYW1lKX0tJHtvcHRpb25zLmNvbXBvbmVudElkfWBcbiAgICAgIDogb3B0aW9ucy5jb21wb25lbnRJZCB8fCBjb21wb25lbnRJZDtcblxuICAvLyBmb2xkIHRoZSB1bmRlcmx5aW5nIFN0eWxlZENvbXBvbmVudCBhdHRycyB1cCAoaW1wbGljaXQgZXh0ZW5kKVxuICBjb25zdCBmaW5hbEF0dHJzID1cbiAgICBpc1RhcmdldFN0eWxlZENvbXAgJiYgKCh0YXJnZXQ6IGFueSk6IElTdHlsZWRDb21wb25lbnQpLmF0dHJzXG4gICAgICA/IEFycmF5LnByb3RvdHlwZS5jb25jYXQoKCh0YXJnZXQ6IGFueSk6IElTdHlsZWRDb21wb25lbnQpLmF0dHJzLCBhdHRycykuZmlsdGVyKEJvb2xlYW4pXG4gICAgICA6IGF0dHJzO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICBsZXQgc2hvdWxkRm9yd2FyZFByb3AgPSBvcHRpb25zLnNob3VsZEZvcndhcmRQcm9wO1xuXG4gIGlmIChpc1RhcmdldFN0eWxlZENvbXAgJiYgdGFyZ2V0LnNob3VsZEZvcndhcmRQcm9wKSB7XG4gICAgaWYgKG9wdGlvbnMuc2hvdWxkRm9yd2FyZFByb3ApIHtcbiAgICAgIC8vIGNvbXBvc2UgbmVzdGVkIHNob3VsZEZvcndhcmRQcm9wIGNhbGxzXG4gICAgICBzaG91bGRGb3J3YXJkUHJvcCA9IChwcm9wLCBmaWx0ZXJGbiwgZWxlbWVudFRvQmVDcmVhdGVkKSA9PlxuICAgICAgICAoKCgodGFyZ2V0OiBhbnkpOiBJU3R5bGVkQ29tcG9uZW50KS5zaG91bGRGb3J3YXJkUHJvcDogYW55KTogU2hvdWxkRm9yd2FyZFByb3ApKFxuICAgICAgICAgIHByb3AsXG4gICAgICAgICAgZmlsdGVyRm4sXG4gICAgICAgICAgZWxlbWVudFRvQmVDcmVhdGVkXG4gICAgICAgICkgJiZcbiAgICAgICAgKChvcHRpb25zLnNob3VsZEZvcndhcmRQcm9wOiBhbnkpOiBTaG91bGRGb3J3YXJkUHJvcCkocHJvcCwgZmlsdGVyRm4sIGVsZW1lbnRUb0JlQ3JlYXRlZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgc2hvdWxkRm9yd2FyZFByb3AgPSAoKHRhcmdldDogYW55KTogSVN0eWxlZENvbXBvbmVudCkuc2hvdWxkRm9yd2FyZFByb3A7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgY29tcG9uZW50U3R5bGUgPSBuZXcgQ29tcG9uZW50U3R5bGUoXG4gICAgcnVsZXMsXG4gICAgc3R5bGVkQ29tcG9uZW50SWQsXG4gICAgaXNUYXJnZXRTdHlsZWRDb21wID8gKCh0YXJnZXQ6IE9iamVjdCkuY29tcG9uZW50U3R5bGU6IENvbXBvbmVudFN0eWxlKSA6IHVuZGVmaW5lZFxuICApO1xuXG4gIC8vIHN0YXRpY2FsbHkgc3R5bGVkLWNvbXBvbmVudHMgZG9uJ3QgbmVlZCB0byBidWlsZCBhbiBleGVjdXRpb24gY29udGV4dCBvYmplY3QsXG4gIC8vIGFuZCBzaG91bGRuJ3QgYmUgaW5jcmVhc2luZyB0aGUgbnVtYmVyIG9mIGNsYXNzIG5hbWVzXG4gIGNvbnN0IGlzU3RhdGljID0gY29tcG9uZW50U3R5bGUuaXNTdGF0aWMgJiYgYXR0cnMubGVuZ3RoID09PSAwO1xuXG4gIC8qKlxuICAgKiBmb3J3YXJkUmVmIGNyZWF0ZXMgYSBuZXcgaW50ZXJpbSBjb21wb25lbnQsIHdoaWNoIHdlJ2xsIHRha2UgYWR2YW50YWdlIG9mXG4gICAqIGluc3RlYWQgb2YgZXh0ZW5kaW5nIFBhcmVudENvbXBvbmVudCB0byBjcmVhdGUgX2Fub3RoZXJfIGludGVyaW0gY2xhc3NcbiAgICovXG4gIGxldCBXcmFwcGVkU3R5bGVkQ29tcG9uZW50OiBJU3R5bGVkQ29tcG9uZW50O1xuXG4gIGNvbnN0IGZvcndhcmRSZWYgPSAocHJvcHMsIHJlZikgPT5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICB1c2VTdHlsZWRDb21wb25lbnRJbXBsKFdyYXBwZWRTdHlsZWRDb21wb25lbnQsIHByb3BzLCByZWYsIGlzU3RhdGljKTtcblxuICBmb3J3YXJkUmVmLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG5cbiAgV3JhcHBlZFN0eWxlZENvbXBvbmVudCA9ICgoUmVhY3QuZm9yd2FyZFJlZihmb3J3YXJkUmVmKTogYW55KTogSVN0eWxlZENvbXBvbmVudCk7XG4gIFdyYXBwZWRTdHlsZWRDb21wb25lbnQuYXR0cnMgPSBmaW5hbEF0dHJzO1xuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LmNvbXBvbmVudFN0eWxlID0gY29tcG9uZW50U3R5bGU7XG4gIFdyYXBwZWRTdHlsZWRDb21wb25lbnQuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgV3JhcHBlZFN0eWxlZENvbXBvbmVudC5zaG91bGRGb3J3YXJkUHJvcCA9IHNob3VsZEZvcndhcmRQcm9wO1xuXG4gIC8vIHRoaXMgc3RhdGljIGlzIHVzZWQgdG8gcHJlc2VydmUgdGhlIGNhc2NhZGUgb2Ygc3RhdGljIGNsYXNzZXMgZm9yIGNvbXBvbmVudCBzZWxlY3RvclxuICAvLyBwdXJwb3NlczsgdGhpcyBpcyBlc3BlY2lhbGx5IGltcG9ydGFudCB3aXRoIHVzYWdlIG9mIHRoZSBjc3MgcHJvcFxuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LmZvbGRlZENvbXBvbmVudElkcyA9IGlzVGFyZ2V0U3R5bGVkQ29tcFxuICAgID8gQXJyYXkucHJvdG90eXBlLmNvbmNhdChcbiAgICAgICAgKCh0YXJnZXQ6IGFueSk6IElTdHlsZWRDb21wb25lbnQpLmZvbGRlZENvbXBvbmVudElkcyxcbiAgICAgICAgKCh0YXJnZXQ6IGFueSk6IElTdHlsZWRDb21wb25lbnQpLnN0eWxlZENvbXBvbmVudElkXG4gICAgICApXG4gICAgOiBFTVBUWV9BUlJBWTtcblxuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LnN0eWxlZENvbXBvbmVudElkID0gc3R5bGVkQ29tcG9uZW50SWQ7XG5cbiAgLy8gZm9sZCB0aGUgdW5kZXJseWluZyBTdHlsZWRDb21wb25lbnQgdGFyZ2V0IHVwIHNpbmNlIHdlIGZvbGRlZCB0aGUgc3R5bGVzXG4gIFdyYXBwZWRTdHlsZWRDb21wb25lbnQudGFyZ2V0ID0gaXNUYXJnZXRTdHlsZWRDb21wXG4gICAgPyAoKHRhcmdldDogYW55KTogSVN0eWxlZENvbXBvbmVudCkudGFyZ2V0XG4gICAgOiB0YXJnZXQ7XG5cbiAgV3JhcHBlZFN0eWxlZENvbXBvbmVudC53aXRoQ29tcG9uZW50ID0gZnVuY3Rpb24gd2l0aENvbXBvbmVudCh0YWc6IFRhcmdldCkge1xuICAgIGNvbnN0IHsgY29tcG9uZW50SWQ6IHByZXZpb3VzQ29tcG9uZW50SWQsIC4uLm9wdGlvbnNUb0NvcHkgfSA9IG9wdGlvbnM7XG5cbiAgICBjb25zdCBuZXdDb21wb25lbnRJZCA9XG4gICAgICBwcmV2aW91c0NvbXBvbmVudElkICYmXG4gICAgICBgJHtwcmV2aW91c0NvbXBvbmVudElkfS0ke2lzVGFnKHRhZykgPyB0YWcgOiBlc2NhcGUoZ2V0Q29tcG9uZW50TmFtZSh0YWcpKX1gO1xuXG4gICAgY29uc3QgbmV3T3B0aW9ucyA9IHtcbiAgICAgIC4uLm9wdGlvbnNUb0NvcHksXG4gICAgICBhdHRyczogZmluYWxBdHRycyxcbiAgICAgIGNvbXBvbmVudElkOiBuZXdDb21wb25lbnRJZCxcbiAgICB9O1xuXG4gICAgcmV0dXJuIGNyZWF0ZVN0eWxlZENvbXBvbmVudCh0YWcsIG5ld09wdGlvbnMsIHJ1bGVzKTtcbiAgfTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JhcHBlZFN0eWxlZENvbXBvbmVudCwgJ2RlZmF1bHRQcm9wcycsIHtcbiAgICBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZm9sZGVkRGVmYXVsdFByb3BzO1xuICAgIH0sXG5cbiAgICBzZXQob2JqKSB7XG4gICAgICB0aGlzLl9mb2xkZWREZWZhdWx0UHJvcHMgPSBpc1RhcmdldFN0eWxlZENvbXBcbiAgICAgICAgPyBtZXJnZSh7fSwgKCh0YXJnZXQ6IGFueSk6IElTdHlsZWRDb21wb25lbnQpLmRlZmF1bHRQcm9wcywgb2JqKVxuICAgICAgICA6IG9iajtcbiAgICB9LFxuICB9KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNoZWNrRHluYW1pY0NyZWF0aW9uKGRpc3BsYXlOYW1lLCBzdHlsZWRDb21wb25lbnRJZCk7XG5cbiAgICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50Lndhcm5Ub29NYW55Q2xhc3NlcyA9IGNyZWF0ZVdhcm5Ub29NYW55Q2xhc3NlcyhcbiAgICAgIGRpc3BsYXlOYW1lLFxuICAgICAgc3R5bGVkQ29tcG9uZW50SWRcbiAgICApO1xuICB9XG5cbiAgV3JhcHBlZFN0eWxlZENvbXBvbmVudC50b1N0cmluZyA9ICgpID0+IGAuJHtXcmFwcGVkU3R5bGVkQ29tcG9uZW50LnN0eWxlZENvbXBvbmVudElkfWA7XG5cbiAgaWYgKGlzQ29tcG9zaXRlQ29tcG9uZW50KSB7XG4gICAgaG9pc3Q8XG4gICAgICBJU3R5bGVkU3RhdGljcyxcbiAgICAgICRQcm9wZXJ0eVR5cGU8SVN0eWxlZENvbXBvbmVudCwgJ3RhcmdldCc+LFxuICAgICAgeyBba2V5OiAkS2V5czxJU3R5bGVkU3RhdGljcz5dOiB0cnVlIH1cbiAgICA+KFdyYXBwZWRTdHlsZWRDb21wb25lbnQsICgodGFyZ2V0OiBhbnkpOiAkUHJvcGVydHlUeXBlPElTdHlsZWRDb21wb25lbnQsICd0YXJnZXQnPiksIHtcbiAgICAgIC8vIGFsbCBTQy1zcGVjaWZpYyB0aGluZ3Mgc2hvdWxkIG5vdCBiZSBob2lzdGVkXG4gICAgICBhdHRyczogdHJ1ZSxcbiAgICAgIGNvbXBvbmVudFN0eWxlOiB0cnVlLFxuICAgICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgICBmb2xkZWRDb21wb25lbnRJZHM6IHRydWUsXG4gICAgICBzaG91bGRGb3J3YXJkUHJvcDogdHJ1ZSxcbiAgICAgIHN0eWxlZENvbXBvbmVudElkOiB0cnVlLFxuICAgICAgdGFyZ2V0OiB0cnVlLFxuICAgICAgd2l0aENvbXBvbmVudDogdHJ1ZSxcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBXcmFwcGVkU3R5bGVkQ29tcG9uZW50O1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgSVN0eWxlZENvbXBvbmVudCB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCBnZXRDb21wb25lbnROYW1lIGZyb20gJy4vZ2V0Q29tcG9uZW50TmFtZSc7XG5pbXBvcnQgaXNUYWcgZnJvbSAnLi9pc1RhZyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdlbmVyYXRlRGlzcGxheU5hbWUoXG4gIHRhcmdldDogJFByb3BlcnR5VHlwZTxJU3R5bGVkQ29tcG9uZW50LCAndGFyZ2V0Jz5cbik6IHN0cmluZyB7XG4gIHJldHVybiBpc1RhZyh0YXJnZXQpID8gYHN0eWxlZC4ke3RhcmdldH1gIDogYFN0eWxlZCgke2dldENvbXBvbmVudE5hbWUodGFyZ2V0KX0pYDtcbn1cbiIsIi8qKlxuICogQ29udmVuaWVuY2UgZnVuY3Rpb24gZm9yIGpvaW5pbmcgc3RyaW5ncyB0byBmb3JtIGNsYXNzTmFtZSBjaGFpbnNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gam9pblN0cmluZ3MoYTogP1N0cmluZywgYjogP1N0cmluZyk6ID9TdHJpbmcge1xuICByZXR1cm4gYSAmJiBiID8gYCR7YX0gJHtifWAgOiBhIHx8IGI7XG59XG4iLCIvLyBAZmxvd1xuLy8gVGhhbmtzIHRvIFJlYWN0RE9NRmFjdG9yaWVzIGZvciB0aGlzIGhhbmR5IGxpc3QhXG5cbmV4cG9ydCBkZWZhdWx0IFtcbiAgJ2EnLFxuICAnYWJicicsXG4gICdhZGRyZXNzJyxcbiAgJ2FyZWEnLFxuICAnYXJ0aWNsZScsXG4gICdhc2lkZScsXG4gICdhdWRpbycsXG4gICdiJyxcbiAgJ2Jhc2UnLFxuICAnYmRpJyxcbiAgJ2JkbycsXG4gICdiaWcnLFxuICAnYmxvY2txdW90ZScsXG4gICdib2R5JyxcbiAgJ2JyJyxcbiAgJ2J1dHRvbicsXG4gICdjYW52YXMnLFxuICAnY2FwdGlvbicsXG4gICdjaXRlJyxcbiAgJ2NvZGUnLFxuICAnY29sJyxcbiAgJ2NvbGdyb3VwJyxcbiAgJ2RhdGEnLFxuICAnZGF0YWxpc3QnLFxuICAnZGQnLFxuICAnZGVsJyxcbiAgJ2RldGFpbHMnLFxuICAnZGZuJyxcbiAgJ2RpYWxvZycsXG4gICdkaXYnLFxuICAnZGwnLFxuICAnZHQnLFxuICAnZW0nLFxuICAnZW1iZWQnLFxuICAnZmllbGRzZXQnLFxuICAnZmlnY2FwdGlvbicsXG4gICdmaWd1cmUnLFxuICAnZm9vdGVyJyxcbiAgJ2Zvcm0nLFxuICAnaDEnLFxuICAnaDInLFxuICAnaDMnLFxuICAnaDQnLFxuICAnaDUnLFxuICAnaDYnLFxuICAnaGVhZCcsXG4gICdoZWFkZXInLFxuICAnaGdyb3VwJyxcbiAgJ2hyJyxcbiAgJ2h0bWwnLFxuICAnaScsXG4gICdpZnJhbWUnLFxuICAnaW1nJyxcbiAgJ2lucHV0JyxcbiAgJ2lucycsXG4gICdrYmQnLFxuICAna2V5Z2VuJyxcbiAgJ2xhYmVsJyxcbiAgJ2xlZ2VuZCcsXG4gICdsaScsXG4gICdsaW5rJyxcbiAgJ21haW4nLFxuICAnbWFwJyxcbiAgJ21hcmsnLFxuICAnbWFycXVlZScsXG4gICdtZW51JyxcbiAgJ21lbnVpdGVtJyxcbiAgJ21ldGEnLFxuICAnbWV0ZXInLFxuICAnbmF2JyxcbiAgJ25vc2NyaXB0JyxcbiAgJ29iamVjdCcsXG4gICdvbCcsXG4gICdvcHRncm91cCcsXG4gICdvcHRpb24nLFxuICAnb3V0cHV0JyxcbiAgJ3AnLFxuICAncGFyYW0nLFxuICAncGljdHVyZScsXG4gICdwcmUnLFxuICAncHJvZ3Jlc3MnLFxuICAncScsXG4gICdycCcsXG4gICdydCcsXG4gICdydWJ5JyxcbiAgJ3MnLFxuICAnc2FtcCcsXG4gICdzY3JpcHQnLFxuICAnc2VjdGlvbicsXG4gICdzZWxlY3QnLFxuICAnc21hbGwnLFxuICAnc291cmNlJyxcbiAgJ3NwYW4nLFxuICAnc3Ryb25nJyxcbiAgJ3N0eWxlJyxcbiAgJ3N1YicsXG4gICdzdW1tYXJ5JyxcbiAgJ3N1cCcsXG4gICd0YWJsZScsXG4gICd0Ym9keScsXG4gICd0ZCcsXG4gICd0ZXh0YXJlYScsXG4gICd0Zm9vdCcsXG4gICd0aCcsXG4gICd0aGVhZCcsXG4gICd0aW1lJyxcbiAgJ3RpdGxlJyxcbiAgJ3RyJyxcbiAgJ3RyYWNrJyxcbiAgJ3UnLFxuICAndWwnLFxuICAndmFyJyxcbiAgJ3ZpZGVvJyxcbiAgJ3dicicsXG5cbiAgLy8gU1ZHXG4gICdjaXJjbGUnLFxuICAnY2xpcFBhdGgnLFxuICAnZGVmcycsXG4gICdlbGxpcHNlJyxcbiAgJ2ZvcmVpZ25PYmplY3QnLFxuICAnZycsXG4gICdpbWFnZScsXG4gICdsaW5lJyxcbiAgJ2xpbmVhckdyYWRpZW50JyxcbiAgJ21hcmtlcicsXG4gICdtYXNrJyxcbiAgJ3BhdGgnLFxuICAncGF0dGVybicsXG4gICdwb2x5Z29uJyxcbiAgJ3BvbHlsaW5lJyxcbiAgJ3JhZGlhbEdyYWRpZW50JyxcbiAgJ3JlY3QnLFxuICAnc3RvcCcsXG4gICdzdmcnLFxuICAndGV4dCcsXG4gICd0ZXh0UGF0aCcsXG4gICd0c3BhbicsXG5dO1xuIiwiLy8gQGZsb3dcbmltcG9ydCBjb25zdHJ1Y3RXaXRoT3B0aW9ucyBmcm9tICcuL2NvbnN0cnVjdFdpdGhPcHRpb25zJztcbmltcG9ydCBTdHlsZWRDb21wb25lbnQgZnJvbSAnLi4vbW9kZWxzL1N0eWxlZENvbXBvbmVudCc7XG5pbXBvcnQgZG9tRWxlbWVudHMgZnJvbSAnLi4vdXRpbHMvZG9tRWxlbWVudHMnO1xuXG5pbXBvcnQgdHlwZSB7IFRhcmdldCB9IGZyb20gJy4uL3R5cGVzJztcblxuY29uc3Qgc3R5bGVkID0gKHRhZzogVGFyZ2V0KSA9PiBjb25zdHJ1Y3RXaXRoT3B0aW9ucyhTdHlsZWRDb21wb25lbnQsIHRhZyk7XG5cbi8vIFNob3J0aGFuZHMgZm9yIGFsbCB2YWxpZCBIVE1MIEVsZW1lbnRzXG5kb21FbGVtZW50cy5mb3JFYWNoKGRvbUVsZW1lbnQgPT4ge1xuICBzdHlsZWRbZG9tRWxlbWVudF0gPSBzdHlsZWQoZG9tRWxlbWVudCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgc3R5bGVkO1xuIiwiLy8gQGZsb3dcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBjc3MgZnJvbSAnLi9jc3MnO1xuaW1wb3J0IHRocm93U3R5bGVkRXJyb3IgZnJvbSAnLi4vdXRpbHMvZXJyb3InO1xuaW1wb3J0IHsgRU1QVFlfT0JKRUNUIH0gZnJvbSAnLi4vdXRpbHMvZW1wdGllcyc7XG5cbmltcG9ydCB0eXBlIHsgVGFyZ2V0IH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb25zdHJ1Y3RXaXRoT3B0aW9ucyhcbiAgY29tcG9uZW50Q29uc3RydWN0b3I6IEZ1bmN0aW9uLFxuICB0YWc6IFRhcmdldCxcbiAgb3B0aW9uczogT2JqZWN0ID0gRU1QVFlfT0JKRUNUXG4pIHtcbiAgaWYgKCFpc1ZhbGlkRWxlbWVudFR5cGUodGFnKSkge1xuICAgIHJldHVybiB0aHJvd1N0eWxlZEVycm9yKDEsIFN0cmluZyh0YWcpKTtcbiAgfVxuXG4gIC8qIFRoaXMgaXMgY2FsbGFibGUgZGlyZWN0bHkgYXMgYSB0ZW1wbGF0ZSBmdW5jdGlvbiAqL1xuICAvLyAkRmxvd0ZpeE1lOiBOb3QgdHlwZWQgdG8gYXZvaWQgZGVzdHJ1Y3R1cmluZyBhcmd1bWVudHNcbiAgY29uc3QgdGVtcGxhdGVGdW5jdGlvbiA9ICguLi5hcmdzKSA9PiBjb21wb25lbnRDb25zdHJ1Y3Rvcih0YWcsIG9wdGlvbnMsIGNzcyguLi5hcmdzKSk7XG5cbiAgLyogSWYgY29uZmlnIG1ldGhvZHMgYXJlIGNhbGxlZCwgd3JhcCB1cCBhIG5ldyB0ZW1wbGF0ZSBmdW5jdGlvbiBhbmQgbWVyZ2Ugb3B0aW9ucyAqL1xuICB0ZW1wbGF0ZUZ1bmN0aW9uLndpdGhDb25maWcgPSBjb25maWcgPT5cbiAgICBjb25zdHJ1Y3RXaXRoT3B0aW9ucyhjb21wb25lbnRDb25zdHJ1Y3RvciwgdGFnLCB7IC4uLm9wdGlvbnMsIC4uLmNvbmZpZyB9KTtcblxuICAvKiBNb2RpZnkvaW5qZWN0IG5ldyBwcm9wcyBhdCBydW50aW1lICovXG4gIHRlbXBsYXRlRnVuY3Rpb24uYXR0cnMgPSBhdHRycyA9PlxuICAgIGNvbnN0cnVjdFdpdGhPcHRpb25zKGNvbXBvbmVudENvbnN0cnVjdG9yLCB0YWcsIHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBhdHRyczogQXJyYXkucHJvdG90eXBlLmNvbmNhdChvcHRpb25zLmF0dHJzLCBhdHRycykuZmlsdGVyKEJvb2xlYW4pLFxuICAgIH0pO1xuXG4gIHJldHVybiB0ZW1wbGF0ZUZ1bmN0aW9uO1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCBTdHlsZVNoZWV0IGZyb20gJy4uL3NoZWV0JztcbmltcG9ydCB0eXBlIHsgUnVsZVNldCwgU3RyaW5naWZpZXIgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgZmxhdHRlbiBmcm9tICcuLi91dGlscy9mbGF0dGVuJztcbmltcG9ydCBpc1N0YXRpY1J1bGVzIGZyb20gJy4uL3V0aWxzL2lzU3RhdGljUnVsZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHbG9iYWxTdHlsZSB7XG4gIGNvbXBvbmVudElkOiBzdHJpbmc7XG5cbiAgaXNTdGF0aWM6IGJvb2xlYW47XG5cbiAgcnVsZXM6IFJ1bGVTZXQ7XG5cbiAgY29uc3RydWN0b3IocnVsZXM6IFJ1bGVTZXQsIGNvbXBvbmVudElkOiBzdHJpbmcpIHtcbiAgICB0aGlzLnJ1bGVzID0gcnVsZXM7XG4gICAgdGhpcy5jb21wb25lbnRJZCA9IGNvbXBvbmVudElkO1xuICAgIHRoaXMuaXNTdGF0aWMgPSBpc1N0YXRpY1J1bGVzKHJ1bGVzKTtcblxuICAgIC8vIHByZS1yZWdpc3RlciB0aGUgZmlyc3QgaW5zdGFuY2UgdG8gZW5zdXJlIGdsb2JhbCBzdHlsZXNcbiAgICAvLyBsb2FkIGJlZm9yZSBjb21wb25lbnQgb25lc1xuICAgIFN0eWxlU2hlZXQucmVnaXN0ZXJJZCh0aGlzLmNvbXBvbmVudElkICsgMSk7XG4gIH1cblxuICBjcmVhdGVTdHlsZXMoXG4gICAgaW5zdGFuY2U6IG51bWJlcixcbiAgICBleGVjdXRpb25Db250ZXh0OiBPYmplY3QsXG4gICAgc3R5bGVTaGVldDogU3R5bGVTaGVldCxcbiAgICBzdHlsaXM6IFN0cmluZ2lmaWVyXG4gICkge1xuICAgIGNvbnN0IGZsYXRDU1MgPSBmbGF0dGVuKHRoaXMucnVsZXMsIGV4ZWN1dGlvbkNvbnRleHQsIHN0eWxlU2hlZXQsIHN0eWxpcyk7XG4gICAgY29uc3QgY3NzID0gc3R5bGlzKGZsYXRDU1Muam9pbignJyksICcnKTtcbiAgICBjb25zdCBpZCA9IHRoaXMuY29tcG9uZW50SWQgKyBpbnN0YW5jZTtcblxuICAgIC8vIE5PVEU6IFdlIHVzZSB0aGUgaWQgYXMgYSBuYW1lIGFzIHdlbGwsIHNpbmNlIHRoZXNlIHJ1bGVzIG5ldmVyIGNoYW5nZVxuICAgIHN0eWxlU2hlZXQuaW5zZXJ0UnVsZXMoaWQsIGlkLCBjc3MpO1xuICB9XG5cbiAgcmVtb3ZlU3R5bGVzKGluc3RhbmNlOiBudW1iZXIsIHN0eWxlU2hlZXQ6IFN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZVNoZWV0LmNsZWFyUnVsZXModGhpcy5jb21wb25lbnRJZCArIGluc3RhbmNlKTtcbiAgfVxuXG4gIHJlbmRlclN0eWxlcyhcbiAgICBpbnN0YW5jZTogbnVtYmVyLFxuICAgIGV4ZWN1dGlvbkNvbnRleHQ6IE9iamVjdCxcbiAgICBzdHlsZVNoZWV0OiBTdHlsZVNoZWV0LFxuICAgIHN0eWxpczogU3RyaW5naWZpZXJcbiAgKSB7XG4gICAgaWYgKGluc3RhbmNlID4gMikgU3R5bGVTaGVldC5yZWdpc3RlcklkKHRoaXMuY29tcG9uZW50SWQgKyBpbnN0YW5jZSk7XG5cbiAgICAvLyBOT1RFOiBSZW1vdmUgb2xkIHN0eWxlcywgdGhlbiBpbmplY3QgdGhlIG5ldyBvbmVzXG4gICAgdGhpcy5yZW1vdmVTdHlsZXMoaW5zdGFuY2UsIHN0eWxlU2hlZXQpO1xuICAgIHRoaXMuY3JlYXRlU3R5bGVzKGluc3RhbmNlLCBleGVjdXRpb25Db250ZXh0LCBzdHlsZVNoZWV0LCBzdHlsaXMpO1xuICB9XG59XG4iLCIvLyBAZmxvd1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJU19CUk9XU0VSLCBTQ19BVFRSLCBTQ19BVFRSX1ZFUlNJT04sIFNDX1ZFUlNJT04gfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IHRocm93U3R5bGVkRXJyb3IgZnJvbSAnLi4vdXRpbHMvZXJyb3InO1xuaW1wb3J0IGdldE5vbmNlIGZyb20gJy4uL3V0aWxzL25vbmNlJztcbmltcG9ydCBTdHlsZVNoZWV0IGZyb20gJy4uL3NoZWV0JztcbmltcG9ydCBTdHlsZVNoZWV0TWFuYWdlciBmcm9tICcuL1N0eWxlU2hlZXRNYW5hZ2VyJztcblxuZGVjbGFyZSB2YXIgX19TRVJWRVJfXzogYm9vbGVhbjtcblxuY29uc3QgQ0xPU0lOR19UQUdfUiA9IC9eXFxzKjxcXC9bYS16XS9pO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZXJ2ZXJTdHlsZVNoZWV0IHtcbiAgaXNTdHJlYW1pbmc6IGJvb2xlYW47XG5cbiAgaW5zdGFuY2U6IFN0eWxlU2hlZXQ7XG5cbiAgc2VhbGVkOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaW5zdGFuY2UgPSBuZXcgU3R5bGVTaGVldCh7IGlzU2VydmVyOiB0cnVlIH0pO1xuICAgIHRoaXMuc2VhbGVkID0gZmFsc2U7XG4gIH1cblxuICBfZW1pdFNoZWV0Q1NTID0gKCk6IHN0cmluZyA9PiB7XG4gICAgY29uc3QgY3NzID0gdGhpcy5pbnN0YW5jZS50b1N0cmluZygpO1xuICAgIGlmICghY3NzKSByZXR1cm4gJyc7XG5cbiAgICBjb25zdCBub25jZSA9IGdldE5vbmNlKCk7XG4gICAgY29uc3QgYXR0cnMgPSBbbm9uY2UgJiYgYG5vbmNlPVwiJHtub25jZX1cImAsIGAke1NDX0FUVFJ9PVwidHJ1ZVwiYCwgYCR7U0NfQVRUUl9WRVJTSU9OfT1cIiR7U0NfVkVSU0lPTn1cImBdO1xuICAgIGNvbnN0IGh0bWxBdHRyID0gYXR0cnMuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJyAnKTtcblxuICAgIHJldHVybiBgPHN0eWxlICR7aHRtbEF0dHJ9PiR7Y3NzfTwvc3R5bGU+YDtcbiAgfTtcblxuICBjb2xsZWN0U3R5bGVzKGNoaWxkcmVuOiBhbnkpIHtcbiAgICBpZiAodGhpcy5zZWFsZWQpIHtcbiAgICAgIHJldHVybiB0aHJvd1N0eWxlZEVycm9yKDIpO1xuICAgIH1cblxuICAgIHJldHVybiA8U3R5bGVTaGVldE1hbmFnZXIgc2hlZXQ9e3RoaXMuaW5zdGFuY2V9PntjaGlsZHJlbn08L1N0eWxlU2hlZXRNYW5hZ2VyPjtcbiAgfVxuXG4gIGdldFN0eWxlVGFncyA9ICgpOiBzdHJpbmcgPT4ge1xuICAgIGlmICh0aGlzLnNlYWxlZCkge1xuICAgICAgcmV0dXJuIHRocm93U3R5bGVkRXJyb3IoMik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2VtaXRTaGVldENTUygpO1xuICB9O1xuXG4gIGdldFN0eWxlRWxlbWVudCA9ICgpID0+IHtcbiAgICBpZiAodGhpcy5zZWFsZWQpIHtcbiAgICAgIHJldHVybiB0aHJvd1N0eWxlZEVycm9yKDIpO1xuICAgIH1cblxuICAgIGNvbnN0IHByb3BzID0ge1xuICAgICAgW1NDX0FUVFJdOiAnJyxcbiAgICAgIFtTQ19BVFRSX1ZFUlNJT05dOiBTQ19WRVJTSU9OLFxuICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHtcbiAgICAgICAgX19odG1sOiB0aGlzLmluc3RhbmNlLnRvU3RyaW5nKCksXG4gICAgICB9LFxuICAgIH07XG5cbiAgICBjb25zdCBub25jZSA9IGdldE5vbmNlKCk7XG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICAocHJvcHM6IGFueSkubm9uY2UgPSBub25jZTtcbiAgICB9XG5cbiAgICAvLyB2NCByZXR1cm5lZCBhbiBhcnJheSBmb3IgdGhpcyBmbiwgc28gd2UnbGwgZG8gdGhlIHNhbWUgZm9yIHY1IGZvciBiYWNrd2FyZCBjb21wYXRcbiAgICByZXR1cm4gWzxzdHlsZSB7Li4ucHJvcHN9IGtleT1cInNjLTAtMFwiIC8+XTtcbiAgfTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgaW50ZXJsZWF2ZVdpdGhOb2RlU3RyZWFtKGlucHV0OiBhbnkpIHtcbiAgICBpZiAoIV9fU0VSVkVSX18gfHwgSVNfQlJPV1NFUikge1xuICAgICAgcmV0dXJuIHRocm93U3R5bGVkRXJyb3IoMyk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnNlYWxlZCkge1xuICAgICAgcmV0dXJuIHRocm93U3R5bGVkRXJyb3IoMik7XG4gICAgfVxuXG4gICAgaWYgKF9fU0VSVkVSX18pIHtcbiAgICAgIHRoaXMuc2VhbCgpO1xuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ2xvYmFsLXJlcXVpcmVcbiAgICAgIGNvbnN0IHsgUmVhZGFibGUsIFRyYW5zZm9ybSB9ID0gcmVxdWlyZSgnc3RyZWFtJyk7XG5cbiAgICAgIGNvbnN0IHJlYWRhYmxlU3RyZWFtOiBSZWFkYWJsZSA9IGlucHV0O1xuICAgICAgY29uc3QgeyBpbnN0YW5jZTogc2hlZXQsIF9lbWl0U2hlZXRDU1MgfSA9IHRoaXM7XG5cbiAgICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gbmV3IFRyYW5zZm9ybSh7XG4gICAgICAgIHRyYW5zZm9ybTogZnVuY3Rpb24gYXBwZW5kU3R5bGVDaHVua3MoY2h1bmssIC8qIGVuY29kaW5nICovIF8sIGNhbGxiYWNrKSB7XG4gICAgICAgICAgLy8gR2V0IHRoZSBjaHVuayBhbmQgcmV0cmlldmUgdGhlIHNoZWV0J3MgQ1NTIGFzIGFuIEhUTUwgY2h1bmssXG4gICAgICAgICAgLy8gdGhlbiByZXNldCBpdHMgcnVsZXMgc28gd2UgZ2V0IG9ubHkgbmV3IG9uZXMgZm9yIHRoZSBuZXh0IGNodW5rXG4gICAgICAgICAgY29uc3QgcmVuZGVyZWRIdG1sID0gY2h1bmsudG9TdHJpbmcoKTtcbiAgICAgICAgICBjb25zdCBodG1sID0gX2VtaXRTaGVldENTUygpO1xuXG4gICAgICAgICAgc2hlZXQuY2xlYXJUYWcoKTtcblxuICAgICAgICAgIC8vIHByZXBlbmQgc3R5bGUgaHRtbCB0byBjaHVuaywgdW5sZXNzIHRoZSBzdGFydCBvZiB0aGUgY2h1bmsgaXMgYVxuICAgICAgICAgIC8vIGNsb3NpbmcgdGFnIGluIHdoaWNoIGNhc2UgYXBwZW5kIHJpZ2h0IGFmdGVyIHRoYXRcbiAgICAgICAgICBpZiAoQ0xPU0lOR19UQUdfUi50ZXN0KHJlbmRlcmVkSHRtbCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGVuZE9mQ2xvc2luZ1RhZyA9IHJlbmRlcmVkSHRtbC5pbmRleE9mKCc+JykgKyAxO1xuICAgICAgICAgICAgY29uc3QgYmVmb3JlID0gcmVuZGVyZWRIdG1sLnNsaWNlKDAsIGVuZE9mQ2xvc2luZ1RhZyk7XG4gICAgICAgICAgICBjb25zdCBhZnRlciA9IHJlbmRlcmVkSHRtbC5zbGljZShlbmRPZkNsb3NpbmdUYWcpO1xuXG4gICAgICAgICAgICB0aGlzLnB1c2goYmVmb3JlICsgaHRtbCArIGFmdGVyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wdXNoKGh0bWwgKyByZW5kZXJlZEh0bWwpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgcmVhZGFibGVTdHJlYW0ub24oJ2Vycm9yJywgZXJyID0+IHtcbiAgICAgICAgLy8gZm9yd2FyZCB0aGUgZXJyb3IgdG8gdGhlIHRyYW5zZm9ybSBzdHJlYW1cbiAgICAgICAgdHJhbnNmb3JtZXIuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiByZWFkYWJsZVN0cmVhbS5waXBlKHRyYW5zZm9ybWVyKTtcbiAgICB9XG4gIH1cblxuICBzZWFsID0gKCkgPT4ge1xuICAgIHRoaXMuc2VhbGVkID0gdHJ1ZTtcbiAgfTtcbn1cbiIsIi8vIEBmbG93XG5cbmltcG9ydCBjc3MgZnJvbSAnLi9jc3MnO1xuaW1wb3J0IGdlbmVyYXRlQ29tcG9uZW50SWQgZnJvbSAnLi4vdXRpbHMvZ2VuZXJhdGVDb21wb25lbnRJZCc7XG5pbXBvcnQgS2V5ZnJhbWVzIGZyb20gJy4uL21vZGVscy9LZXlmcmFtZXMnO1xuXG5pbXBvcnQgdHlwZSB7IEludGVycG9sYXRpb24sIFN0eWxlcyB9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ga2V5ZnJhbWVzKFxuICBzdHJpbmdzOiBTdHlsZXMsXG4gIC4uLmludGVycG9sYXRpb25zOiBBcnJheTxJbnRlcnBvbGF0aW9uPlxuKTogS2V5ZnJhbWVzIHtcbiAgLyogV2FybmluZyBpZiB5b3UndmUgdXNlZCBrZXlmcmFtZXMgb24gUmVhY3QgTmF0aXZlICovXG4gIGlmIChcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJ1xuICApIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUud2FybihcbiAgICAgICdga2V5ZnJhbWVzYCBjYW5ub3QgYmUgdXNlZCBvbiBSZWFjdE5hdGl2ZSwgb25seSBvbiB0aGUgd2ViLiBUbyBkbyBhbmltYXRpb24gaW4gUmVhY3ROYXRpdmUgcGxlYXNlIHVzZSBBbmltYXRlZC4nXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IHJ1bGVzID0gY3NzKHN0cmluZ3MsIC4uLmludGVycG9sYXRpb25zKS5qb2luKCcnKTtcbiAgY29uc3QgbmFtZSA9IGdlbmVyYXRlQ29tcG9uZW50SWQocnVsZXMpO1xuICByZXR1cm4gbmV3IEtleWZyYW1lcyhuYW1lLCBydWxlcyk7XG59XG4iLCIvLyBAZmxvd1xuLyogSW1wb3J0IHNpbmdsZXRvbnMgKi9cbmltcG9ydCBpc1N0eWxlZENvbXBvbmVudCBmcm9tICcuL3V0aWxzL2lzU3R5bGVkQ29tcG9uZW50JztcbmltcG9ydCBjc3MgZnJvbSAnLi9jb25zdHJ1Y3RvcnMvY3NzJztcbmltcG9ydCBjcmVhdGVHbG9iYWxTdHlsZSBmcm9tICcuL2NvbnN0cnVjdG9ycy9jcmVhdGVHbG9iYWxTdHlsZSc7XG5pbXBvcnQga2V5ZnJhbWVzIGZyb20gJy4vY29uc3RydWN0b3JzL2tleWZyYW1lcyc7XG5pbXBvcnQgU2VydmVyU3R5bGVTaGVldCBmcm9tICcuL21vZGVscy9TZXJ2ZXJTdHlsZVNoZWV0JztcbmltcG9ydCB7IFNDX1ZFUlNJT04gfSBmcm9tICcuL2NvbnN0YW50cyc7XG5cbmltcG9ydCBTdHlsZVNoZWV0TWFuYWdlciwge1xuICBTdHlsZVNoZWV0Q29udGV4dCxcbiAgU3R5bGVTaGVldENvbnN1bWVyLFxufSBmcm9tICcuL21vZGVscy9TdHlsZVNoZWV0TWFuYWdlcic7XG5cbi8qIEltcG9ydCBjb21wb25lbnRzICovXG5pbXBvcnQgVGhlbWVQcm92aWRlciwgeyBUaGVtZUNvbnRleHQsIFRoZW1lQ29uc3VtZXIgfSBmcm9tICcuL21vZGVscy9UaGVtZVByb3ZpZGVyJztcblxuLyogSW1wb3J0IEhpZ2hlciBPcmRlciBDb21wb25lbnRzICovXG5pbXBvcnQgd2l0aFRoZW1lIGZyb20gJy4vaG9jL3dpdGhUaGVtZSc7XG5cbi8qIEltcG9ydCBob29rcyAqL1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4vaG9va3MvdXNlVGhlbWUnO1xuXG5kZWNsYXJlIHZhciBfX1NFUlZFUl9fOiBib29sZWFuO1xuXG4vKiBXYXJuaW5nIGlmIHlvdSd2ZSBpbXBvcnRlZCB0aGlzIGZpbGUgb24gUmVhY3QgTmF0aXZlICovXG5pZiAoXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZSdcbikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICBjb25zb2xlLndhcm4oXG4gICAgXCJJdCBsb29rcyBsaWtlIHlvdSd2ZSBpbXBvcnRlZCAnc3R5bGVkLWNvbXBvbmVudHMnIG9uIFJlYWN0IE5hdGl2ZS5cXG5cIiArXG4gICAgICBcIlBlcmhhcHMgeW91J3JlIGxvb2tpbmcgdG8gaW1wb3J0ICdzdHlsZWQtY29tcG9uZW50cy9uYXRpdmUnP1xcblwiICtcbiAgICAgICdSZWFkIG1vcmUgYWJvdXQgdGhpcyBhdCBodHRwczovL3d3dy5zdHlsZWQtY29tcG9uZW50cy5jb20vZG9jcy9iYXNpY3MjcmVhY3QtbmF0aXZlJ1xuICApO1xufVxuXG4vKiBXYXJuaW5nIGlmIHRoZXJlIGFyZSBzZXZlcmFsIGluc3RhbmNlcyBvZiBzdHlsZWQtY29tcG9uZW50cyAqL1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICB3aW5kb3dbJ19fc3R5bGVkLWNvbXBvbmVudHMtaW5pdF9fJ10gPSB3aW5kb3dbJ19fc3R5bGVkLWNvbXBvbmVudHMtaW5pdF9fJ10gfHwgMDtcblxuICBpZiAod2luZG93WydfX3N0eWxlZC1jb21wb25lbnRzLWluaXRfXyddID09PSAxKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICBcIkl0IGxvb2tzIGxpa2UgdGhlcmUgYXJlIHNldmVyYWwgaW5zdGFuY2VzIG9mICdzdHlsZWQtY29tcG9uZW50cycgaW5pdGlhbGl6ZWQgaW4gdGhpcyBhcHBsaWNhdGlvbi4gXCIgK1xuICAgICAgICAnVGhpcyBtYXkgY2F1c2UgZHluYW1pYyBzdHlsZXMgdG8gbm90IHJlbmRlciBwcm9wZXJseSwgZXJyb3JzIGR1cmluZyB0aGUgcmVoeWRyYXRpb24gcHJvY2VzcywgJyArXG4gICAgICAgICdhIG1pc3NpbmcgdGhlbWUgcHJvcCwgYW5kIG1ha2VzIHlvdXIgYXBwbGljYXRpb24gYmlnZ2VyIHdpdGhvdXQgZ29vZCByZWFzb24uXFxuXFxuJyArXG4gICAgICAgICdTZWUgaHR0cHM6Ly9zLWMuc2gvMkJBWHplZCBmb3IgbW9yZSBpbmZvLidcbiAgICApO1xuICB9XG5cbiAgd2luZG93WydfX3N0eWxlZC1jb21wb25lbnRzLWluaXRfXyddICs9IDE7XG59XG5cbi8qIEV4cG9ydCBldmVyeXRoaW5nICovXG5leHBvcnQgKiBmcm9tICcuL3NlY3JldEludGVybmFscyc7XG5leHBvcnQge1xuICBjcmVhdGVHbG9iYWxTdHlsZSxcbiAgY3NzLFxuICBpc1N0eWxlZENvbXBvbmVudCxcbiAga2V5ZnJhbWVzLFxuICBTZXJ2ZXJTdHlsZVNoZWV0LFxuICBTdHlsZVNoZWV0Q29uc3VtZXIsXG4gIFN0eWxlU2hlZXRDb250ZXh0LFxuICBTdHlsZVNoZWV0TWFuYWdlcixcbiAgVGhlbWVDb25zdW1lcixcbiAgVGhlbWVDb250ZXh0LFxuICBUaGVtZVByb3ZpZGVyLFxuICB1c2VUaGVtZSxcbiAgU0NfVkVSU0lPTiBhcyB2ZXJzaW9uLFxuICB3aXRoVGhlbWUsXG59O1xuIiwiXHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xyXG5cclxuY29uc3QgU2lkZU5hdmJhckNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgd2lkdGg6IDEyMHB4O1xyXG4gIG1pbi13aWR0aDogMTIwcHg7XHJcbiAgZmxleC1ncm93OiAwO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBwYWRkaW5nOiAyMHB4IDEwcHhcclxuYDtcclxuXHJcbmNvbnN0IFNpZGVOYXZJdGVtID0gc3R5bGVkLmRpdmBcclxuICBmb250LXNpemU6IDE2cHg7XHJcbiAgZm9udC1mYW1pbHk6IEFyaWFsO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcclxuICBtYXJnaW46IDVweDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyXHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgU2lkZU5hdmJhcjogUmVhY3QuRkMgPSAoKSA9PiB7XHJcbiAgcmV0dXJuIChcclxuICAgIDxTaWRlTmF2YmFyQ29udGFpbmVyPlxyXG4gICAgICAgIDxTaWRlTmF2SXRlbT5BZGQgYSBGaWxlIC4uLjwvU2lkZU5hdkl0ZW0+XHJcbiAgICAgICAgPFNpZGVOYXZJdGVtPkxpYnJhcnk8L1NpZGVOYXZJdGVtPlxyXG4gICAgICAgIDxTaWRlTmF2SXRlbT5GYXZvcml0ZXM8L1NpZGVOYXZJdGVtPlxyXG4gICAgPC9TaWRlTmF2YmFyQ29udGFpbmVyPlxyXG4gIClcclxufTtcclxuIiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7XG4gICAgd3JpdGFibGU6IGZhbHNlXG4gIH0pO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59IiwiXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUdsb2JhbERhdGEge1xyXG4gIGN1cnJlbnRTcGVlY2hUZXh0Pzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgR2xvYmFsRGF0YSBpbXBsZW1lbnRzIElHbG9iYWxEYXRhIHtcclxuICBwcml2YXRlIHNwZWVjaFRleHQ/OiBzdHJpbmc7XHJcblxyXG4gIGdldCBjdXJyZW50U3BlZWNoVGV4dCgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xyXG4gICAgICByZXR1cm4gdGhpcy5zcGVlY2hUZXh0O1xyXG4gIH1cclxuICBzZXQgY3VycmVudFNwZWVjaFRleHQodmFsOiBzdHJpbmcgfCB1bmRlZmluZWQpIHtcclxuICAgICAgdGhpcy5zcGVlY2hUZXh0ID0gdmFsO1xyXG4gIH1cclxufVxyXG5cclxuZGVjbGFyZSBnbG9iYWwge1xyXG4gICAgaW50ZXJmYWNlIFdpbmRvdyB7IHVzZXJEYXRhOiBhbnk7IH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGdldEdsb2JhbERhdGEgPSAoKTogSUdsb2JhbERhdGEgPT4ge1xyXG4gIGlmICghd2luZG93LnVzZXJEYXRhKSB7XHJcbiAgICB3aW5kb3cudXNlckRhdGEgPSB7Z2xvYmFsRGF0YTogbmV3IEdsb2JhbERhdGEoKX07XHJcbiAgfVxyXG4gIGNvbnNvbGUubG9nKHdpbmRvdy51c2VyRGF0YS5nbG9iYWxEYXRhKTtcclxuICByZXR1cm4gd2luZG93LnVzZXJEYXRhLmdsb2JhbERhdGE7XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn0iLCJcclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBzdHlsZWQgZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XHJcbmltcG9ydCB7IGdldEdsb2JhbERhdGEgfSBmcm9tIFwiLi4vZGF0YXByb3ZpZGVyL2dsb2JhbC1kYXRhXCI7XHJcblxyXG5jb25zdCBUZXh0QXJlYUNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgZmxleC1ncm93OiAxMDtcclxuICBtYXJnaW46IDIwcHggMTBweDtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbmA7XHJcblxyXG5jb25zdCBUZXh0QXJlYSA9IHN0eWxlZC50ZXh0YXJlYWBcclxuICBmbGV4LWdyb3c6IDEwO1xyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IFBhbmVsVGV4dGFyZWE6IFJlYWN0LkZDID0gKCkgPT4ge1xyXG4gIGZ1bmN0aW9uIG9uVGV4dENoYW5nZWQoZTogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTFRleHRBcmVhRWxlbWVudD4pIHtcclxuICAgIGlmICghZS50YXJnZXQgfHwgIWUudGFyZ2V0LnZhbHVlKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGdldEdsb2JhbERhdGEoKS5jdXJyZW50U3BlZWNoVGV4dCA9IGUudGFyZ2V0LnZhbHVlO1xyXG4gIH1cclxuICByZXR1cm4gKFxyXG4gICAgPFRleHRBcmVhQ29udGFpbmVyPlxyXG4gICAgICA8VGV4dEFyZWEgb25DaGFuZ2U9e29uVGV4dENoYW5nZWR9IHBsYWNlaG9sZGVyPVwiVHlwZSBoZXJlIC4uLlwiPjwvVGV4dEFyZWE+XHJcbiAgICA8L1RleHRBcmVhQ29udGFpbmVyPlxyXG4gICk7XHJcbn07XHJcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykge1xuICAgIGFycjJbaV0gPSBhcnJbaV07XG4gIH1cblxuICByZXR1cm4gYXJyMjtcbn0iLCJpbXBvcnQgYXJyYXlXaXRoSG9sZXMgZnJvbSBcIi4vYXJyYXlXaXRoSG9sZXMuanNcIjtcbmltcG9ydCBpdGVyYWJsZVRvQXJyYXlMaW1pdCBmcm9tIFwiLi9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qc1wiO1xuaW1wb3J0IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IGZyb20gXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzXCI7XG5pbXBvcnQgbm9uSXRlcmFibGVSZXN0IGZyb20gXCIuL25vbkl0ZXJhYmxlUmVzdC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7XG4gIHJldHVybiBhcnJheVdpdGhIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBub25JdGVyYWJsZVJlc3QoKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkge1xuICB2YXIgX2kgPSBhcnIgPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGFycltTeW1ib2wuaXRlcmF0b3JdIHx8IGFycltcIkBAaXRlcmF0b3JcIl07XG5cbiAgaWYgKF9pID09IG51bGwpIHJldHVybjtcbiAgdmFyIF9hcnIgPSBbXTtcbiAgdmFyIF9uID0gdHJ1ZTtcbiAgdmFyIF9kID0gZmFsc2U7XG5cbiAgdmFyIF9zLCBfZTtcblxuICB0cnkge1xuICAgIGZvciAoX2kgPSBfaS5jYWxsKGFycik7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHtcbiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7XG5cbiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhaztcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kID0gdHJ1ZTtcbiAgICBfZSA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2QpIHRocm93IF9lO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfYXJyO1xufSIsImltcG9ydCBhcnJheUxpa2VUb0FycmF5IGZyb20gXCIuL2FycmF5TGlrZVRvQXJyYXkuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gIH0gOiBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgfSwgX3R5cGVvZihvYmopO1xufSIsImltcG9ydCBfdHlwZW9mIGZyb20gXCIuL3R5cGVvZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3JlZ2VuZXJhdG9yUnVudGltZSgpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIC8qISByZWdlbmVyYXRvci1ydW50aW1lIC0tIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLiAtLSBsaWNlbnNlIChNSVQpOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvYmxvYi9tYWluL0xJQ0VOU0UgKi9cblxuICBfcmVnZW5lcmF0b3JSdW50aW1lID0gZnVuY3Rpb24gX3JlZ2VuZXJhdG9yUnVudGltZSgpIHtcbiAgICByZXR1cm4gZXhwb3J0cztcbiAgfTtcblxuICB2YXIgZXhwb3J0cyA9IHt9LFxuICAgICAgT3AgPSBPYmplY3QucHJvdG90eXBlLFxuICAgICAgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHksXG4gICAgICAkU3ltYm9sID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgPyBTeW1ib2wgOiB7fSxcbiAgICAgIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIixcbiAgICAgIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIixcbiAgICAgIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiBkZWZpbmUob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogITAsXG4gICAgICBjb25maWd1cmFibGU6ICEwLFxuICAgICAgd3JpdGFibGU6ICEwXG4gICAgfSksIG9ialtrZXldO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBkZWZpbmUoe30sIFwiXCIpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBkZWZpbmUgPSBmdW5jdGlvbiBkZWZpbmUob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yLFxuICAgICAgICBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSksXG4gICAgICAgIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG4gICAgcmV0dXJuIGdlbmVyYXRvci5faW52b2tlID0gZnVuY3Rpb24gKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICAgIHZhciBzdGF0ZSA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAobWV0aG9kLCBhcmcpIHtcbiAgICAgICAgaWYgKFwiZXhlY3V0aW5nXCIgPT09IHN0YXRlKSB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuXG4gICAgICAgIGlmIChcImNvbXBsZXRlZFwiID09PSBzdGF0ZSkge1xuICAgICAgICAgIGlmIChcInRocm93XCIgPT09IG1ldGhvZCkgdGhyb3cgYXJnO1xuICAgICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGNvbnRleHQubWV0aG9kID0gbWV0aG9kLCBjb250ZXh0LmFyZyA9IGFyZzs7KSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcblxuICAgICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKFwibmV4dFwiID09PSBjb250ZXh0Lm1ldGhvZCkgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO2Vsc2UgaWYgKFwidGhyb3dcIiA9PT0gY29udGV4dC5tZXRob2QpIHtcbiAgICAgICAgICAgIGlmIChcInN1c3BlbmRlZFN0YXJ0XCIgPT09IHN0YXRlKSB0aHJvdyBzdGF0ZSA9IFwiY29tcGxldGVkXCIsIGNvbnRleHQuYXJnO1xuICAgICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG4gICAgICAgICAgfSBlbHNlIFwicmV0dXJuXCIgPT09IGNvbnRleHQubWV0aG9kICYmIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgICBzdGF0ZSA9IFwiZXhlY3V0aW5nXCI7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKFwibm9ybWFsXCIgPT09IHJlY29yZC50eXBlKSB7XG4gICAgICAgICAgICBpZiAoc3RhdGUgPSBjb250ZXh0LmRvbmUgPyBcImNvbXBsZXRlZFwiIDogXCJzdXNwZW5kZWRZaWVsZFwiLCByZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgXCJ0aHJvd1wiID09PSByZWNvcmQudHlwZSAmJiAoc3RhdGUgPSBcImNvbXBsZXRlZFwiLCBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIiwgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KGlubmVyRm4sIHNlbGYsIGNvbnRleHQpLCBnZW5lcmF0b3I7XG4gIH1cblxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJub3JtYWxcIixcbiAgICAgICAgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwidGhyb3dcIixcbiAgICAgICAgYXJnOiBlcnJcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0cy53cmFwID0gd3JhcDtcbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cblxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIGRlZmluZShJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZixcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJiBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiYgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSAmJiAoSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSk7XG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9IEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcblxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xuICAgICAgZGVmaW5lKHByb3RvdHlwZSwgbWV0aG9kLCBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvciwgUHJvbWlzZUltcGwpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG5cbiAgICAgIGlmIChcInRocm93XCIgIT09IHJlY29yZC50eXBlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnLFxuICAgICAgICAgICAgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIHJldHVybiB2YWx1ZSAmJiBcIm9iamVjdFwiID09IF90eXBlb2YodmFsdWUpICYmIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikgPyBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSkgOiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uICh1bndyYXBwZWQpIHtcbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQsIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICB0aGlzLl9pbnZva2UgPSBmdW5jdGlvbiAobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VJbXBsKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID0gcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuXG4gICAgaWYgKHVuZGVmaW5lZCA9PT0gbWV0aG9kKSB7XG4gICAgICBpZiAoY29udGV4dC5kZWxlZ2F0ZSA9IG51bGwsIFwidGhyb3dcIiA9PT0gY29udGV4dC5tZXRob2QpIHtcbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdICYmIChjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCIsIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkLCBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSwgXCJ0aHJvd1wiID09PSBjb250ZXh0Lm1ldGhvZCkpIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIiwgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcbiAgICBpZiAoXCJ0aHJvd1wiID09PSByZWNvcmQudHlwZSkgcmV0dXJuIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiLCBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmcsIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsLCBDb250aW51ZVNlbnRpbmVsO1xuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcbiAgICByZXR1cm4gaW5mbyA/IGluZm8uZG9uZSA/IChjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZSwgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYywgXCJyZXR1cm5cIiAhPT0gY29udGV4dC5tZXRob2QgJiYgKGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCIsIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkKSwgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGwsIENvbnRpbnVlU2VudGluZWwpIDogaW5mbyA6IChjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIiwgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIiksIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsLCBDb250aW51ZVNlbnRpbmVsKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0ge1xuICAgICAgdHJ5TG9jOiBsb2NzWzBdXG4gICAgfTtcbiAgICAxIGluIGxvY3MgJiYgKGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXSksIDIgaW4gbG9jcyAmJiAoZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl0sIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXSksIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCIsIGRlbGV0ZSByZWNvcmQuYXJnLCBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7XG4gICAgICB0cnlMb2M6IFwicm9vdFwiXG4gICAgfV0sIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKSwgdGhpcy5yZXNldCghMCk7XG4gIH1cblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgaXRlcmFibGUubmV4dCkgcmV0dXJuIGl0ZXJhYmxlO1xuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSxcbiAgICAgICAgICAgIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIGZvciAoOyArK2kgPCBpdGVyYWJsZS5sZW5ndGg7KSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSByZXR1cm4gbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldLCBuZXh0LmRvbmUgPSAhMSwgbmV4dDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gbmV4dC52YWx1ZSA9IHVuZGVmaW5lZCwgbmV4dC5kb25lID0gITAsIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5leHQ6IGRvbmVSZXN1bHRcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgIGRvbmU6ICEwXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgZGVmaW5lKEdwLCBcImNvbnN0cnVjdG9yXCIsIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKSwgZGVmaW5lKEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBcImNvbnN0cnVjdG9yXCIsIEdlbmVyYXRvckZ1bmN0aW9uKSwgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkZWZpbmUoR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIpLCBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbiAoZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGdlbkZ1biAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuICEhY3RvciAmJiAoY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHwgXCJHZW5lcmF0b3JGdW5jdGlvblwiID09PSAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpKTtcbiAgfSwgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24gKGdlbkZ1bikge1xuICAgIHJldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSkgOiAoZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBkZWZpbmUoZ2VuRnVuLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKSksIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKSwgZ2VuRnVuO1xuICB9LCBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24gKGFyZykge1xuICAgIHJldHVybiB7XG4gICAgICBfX2F3YWl0OiBhcmdcbiAgICB9O1xuICB9LCBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpLCBkZWZpbmUoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUsIGFzeW5jSXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSksIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3IsIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbiAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QsIFByb21pc2VJbXBsKSB7XG4gICAgdm9pZCAwID09PSBQcm9taXNlSW1wbCAmJiAoUHJvbWlzZUltcGwgPSBQcm9taXNlKTtcbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLCBQcm9taXNlSW1wbCk7XG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKSA/IGl0ZXIgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgIH0pO1xuICB9LCBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApLCBkZWZpbmUoR3AsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvclwiKSwgZGVmaW5lKEdwLCBpdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KSwgZGVmaW5lKEdwLCBcInRvU3RyaW5nXCIsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfSksIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuXG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGtleXMucmV2ZXJzZSgpLCBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgZm9yICg7IGtleXMubGVuZ3RoOykge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHJldHVybiBuZXh0LnZhbHVlID0ga2V5LCBuZXh0LmRvbmUgPSAhMSwgbmV4dDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5leHQuZG9uZSA9ICEwLCBuZXh0O1xuICAgIH07XG4gIH0sIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzLCBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcbiAgICByZXNldDogZnVuY3Rpb24gcmVzZXQoc2tpcFRlbXBSZXNldCkge1xuICAgICAgaWYgKHRoaXMucHJldiA9IDAsIHRoaXMubmV4dCA9IDAsIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQsIHRoaXMuZG9uZSA9ICExLCB0aGlzLmRlbGVnYXRlID0gbnVsbCwgdGhpcy5tZXRob2QgPSBcIm5leHRcIiwgdGhpcy5hcmcgPSB1bmRlZmluZWQsIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpLCAhc2tpcFRlbXBSZXNldCkgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgIFwidFwiID09PSBuYW1lLmNoYXJBdCgwKSAmJiBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJiAhaXNOYU4oK25hbWUuc2xpY2UoMSkpICYmICh0aGlzW25hbWVdID0gdW5kZWZpbmVkKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHN0b3A6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICB0aGlzLmRvbmUgPSAhMDtcbiAgICAgIHZhciByb290UmVjb3JkID0gdGhpcy50cnlFbnRyaWVzWzBdLmNvbXBsZXRpb247XG4gICAgICBpZiAoXCJ0aHJvd1wiID09PSByb290UmVjb3JkLnR5cGUpIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbiBkaXNwYXRjaEV4Y2VwdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcblxuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJldHVybiByZWNvcmQudHlwZSA9IFwidGhyb3dcIiwgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbiwgY29udGV4dC5uZXh0ID0gbG9jLCBjYXVnaHQgJiYgKGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCIsIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkKSwgISFjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldLFxuICAgICAgICAgICAgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgaWYgKFwicm9vdFwiID09PSBlbnRyeS50cnlMb2MpIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKSxcbiAgICAgICAgICAgICAgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCAhMCk7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsICEwKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNGaW5hbGx5KSB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgYWJydXB0OiBmdW5jdGlvbiBhYnJ1cHQodHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJiBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZmluYWxseUVudHJ5ICYmIChcImJyZWFrXCIgPT09IHR5cGUgfHwgXCJjb250aW51ZVwiID09PSB0eXBlKSAmJiBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJiBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MgJiYgKGZpbmFsbHlFbnRyeSA9IG51bGwpO1xuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZXR1cm4gcmVjb3JkLnR5cGUgPSB0eXBlLCByZWNvcmQuYXJnID0gYXJnLCBmaW5hbGx5RW50cnkgPyAodGhpcy5tZXRob2QgPSBcIm5leHRcIiwgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MsIENvbnRpbnVlU2VudGluZWwpIDogdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChcInRocm93XCIgPT09IHJlY29yZC50eXBlKSB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgcmV0dXJuIFwiYnJlYWtcIiA9PT0gcmVjb3JkLnR5cGUgfHwgXCJjb250aW51ZVwiID09PSByZWNvcmQudHlwZSA/IHRoaXMubmV4dCA9IHJlY29yZC5hcmcgOiBcInJldHVyblwiID09PSByZWNvcmQudHlwZSA/ICh0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmcsIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIiwgdGhpcy5uZXh0ID0gXCJlbmRcIikgOiBcIm5vcm1hbFwiID09PSByZWNvcmQudHlwZSAmJiBhZnRlckxvYyAmJiAodGhpcy5uZXh0ID0gYWZ0ZXJMb2MpLCBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG4gICAgZmluaXNoOiBmdW5jdGlvbiBmaW5pc2goZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSByZXR1cm4gdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyksIHJlc2V0VHJ5RW50cnkoZW50cnkpLCBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuICAgIH0sXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbiBfY2F0Y2godHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICAgIGlmIChcInRocm93XCIgPT09IHJlY29yZC50eXBlKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24gZGVsZWdhdGVZaWVsZChpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgcmV0dXJuIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9LCBcIm5leHRcIiA9PT0gdGhpcy5tZXRob2QgJiYgKHRoaXMuYXJnID0gdW5kZWZpbmVkKSwgQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH0sIGV4cG9ydHM7XG59IiwiZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykge1xuICB0cnkge1xuICAgIHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTtcbiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJlamVjdChlcnJvcik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGluZm8uZG9uZSkge1xuICAgIHJlc29sdmUodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXG4gICAgICBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwibmV4dFwiLCB2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIF90aHJvdyhlcnIpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcInRocm93XCIsIGVycik7XG4gICAgICB9XG5cbiAgICAgIF9uZXh0KHVuZGVmaW5lZCk7XG4gICAgfSk7XG4gIH07XG59IiwiXHJcbmV4cG9ydCBpbnRlcmZhY2UgV2ViRXZlbnRNZXNzYWdlIHtcclxuICAgIFN0YXR1czogbnVtYmVyO1xyXG4gICAgRXZlbnQ6IHN0cmluZztcclxuICAgIEFyZ3VtZW50czogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEhvc3RDb21tYW5kIHtcclxuICBDb21tYW5kTmFtZTogc3RyaW5nO1xyXG4gIENvbW1hbmRBcmd1bWVudHM6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBXZWJMaXN0ZW5lckNhbGxiYWNrIHtcclxuICAoYXJnczogV2ViRXZlbnRNZXNzYWdlKTogdm9pZDtcclxufVxyXG5cclxuLy8gaW50ZXJmYWNlIEhvc3RNZXNzYWdlTGlzdGVuZXJcclxuXHJcbmxldCBob3N0TXNnTGlzdGVuZXJzOiBNYXA8c3RyaW5nLCBBcnJheTxXZWJMaXN0ZW5lckNhbGxiYWNrPj4gPSBuZXcgTWFwPHN0cmluZywgQXJyYXk8V2ViTGlzdGVuZXJDYWxsYmFjaz4+KCk7XHJcblxyXG5jb25zdCBpc1dlYnZpZXcyVmFsaWQgPSAoKSA9PiAoKHdpbmRvdyBhcyBhbnkpLmNocm9tZSAmJiAod2luZG93IGFzIGFueSkuY2hyb21lLndlYnZpZXcpO1xyXG5jb25zdCBnZXRXZWJWaWV3MiA9ICgpID0+ICgod2luZG93IGFzIGFueSkuY2hyb21lLndlYnZpZXcpO1xyXG5cclxuY29uc3QgaG9zdFV0aWxzID0ge1xyXG4gICAgcG9zdE1lc3NhZ2U6IChtc2c6IFdlYkV2ZW50TWVzc2FnZSkgPT4ge1xyXG4gICAgICAgIGlmICgod2luZG93IGFzIGFueSkuY2hyb21lICYmICh3aW5kb3cgYXMgYW55KS5jaHJvbWUud2Vidmlldykge1xyXG4gICAgICAgICAgICAod2luZG93IGFzIGFueSkuY2hyb21lLndlYnZpZXcucG9zdE1lc3NhZ2UoSlNPTi5zdHJpbmdpZnkobXNnKSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJDYW4ndCBhY2Nlc3Mgd2luZG93LmNocm9tZS53ZWJ2aWV3XCIpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgYWRkSG9zdE1lc3NhZ2VMaXN0ZW5lcjogKG1zZzogc3RyaW5nLCBjYjogV2ViTGlzdGVuZXJDYWxsYmFjaykgPT4ge1xyXG4gICAgICBpZiAoaG9zdE1zZ0xpc3RlbmVycy5oYXMobXNnKSkge1xyXG4gICAgICAgIGhvc3RNc2dMaXN0ZW5lcnMuZ2V0KG1zZyk/LnB1c2goY2IpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGhvc3RNc2dMaXN0ZW5lcnMuc2V0KG1zZywgW2NiXSk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICByZW1vdmVIb3N0TWVzc2FnZUxpc3RlbmVyOiAobXNnOiBzdHJpbmcsIGNiOiBXZWJMaXN0ZW5lckNhbGxiYWNrKSA9PiB7XHJcbiAgICAgIGlmIChob3N0TXNnTGlzdGVuZXJzLmhhcyhtc2cpKSB7XHJcbiAgICAgICAgbGV0IGl4ID0gaG9zdE1zZ0xpc3RlbmVycy5nZXQobXNnKT8uaW5kZXhPZihjYik7XHJcbiAgICAgICAgaWYgKGl4ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGl4ID49IDApIHtcclxuICAgICAgICAgICAgaG9zdE1zZ0xpc3RlbmVycy5nZXQobXNnKT8uc2xpY2UoaXgsIGl4KzEpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIG9uSG9zdE1lc3NhZ2U6IChtc2c6IHN0cmluZywgYXJnczogV2ViRXZlbnRNZXNzYWdlKSA9PiB7XHJcbiAgICAgIGlmIChob3N0TXNnTGlzdGVuZXJzLmhhcyhtc2cpKSB7XHJcbiAgICAgICAgbGV0IG9ic2VydmVycyA9IGhvc3RNc2dMaXN0ZW5lcnMuZ2V0KG1zZyk7XHJcbiAgICAgICAgb2JzZXJ2ZXJzPy5mb3JFYWNoKG8gPT4gbyhhcmdzKSk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBnZXRWb2ljZXM6IGFzeW5jICgpOiBQcm9taXNlPHN0cmluZ1tdPiA9PiB7XHJcbiAgICAgIGlmIChpc1dlYnZpZXcyVmFsaWQoKSkge1xyXG4gICAgICAgIHZhciB2b2ljZXMgPSBhd2FpdCBnZXRXZWJWaWV3MigpLmhvc3RPYmplY3RzLmludGVyb3AuZ2V0Vm9pY2VzKCk7XHJcbiAgICAgICAgY29uc29sZS5sb2codm9pY2VzKTtcclxuICAgICAgICByZXR1cm4gdm9pY2VzLnNwbGl0KFwiLFwiKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gW107XHJcbiAgICB9LFxyXG59O1xyXG5cclxuaWYgKCh3aW5kb3cgYXMgYW55KS5jaHJvbWUgJiYgKHdpbmRvdyBhcyBhbnkpLmNocm9tZS53ZWJ2aWV3KSB7XHJcbiAgICAod2luZG93IGFzIGFueSkuY2hyb21lLndlYnZpZXcuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIChlOiBhbnkpID0+IHtcclxuICAgICAgaWYgKGUuZGF0YSAmJiB0eXBlb2YgZS5kYXRhID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgbGV0IG1zZyA9IEpTT04ucGFyc2UoZS5kYXRhKSBhcyBXZWJFdmVudE1lc3NhZ2U7XHJcbiAgICAgICAgaWYgKCFtc2cuRXZlbnQpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaG9zdFV0aWxzLm9uSG9zdE1lc3NhZ2UobXNnLkV2ZW50LCBtc2cpO1xyXG4gICAgICB9XHJcbiAgICB9KVxyXG59IFxyXG5cclxuZXhwb3J0IGRlZmF1bHQgaG9zdFV0aWxzO1xyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHN0eWxlZCBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcclxuaW1wb3J0IHsgZ2V0R2xvYmFsRGF0YSB9IGZyb20gXCIuLi9kYXRhcHJvdmlkZXIvZ2xvYmFsLWRhdGFcIjtcclxuaW1wb3J0IGhvc3RVdGlscywgeyBIb3N0Q29tbWFuZCwgV2ViRXZlbnRNZXNzYWdlIH0gZnJvbSBcIi4uL2hvc3RhcGkvaG9zdGFwaVwiO1xyXG5cclxuY29uc3QgVG9vbGJhckNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgaGVpZ2h0OiAzMnB4O1xyXG4gIGZsZXgtZ3JvdzogMDtcclxuICBtYXJnaW46IDAgYXV0bztcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XHJcbmA7XHJcblxyXG5jb25zdCBUb29sSXRlbSA9IHN0eWxlZC5kaXZgXHJcbiAgbWFyZ2luOiAycHggNXB4O1xyXG5gO1xyXG5jb25zdCBUb29sQnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcclxuICB3aWR0aDogNXJlbTtcclxuYDtcclxuXHJcbmVudW0gUGxheVN0YXRlRW51bSB7XHJcbiAga1Vua25vd249XCJ1bmtub3duXCIsXHJcbiAga1BsYXlpbmcgPSBcInBsYXlpbmdcIixcclxuICBrUGF1c2VkID0gXCJwYXVzZWRcIixcclxuICBrQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIlxyXG59O1xyXG5cclxuY29uc3Qgc3RyaW5naWZ5SG9zdENvbW1hbmQgPSAoY21kTmFtZTogc3RyaW5nLCBjbWRBcmdzPzogc3RyaW5nKTogc3RyaW5nID0+IHtcclxuICB2YXIgY21kOiBIb3N0Q29tbWFuZCA9IHtDb21tYW5kTmFtZTogY21kTmFtZSwgQ29tbWFuZEFyZ3VtZW50czogY21kQXJncz8/XCJcIn07XHJcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGNtZCk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgUGFuZWxUb29sYmFyOiBSZWFjdC5GQyA9ICgpID0+IHtcclxuICB2YXIgaW5pdFZvaWNlczogc3RyaW5nW10gPSBbXTtcclxuICBsZXQgW3BsYXlTdGF0ZSwgc2V0UGxheVN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlPFBsYXlTdGF0ZUVudW0+KFBsYXlTdGF0ZUVudW0ua1Vua25vd24pO1xyXG4gIGxldCBbdm9pY2VzLCBzZXRWb2ljZXNdID0gUmVhY3QudXNlU3RhdGU8c3RyaW5nW10+KGluaXRWb2ljZXMpO1xyXG4gIGxldCBbY3VyVm9pY2UsIHNldEN1clZvaWNlXSA9IFJlYWN0LnVzZVN0YXRlPHN0cmluZz4oXCJcIik7XHJcbiAgZnVuY3Rpb24gb25QbGF5U3RhdGVDaGFuZ2VkKG1zZzogV2ViRXZlbnRNZXNzYWdlKSB7XHJcbiAgICBpZiAobXNnLkV2ZW50ICE9PSBcInBsYXlTdGF0ZUNoYW5nZWRcIikge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBzd2l0Y2gobXNnLkFyZ3VtZW50cykge1xyXG4gICAgICBjYXNlIFwicGxheWluZ1wiOlxyXG4gICAgICAgIHNldFBsYXlTdGF0ZShQbGF5U3RhdGVFbnVtLmtQbGF5aW5nKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIGNhc2UgXCJwYXVzZWRcIjpcclxuICAgICAgICBzZXRQbGF5U3RhdGUoUGxheVN0YXRlRW51bS5rUGF1c2VkKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIGNhc2UgXCJjb21wbGV0ZWRcIjpcclxuICAgICAgICBzZXRQbGF5U3RhdGUoUGxheVN0YXRlRW51bS5rQ29tcGxldGVkKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgc2V0UGxheVN0YXRlKFBsYXlTdGF0ZUVudW0ua1Vua25vd24pO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICB9XHJcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGhvc3RVdGlscy5hZGRIb3N0TWVzc2FnZUxpc3RlbmVyKCdwbGF5U3RhdGVDaGFuZ2VkJywgb25QbGF5U3RhdGVDaGFuZ2VkKTtcclxuICAgIGhvc3RVdGlscy5hZGRIb3N0TWVzc2FnZUxpc3RlbmVyKCd2b2ljZUNoYW5nZWQnLCAobXNnOiBXZWJFdmVudE1lc3NhZ2UpID0+IHtcclxuICAgICAgaWYgKG1zZy5FdmVudCAhPT0gJ3ZvaWNlQ2hhbmdlZCcpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgc2V0Q3VyVm9pY2UobXNnLkFyZ3VtZW50cyk7XHJcbiAgICB9KTtcclxuICAgIGhvc3RVdGlscy5nZXRWb2ljZXMoKS50aGVuKCh2KSA9PiB7XHJcbiAgICAgIHNldFZvaWNlcyh2KTtcclxuICAgIH0pO1xyXG4gIH0sIFtdKTtcclxuICBjb25zdCBvbkJhY2t3YXJkID0gKGU6IGFueSkgPT4ge1xyXG4gICAgdmFyIHN5bnRoID0gd2luZG93LnNwZWVjaFN5bnRoZXNpcztcclxuICAgIGxldCB2b2ljZXMgPSBzeW50aC5nZXRWb2ljZXMoKTtcclxuICAgIHZvaWNlcy5mb3JFYWNoKCh2OiBTcGVlY2hTeW50aGVzaXNWb2ljZSkgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhge3YubmFtZX19YCk7XHJcbiAgICB9KTtcclxuICAgIGNvbnNvbGUubG9nKFwib25CYWNrd2FyZFwiKTtcclxuICB9O1xyXG4gIGNvbnN0IG9uUGxheSA9ICgpID0+IHtcclxuICAgIGlmICghZ2V0R2xvYmFsRGF0YSgpLmN1cnJlbnRTcGVlY2hUZXh0IHx8IGdldEdsb2JhbERhdGEoKS5jdXJyZW50U3BlZWNoVGV4dCEubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHZhciBhcmdzID0gc3RyaW5naWZ5SG9zdENvbW1hbmQoXCJwbGF5XCIsIGdldEdsb2JhbERhdGEoKS5jdXJyZW50U3BlZWNoVGV4dD8/XCJcIik7XHJcbiAgICBob3N0VXRpbHMucG9zdE1lc3NhZ2Uoe1N0YXR1czogMCwgRXZlbnQ6IFwiY29tbWFuZFwiLCBBcmd1bWVudHM6IGFyZ3N9KTtcclxuICB9O1xyXG4gIGNvbnN0IG9uRm9yd2FyZCA9ICgpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKFwib25Gb3J3YXJkXCIpO1xyXG4gIH07XHJcbiAgY29uc3Qgb25QYXVzZSA9ICgpID0+IHtcclxuICAgIHZhciBhcmdzID0gc3RyaW5naWZ5SG9zdENvbW1hbmQoXCJwYXVzZVwiKTtcclxuICAgIGhvc3RVdGlscy5wb3N0TWVzc2FnZSh7U3RhdHVzOiAwLCBFdmVudDogXCJjb21tYW5kXCIsIEFyZ3VtZW50czogYXJnc30pO1xyXG4gIH07XHJcbiAgY29uc3Qgb25TdG9wID0gKCkgPT4ge1xyXG4gICAgdmFyIGFyZ3MgPSBzdHJpbmdpZnlIb3N0Q29tbWFuZChcInN0b3BcIik7XHJcbiAgICBob3N0VXRpbHMucG9zdE1lc3NhZ2Uoe1N0YXR1czogMCwgRXZlbnQ6IFwiY29tbWFuZFwiLCBBcmd1bWVudHM6IGFyZ3N9KTtcclxuICB9O1xyXG4gIGNvbnN0IG9uU2VsZWN0Vm9pY2VDaGFuZ2VkID0gKGU6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxTZWxlY3RFbGVtZW50PikgPT4ge1xyXG4gICAgdmFyIGFyZ3MgPSBzdHJpbmdpZnlIb3N0Q29tbWFuZChcImNoYW5nZVZvaWNlXCIsIGUudGFyZ2V0LnZhbHVlKTtcclxuICAgIGhvc3RVdGlscy5wb3N0TWVzc2FnZSh7U3RhdHVzOiAwLCBFdmVudDogXCJjb21tYW5kXCIsIEFyZ3VtZW50czogYXJnc30pO1xyXG4gIH07XHJcbiAgcmV0dXJuIChcclxuICAgIDxUb29sYmFyQ29udGFpbmVyPlxyXG4gICAgICA8VG9vbEl0ZW0+PFRvb2xCdXR0b24gb25DbGljaz17b25CYWNrd2FyZH0+QmFja3dhcmQ8L1Rvb2xCdXR0b24+PC9Ub29sSXRlbT5cclxuICAgICAge3BsYXlTdGF0ZSA9PSBQbGF5U3RhdGVFbnVtLmtQYXVzZWQgfHwgcGxheVN0YXRlID09IFBsYXlTdGF0ZUVudW0ua1BsYXlpbmcgPyBcclxuICAgICAgKDxUb29sSXRlbT48VG9vbEJ1dHRvbiBvbkNsaWNrPXtvblN0b3B9PlN0b3A8L1Rvb2xCdXR0b24+PC9Ub29sSXRlbT4pXHJcbiAgICAgIDooPFRvb2xJdGVtPjxUb29sQnV0dG9uIGRpc2FibGVkPlN0b3A8L1Rvb2xCdXR0b24+PC9Ub29sSXRlbT4pfVxyXG4gICAgICB7cGxheVN0YXRlID09IFBsYXlTdGF0ZUVudW0ua1BsYXlpbmcgPyAoPFRvb2xJdGVtPjxUb29sQnV0dG9uIG9uQ2xpY2s9e29uUGF1c2V9PlBhdXNlPC9Ub29sQnV0dG9uPjwvVG9vbEl0ZW0+KSBcclxuICAgICAgOiAoPFRvb2xJdGVtPjxUb29sQnV0dG9uIG9uQ2xpY2s9e29uUGxheX0+UGxheTwvVG9vbEJ1dHRvbj48L1Rvb2xJdGVtPil9XHJcbiAgICAgIDxUb29sSXRlbT48VG9vbEJ1dHRvbiBvbkNsaWNrPXtvbkZvcndhcmR9PkZvcndhcmQ8L1Rvb2xCdXR0b24+PC9Ub29sSXRlbT5cclxuICAgICAgPFRvb2xJdGVtPjxzZWxlY3Qgb25DaGFuZ2U9e29uU2VsZWN0Vm9pY2VDaGFuZ2VkfT57XHJcbiAgICAgIHZvaWNlcy5tYXAobmFtZSA9PiAoXHJcbiAgICAgICAgbmFtZSA9PT0gY3VyVm9pY2UgPyAoPG9wdGlvbiB2YWx1ZT17bmFtZX0gc2VsZWN0ZWQ+e25hbWV9PC9vcHRpb24+KSA6ICg8b3B0aW9uIHZhbHVlPXtuYW1lfT57bmFtZX08L29wdGlvbj4pXHJcbiAgICAgICkpXHJcbiAgICAgIH08L3NlbGVjdD48L1Rvb2xJdGVtPlxyXG4gICAgPC9Ub29sYmFyQ29udGFpbmVyPlxyXG4gICk7XHJcbn07XHJcbiIsIlxyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHN0eWxlZCBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcclxuaW1wb3J0IHsgUGFuZWxUZXh0YXJlYSB9IGZyb20gXCIuL3BhbmVsLXRleHRhcmVhXCI7XHJcbmltcG9ydCB7IFBhbmVsVG9vbGJhciB9IGZyb20gXCIuL3BhbmVsLXRvb2xiYXJcIjtcclxuXHJcbmNvbnN0IFBhbmVsQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBmbGV4LWdyb3c6IDEwO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBwYWRkaW5nOiAyMHB4IDEwcHg7XHJcbmA7XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IFBhbmVsOiBSZWFjdC5GQyA9ICgpID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPFBhbmVsQ29udGFpbmVyPlxyXG4gICAgICA8UGFuZWxUb29sYmFyPjwvUGFuZWxUb29sYmFyPlxyXG4gICAgICA8UGFuZWxUZXh0YXJlYT48L1BhbmVsVGV4dGFyZWE+XHJcbiAgICA8L1BhbmVsQ29udGFpbmVyPlxyXG4gIClcclxufTtcclxuIiwiXHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xyXG5pbXBvcnQgeyBTaWRlTmF2YmFyIH0gZnJvbSBcIi4vc2lkZS1uYXZiYXJcIjtcclxuaW1wb3J0IHtQYW5lbH0gZnJvbSBcIi4vcGFuZWxcIjtcclxuXHJcbmNvbnN0IFZlcmJvc2VDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIGZsZXgtZ3JvdzogMTA7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogcm93O1xyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IFZlcmJvc2VMYXlvdXQ6IFJlYWN0LkZDID0gKCkgPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPFZlcmJvc2VDb250YWluZXI+XHJcbiAgICAgICAgPFNpZGVOYXZiYXI+PC9TaWRlTmF2YmFyPlxyXG4gICAgICAgIDxQYW5lbD48L1BhbmVsPlxyXG4gICAgICA8L1ZlcmJvc2VDb250YWluZXI+XHJcbiAgICApO1xyXG59O1xyXG4iLCJcclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBzdHlsZWQgZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XHJcblxyXG5pbXBvcnQge1ZlcmJvc2VMYXlvdXR9IGZyb20gXCIuL2xheW91dC12ZXJib3NlXCI7XHJcblxyXG5jb25zdCBSb290Q29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBmbGV4LWdyb3c6IDEwO1xyXG4gIG1pbi1oZWlnaHQ6IDIwMHB4O1xyXG4gIG1pbi13aWR0aDogMzAwcHg7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG5gO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBQYWxldHRlUHJvcHMge1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFBhbGV0dGU6IFJlYWN0LkZDPFBhbGV0dGVQcm9wcz4gPSAocHJvcHM6IFBhbGV0dGVQcm9wcykgPT4ge1xyXG4gIHJldHVybiAoXHJcbiAgICA8Um9vdENvbnRhaW5lcj5cclxuICAgICAgICA8VmVyYm9zZUxheW91dD48L1ZlcmJvc2VMYXlvdXQ+XHJcbiAgICA8L1Jvb3RDb250YWluZXI+XHJcbiAgKVxyXG59O1xyXG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xuaW1wb3J0IGhvc3RVdGlscyBmcm9tICcuL2hvc3RhcGkvaG9zdGFwaSc7XG5cbmltcG9ydCB7UGFsZXR0ZX0gZnJvbSBcIi4vY29tcG9uZW50cy9wYWxldHRlXCI7XG5cbmNvbnN0IEFwcENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIGZsZXgtZ3JvdzogMTA7XG4gIGZvbnQtZmFtaWx5OiBBcmlhbDtcbiAgZm9udC1zaXplOiAxNHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuYDtcblxuZnVuY3Rpb24gQXBwKCkge1xuICByZXR1cm4gKFxuICAgIDxBcHBDb250YWluZXI+XG4gICAgICA8UGFsZXR0ZT48L1BhbGV0dGU+XG4gICAgPC9BcHBDb250YWluZXI+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFwcDtcbiIsImltcG9ydCB7IFJlcG9ydEhhbmRsZXIgfSBmcm9tICd3ZWItdml0YWxzJztcblxuY29uc3QgcmVwb3J0V2ViVml0YWxzID0gKG9uUGVyZkVudHJ5PzogUmVwb3J0SGFuZGxlcikgPT4ge1xuICBpZiAob25QZXJmRW50cnkgJiYgb25QZXJmRW50cnkgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xuICAgIGltcG9ydCgnd2ViLXZpdGFscycpLnRoZW4oKHsgZ2V0Q0xTLCBnZXRGSUQsIGdldEZDUCwgZ2V0TENQLCBnZXRUVEZCIH0pID0+IHtcbiAgICAgIGdldENMUyhvblBlcmZFbnRyeSk7XG4gICAgICBnZXRGSUQob25QZXJmRW50cnkpO1xuICAgICAgZ2V0RkNQKG9uUGVyZkVudHJ5KTtcbiAgICAgIGdldExDUChvblBlcmZFbnRyeSk7XG4gICAgICBnZXRUVEZCKG9uUGVyZkVudHJ5KTtcbiAgICB9KTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcmVwb3J0V2ViVml0YWxzO1xuIiwiY29uc3QgZXJyb3JzID0ge1xuXHQwOiBcIklsbGVnYWwgc3RhdGVcIixcblx0MTogXCJJbW1lciBkcmFmdHMgY2Fubm90IGhhdmUgY29tcHV0ZWQgcHJvcGVydGllc1wiLFxuXHQyOiBcIlRoaXMgb2JqZWN0IGhhcyBiZWVuIGZyb3plbiBhbmQgc2hvdWxkIG5vdCBiZSBtdXRhdGVkXCIsXG5cdDMoZGF0YTogYW55KSB7XG5cdFx0cmV0dXJuIChcblx0XHRcdFwiQ2Fubm90IHVzZSBhIHByb3h5IHRoYXQgaGFzIGJlZW4gcmV2b2tlZC4gRGlkIHlvdSBwYXNzIGFuIG9iamVjdCBmcm9tIGluc2lkZSBhbiBpbW1lciBmdW5jdGlvbiB0byBhbiBhc3luYyBwcm9jZXNzPyBcIiArXG5cdFx0XHRkYXRhXG5cdFx0KVxuXHR9LFxuXHQ0OiBcIkFuIGltbWVyIHByb2R1Y2VyIHJldHVybmVkIGEgbmV3IHZhbHVlICphbmQqIG1vZGlmaWVkIGl0cyBkcmFmdC4gRWl0aGVyIHJldHVybiBhIG5ldyB2YWx1ZSAqb3IqIG1vZGlmeSB0aGUgZHJhZnQuXCIsXG5cdDU6IFwiSW1tZXIgZm9yYmlkcyBjaXJjdWxhciByZWZlcmVuY2VzXCIsXG5cdDY6IFwiVGhlIGZpcnN0IG9yIHNlY29uZCBhcmd1bWVudCB0byBgcHJvZHVjZWAgbXVzdCBiZSBhIGZ1bmN0aW9uXCIsXG5cdDc6IFwiVGhlIHRoaXJkIGFyZ3VtZW50IHRvIGBwcm9kdWNlYCBtdXN0IGJlIGEgZnVuY3Rpb24gb3IgdW5kZWZpbmVkXCIsXG5cdDg6IFwiRmlyc3QgYXJndW1lbnQgdG8gYGNyZWF0ZURyYWZ0YCBtdXN0IGJlIGEgcGxhaW4gb2JqZWN0LCBhbiBhcnJheSwgb3IgYW4gaW1tZXJhYmxlIG9iamVjdFwiLFxuXHQ5OiBcIkZpcnN0IGFyZ3VtZW50IHRvIGBmaW5pc2hEcmFmdGAgbXVzdCBiZSBhIGRyYWZ0IHJldHVybmVkIGJ5IGBjcmVhdGVEcmFmdGBcIixcblx0MTA6IFwiVGhlIGdpdmVuIGRyYWZ0IGlzIGFscmVhZHkgZmluYWxpemVkXCIsXG5cdDExOiBcIk9iamVjdC5kZWZpbmVQcm9wZXJ0eSgpIGNhbm5vdCBiZSB1c2VkIG9uIGFuIEltbWVyIGRyYWZ0XCIsXG5cdDEyOiBcIk9iamVjdC5zZXRQcm90b3R5cGVPZigpIGNhbm5vdCBiZSB1c2VkIG9uIGFuIEltbWVyIGRyYWZ0XCIsXG5cdDEzOiBcIkltbWVyIG9ubHkgc3VwcG9ydHMgZGVsZXRpbmcgYXJyYXkgaW5kaWNlc1wiLFxuXHQxNDogXCJJbW1lciBvbmx5IHN1cHBvcnRzIHNldHRpbmcgYXJyYXkgaW5kaWNlcyBhbmQgdGhlICdsZW5ndGgnIHByb3BlcnR5XCIsXG5cdDE1KHBhdGg6IHN0cmluZykge1xuXHRcdHJldHVybiBcIkNhbm5vdCBhcHBseSBwYXRjaCwgcGF0aCBkb2Vzbid0IHJlc29sdmU6IFwiICsgcGF0aFxuXHR9LFxuXHQxNjogJ1NldHMgY2Fubm90IGhhdmUgXCJyZXBsYWNlXCIgcGF0Y2hlcy4nLFxuXHQxNyhvcDogc3RyaW5nKSB7XG5cdFx0cmV0dXJuIFwiVW5zdXBwb3J0ZWQgcGF0Y2ggb3BlcmF0aW9uOiBcIiArIG9wXG5cdH0sXG5cdDE4KHBsdWdpbjogc3RyaW5nKSB7XG5cdFx0cmV0dXJuIGBUaGUgcGx1Z2luIGZvciAnJHtwbHVnaW59JyBoYXMgbm90IGJlZW4gbG9hZGVkIGludG8gSW1tZXIuIFRvIGVuYWJsZSB0aGUgcGx1Z2luLCBpbXBvcnQgYW5kIGNhbGwgXFxgZW5hYmxlJHtwbHVnaW59KClcXGAgd2hlbiBpbml0aWFsaXppbmcgeW91ciBhcHBsaWNhdGlvbi5gXG5cdH0sXG5cdDIwOiBcIkNhbm5vdCB1c2UgcHJveGllcyBpZiBQcm94eSwgUHJveHkucmV2b2NhYmxlIG9yIFJlZmxlY3QgYXJlIG5vdCBhdmFpbGFibGVcIixcblx0MjEodGhpbmc6IHN0cmluZykge1xuXHRcdHJldHVybiBgcHJvZHVjZSBjYW4gb25seSBiZSBjYWxsZWQgb24gdGhpbmdzIHRoYXQgYXJlIGRyYWZ0YWJsZTogcGxhaW4gb2JqZWN0cywgYXJyYXlzLCBNYXAsIFNldCBvciBjbGFzc2VzIHRoYXQgYXJlIG1hcmtlZCB3aXRoICdbaW1tZXJhYmxlXTogdHJ1ZScuIEdvdCAnJHt0aGluZ30nYFxuXHR9LFxuXHQyMih0aGluZzogc3RyaW5nKSB7XG5cdFx0cmV0dXJuIGAnY3VycmVudCcgZXhwZWN0cyBhIGRyYWZ0LCBnb3Q6ICR7dGhpbmd9YFxuXHR9LFxuXHQyMyh0aGluZzogc3RyaW5nKSB7XG5cdFx0cmV0dXJuIGAnb3JpZ2luYWwnIGV4cGVjdHMgYSBkcmFmdCwgZ290OiAke3RoaW5nfWBcblx0fSxcblx0MjQ6IFwiUGF0Y2hpbmcgcmVzZXJ2ZWQgYXR0cmlidXRlcyBsaWtlIF9fcHJvdG9fXywgcHJvdG90eXBlIGFuZCBjb25zdHJ1Y3RvciBpcyBub3QgYWxsb3dlZFwiXG59IGFzIGNvbnN0XG5cbmV4cG9ydCBmdW5jdGlvbiBkaWUoZXJyb3I6IGtleW9mIHR5cGVvZiBlcnJvcnMsIC4uLmFyZ3M6IGFueVtdKTogbmV2ZXIge1xuXHRpZiAoX19ERVZfXykge1xuXHRcdGNvbnN0IGUgPSBlcnJvcnNbZXJyb3JdXG5cdFx0Y29uc3QgbXNnID0gIWVcblx0XHRcdD8gXCJ1bmtub3duIGVycm9yIG5yOiBcIiArIGVycm9yXG5cdFx0XHQ6IHR5cGVvZiBlID09PSBcImZ1bmN0aW9uXCJcblx0XHRcdD8gZS5hcHBseShudWxsLCBhcmdzIGFzIGFueSlcblx0XHRcdDogZVxuXHRcdHRocm93IG5ldyBFcnJvcihgW0ltbWVyXSAke21zZ31gKVxuXHR9XG5cdHRocm93IG5ldyBFcnJvcihcblx0XHRgW0ltbWVyXSBtaW5pZmllZCBlcnJvciBucjogJHtlcnJvcn0ke1xuXHRcdFx0YXJncy5sZW5ndGggPyBcIiBcIiArIGFyZ3MubWFwKHMgPT4gYCcke3N9J2ApLmpvaW4oXCIsXCIpIDogXCJcIlxuXHRcdH0uIEZpbmQgdGhlIGZ1bGwgZXJyb3IgYXQ6IGh0dHBzOi8vYml0Lmx5LzNjWEVLV2ZgXG5cdClcbn1cbiIsImltcG9ydCB7XG5cdERSQUZUX1NUQVRFLFxuXHREUkFGVEFCTEUsXG5cdGhhc1NldCxcblx0T2JqZWN0aXNoLFxuXHREcmFmdGVkLFxuXHRBbnlPYmplY3QsXG5cdEFueU1hcCxcblx0QW55U2V0LFxuXHRJbW1lclN0YXRlLFxuXHRoYXNNYXAsXG5cdEFyY2h0eXBlLFxuXHRkaWVcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuLyoqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYW4gSW1tZXIgZHJhZnQgKi9cbi8qI19fUFVSRV9fKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0RyYWZ0KHZhbHVlOiBhbnkpOiBib29sZWFuIHtcblx0cmV0dXJuICEhdmFsdWUgJiYgISF2YWx1ZVtEUkFGVF9TVEFURV1cbn1cblxuLyoqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgY2FuIGJlIGRyYWZ0ZWQgYnkgSW1tZXIgKi9cbi8qI19fUFVSRV9fKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0RyYWZ0YWJsZSh2YWx1ZTogYW55KTogYm9vbGVhbiB7XG5cdGlmICghdmFsdWUpIHJldHVybiBmYWxzZVxuXHRyZXR1cm4gKFxuXHRcdGlzUGxhaW5PYmplY3QodmFsdWUpIHx8XG5cdFx0QXJyYXkuaXNBcnJheSh2YWx1ZSkgfHxcblx0XHQhIXZhbHVlW0RSQUZUQUJMRV0gfHxcblx0XHQhIXZhbHVlLmNvbnN0cnVjdG9yW0RSQUZUQUJMRV0gfHxcblx0XHRpc01hcCh2YWx1ZSkgfHxcblx0XHRpc1NldCh2YWx1ZSlcblx0KVxufVxuXG5jb25zdCBvYmplY3RDdG9yU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci50b1N0cmluZygpXG4vKiNfX1BVUkVfXyovXG5leHBvcnQgZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZTogYW55KTogYm9vbGVhbiB7XG5cdGlmICghdmFsdWUgfHwgdHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiKSByZXR1cm4gZmFsc2Vcblx0Y29uc3QgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpXG5cdGlmIChwcm90byA9PT0gbnVsbCkge1xuXHRcdHJldHVybiB0cnVlXG5cdH1cblx0Y29uc3QgQ3RvciA9XG5cdFx0T2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwocHJvdG8sIFwiY29uc3RydWN0b3JcIikgJiYgcHJvdG8uY29uc3RydWN0b3JcblxuXHRpZiAoQ3RvciA9PT0gT2JqZWN0KSByZXR1cm4gdHJ1ZVxuXG5cdHJldHVybiAoXG5cdFx0dHlwZW9mIEN0b3IgPT0gXCJmdW5jdGlvblwiICYmXG5cdFx0RnVuY3Rpb24udG9TdHJpbmcuY2FsbChDdG9yKSA9PT0gb2JqZWN0Q3RvclN0cmluZ1xuXHQpXG59XG5cbi8qKiBHZXQgdGhlIHVuZGVybHlpbmcgb2JqZWN0IHRoYXQgaXMgcmVwcmVzZW50ZWQgYnkgdGhlIGdpdmVuIGRyYWZ0ICovXG4vKiNfX1BVUkVfXyovXG5leHBvcnQgZnVuY3Rpb24gb3JpZ2luYWw8VD4odmFsdWU6IFQpOiBUIHwgdW5kZWZpbmVkXG5leHBvcnQgZnVuY3Rpb24gb3JpZ2luYWwodmFsdWU6IERyYWZ0ZWQ8YW55Pik6IGFueSB7XG5cdGlmICghaXNEcmFmdCh2YWx1ZSkpIGRpZSgyMywgdmFsdWUpXG5cdHJldHVybiB2YWx1ZVtEUkFGVF9TVEFURV0uYmFzZV9cbn1cblxuLyojX19QVVJFX18qL1xuZXhwb3J0IGNvbnN0IG93bktleXM6ICh0YXJnZXQ6IEFueU9iamVjdCkgPT4gUHJvcGVydHlLZXlbXSA9XG5cdHR5cGVvZiBSZWZsZWN0ICE9PSBcInVuZGVmaW5lZFwiICYmIFJlZmxlY3Qub3duS2V5c1xuXHRcdD8gUmVmbGVjdC5vd25LZXlzXG5cdFx0OiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAhPT0gXCJ1bmRlZmluZWRcIlxuXHRcdD8gb2JqID0+XG5cdFx0XHRcdE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikuY29uY2F0KFxuXHRcdFx0XHRcdE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqKSBhcyBhbnlcblx0XHRcdFx0KVxuXHRcdDogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcblxuZXhwb3J0IGNvbnN0IGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPVxuXHRPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyB8fFxuXHRmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHRhcmdldDogYW55KSB7XG5cdFx0Ly8gUG9seWZpbGwgbmVlZGVkIGZvciBIZXJtZXMgYW5kIElFLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2hlcm1lcy9pc3N1ZXMvMjc0XG5cdFx0Y29uc3QgcmVzOiBhbnkgPSB7fVxuXHRcdG93bktleXModGFyZ2V0KS5mb3JFYWNoKGtleSA9PiB7XG5cdFx0XHRyZXNba2V5XSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpXG5cdFx0fSlcblx0XHRyZXR1cm4gcmVzXG5cdH1cblxuZXhwb3J0IGZ1bmN0aW9uIGVhY2g8VCBleHRlbmRzIE9iamVjdGlzaD4oXG5cdG9iajogVCxcblx0aXRlcjogKGtleTogc3RyaW5nIHwgbnVtYmVyLCB2YWx1ZTogYW55LCBzb3VyY2U6IFQpID0+IHZvaWQsXG5cdGVudW1lcmFibGVPbmx5PzogYm9vbGVhblxuKTogdm9pZFxuZXhwb3J0IGZ1bmN0aW9uIGVhY2gob2JqOiBhbnksIGl0ZXI6IGFueSwgZW51bWVyYWJsZU9ubHkgPSBmYWxzZSkge1xuXHRpZiAoZ2V0QXJjaHR5cGUob2JqKSA9PT0gQXJjaHR5cGUuT2JqZWN0KSB7XG5cdFx0OyhlbnVtZXJhYmxlT25seSA/IE9iamVjdC5rZXlzIDogb3duS2V5cykob2JqKS5mb3JFYWNoKGtleSA9PiB7XG5cdFx0XHRpZiAoIWVudW1lcmFibGVPbmx5IHx8IHR5cGVvZiBrZXkgIT09IFwic3ltYm9sXCIpIGl0ZXIoa2V5LCBvYmpba2V5XSwgb2JqKVxuXHRcdH0pXG5cdH0gZWxzZSB7XG5cdFx0b2JqLmZvckVhY2goKGVudHJ5OiBhbnksIGluZGV4OiBhbnkpID0+IGl0ZXIoaW5kZXgsIGVudHJ5LCBvYmopKVxuXHR9XG59XG5cbi8qI19fUFVSRV9fKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRBcmNodHlwZSh0aGluZzogYW55KTogQXJjaHR5cGUge1xuXHQvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXHRjb25zdCBzdGF0ZTogdW5kZWZpbmVkIHwgSW1tZXJTdGF0ZSA9IHRoaW5nW0RSQUZUX1NUQVRFXVxuXHRyZXR1cm4gc3RhdGVcblx0XHQ/IHN0YXRlLnR5cGVfID4gM1xuXHRcdFx0PyBzdGF0ZS50eXBlXyAtIDQgLy8gY2F1c2UgT2JqZWN0IGFuZCBBcnJheSBtYXAgYmFjayBmcm9tIDQgYW5kIDVcblx0XHRcdDogKHN0YXRlLnR5cGVfIGFzIGFueSkgLy8gb3RoZXJzIGFyZSB0aGUgc2FtZVxuXHRcdDogQXJyYXkuaXNBcnJheSh0aGluZylcblx0XHQ/IEFyY2h0eXBlLkFycmF5XG5cdFx0OiBpc01hcCh0aGluZylcblx0XHQ/IEFyY2h0eXBlLk1hcFxuXHRcdDogaXNTZXQodGhpbmcpXG5cdFx0PyBBcmNodHlwZS5TZXRcblx0XHQ6IEFyY2h0eXBlLk9iamVjdFxufVxuXG4vKiNfX1BVUkVfXyovXG5leHBvcnQgZnVuY3Rpb24gaGFzKHRoaW5nOiBhbnksIHByb3A6IFByb3BlcnR5S2V5KTogYm9vbGVhbiB7XG5cdHJldHVybiBnZXRBcmNodHlwZSh0aGluZykgPT09IEFyY2h0eXBlLk1hcFxuXHRcdD8gdGhpbmcuaGFzKHByb3ApXG5cdFx0OiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpbmcsIHByb3ApXG59XG5cbi8qI19fUFVSRV9fKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXQodGhpbmc6IEFueU1hcCB8IEFueU9iamVjdCwgcHJvcDogUHJvcGVydHlLZXkpOiBhbnkge1xuXHQvLyBAdHMtaWdub3JlXG5cdHJldHVybiBnZXRBcmNodHlwZSh0aGluZykgPT09IEFyY2h0eXBlLk1hcCA/IHRoaW5nLmdldChwcm9wKSA6IHRoaW5nW3Byb3BdXG59XG5cbi8qI19fUFVSRV9fKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXQodGhpbmc6IGFueSwgcHJvcE9yT2xkVmFsdWU6IFByb3BlcnR5S2V5LCB2YWx1ZTogYW55KSB7XG5cdGNvbnN0IHQgPSBnZXRBcmNodHlwZSh0aGluZylcblx0aWYgKHQgPT09IEFyY2h0eXBlLk1hcCkgdGhpbmcuc2V0KHByb3BPck9sZFZhbHVlLCB2YWx1ZSlcblx0ZWxzZSBpZiAodCA9PT0gQXJjaHR5cGUuU2V0KSB7XG5cdFx0dGhpbmcuZGVsZXRlKHByb3BPck9sZFZhbHVlKVxuXHRcdHRoaW5nLmFkZCh2YWx1ZSlcblx0fSBlbHNlIHRoaW5nW3Byb3BPck9sZFZhbHVlXSA9IHZhbHVlXG59XG5cbi8qI19fUFVSRV9fKi9cbmV4cG9ydCBmdW5jdGlvbiBpcyh4OiBhbnksIHk6IGFueSk6IGJvb2xlYW4ge1xuXHQvLyBGcm9tOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmJqcy9ibG9iL2M2OTkwNGE1MTFiOTAwMjY2OTM1MTY4MjIzMDYzZGQ4NzcyZGZjNDAvcGFja2FnZXMvZmJqcy9zcmMvY29yZS9zaGFsbG93RXF1YWwuanNcblx0aWYgKHggPT09IHkpIHtcblx0XHRyZXR1cm4geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHlcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5XG5cdH1cbn1cblxuLyojX19QVVJFX18qL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTWFwKHRhcmdldDogYW55KTogdGFyZ2V0IGlzIEFueU1hcCB7XG5cdHJldHVybiBoYXNNYXAgJiYgdGFyZ2V0IGluc3RhbmNlb2YgTWFwXG59XG5cbi8qI19fUFVSRV9fKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1NldCh0YXJnZXQ6IGFueSk6IHRhcmdldCBpcyBBbnlTZXQge1xuXHRyZXR1cm4gaGFzU2V0ICYmIHRhcmdldCBpbnN0YW5jZW9mIFNldFxufVxuLyojX19QVVJFX18qL1xuZXhwb3J0IGZ1bmN0aW9uIGxhdGVzdChzdGF0ZTogSW1tZXJTdGF0ZSk6IGFueSB7XG5cdHJldHVybiBzdGF0ZS5jb3B5XyB8fCBzdGF0ZS5iYXNlX1xufVxuXG4vKiNfX1BVUkVfXyovXG5leHBvcnQgZnVuY3Rpb24gc2hhbGxvd0NvcHkoYmFzZTogYW55KSB7XG5cdGlmIChBcnJheS5pc0FycmF5KGJhc2UpKSByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYmFzZSlcblx0Y29uc3QgZGVzY3JpcHRvcnMgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKGJhc2UpXG5cdGRlbGV0ZSBkZXNjcmlwdG9yc1tEUkFGVF9TVEFURSBhcyBhbnldXG5cdGxldCBrZXlzID0gb3duS2V5cyhkZXNjcmlwdG9ycylcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG5cdFx0Y29uc3Qga2V5OiBhbnkgPSBrZXlzW2ldXG5cdFx0Y29uc3QgZGVzYyA9IGRlc2NyaXB0b3JzW2tleV1cblx0XHRpZiAoZGVzYy53cml0YWJsZSA9PT0gZmFsc2UpIHtcblx0XHRcdGRlc2Mud3JpdGFibGUgPSB0cnVlXG5cdFx0XHRkZXNjLmNvbmZpZ3VyYWJsZSA9IHRydWVcblx0XHR9XG5cdFx0Ly8gbGlrZSBvYmplY3QuYXNzaWduLCB3ZSB3aWxsIHJlYWQgYW55IF9vd25fLCBnZXQvc2V0IGFjY2Vzc29ycy4gVGhpcyBoZWxwcyBpbiBkZWFsaW5nXG5cdFx0Ly8gd2l0aCBsaWJyYXJpZXMgdGhhdCB0cmFwIHZhbHVlcywgbGlrZSBtb2J4IG9yIHZ1ZVxuXHRcdC8vIHVubGlrZSBvYmplY3QuYXNzaWduLCBub24tZW51bWVyYWJsZXMgd2lsbCBiZSBjb3BpZWQgYXMgd2VsbFxuXHRcdGlmIChkZXNjLmdldCB8fCBkZXNjLnNldClcblx0XHRcdGRlc2NyaXB0b3JzW2tleV0gPSB7XG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0d3JpdGFibGU6IHRydWUsIC8vIGNvdWxkIGxpdmUgd2l0aCAhIWRlc2Muc2V0IGFzIHdlbGwgaGVyZS4uLlxuXHRcdFx0XHRlbnVtZXJhYmxlOiBkZXNjLmVudW1lcmFibGUsXG5cdFx0XHRcdHZhbHVlOiBiYXNlW2tleV1cblx0XHRcdH1cblx0fVxuXHRyZXR1cm4gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YoYmFzZSksIGRlc2NyaXB0b3JzKVxufVxuXG4vKipcbiAqIEZyZWV6ZXMgZHJhZnRhYmxlIG9iamVjdHMuIFJldHVybnMgdGhlIG9yaWdpbmFsIG9iamVjdC5cbiAqIEJ5IGRlZmF1bHQgZnJlZXplcyBzaGFsbG93bHksIGJ1dCBpZiB0aGUgc2Vjb25kIGFyZ3VtZW50IGlzIGB0cnVlYCBpdCB3aWxsIGZyZWV6ZSByZWN1cnNpdmVseS5cbiAqXG4gKiBAcGFyYW0gb2JqXG4gKiBAcGFyYW0gZGVlcFxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJlZXplPFQ+KG9iajogVCwgZGVlcD86IGJvb2xlYW4pOiBUXG5leHBvcnQgZnVuY3Rpb24gZnJlZXplPFQ+KG9iajogYW55LCBkZWVwOiBib29sZWFuID0gZmFsc2UpOiBUIHtcblx0aWYgKGlzRnJvemVuKG9iaikgfHwgaXNEcmFmdChvYmopIHx8ICFpc0RyYWZ0YWJsZShvYmopKSByZXR1cm4gb2JqXG5cdGlmIChnZXRBcmNodHlwZShvYmopID4gMSAvKiBNYXAgb3IgU2V0ICovKSB7XG5cdFx0b2JqLnNldCA9IG9iai5hZGQgPSBvYmouY2xlYXIgPSBvYmouZGVsZXRlID0gZG9udE11dGF0ZUZyb3plbkNvbGxlY3Rpb25zIGFzIGFueVxuXHR9XG5cdE9iamVjdC5mcmVlemUob2JqKVxuXHRpZiAoZGVlcCkgZWFjaChvYmosIChrZXksIHZhbHVlKSA9PiBmcmVlemUodmFsdWUsIHRydWUpLCB0cnVlKVxuXHRyZXR1cm4gb2JqXG59XG5cbmZ1bmN0aW9uIGRvbnRNdXRhdGVGcm96ZW5Db2xsZWN0aW9ucygpIHtcblx0ZGllKDIpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Zyb3plbihvYmo6IGFueSk6IGJvb2xlYW4ge1xuXHRpZiAob2JqID09IG51bGwgfHwgdHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIikgcmV0dXJuIHRydWVcblx0Ly8gU2VlICM2MDAsIElFIGRpZXMgb24gbm9uLW9iamVjdHMgaW4gT2JqZWN0LmlzRnJvemVuXG5cdHJldHVybiBPYmplY3QuaXNGcm96ZW4ob2JqKVxufVxuIiwiaW1wb3J0IHtcblx0SW1tZXJTdGF0ZSxcblx0UGF0Y2gsXG5cdEltbWVyU2NvcGUsXG5cdERyYWZ0ZWQsXG5cdEFueU9iamVjdCxcblx0SW1tZXJCYXNlU3RhdGUsXG5cdEFueU1hcCxcblx0QW55U2V0LFxuXHRQcm94eVR5cGUsXG5cdGRpZVxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG4vKiogUGx1Z2luIHV0aWxpdGllcyAqL1xuY29uc3QgcGx1Z2luczoge1xuXHRQYXRjaGVzPzoge1xuXHRcdGdlbmVyYXRlUGF0Y2hlc18oXG5cdFx0XHRzdGF0ZTogSW1tZXJTdGF0ZSxcblx0XHRcdGJhc2VQYXRoOiBQYXRjaFBhdGgsXG5cdFx0XHRwYXRjaGVzOiBQYXRjaFtdLFxuXHRcdFx0aW52ZXJzZVBhdGNoZXM6IFBhdGNoW11cblx0XHQpOiB2b2lkXG5cdFx0Z2VuZXJhdGVSZXBsYWNlbWVudFBhdGNoZXNfKFxuXHRcdFx0YmFzZTogYW55LFxuXHRcdFx0cmVwbGFjZW1lbnQ6IGFueSxcblx0XHRcdHBhdGNoZXM6IFBhdGNoW10sXG5cdFx0XHRpbnZlcnNlUGF0Y2hlczogUGF0Y2hbXVxuXHRcdCk6IHZvaWRcblx0XHRhcHBseVBhdGNoZXNfPFQ+KGRyYWZ0OiBULCBwYXRjaGVzOiBQYXRjaFtdKTogVFxuXHR9XG5cdEVTNT86IHtcblx0XHR3aWxsRmluYWxpemVFUzVfKHNjb3BlOiBJbW1lclNjb3BlLCByZXN1bHQ6IGFueSwgaXNSZXBsYWNlZDogYm9vbGVhbik6IHZvaWRcblx0XHRjcmVhdGVFUzVQcm94eV88VD4oXG5cdFx0XHRiYXNlOiBULFxuXHRcdFx0cGFyZW50PzogSW1tZXJTdGF0ZVxuXHRcdCk6IERyYWZ0ZWQ8VCwgRVM1T2JqZWN0U3RhdGUgfCBFUzVBcnJheVN0YXRlPlxuXHRcdGhhc0NoYW5nZXNfKHN0YXRlOiBFUzVBcnJheVN0YXRlIHwgRVM1T2JqZWN0U3RhdGUpOiBib29sZWFuXG5cdH1cblx0TWFwU2V0Pzoge1xuXHRcdHByb3h5TWFwXzxUIGV4dGVuZHMgQW55TWFwPih0YXJnZXQ6IFQsIHBhcmVudD86IEltbWVyU3RhdGUpOiBUXG5cdFx0cHJveHlTZXRfPFQgZXh0ZW5kcyBBbnlTZXQ+KHRhcmdldDogVCwgcGFyZW50PzogSW1tZXJTdGF0ZSk6IFRcblx0fVxufSA9IHt9XG5cbnR5cGUgUGx1Z2lucyA9IHR5cGVvZiBwbHVnaW5zXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQbHVnaW48SyBleHRlbmRzIGtleW9mIFBsdWdpbnM+KFxuXHRwbHVnaW5LZXk6IEtcbik6IEV4Y2x1ZGU8UGx1Z2luc1tLXSwgdW5kZWZpbmVkPiB7XG5cdGNvbnN0IHBsdWdpbiA9IHBsdWdpbnNbcGx1Z2luS2V5XVxuXHRpZiAoIXBsdWdpbikge1xuXHRcdGRpZSgxOCwgcGx1Z2luS2V5KVxuXHR9XG5cdC8vIEB0cy1pZ25vcmVcblx0cmV0dXJuIHBsdWdpblxufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9hZFBsdWdpbjxLIGV4dGVuZHMga2V5b2YgUGx1Z2lucz4oXG5cdHBsdWdpbktleTogSyxcblx0aW1wbGVtZW50YXRpb246IFBsdWdpbnNbS11cbik6IHZvaWQge1xuXHRpZiAoIXBsdWdpbnNbcGx1Z2luS2V5XSkgcGx1Z2luc1twbHVnaW5LZXldID0gaW1wbGVtZW50YXRpb25cbn1cblxuLyoqIEVTNSBQbHVnaW4gKi9cblxuaW50ZXJmYWNlIEVTNUJhc2VTdGF0ZSBleHRlbmRzIEltbWVyQmFzZVN0YXRlIHtcblx0YXNzaWduZWRfOiB7W2tleTogc3RyaW5nXTogYW55fVxuXHRwYXJlbnRfPzogSW1tZXJTdGF0ZVxuXHRyZXZva2VkXzogYm9vbGVhblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVTNU9iamVjdFN0YXRlIGV4dGVuZHMgRVM1QmFzZVN0YXRlIHtcblx0dHlwZV86IFByb3h5VHlwZS5FUzVPYmplY3Rcblx0ZHJhZnRfOiBEcmFmdGVkPEFueU9iamVjdCwgRVM1T2JqZWN0U3RhdGU+XG5cdGJhc2VfOiBBbnlPYmplY3Rcblx0Y29weV86IEFueU9iamVjdCB8IG51bGxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFUzVBcnJheVN0YXRlIGV4dGVuZHMgRVM1QmFzZVN0YXRlIHtcblx0dHlwZV86IFByb3h5VHlwZS5FUzVBcnJheVxuXHRkcmFmdF86IERyYWZ0ZWQ8QW55T2JqZWN0LCBFUzVBcnJheVN0YXRlPlxuXHRiYXNlXzogYW55XG5cdGNvcHlfOiBhbnlcbn1cblxuLyoqIE1hcCAvIFNldCBwbHVnaW4gKi9cblxuZXhwb3J0IGludGVyZmFjZSBNYXBTdGF0ZSBleHRlbmRzIEltbWVyQmFzZVN0YXRlIHtcblx0dHlwZV86IFByb3h5VHlwZS5NYXBcblx0Y29weV86IEFueU1hcCB8IHVuZGVmaW5lZFxuXHRhc3NpZ25lZF86IE1hcDxhbnksIGJvb2xlYW4+IHwgdW5kZWZpbmVkXG5cdGJhc2VfOiBBbnlNYXBcblx0cmV2b2tlZF86IGJvb2xlYW5cblx0ZHJhZnRfOiBEcmFmdGVkPEFueU1hcCwgTWFwU3RhdGU+XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2V0U3RhdGUgZXh0ZW5kcyBJbW1lckJhc2VTdGF0ZSB7XG5cdHR5cGVfOiBQcm94eVR5cGUuU2V0XG5cdGNvcHlfOiBBbnlTZXQgfCB1bmRlZmluZWRcblx0YmFzZV86IEFueVNldFxuXHRkcmFmdHNfOiBNYXA8YW55LCBEcmFmdGVkPiAvLyBtYXBzIHRoZSBvcmlnaW5hbCB2YWx1ZSB0byB0aGUgZHJhZnQgdmFsdWUgaW4gdGhlIG5ldyBzZXRcblx0cmV2b2tlZF86IGJvb2xlYW5cblx0ZHJhZnRfOiBEcmFmdGVkPEFueVNldCwgU2V0U3RhdGU+XG59XG5cbi8qKiBQYXRjaGVzIHBsdWdpbiAqL1xuXG5leHBvcnQgdHlwZSBQYXRjaFBhdGggPSAoc3RyaW5nIHwgbnVtYmVyKVtdXG4iLCJpbXBvcnQge1xuXHRQYXRjaCxcblx0UGF0Y2hMaXN0ZW5lcixcblx0RHJhZnRlZCxcblx0SW1tZXIsXG5cdERSQUZUX1NUQVRFLFxuXHRJbW1lclN0YXRlLFxuXHRQcm94eVR5cGUsXG5cdGdldFBsdWdpblxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuaW1wb3J0IHtkaWV9IGZyb20gXCIuLi91dGlscy9lcnJvcnNcIlxuXG4vKiogRWFjaCBzY29wZSByZXByZXNlbnRzIGEgYHByb2R1Y2VgIGNhbGwuICovXG5cbmV4cG9ydCBpbnRlcmZhY2UgSW1tZXJTY29wZSB7XG5cdHBhdGNoZXNfPzogUGF0Y2hbXVxuXHRpbnZlcnNlUGF0Y2hlc18/OiBQYXRjaFtdXG5cdGNhbkF1dG9GcmVlemVfOiBib29sZWFuXG5cdGRyYWZ0c186IGFueVtdXG5cdHBhcmVudF8/OiBJbW1lclNjb3BlXG5cdHBhdGNoTGlzdGVuZXJfPzogUGF0Y2hMaXN0ZW5lclxuXHRpbW1lcl86IEltbWVyXG5cdHVuZmluYWxpemVkRHJhZnRzXzogbnVtYmVyXG59XG5cbmxldCBjdXJyZW50U2NvcGU6IEltbWVyU2NvcGUgfCB1bmRlZmluZWRcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEN1cnJlbnRTY29wZSgpIHtcblx0aWYgKF9fREVWX18gJiYgIWN1cnJlbnRTY29wZSkgZGllKDApXG5cdHJldHVybiBjdXJyZW50U2NvcGUhXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNjb3BlKFxuXHRwYXJlbnRfOiBJbW1lclNjb3BlIHwgdW5kZWZpbmVkLFxuXHRpbW1lcl86IEltbWVyXG4pOiBJbW1lclNjb3BlIHtcblx0cmV0dXJuIHtcblx0XHRkcmFmdHNfOiBbXSxcblx0XHRwYXJlbnRfLFxuXHRcdGltbWVyXyxcblx0XHQvLyBXaGVuZXZlciB0aGUgbW9kaWZpZWQgZHJhZnQgY29udGFpbnMgYSBkcmFmdCBmcm9tIGFub3RoZXIgc2NvcGUsIHdlXG5cdFx0Ly8gbmVlZCB0byBwcmV2ZW50IGF1dG8tZnJlZXppbmcgc28gdGhlIHVub3duZWQgZHJhZnQgY2FuIGJlIGZpbmFsaXplZC5cblx0XHRjYW5BdXRvRnJlZXplXzogdHJ1ZSxcblx0XHR1bmZpbmFsaXplZERyYWZ0c186IDBcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlUGF0Y2hlc0luU2NvcGUoXG5cdHNjb3BlOiBJbW1lclNjb3BlLFxuXHRwYXRjaExpc3RlbmVyPzogUGF0Y2hMaXN0ZW5lclxuKSB7XG5cdGlmIChwYXRjaExpc3RlbmVyKSB7XG5cdFx0Z2V0UGx1Z2luKFwiUGF0Y2hlc1wiKSAvLyBhc3NlcnQgd2UgaGF2ZSB0aGUgcGx1Z2luXG5cdFx0c2NvcGUucGF0Y2hlc18gPSBbXVxuXHRcdHNjb3BlLmludmVyc2VQYXRjaGVzXyA9IFtdXG5cdFx0c2NvcGUucGF0Y2hMaXN0ZW5lcl8gPSBwYXRjaExpc3RlbmVyXG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJldm9rZVNjb3BlKHNjb3BlOiBJbW1lclNjb3BlKSB7XG5cdGxlYXZlU2NvcGUoc2NvcGUpXG5cdHNjb3BlLmRyYWZ0c18uZm9yRWFjaChyZXZva2VEcmFmdClcblx0Ly8gQHRzLWlnbm9yZVxuXHRzY29wZS5kcmFmdHNfID0gbnVsbFxufVxuXG5leHBvcnQgZnVuY3Rpb24gbGVhdmVTY29wZShzY29wZTogSW1tZXJTY29wZSkge1xuXHRpZiAoc2NvcGUgPT09IGN1cnJlbnRTY29wZSkge1xuXHRcdGN1cnJlbnRTY29wZSA9IHNjb3BlLnBhcmVudF9cblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZW50ZXJTY29wZShpbW1lcjogSW1tZXIpIHtcblx0cmV0dXJuIChjdXJyZW50U2NvcGUgPSBjcmVhdGVTY29wZShjdXJyZW50U2NvcGUsIGltbWVyKSlcbn1cblxuZnVuY3Rpb24gcmV2b2tlRHJhZnQoZHJhZnQ6IERyYWZ0ZWQpIHtcblx0Y29uc3Qgc3RhdGU6IEltbWVyU3RhdGUgPSBkcmFmdFtEUkFGVF9TVEFURV1cblx0aWYgKFxuXHRcdHN0YXRlLnR5cGVfID09PSBQcm94eVR5cGUuUHJveHlPYmplY3QgfHxcblx0XHRzdGF0ZS50eXBlXyA9PT0gUHJveHlUeXBlLlByb3h5QXJyYXlcblx0KVxuXHRcdHN0YXRlLnJldm9rZV8oKVxuXHRlbHNlIHN0YXRlLnJldm9rZWRfID0gdHJ1ZVxufVxuIiwiaW1wb3J0IHtcblx0SW1tZXJTY29wZSxcblx0RFJBRlRfU1RBVEUsXG5cdGlzRHJhZnRhYmxlLFxuXHROT1RISU5HLFxuXHRQYXRjaFBhdGgsXG5cdGVhY2gsXG5cdGhhcyxcblx0ZnJlZXplLFxuXHRJbW1lclN0YXRlLFxuXHRpc0RyYWZ0LFxuXHRTZXRTdGF0ZSxcblx0c2V0LFxuXHRQcm94eVR5cGUsXG5cdGdldFBsdWdpbixcblx0ZGllLFxuXHRyZXZva2VTY29wZSxcblx0aXNGcm96ZW4sXG5cdHNoYWxsb3dDb3B5XG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzUmVzdWx0KHJlc3VsdDogYW55LCBzY29wZTogSW1tZXJTY29wZSkge1xuXHRzY29wZS51bmZpbmFsaXplZERyYWZ0c18gPSBzY29wZS5kcmFmdHNfLmxlbmd0aFxuXHRjb25zdCBiYXNlRHJhZnQgPSBzY29wZS5kcmFmdHNfIVswXVxuXHRjb25zdCBpc1JlcGxhY2VkID0gcmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgcmVzdWx0ICE9PSBiYXNlRHJhZnRcblx0aWYgKCFzY29wZS5pbW1lcl8udXNlUHJveGllc18pXG5cdFx0Z2V0UGx1Z2luKFwiRVM1XCIpLndpbGxGaW5hbGl6ZUVTNV8oc2NvcGUsIHJlc3VsdCwgaXNSZXBsYWNlZClcblx0aWYgKGlzUmVwbGFjZWQpIHtcblx0XHRpZiAoYmFzZURyYWZ0W0RSQUZUX1NUQVRFXS5tb2RpZmllZF8pIHtcblx0XHRcdHJldm9rZVNjb3BlKHNjb3BlKVxuXHRcdFx0ZGllKDQpXG5cdFx0fVxuXHRcdGlmIChpc0RyYWZ0YWJsZShyZXN1bHQpKSB7XG5cdFx0XHQvLyBGaW5hbGl6ZSB0aGUgcmVzdWx0IGluIGNhc2UgaXQgY29udGFpbnMgKG9yIGlzKSBhIHN1YnNldCBvZiB0aGUgZHJhZnQuXG5cdFx0XHRyZXN1bHQgPSBmaW5hbGl6ZShzY29wZSwgcmVzdWx0KVxuXHRcdFx0aWYgKCFzY29wZS5wYXJlbnRfKSBtYXliZUZyZWV6ZShzY29wZSwgcmVzdWx0KVxuXHRcdH1cblx0XHRpZiAoc2NvcGUucGF0Y2hlc18pIHtcblx0XHRcdGdldFBsdWdpbihcIlBhdGNoZXNcIikuZ2VuZXJhdGVSZXBsYWNlbWVudFBhdGNoZXNfKFxuXHRcdFx0XHRiYXNlRHJhZnRbRFJBRlRfU1RBVEVdLmJhc2VfLFxuXHRcdFx0XHRyZXN1bHQsXG5cdFx0XHRcdHNjb3BlLnBhdGNoZXNfLFxuXHRcdFx0XHRzY29wZS5pbnZlcnNlUGF0Y2hlc18hXG5cdFx0XHQpXG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdC8vIEZpbmFsaXplIHRoZSBiYXNlIGRyYWZ0LlxuXHRcdHJlc3VsdCA9IGZpbmFsaXplKHNjb3BlLCBiYXNlRHJhZnQsIFtdKVxuXHR9XG5cdHJldm9rZVNjb3BlKHNjb3BlKVxuXHRpZiAoc2NvcGUucGF0Y2hlc18pIHtcblx0XHRzY29wZS5wYXRjaExpc3RlbmVyXyEoc2NvcGUucGF0Y2hlc18sIHNjb3BlLmludmVyc2VQYXRjaGVzXyEpXG5cdH1cblx0cmV0dXJuIHJlc3VsdCAhPT0gTk9USElORyA/IHJlc3VsdCA6IHVuZGVmaW5lZFxufVxuXG5mdW5jdGlvbiBmaW5hbGl6ZShyb290U2NvcGU6IEltbWVyU2NvcGUsIHZhbHVlOiBhbnksIHBhdGg/OiBQYXRjaFBhdGgpIHtcblx0Ly8gRG9uJ3QgcmVjdXJzZSBpbiB0aG8gcmVjdXJzaXZlIGRhdGEgc3RydWN0dXJlc1xuXHRpZiAoaXNGcm96ZW4odmFsdWUpKSByZXR1cm4gdmFsdWVcblxuXHRjb25zdCBzdGF0ZTogSW1tZXJTdGF0ZSA9IHZhbHVlW0RSQUZUX1NUQVRFXVxuXHQvLyBBIHBsYWluIG9iamVjdCwgbWlnaHQgbmVlZCBmcmVlemluZywgbWlnaHQgY29udGFpbiBkcmFmdHNcblx0aWYgKCFzdGF0ZSkge1xuXHRcdGVhY2goXG5cdFx0XHR2YWx1ZSxcblx0XHRcdChrZXksIGNoaWxkVmFsdWUpID0+XG5cdFx0XHRcdGZpbmFsaXplUHJvcGVydHkocm9vdFNjb3BlLCBzdGF0ZSwgdmFsdWUsIGtleSwgY2hpbGRWYWx1ZSwgcGF0aCksXG5cdFx0XHR0cnVlIC8vIFNlZSAjNTkwLCBkb24ndCByZWN1cnNlIGludG8gbm9uLWVudW1lcmFibGUgb2Ygbm9uIGRyYWZ0ZWQgb2JqZWN0c1xuXHRcdClcblx0XHRyZXR1cm4gdmFsdWVcblx0fVxuXHQvLyBOZXZlciBmaW5hbGl6ZSBkcmFmdHMgb3duZWQgYnkgYW5vdGhlciBzY29wZS5cblx0aWYgKHN0YXRlLnNjb3BlXyAhPT0gcm9vdFNjb3BlKSByZXR1cm4gdmFsdWVcblx0Ly8gVW5tb2RpZmllZCBkcmFmdCwgcmV0dXJuIHRoZSAoZnJvemVuKSBvcmlnaW5hbFxuXHRpZiAoIXN0YXRlLm1vZGlmaWVkXykge1xuXHRcdG1heWJlRnJlZXplKHJvb3RTY29wZSwgc3RhdGUuYmFzZV8sIHRydWUpXG5cdFx0cmV0dXJuIHN0YXRlLmJhc2VfXG5cdH1cblx0Ly8gTm90IGZpbmFsaXplZCB5ZXQsIGxldCdzIGRvIHRoYXQgbm93XG5cdGlmICghc3RhdGUuZmluYWxpemVkXykge1xuXHRcdHN0YXRlLmZpbmFsaXplZF8gPSB0cnVlXG5cdFx0c3RhdGUuc2NvcGVfLnVuZmluYWxpemVkRHJhZnRzXy0tXG5cdFx0Y29uc3QgcmVzdWx0ID1cblx0XHRcdC8vIEZvciBFUzUsIGNyZWF0ZSBhIGdvb2QgY29weSBmcm9tIHRoZSBkcmFmdCBmaXJzdCwgd2l0aCBhZGRlZCBrZXlzIGFuZCB3aXRob3V0IGRlbGV0ZWQga2V5cy5cblx0XHRcdHN0YXRlLnR5cGVfID09PSBQcm94eVR5cGUuRVM1T2JqZWN0IHx8IHN0YXRlLnR5cGVfID09PSBQcm94eVR5cGUuRVM1QXJyYXlcblx0XHRcdFx0PyAoc3RhdGUuY29weV8gPSBzaGFsbG93Q29weShzdGF0ZS5kcmFmdF8pKVxuXHRcdFx0XHQ6IHN0YXRlLmNvcHlfXG5cdFx0Ly8gRmluYWxpemUgYWxsIGNoaWxkcmVuIG9mIHRoZSBjb3B5XG5cdFx0Ly8gRm9yIHNldHMgd2UgY2xvbmUgYmVmb3JlIGl0ZXJhdGluZywgb3RoZXJ3aXNlIHdlIGNhbiBnZXQgaW4gZW5kbGVzcyBsb29wIGR1ZSB0byBtb2RpZnlpbmcgZHVyaW5nIGl0ZXJhdGlvbiwgc2VlICM2Mjhcblx0XHQvLyBBbHRob3VnaCB0aGUgb3JpZ2luYWwgdGVzdCBjYXNlIGRvZXNuJ3Qgc2VlbSB2YWxpZCBhbnl3YXksIHNvIGlmIHRoaXMgaW4gdGhlIHdheSB3ZSBjYW4gdHVybiB0aGUgbmV4dCBsaW5lXG5cdFx0Ly8gYmFjayB0byBlYWNoKHJlc3VsdCwgLi4uLilcblx0XHRlYWNoKFxuXHRcdFx0c3RhdGUudHlwZV8gPT09IFByb3h5VHlwZS5TZXQgPyBuZXcgU2V0KHJlc3VsdCkgOiByZXN1bHQsXG5cdFx0XHQoa2V5LCBjaGlsZFZhbHVlKSA9PlxuXHRcdFx0XHRmaW5hbGl6ZVByb3BlcnR5KHJvb3RTY29wZSwgc3RhdGUsIHJlc3VsdCwga2V5LCBjaGlsZFZhbHVlLCBwYXRoKVxuXHRcdClcblx0XHQvLyBldmVyeXRoaW5nIGluc2lkZSBpcyBmcm96ZW4sIHdlIGNhbiBmcmVlemUgaGVyZVxuXHRcdG1heWJlRnJlZXplKHJvb3RTY29wZSwgcmVzdWx0LCBmYWxzZSlcblx0XHQvLyBmaXJzdCB0aW1lIGZpbmFsaXppbmcsIGxldCdzIGNyZWF0ZSB0aG9zZSBwYXRjaGVzXG5cdFx0aWYgKHBhdGggJiYgcm9vdFNjb3BlLnBhdGNoZXNfKSB7XG5cdFx0XHRnZXRQbHVnaW4oXCJQYXRjaGVzXCIpLmdlbmVyYXRlUGF0Y2hlc18oXG5cdFx0XHRcdHN0YXRlLFxuXHRcdFx0XHRwYXRoLFxuXHRcdFx0XHRyb290U2NvcGUucGF0Y2hlc18sXG5cdFx0XHRcdHJvb3RTY29wZS5pbnZlcnNlUGF0Y2hlc18hXG5cdFx0XHQpXG5cdFx0fVxuXHR9XG5cdHJldHVybiBzdGF0ZS5jb3B5X1xufVxuXG5mdW5jdGlvbiBmaW5hbGl6ZVByb3BlcnR5KFxuXHRyb290U2NvcGU6IEltbWVyU2NvcGUsXG5cdHBhcmVudFN0YXRlOiB1bmRlZmluZWQgfCBJbW1lclN0YXRlLFxuXHR0YXJnZXRPYmplY3Q6IGFueSxcblx0cHJvcDogc3RyaW5nIHwgbnVtYmVyLFxuXHRjaGlsZFZhbHVlOiBhbnksXG5cdHJvb3RQYXRoPzogUGF0Y2hQYXRoXG4pIHtcblx0aWYgKF9fREVWX18gJiYgY2hpbGRWYWx1ZSA9PT0gdGFyZ2V0T2JqZWN0KSBkaWUoNSlcblx0aWYgKGlzRHJhZnQoY2hpbGRWYWx1ZSkpIHtcblx0XHRjb25zdCBwYXRoID1cblx0XHRcdHJvb3RQYXRoICYmXG5cdFx0XHRwYXJlbnRTdGF0ZSAmJlxuXHRcdFx0cGFyZW50U3RhdGUhLnR5cGVfICE9PSBQcm94eVR5cGUuU2V0ICYmIC8vIFNldCBvYmplY3RzIGFyZSBhdG9taWMgc2luY2UgdGhleSBoYXZlIG5vIGtleXMuXG5cdFx0XHQhaGFzKChwYXJlbnRTdGF0ZSBhcyBFeGNsdWRlPEltbWVyU3RhdGUsIFNldFN0YXRlPikuYXNzaWduZWRfISwgcHJvcCkgLy8gU2tpcCBkZWVwIHBhdGNoZXMgZm9yIGFzc2lnbmVkIGtleXMuXG5cdFx0XHRcdD8gcm9vdFBhdGghLmNvbmNhdChwcm9wKVxuXHRcdFx0XHQ6IHVuZGVmaW5lZFxuXHRcdC8vIERyYWZ0cyBvd25lZCBieSBgc2NvcGVgIGFyZSBmaW5hbGl6ZWQgaGVyZS5cblx0XHRjb25zdCByZXMgPSBmaW5hbGl6ZShyb290U2NvcGUsIGNoaWxkVmFsdWUsIHBhdGgpXG5cdFx0c2V0KHRhcmdldE9iamVjdCwgcHJvcCwgcmVzKVxuXHRcdC8vIERyYWZ0cyBmcm9tIGFub3RoZXIgc2NvcGUgbXVzdCBwcmV2ZW50ZWQgdG8gYmUgZnJvemVuXG5cdFx0Ly8gaWYgd2UgZ290IGEgZHJhZnQgYmFjayBmcm9tIGZpbmFsaXplLCB3ZSdyZSBpbiBhIG5lc3RlZCBwcm9kdWNlIGFuZCBzaG91bGRuJ3QgZnJlZXplXG5cdFx0aWYgKGlzRHJhZnQocmVzKSkge1xuXHRcdFx0cm9vdFNjb3BlLmNhbkF1dG9GcmVlemVfID0gZmFsc2Vcblx0XHR9IGVsc2UgcmV0dXJuXG5cdH1cblx0Ly8gU2VhcmNoIG5ldyBvYmplY3RzIGZvciB1bmZpbmFsaXplZCBkcmFmdHMuIEZyb3plbiBvYmplY3RzIHNob3VsZCBuZXZlciBjb250YWluIGRyYWZ0cy5cblx0aWYgKGlzRHJhZnRhYmxlKGNoaWxkVmFsdWUpICYmICFpc0Zyb3plbihjaGlsZFZhbHVlKSkge1xuXHRcdGlmICghcm9vdFNjb3BlLmltbWVyXy5hdXRvRnJlZXplXyAmJiByb290U2NvcGUudW5maW5hbGl6ZWREcmFmdHNfIDwgMSkge1xuXHRcdFx0Ly8gb3B0aW1pemF0aW9uOiBpZiBhbiBvYmplY3QgaXMgbm90IGEgZHJhZnQsIGFuZCB3ZSBkb24ndCBoYXZlIHRvXG5cdFx0XHQvLyBkZWVwZnJlZXplIGV2ZXJ5dGhpbmcsIGFuZCB3ZSBhcmUgc3VyZSB0aGF0IG5vIGRyYWZ0cyBhcmUgbGVmdCBpbiB0aGUgcmVtYWluaW5nIG9iamVjdFxuXHRcdFx0Ly8gY2F1c2Ugd2Ugc2F3IGFuZCBmaW5hbGl6ZWQgYWxsIGRyYWZ0cyBhbHJlYWR5OyB3ZSBjYW4gc3RvcCB2aXNpdGluZyB0aGUgcmVzdCBvZiB0aGUgdHJlZS5cblx0XHRcdC8vIFRoaXMgYmVuZWZpdHMgZXNwZWNpYWxseSBhZGRpbmcgbGFyZ2UgZGF0YSB0cmVlJ3Mgd2l0aG91dCBmdXJ0aGVyIHByb2Nlc3NpbmcuXG5cdFx0XHQvLyBTZWUgYWRkLWRhdGEuanMgcGVyZiB0ZXN0XG5cdFx0XHRyZXR1cm5cblx0XHR9XG5cdFx0ZmluYWxpemUocm9vdFNjb3BlLCBjaGlsZFZhbHVlKVxuXHRcdC8vIGltbWVyIGRlZXAgZnJlZXplcyBwbGFpbiBvYmplY3RzLCBzbyBpZiB0aGVyZSBpcyBubyBwYXJlbnQgc3RhdGUsIHdlIGZyZWV6ZSBhcyB3ZWxsXG5cdFx0aWYgKCFwYXJlbnRTdGF0ZSB8fCAhcGFyZW50U3RhdGUuc2NvcGVfLnBhcmVudF8pXG5cdFx0XHRtYXliZUZyZWV6ZShyb290U2NvcGUsIGNoaWxkVmFsdWUpXG5cdH1cbn1cblxuZnVuY3Rpb24gbWF5YmVGcmVlemUoc2NvcGU6IEltbWVyU2NvcGUsIHZhbHVlOiBhbnksIGRlZXAgPSBmYWxzZSkge1xuXHRpZiAoc2NvcGUuaW1tZXJfLmF1dG9GcmVlemVfICYmIHNjb3BlLmNhbkF1dG9GcmVlemVfKSB7XG5cdFx0ZnJlZXplKHZhbHVlLCBkZWVwKVxuXHR9XG59XG4iLCJpbXBvcnQge1xuXHRlYWNoLFxuXHRoYXMsXG5cdGlzLFxuXHRpc0RyYWZ0YWJsZSxcblx0c2hhbGxvd0NvcHksXG5cdGxhdGVzdCxcblx0SW1tZXJCYXNlU3RhdGUsXG5cdEltbWVyU3RhdGUsXG5cdERyYWZ0ZWQsXG5cdEFueU9iamVjdCxcblx0QW55QXJyYXksXG5cdE9iamVjdGlzaCxcblx0Z2V0Q3VycmVudFNjb3BlLFxuXHREUkFGVF9TVEFURSxcblx0ZGllLFxuXHRjcmVhdGVQcm94eSxcblx0UHJveHlUeXBlXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmludGVyZmFjZSBQcm94eUJhc2VTdGF0ZSBleHRlbmRzIEltbWVyQmFzZVN0YXRlIHtcblx0YXNzaWduZWRfOiB7XG5cdFx0W3Byb3BlcnR5OiBzdHJpbmddOiBib29sZWFuXG5cdH1cblx0cGFyZW50Xz86IEltbWVyU3RhdGVcblx0cmV2b2tlXygpOiB2b2lkXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJveHlPYmplY3RTdGF0ZSBleHRlbmRzIFByb3h5QmFzZVN0YXRlIHtcblx0dHlwZV86IFByb3h5VHlwZS5Qcm94eU9iamVjdFxuXHRiYXNlXzogYW55XG5cdGNvcHlfOiBhbnlcblx0ZHJhZnRfOiBEcmFmdGVkPEFueU9iamVjdCwgUHJveHlPYmplY3RTdGF0ZT5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBQcm94eUFycmF5U3RhdGUgZXh0ZW5kcyBQcm94eUJhc2VTdGF0ZSB7XG5cdHR5cGVfOiBQcm94eVR5cGUuUHJveHlBcnJheVxuXHRiYXNlXzogQW55QXJyYXlcblx0Y29weV86IEFueUFycmF5IHwgbnVsbFxuXHRkcmFmdF86IERyYWZ0ZWQ8QW55QXJyYXksIFByb3h5QXJyYXlTdGF0ZT5cbn1cblxudHlwZSBQcm94eVN0YXRlID0gUHJveHlPYmplY3RTdGF0ZSB8IFByb3h5QXJyYXlTdGF0ZVxuXG4vKipcbiAqIFJldHVybnMgYSBuZXcgZHJhZnQgb2YgdGhlIGBiYXNlYCBvYmplY3QuXG4gKlxuICogVGhlIHNlY29uZCBhcmd1bWVudCBpcyB0aGUgcGFyZW50IGRyYWZ0LXN0YXRlICh1c2VkIGludGVybmFsbHkpLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUHJveHlQcm94eTxUIGV4dGVuZHMgT2JqZWN0aXNoPihcblx0YmFzZTogVCxcblx0cGFyZW50PzogSW1tZXJTdGF0ZVxuKTogRHJhZnRlZDxULCBQcm94eVN0YXRlPiB7XG5cdGNvbnN0IGlzQXJyYXkgPSBBcnJheS5pc0FycmF5KGJhc2UpXG5cdGNvbnN0IHN0YXRlOiBQcm94eVN0YXRlID0ge1xuXHRcdHR5cGVfOiBpc0FycmF5ID8gUHJveHlUeXBlLlByb3h5QXJyYXkgOiAoUHJveHlUeXBlLlByb3h5T2JqZWN0IGFzIGFueSksXG5cdFx0Ly8gVHJhY2sgd2hpY2ggcHJvZHVjZSBjYWxsIHRoaXMgaXMgYXNzb2NpYXRlZCB3aXRoLlxuXHRcdHNjb3BlXzogcGFyZW50ID8gcGFyZW50LnNjb3BlXyA6IGdldEN1cnJlbnRTY29wZSgpISxcblx0XHQvLyBUcnVlIGZvciBib3RoIHNoYWxsb3cgYW5kIGRlZXAgY2hhbmdlcy5cblx0XHRtb2RpZmllZF86IGZhbHNlLFxuXHRcdC8vIFVzZWQgZHVyaW5nIGZpbmFsaXphdGlvbi5cblx0XHRmaW5hbGl6ZWRfOiBmYWxzZSxcblx0XHQvLyBUcmFjayB3aGljaCBwcm9wZXJ0aWVzIGhhdmUgYmVlbiBhc3NpZ25lZCAodHJ1ZSkgb3IgZGVsZXRlZCAoZmFsc2UpLlxuXHRcdGFzc2lnbmVkXzoge30sXG5cdFx0Ly8gVGhlIHBhcmVudCBkcmFmdCBzdGF0ZS5cblx0XHRwYXJlbnRfOiBwYXJlbnQsXG5cdFx0Ly8gVGhlIGJhc2Ugc3RhdGUuXG5cdFx0YmFzZV86IGJhc2UsXG5cdFx0Ly8gVGhlIGJhc2UgcHJveHkuXG5cdFx0ZHJhZnRfOiBudWxsIGFzIGFueSwgLy8gc2V0IGJlbG93XG5cdFx0Ly8gVGhlIGJhc2UgY29weSB3aXRoIGFueSB1cGRhdGVkIHZhbHVlcy5cblx0XHRjb3B5XzogbnVsbCxcblx0XHQvLyBDYWxsZWQgYnkgdGhlIGBwcm9kdWNlYCBmdW5jdGlvbi5cblx0XHRyZXZva2VfOiBudWxsIGFzIGFueSxcblx0XHRpc01hbnVhbF86IGZhbHNlXG5cdH1cblxuXHQvLyB0aGUgdHJhcHMgbXVzdCB0YXJnZXQgc29tZXRoaW5nLCBhIGJpdCBsaWtlIHRoZSAncmVhbCcgYmFzZS5cblx0Ly8gYnV0IGFsc28sIHdlIG5lZWQgdG8gYmUgYWJsZSB0byBkZXRlcm1pbmUgZnJvbSB0aGUgdGFyZ2V0IHdoYXQgdGhlIHJlbGV2YW50IHN0YXRlIGlzXG5cdC8vICh0byBhdm9pZCBjcmVhdGluZyB0cmFwcyBwZXIgaW5zdGFuY2UgdG8gY2FwdHVyZSB0aGUgc3RhdGUgaW4gY2xvc3VyZSxcblx0Ly8gYW5kIHRvIGF2b2lkIGNyZWF0aW5nIHdlaXJkIGhpZGRlbiBwcm9wZXJ0aWVzIGFzIHdlbGwpXG5cdC8vIFNvIHRoZSB0cmljayBpcyB0byB1c2UgJ3N0YXRlJyBhcyB0aGUgYWN0dWFsICd0YXJnZXQnISAoYW5kIG1ha2Ugc3VyZSB3ZSBpbnRlcmNlcHQgZXZlcnl0aGluZylcblx0Ly8gTm90ZSB0aGF0IGluIHRoZSBjYXNlIG9mIGFuIGFycmF5LCB3ZSBwdXQgdGhlIHN0YXRlIGluIGFuIGFycmF5IHRvIGhhdmUgYmV0dGVyIFJlZmxlY3QgZGVmYXVsdHMgb290YlxuXHRsZXQgdGFyZ2V0OiBUID0gc3RhdGUgYXMgYW55XG5cdGxldCB0cmFwczogUHJveHlIYW5kbGVyPG9iamVjdCB8IEFycmF5PGFueT4+ID0gb2JqZWN0VHJhcHNcblx0aWYgKGlzQXJyYXkpIHtcblx0XHR0YXJnZXQgPSBbc3RhdGVdIGFzIGFueVxuXHRcdHRyYXBzID0gYXJyYXlUcmFwc1xuXHR9XG5cblx0Y29uc3Qge3Jldm9rZSwgcHJveHl9ID0gUHJveHkucmV2b2NhYmxlKHRhcmdldCwgdHJhcHMpXG5cdHN0YXRlLmRyYWZ0XyA9IHByb3h5IGFzIGFueVxuXHRzdGF0ZS5yZXZva2VfID0gcmV2b2tlXG5cdHJldHVybiBwcm94eSBhcyBhbnlcbn1cblxuLyoqXG4gKiBPYmplY3QgZHJhZnRzXG4gKi9cbmV4cG9ydCBjb25zdCBvYmplY3RUcmFwczogUHJveHlIYW5kbGVyPFByb3h5U3RhdGU+ID0ge1xuXHRnZXQoc3RhdGUsIHByb3ApIHtcblx0XHRpZiAocHJvcCA9PT0gRFJBRlRfU1RBVEUpIHJldHVybiBzdGF0ZVxuXG5cdFx0Y29uc3Qgc291cmNlID0gbGF0ZXN0KHN0YXRlKVxuXHRcdGlmICghaGFzKHNvdXJjZSwgcHJvcCkpIHtcblx0XHRcdC8vIG5vbi1leGlzdGluZyBvciBub24tb3duIHByb3BlcnR5Li4uXG5cdFx0XHRyZXR1cm4gcmVhZFByb3BGcm9tUHJvdG8oc3RhdGUsIHNvdXJjZSwgcHJvcClcblx0XHR9XG5cdFx0Y29uc3QgdmFsdWUgPSBzb3VyY2VbcHJvcF1cblx0XHRpZiAoc3RhdGUuZmluYWxpemVkXyB8fCAhaXNEcmFmdGFibGUodmFsdWUpKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWVcblx0XHR9XG5cdFx0Ly8gQ2hlY2sgZm9yIGV4aXN0aW5nIGRyYWZ0IGluIG1vZGlmaWVkIHN0YXRlLlxuXHRcdC8vIEFzc2lnbmVkIHZhbHVlcyBhcmUgbmV2ZXIgZHJhZnRlZC4gVGhpcyBjYXRjaGVzIGFueSBkcmFmdHMgd2UgY3JlYXRlZCwgdG9vLlxuXHRcdGlmICh2YWx1ZSA9PT0gcGVlayhzdGF0ZS5iYXNlXywgcHJvcCkpIHtcblx0XHRcdHByZXBhcmVDb3B5KHN0YXRlKVxuXHRcdFx0cmV0dXJuIChzdGF0ZS5jb3B5XyFbcHJvcCBhcyBhbnldID0gY3JlYXRlUHJveHkoXG5cdFx0XHRcdHN0YXRlLnNjb3BlXy5pbW1lcl8sXG5cdFx0XHRcdHZhbHVlLFxuXHRcdFx0XHRzdGF0ZVxuXHRcdFx0KSlcblx0XHR9XG5cdFx0cmV0dXJuIHZhbHVlXG5cdH0sXG5cdGhhcyhzdGF0ZSwgcHJvcCkge1xuXHRcdHJldHVybiBwcm9wIGluIGxhdGVzdChzdGF0ZSlcblx0fSxcblx0b3duS2V5cyhzdGF0ZSkge1xuXHRcdHJldHVybiBSZWZsZWN0Lm93bktleXMobGF0ZXN0KHN0YXRlKSlcblx0fSxcblx0c2V0KFxuXHRcdHN0YXRlOiBQcm94eU9iamVjdFN0YXRlLFxuXHRcdHByb3A6IHN0cmluZyAvKiBzdHJpY3RseSBub3QsIGJ1dCBoZWxwcyBUUyAqLyxcblx0XHR2YWx1ZVxuXHQpIHtcblx0XHRjb25zdCBkZXNjID0gZ2V0RGVzY3JpcHRvckZyb21Qcm90byhsYXRlc3Qoc3RhdGUpLCBwcm9wKVxuXHRcdGlmIChkZXNjPy5zZXQpIHtcblx0XHRcdC8vIHNwZWNpYWwgY2FzZTogaWYgdGhpcyB3cml0ZSBpcyBjYXB0dXJlZCBieSBhIHNldHRlciwgd2UgaGF2ZVxuXHRcdFx0Ly8gdG8gdHJpZ2dlciBpdCB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcblx0XHRcdGRlc2Muc2V0LmNhbGwoc3RhdGUuZHJhZnRfLCB2YWx1ZSlcblx0XHRcdHJldHVybiB0cnVlXG5cdFx0fVxuXHRcdGlmICghc3RhdGUubW9kaWZpZWRfKSB7XG5cdFx0XHQvLyB0aGUgbGFzdCBjaGVjayBpcyBiZWNhdXNlIHdlIG5lZWQgdG8gYmUgYWJsZSB0byBkaXN0aW5ndWlzaCBzZXR0aW5nIGEgbm9uLWV4aXN0aW5nIHRvIHVuZGVmaW5lZCAod2hpY2ggaXMgYSBjaGFuZ2UpXG5cdFx0XHQvLyBmcm9tIHNldHRpbmcgYW4gZXhpc3RpbmcgcHJvcGVydHkgd2l0aCB2YWx1ZSB1bmRlZmluZWQgdG8gdW5kZWZpbmVkICh3aGljaCBpcyBub3QgYSBjaGFuZ2UpXG5cdFx0XHRjb25zdCBjdXJyZW50ID0gcGVlayhsYXRlc3Qoc3RhdGUpLCBwcm9wKVxuXHRcdFx0Ly8gc3BlY2lhbCBjYXNlLCBpZiB3ZSBhc3NpZ25pbmcgdGhlIG9yaWdpbmFsIHZhbHVlIHRvIGEgZHJhZnQsIHdlIGNhbiBpZ25vcmUgdGhlIGFzc2lnbm1lbnRcblx0XHRcdGNvbnN0IGN1cnJlbnRTdGF0ZTogUHJveHlPYmplY3RTdGF0ZSA9IGN1cnJlbnQ/LltEUkFGVF9TVEFURV1cblx0XHRcdGlmIChjdXJyZW50U3RhdGUgJiYgY3VycmVudFN0YXRlLmJhc2VfID09PSB2YWx1ZSkge1xuXHRcdFx0XHRzdGF0ZS5jb3B5XyFbcHJvcF0gPSB2YWx1ZVxuXHRcdFx0XHRzdGF0ZS5hc3NpZ25lZF9bcHJvcF0gPSBmYWxzZVxuXHRcdFx0XHRyZXR1cm4gdHJ1ZVxuXHRcdFx0fVxuXHRcdFx0aWYgKGlzKHZhbHVlLCBjdXJyZW50KSAmJiAodmFsdWUgIT09IHVuZGVmaW5lZCB8fCBoYXMoc3RhdGUuYmFzZV8sIHByb3ApKSlcblx0XHRcdFx0cmV0dXJuIHRydWVcblx0XHRcdHByZXBhcmVDb3B5KHN0YXRlKVxuXHRcdFx0bWFya0NoYW5nZWQoc3RhdGUpXG5cdFx0fVxuXG5cdFx0aWYgKFxuXHRcdFx0c3RhdGUuY29weV8hW3Byb3BdID09PSB2YWx1ZSAmJlxuXHRcdFx0Ly8gc3BlY2lhbCBjYXNlOiBOYU5cblx0XHRcdHR5cGVvZiB2YWx1ZSAhPT0gXCJudW1iZXJcIiAmJlxuXHRcdFx0Ly8gc3BlY2lhbCBjYXNlOiBoYW5kbGUgbmV3IHByb3BzIHdpdGggdmFsdWUgJ3VuZGVmaW5lZCdcblx0XHRcdCh2YWx1ZSAhPT0gdW5kZWZpbmVkIHx8IHByb3AgaW4gc3RhdGUuY29weV8pXG5cdFx0KVxuXHRcdFx0cmV0dXJuIHRydWVcblxuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRzdGF0ZS5jb3B5XyFbcHJvcF0gPSB2YWx1ZVxuXHRcdHN0YXRlLmFzc2lnbmVkX1twcm9wXSA9IHRydWVcblx0XHRyZXR1cm4gdHJ1ZVxuXHR9LFxuXHRkZWxldGVQcm9wZXJ0eShzdGF0ZSwgcHJvcDogc3RyaW5nKSB7XG5cdFx0Ly8gVGhlIGB1bmRlZmluZWRgIGNoZWNrIGlzIGEgZmFzdCBwYXRoIGZvciBwcmUtZXhpc3Rpbmcga2V5cy5cblx0XHRpZiAocGVlayhzdGF0ZS5iYXNlXywgcHJvcCkgIT09IHVuZGVmaW5lZCB8fCBwcm9wIGluIHN0YXRlLmJhc2VfKSB7XG5cdFx0XHRzdGF0ZS5hc3NpZ25lZF9bcHJvcF0gPSBmYWxzZVxuXHRcdFx0cHJlcGFyZUNvcHkoc3RhdGUpXG5cdFx0XHRtYXJrQ2hhbmdlZChzdGF0ZSlcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gaWYgYW4gb3JpZ2luYWxseSBub3QgYXNzaWduZWQgcHJvcGVydHkgd2FzIGRlbGV0ZWRcblx0XHRcdGRlbGV0ZSBzdGF0ZS5hc3NpZ25lZF9bcHJvcF1cblx0XHR9XG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdGlmIChzdGF0ZS5jb3B5XykgZGVsZXRlIHN0YXRlLmNvcHlfW3Byb3BdXG5cdFx0cmV0dXJuIHRydWVcblx0fSxcblx0Ly8gTm90ZTogV2UgbmV2ZXIgY29lcmNlIGBkZXNjLnZhbHVlYCBpbnRvIGFuIEltbWVyIGRyYWZ0LCBiZWNhdXNlIHdlIGNhbid0IG1ha2Vcblx0Ly8gdGhlIHNhbWUgZ3VhcmFudGVlIGluIEVTNSBtb2RlLlxuXHRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc3RhdGUsIHByb3ApIHtcblx0XHRjb25zdCBvd25lciA9IGxhdGVzdChzdGF0ZSlcblx0XHRjb25zdCBkZXNjID0gUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob3duZXIsIHByb3ApXG5cdFx0aWYgKCFkZXNjKSByZXR1cm4gZGVzY1xuXHRcdHJldHVybiB7XG5cdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogc3RhdGUudHlwZV8gIT09IFByb3h5VHlwZS5Qcm94eUFycmF5IHx8IHByb3AgIT09IFwibGVuZ3RoXCIsXG5cdFx0XHRlbnVtZXJhYmxlOiBkZXNjLmVudW1lcmFibGUsXG5cdFx0XHR2YWx1ZTogb3duZXJbcHJvcF1cblx0XHR9XG5cdH0sXG5cdGRlZmluZVByb3BlcnR5KCkge1xuXHRcdGRpZSgxMSlcblx0fSxcblx0Z2V0UHJvdG90eXBlT2Yoc3RhdGUpIHtcblx0XHRyZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKHN0YXRlLmJhc2VfKVxuXHR9LFxuXHRzZXRQcm90b3R5cGVPZigpIHtcblx0XHRkaWUoMTIpXG5cdH1cbn1cblxuLyoqXG4gKiBBcnJheSBkcmFmdHNcbiAqL1xuXG5jb25zdCBhcnJheVRyYXBzOiBQcm94eUhhbmRsZXI8W1Byb3h5QXJyYXlTdGF0ZV0+ID0ge31cbmVhY2gob2JqZWN0VHJhcHMsIChrZXksIGZuKSA9PiB7XG5cdC8vIEB0cy1pZ25vcmVcblx0YXJyYXlUcmFwc1trZXldID0gZnVuY3Rpb24oKSB7XG5cdFx0YXJndW1lbnRzWzBdID0gYXJndW1lbnRzWzBdWzBdXG5cdFx0cmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcblx0fVxufSlcbmFycmF5VHJhcHMuZGVsZXRlUHJvcGVydHkgPSBmdW5jdGlvbihzdGF0ZSwgcHJvcCkge1xuXHRpZiAoX19ERVZfXyAmJiBpc05hTihwYXJzZUludChwcm9wIGFzIGFueSkpKSBkaWUoMTMpXG5cdC8vIEB0cy1pZ25vcmVcblx0cmV0dXJuIGFycmF5VHJhcHMuc2V0IS5jYWxsKHRoaXMsIHN0YXRlLCBwcm9wLCB1bmRlZmluZWQpXG59XG5hcnJheVRyYXBzLnNldCA9IGZ1bmN0aW9uKHN0YXRlLCBwcm9wLCB2YWx1ZSkge1xuXHRpZiAoX19ERVZfXyAmJiBwcm9wICE9PSBcImxlbmd0aFwiICYmIGlzTmFOKHBhcnNlSW50KHByb3AgYXMgYW55KSkpIGRpZSgxNClcblx0cmV0dXJuIG9iamVjdFRyYXBzLnNldCEuY2FsbCh0aGlzLCBzdGF0ZVswXSwgcHJvcCwgdmFsdWUsIHN0YXRlWzBdKVxufVxuXG4vLyBBY2Nlc3MgYSBwcm9wZXJ0eSB3aXRob3V0IGNyZWF0aW5nIGFuIEltbWVyIGRyYWZ0LlxuZnVuY3Rpb24gcGVlayhkcmFmdDogRHJhZnRlZCwgcHJvcDogUHJvcGVydHlLZXkpIHtcblx0Y29uc3Qgc3RhdGUgPSBkcmFmdFtEUkFGVF9TVEFURV1cblx0Y29uc3Qgc291cmNlID0gc3RhdGUgPyBsYXRlc3Qoc3RhdGUpIDogZHJhZnRcblx0cmV0dXJuIHNvdXJjZVtwcm9wXVxufVxuXG5mdW5jdGlvbiByZWFkUHJvcEZyb21Qcm90byhzdGF0ZTogSW1tZXJTdGF0ZSwgc291cmNlOiBhbnksIHByb3A6IFByb3BlcnR5S2V5KSB7XG5cdGNvbnN0IGRlc2MgPSBnZXREZXNjcmlwdG9yRnJvbVByb3RvKHNvdXJjZSwgcHJvcClcblx0cmV0dXJuIGRlc2Ncblx0XHQ/IGB2YWx1ZWAgaW4gZGVzY1xuXHRcdFx0PyBkZXNjLnZhbHVlXG5cdFx0XHQ6IC8vIFRoaXMgaXMgYSB2ZXJ5IHNwZWNpYWwgY2FzZSwgaWYgdGhlIHByb3AgaXMgYSBnZXR0ZXIgZGVmaW5lZCBieSB0aGVcblx0XHRcdCAgLy8gcHJvdG90eXBlLCB3ZSBzaG91bGQgaW52b2tlIGl0IHdpdGggdGhlIGRyYWZ0IGFzIGNvbnRleHQhXG5cdFx0XHQgIGRlc2MuZ2V0Py5jYWxsKHN0YXRlLmRyYWZ0Xylcblx0XHQ6IHVuZGVmaW5lZFxufVxuXG5mdW5jdGlvbiBnZXREZXNjcmlwdG9yRnJvbVByb3RvKFxuXHRzb3VyY2U6IGFueSxcblx0cHJvcDogUHJvcGVydHlLZXlcbik6IFByb3BlcnR5RGVzY3JpcHRvciB8IHVuZGVmaW5lZCB7XG5cdC8vICdpbicgY2hlY2tzIHByb3RvIVxuXHRpZiAoIShwcm9wIGluIHNvdXJjZSkpIHJldHVybiB1bmRlZmluZWRcblx0bGV0IHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHNvdXJjZSlcblx0d2hpbGUgKHByb3RvKSB7XG5cdFx0Y29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocHJvdG8sIHByb3ApXG5cdFx0aWYgKGRlc2MpIHJldHVybiBkZXNjXG5cdFx0cHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pXG5cdH1cblx0cmV0dXJuIHVuZGVmaW5lZFxufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFya0NoYW5nZWQoc3RhdGU6IEltbWVyU3RhdGUpIHtcblx0aWYgKCFzdGF0ZS5tb2RpZmllZF8pIHtcblx0XHRzdGF0ZS5tb2RpZmllZF8gPSB0cnVlXG5cdFx0aWYgKHN0YXRlLnBhcmVudF8pIHtcblx0XHRcdG1hcmtDaGFuZ2VkKHN0YXRlLnBhcmVudF8pXG5cdFx0fVxuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlQ29weShzdGF0ZToge2Jhc2VfOiBhbnk7IGNvcHlfOiBhbnl9KSB7XG5cdGlmICghc3RhdGUuY29weV8pIHtcblx0XHRzdGF0ZS5jb3B5XyA9IHNoYWxsb3dDb3B5KHN0YXRlLmJhc2VfKVxuXHR9XG59XG4iLCJpbXBvcnQge1xuXHRJUHJvZHVjZVdpdGhQYXRjaGVzLFxuXHRJUHJvZHVjZSxcblx0SW1tZXJTdGF0ZSxcblx0RHJhZnRlZCxcblx0aXNEcmFmdGFibGUsXG5cdHByb2Nlc3NSZXN1bHQsXG5cdFBhdGNoLFxuXHRPYmplY3Rpc2gsXG5cdERSQUZUX1NUQVRFLFxuXHREcmFmdCxcblx0UGF0Y2hMaXN0ZW5lcixcblx0aXNEcmFmdCxcblx0aXNNYXAsXG5cdGlzU2V0LFxuXHRjcmVhdGVQcm94eVByb3h5LFxuXHRnZXRQbHVnaW4sXG5cdGRpZSxcblx0aGFzUHJveGllcyxcblx0ZW50ZXJTY29wZSxcblx0cmV2b2tlU2NvcGUsXG5cdGxlYXZlU2NvcGUsXG5cdHVzZVBhdGNoZXNJblNjb3BlLFxuXHRnZXRDdXJyZW50U2NvcGUsXG5cdE5PVEhJTkcsXG5cdGZyZWV6ZSxcblx0Y3VycmVudFxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5pbnRlcmZhY2UgUHJvZHVjZXJzRm5zIHtcblx0cHJvZHVjZTogSVByb2R1Y2Vcblx0cHJvZHVjZVdpdGhQYXRjaGVzOiBJUHJvZHVjZVdpdGhQYXRjaGVzXG59XG5cbmV4cG9ydCBjbGFzcyBJbW1lciBpbXBsZW1lbnRzIFByb2R1Y2Vyc0ZucyB7XG5cdHVzZVByb3hpZXNfOiBib29sZWFuID0gaGFzUHJveGllc1xuXG5cdGF1dG9GcmVlemVfOiBib29sZWFuID0gdHJ1ZVxuXG5cdGNvbnN0cnVjdG9yKGNvbmZpZz86IHt1c2VQcm94aWVzPzogYm9vbGVhbjsgYXV0b0ZyZWV6ZT86IGJvb2xlYW59KSB7XG5cdFx0aWYgKHR5cGVvZiBjb25maWc/LnVzZVByb3hpZXMgPT09IFwiYm9vbGVhblwiKVxuXHRcdFx0dGhpcy5zZXRVc2VQcm94aWVzKGNvbmZpZyEudXNlUHJveGllcylcblx0XHRpZiAodHlwZW9mIGNvbmZpZz8uYXV0b0ZyZWV6ZSA9PT0gXCJib29sZWFuXCIpXG5cdFx0XHR0aGlzLnNldEF1dG9GcmVlemUoY29uZmlnIS5hdXRvRnJlZXplKVxuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSBgcHJvZHVjZWAgZnVuY3Rpb24gdGFrZXMgYSB2YWx1ZSBhbmQgYSBcInJlY2lwZSBmdW5jdGlvblwiICh3aG9zZVxuXHQgKiByZXR1cm4gdmFsdWUgb2Z0ZW4gZGVwZW5kcyBvbiB0aGUgYmFzZSBzdGF0ZSkuIFRoZSByZWNpcGUgZnVuY3Rpb24gaXNcblx0ICogZnJlZSB0byBtdXRhdGUgaXRzIGZpcnN0IGFyZ3VtZW50IGhvd2V2ZXIgaXQgd2FudHMuIEFsbCBtdXRhdGlvbnMgYXJlXG5cdCAqIG9ubHkgZXZlciBhcHBsaWVkIHRvIGEgX19jb3B5X18gb2YgdGhlIGJhc2Ugc3RhdGUuXG5cdCAqXG5cdCAqIFBhc3Mgb25seSBhIGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIFwiY3VycmllZCBwcm9kdWNlclwiIHdoaWNoIHJlbGlldmVzIHlvdVxuXHQgKiBmcm9tIHBhc3NpbmcgdGhlIHJlY2lwZSBmdW5jdGlvbiBldmVyeSB0aW1lLlxuXHQgKlxuXHQgKiBPbmx5IHBsYWluIG9iamVjdHMgYW5kIGFycmF5cyBhcmUgbWFkZSBtdXRhYmxlLiBBbGwgb3RoZXIgb2JqZWN0cyBhcmVcblx0ICogY29uc2lkZXJlZCB1bmNvcHlhYmxlLlxuXHQgKlxuXHQgKiBOb3RlOiBUaGlzIGZ1bmN0aW9uIGlzIF9fYm91bmRfXyB0byBpdHMgYEltbWVyYCBpbnN0YW5jZS5cblx0ICpcblx0ICogQHBhcmFtIHthbnl9IGJhc2UgLSB0aGUgaW5pdGlhbCBzdGF0ZVxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcm9kdWNlciAtIGZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXMgYSBwcm94eSBvZiB0aGUgYmFzZSBzdGF0ZSBhcyBmaXJzdCBhcmd1bWVudCBhbmQgd2hpY2ggY2FuIGJlIGZyZWVseSBtb2RpZmllZFxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwYXRjaExpc3RlbmVyIC0gb3B0aW9uYWwgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aXRoIGFsbCB0aGUgcGF0Y2hlcyBwcm9kdWNlZCBoZXJlXG5cdCAqIEByZXR1cm5zIHthbnl9IGEgbmV3IHN0YXRlLCBvciB0aGUgaW5pdGlhbCBzdGF0ZSBpZiBub3RoaW5nIHdhcyBtb2RpZmllZFxuXHQgKi9cblx0cHJvZHVjZTogSVByb2R1Y2UgPSAoYmFzZTogYW55LCByZWNpcGU/OiBhbnksIHBhdGNoTGlzdGVuZXI/OiBhbnkpID0+IHtcblx0XHQvLyBjdXJyaWVkIGludm9jYXRpb25cblx0XHRpZiAodHlwZW9mIGJhc2UgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgcmVjaXBlICE9PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdGNvbnN0IGRlZmF1bHRCYXNlID0gcmVjaXBlXG5cdFx0XHRyZWNpcGUgPSBiYXNlXG5cblx0XHRcdGNvbnN0IHNlbGYgPSB0aGlzXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gY3VycmllZFByb2R1Y2UoXG5cdFx0XHRcdHRoaXM6IGFueSxcblx0XHRcdFx0YmFzZSA9IGRlZmF1bHRCYXNlLFxuXHRcdFx0XHQuLi5hcmdzOiBhbnlbXVxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybiBzZWxmLnByb2R1Y2UoYmFzZSwgKGRyYWZ0OiBEcmFmdGVkKSA9PiByZWNpcGUuY2FsbCh0aGlzLCBkcmFmdCwgLi4uYXJncykpIC8vIHByZXR0aWVyLWlnbm9yZVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICh0eXBlb2YgcmVjaXBlICE9PSBcImZ1bmN0aW9uXCIpIGRpZSg2KVxuXHRcdGlmIChwYXRjaExpc3RlbmVyICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHBhdGNoTGlzdGVuZXIgIT09IFwiZnVuY3Rpb25cIilcblx0XHRcdGRpZSg3KVxuXG5cdFx0bGV0IHJlc3VsdFxuXG5cdFx0Ly8gT25seSBwbGFpbiBvYmplY3RzLCBhcnJheXMsIGFuZCBcImltbWVyYWJsZSBjbGFzc2VzXCIgYXJlIGRyYWZ0ZWQuXG5cdFx0aWYgKGlzRHJhZnRhYmxlKGJhc2UpKSB7XG5cdFx0XHRjb25zdCBzY29wZSA9IGVudGVyU2NvcGUodGhpcylcblx0XHRcdGNvbnN0IHByb3h5ID0gY3JlYXRlUHJveHkodGhpcywgYmFzZSwgdW5kZWZpbmVkKVxuXHRcdFx0bGV0IGhhc0Vycm9yID0gdHJ1ZVxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0cmVzdWx0ID0gcmVjaXBlKHByb3h5KVxuXHRcdFx0XHRoYXNFcnJvciA9IGZhbHNlXG5cdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHQvLyBmaW5hbGx5IGluc3RlYWQgb2YgY2F0Y2ggKyByZXRocm93IGJldHRlciBwcmVzZXJ2ZXMgb3JpZ2luYWwgc3RhY2tcblx0XHRcdFx0aWYgKGhhc0Vycm9yKSByZXZva2VTY29wZShzY29wZSlcblx0XHRcdFx0ZWxzZSBsZWF2ZVNjb3BlKHNjb3BlKVxuXHRcdFx0fVxuXHRcdFx0aWYgKHR5cGVvZiBQcm9taXNlICE9PSBcInVuZGVmaW5lZFwiICYmIHJlc3VsdCBpbnN0YW5jZW9mIFByb21pc2UpIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdC50aGVuKFxuXHRcdFx0XHRcdHJlc3VsdCA9PiB7XG5cdFx0XHRcdFx0XHR1c2VQYXRjaGVzSW5TY29wZShzY29wZSwgcGF0Y2hMaXN0ZW5lcilcblx0XHRcdFx0XHRcdHJldHVybiBwcm9jZXNzUmVzdWx0KHJlc3VsdCwgc2NvcGUpXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRlcnJvciA9PiB7XG5cdFx0XHRcdFx0XHRyZXZva2VTY29wZShzY29wZSlcblx0XHRcdFx0XHRcdHRocm93IGVycm9yXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHQpXG5cdFx0XHR9XG5cdFx0XHR1c2VQYXRjaGVzSW5TY29wZShzY29wZSwgcGF0Y2hMaXN0ZW5lcilcblx0XHRcdHJldHVybiBwcm9jZXNzUmVzdWx0KHJlc3VsdCwgc2NvcGUpXG5cdFx0fSBlbHNlIGlmICghYmFzZSB8fCB0eXBlb2YgYmFzZSAhPT0gXCJvYmplY3RcIikge1xuXHRcdFx0cmVzdWx0ID0gcmVjaXBlKGJhc2UpXG5cdFx0XHRpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHJlc3VsdCA9IGJhc2Vcblx0XHRcdGlmIChyZXN1bHQgPT09IE5PVEhJTkcpIHJlc3VsdCA9IHVuZGVmaW5lZFxuXHRcdFx0aWYgKHRoaXMuYXV0b0ZyZWV6ZV8pIGZyZWV6ZShyZXN1bHQsIHRydWUpXG5cdFx0XHRpZiAocGF0Y2hMaXN0ZW5lcikge1xuXHRcdFx0XHRjb25zdCBwOiBQYXRjaFtdID0gW11cblx0XHRcdFx0Y29uc3QgaXA6IFBhdGNoW10gPSBbXVxuXHRcdFx0XHRnZXRQbHVnaW4oXCJQYXRjaGVzXCIpLmdlbmVyYXRlUmVwbGFjZW1lbnRQYXRjaGVzXyhiYXNlLCByZXN1bHQsIHAsIGlwKVxuXHRcdFx0XHRwYXRjaExpc3RlbmVyKHAsIGlwKVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdFxuXHRcdH0gZWxzZSBkaWUoMjEsIGJhc2UpXG5cdH1cblxuXHRwcm9kdWNlV2l0aFBhdGNoZXM6IElQcm9kdWNlV2l0aFBhdGNoZXMgPSAoXG5cdFx0YXJnMTogYW55LFxuXHRcdGFyZzI/OiBhbnksXG5cdFx0YXJnMz86IGFueVxuXHQpOiBhbnkgPT4ge1xuXHRcdGlmICh0eXBlb2YgYXJnMSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRyZXR1cm4gKHN0YXRlOiBhbnksIC4uLmFyZ3M6IGFueVtdKSA9PlxuXHRcdFx0XHR0aGlzLnByb2R1Y2VXaXRoUGF0Y2hlcyhzdGF0ZSwgKGRyYWZ0OiBhbnkpID0+IGFyZzEoZHJhZnQsIC4uLmFyZ3MpKVxuXHRcdH1cblxuXHRcdGxldCBwYXRjaGVzOiBQYXRjaFtdLCBpbnZlcnNlUGF0Y2hlczogUGF0Y2hbXVxuXHRcdGNvbnN0IHJlc3VsdCA9IHRoaXMucHJvZHVjZShhcmcxLCBhcmcyLCAocDogUGF0Y2hbXSwgaXA6IFBhdGNoW10pID0+IHtcblx0XHRcdHBhdGNoZXMgPSBwXG5cdFx0XHRpbnZlcnNlUGF0Y2hlcyA9IGlwXG5cdFx0fSlcblxuXHRcdGlmICh0eXBlb2YgUHJvbWlzZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiByZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG5cdFx0XHRyZXR1cm4gcmVzdWx0LnRoZW4obmV4dFN0YXRlID0+IFtuZXh0U3RhdGUsIHBhdGNoZXMhLCBpbnZlcnNlUGF0Y2hlcyFdKVxuXHRcdH1cblx0XHRyZXR1cm4gW3Jlc3VsdCwgcGF0Y2hlcyEsIGludmVyc2VQYXRjaGVzIV1cblx0fVxuXG5cdGNyZWF0ZURyYWZ0PFQgZXh0ZW5kcyBPYmplY3Rpc2g+KGJhc2U6IFQpOiBEcmFmdDxUPiB7XG5cdFx0aWYgKCFpc0RyYWZ0YWJsZShiYXNlKSkgZGllKDgpXG5cdFx0aWYgKGlzRHJhZnQoYmFzZSkpIGJhc2UgPSBjdXJyZW50KGJhc2UpXG5cdFx0Y29uc3Qgc2NvcGUgPSBlbnRlclNjb3BlKHRoaXMpXG5cdFx0Y29uc3QgcHJveHkgPSBjcmVhdGVQcm94eSh0aGlzLCBiYXNlLCB1bmRlZmluZWQpXG5cdFx0cHJveHlbRFJBRlRfU1RBVEVdLmlzTWFudWFsXyA9IHRydWVcblx0XHRsZWF2ZVNjb3BlKHNjb3BlKVxuXHRcdHJldHVybiBwcm94eSBhcyBhbnlcblx0fVxuXG5cdGZpbmlzaERyYWZ0PEQgZXh0ZW5kcyBEcmFmdDxhbnk+Pihcblx0XHRkcmFmdDogRCxcblx0XHRwYXRjaExpc3RlbmVyPzogUGF0Y2hMaXN0ZW5lclxuXHQpOiBEIGV4dGVuZHMgRHJhZnQ8aW5mZXIgVD4gPyBUIDogbmV2ZXIge1xuXHRcdGNvbnN0IHN0YXRlOiBJbW1lclN0YXRlID0gZHJhZnQgJiYgKGRyYWZ0IGFzIGFueSlbRFJBRlRfU1RBVEVdXG5cdFx0aWYgKF9fREVWX18pIHtcblx0XHRcdGlmICghc3RhdGUgfHwgIXN0YXRlLmlzTWFudWFsXykgZGllKDkpXG5cdFx0XHRpZiAoc3RhdGUuZmluYWxpemVkXykgZGllKDEwKVxuXHRcdH1cblx0XHRjb25zdCB7c2NvcGVfOiBzY29wZX0gPSBzdGF0ZVxuXHRcdHVzZVBhdGNoZXNJblNjb3BlKHNjb3BlLCBwYXRjaExpc3RlbmVyKVxuXHRcdHJldHVybiBwcm9jZXNzUmVzdWx0KHVuZGVmaW5lZCwgc2NvcGUpXG5cdH1cblxuXHQvKipcblx0ICogUGFzcyB0cnVlIHRvIGF1dG9tYXRpY2FsbHkgZnJlZXplIGFsbCBjb3BpZXMgY3JlYXRlZCBieSBJbW1lci5cblx0ICpcblx0ICogQnkgZGVmYXVsdCwgYXV0by1mcmVlemluZyBpcyBlbmFibGVkLlxuXHQgKi9cblx0c2V0QXV0b0ZyZWV6ZSh2YWx1ZTogYm9vbGVhbikge1xuXHRcdHRoaXMuYXV0b0ZyZWV6ZV8gPSB2YWx1ZVxuXHR9XG5cblx0LyoqXG5cdCAqIFBhc3MgdHJ1ZSB0byB1c2UgdGhlIEVTMjAxNSBgUHJveHlgIGNsYXNzIHdoZW4gY3JlYXRpbmcgZHJhZnRzLCB3aGljaCBpc1xuXHQgKiBhbHdheXMgZmFzdGVyIHRoYW4gdXNpbmcgRVM1IHByb3hpZXMuXG5cdCAqXG5cdCAqIEJ5IGRlZmF1bHQsIGZlYXR1cmUgZGV0ZWN0aW9uIGlzIHVzZWQsIHNvIGNhbGxpbmcgdGhpcyBpcyByYXJlbHkgbmVjZXNzYXJ5LlxuXHQgKi9cblx0c2V0VXNlUHJveGllcyh2YWx1ZTogYm9vbGVhbikge1xuXHRcdGlmICh2YWx1ZSAmJiAhaGFzUHJveGllcykge1xuXHRcdFx0ZGllKDIwKVxuXHRcdH1cblx0XHR0aGlzLnVzZVByb3hpZXNfID0gdmFsdWVcblx0fVxuXG5cdGFwcGx5UGF0Y2hlczxUIGV4dGVuZHMgT2JqZWN0aXNoPihiYXNlOiBULCBwYXRjaGVzOiBQYXRjaFtdKTogVCB7XG5cdFx0Ly8gSWYgYSBwYXRjaCByZXBsYWNlcyB0aGUgZW50aXJlIHN0YXRlLCB0YWtlIHRoYXQgcmVwbGFjZW1lbnQgYXMgYmFzZVxuXHRcdC8vIGJlZm9yZSBhcHBseWluZyBwYXRjaGVzXG5cdFx0bGV0IGk6IG51bWJlclxuXHRcdGZvciAoaSA9IHBhdGNoZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0XHRcdGNvbnN0IHBhdGNoID0gcGF0Y2hlc1tpXVxuXHRcdFx0aWYgKHBhdGNoLnBhdGgubGVuZ3RoID09PSAwICYmIHBhdGNoLm9wID09PSBcInJlcGxhY2VcIikge1xuXHRcdFx0XHRiYXNlID0gcGF0Y2gudmFsdWVcblx0XHRcdFx0YnJlYWtcblx0XHRcdH1cblx0XHR9XG5cdFx0Ly8gSWYgdGhlcmUgd2FzIGEgcGF0Y2ggdGhhdCByZXBsYWNlZCB0aGUgZW50aXJlIHN0YXRlLCBzdGFydCBmcm9tIHRoZVxuXHRcdC8vIHBhdGNoIGFmdGVyIHRoYXQuXG5cdFx0aWYgKGkgPiAtMSkge1xuXHRcdFx0cGF0Y2hlcyA9IHBhdGNoZXMuc2xpY2UoaSArIDEpXG5cdFx0fVxuXG5cdFx0Y29uc3QgYXBwbHlQYXRjaGVzSW1wbCA9IGdldFBsdWdpbihcIlBhdGNoZXNcIikuYXBwbHlQYXRjaGVzX1xuXHRcdGlmIChpc0RyYWZ0KGJhc2UpKSB7XG5cdFx0XHQvLyBOLkI6IG5ldmVyIGhpdHMgaWYgc29tZSBwYXRjaCBhIHJlcGxhY2VtZW50LCBwYXRjaGVzIGFyZSBuZXZlciBkcmFmdHNcblx0XHRcdHJldHVybiBhcHBseVBhdGNoZXNJbXBsKGJhc2UsIHBhdGNoZXMpXG5cdFx0fVxuXHRcdC8vIE90aGVyd2lzZSwgcHJvZHVjZSBhIGNvcHkgb2YgdGhlIGJhc2Ugc3RhdGUuXG5cdFx0cmV0dXJuIHRoaXMucHJvZHVjZShiYXNlLCAoZHJhZnQ6IERyYWZ0ZWQpID0+XG5cdFx0XHRhcHBseVBhdGNoZXNJbXBsKGRyYWZ0LCBwYXRjaGVzKVxuXHRcdClcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUHJveHk8VCBleHRlbmRzIE9iamVjdGlzaD4oXG5cdGltbWVyOiBJbW1lcixcblx0dmFsdWU6IFQsXG5cdHBhcmVudD86IEltbWVyU3RhdGVcbik6IERyYWZ0ZWQ8VCwgSW1tZXJTdGF0ZT4ge1xuXHQvLyBwcmVjb25kaXRpb246IGNyZWF0ZVByb3h5IHNob3VsZCBiZSBndWFyZGVkIGJ5IGlzRHJhZnRhYmxlLCBzbyB3ZSBrbm93IHdlIGNhbiBzYWZlbHkgZHJhZnRcblx0Y29uc3QgZHJhZnQ6IERyYWZ0ZWQgPSBpc01hcCh2YWx1ZSlcblx0XHQ/IGdldFBsdWdpbihcIk1hcFNldFwiKS5wcm94eU1hcF8odmFsdWUsIHBhcmVudClcblx0XHQ6IGlzU2V0KHZhbHVlKVxuXHRcdD8gZ2V0UGx1Z2luKFwiTWFwU2V0XCIpLnByb3h5U2V0Xyh2YWx1ZSwgcGFyZW50KVxuXHRcdDogaW1tZXIudXNlUHJveGllc19cblx0XHQ/IGNyZWF0ZVByb3h5UHJveHkodmFsdWUsIHBhcmVudClcblx0XHQ6IGdldFBsdWdpbihcIkVTNVwiKS5jcmVhdGVFUzVQcm94eV8odmFsdWUsIHBhcmVudClcblxuXHRjb25zdCBzY29wZSA9IHBhcmVudCA/IHBhcmVudC5zY29wZV8gOiBnZXRDdXJyZW50U2NvcGUoKVxuXHRzY29wZS5kcmFmdHNfLnB1c2goZHJhZnQpXG5cdHJldHVybiBkcmFmdFxufVxuIiwiaW1wb3J0IHtcblx0ZGllLFxuXHRpc0RyYWZ0LFxuXHRzaGFsbG93Q29weSxcblx0ZWFjaCxcblx0RFJBRlRfU1RBVEUsXG5cdGdldCxcblx0c2V0LFxuXHRJbW1lclN0YXRlLFxuXHRpc0RyYWZ0YWJsZSxcblx0QXJjaHR5cGUsXG5cdGdldEFyY2h0eXBlLFxuXHRnZXRQbHVnaW5cbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuLyoqIFRha2VzIGEgc25hcHNob3Qgb2YgdGhlIGN1cnJlbnQgc3RhdGUgb2YgYSBkcmFmdCBhbmQgZmluYWxpemVzIGl0IChidXQgd2l0aG91dCBmcmVlemluZykuIFRoaXMgaXMgYSBncmVhdCB1dGlsaXR5IHRvIHByaW50IHRoZSBjdXJyZW50IHN0YXRlIGR1cmluZyBkZWJ1Z2dpbmcgKG5vIFByb3hpZXMgaW4gdGhlIHdheSkuIFRoZSBvdXRwdXQgb2YgY3VycmVudCBjYW4gYWxzbyBiZSBzYWZlbHkgbGVha2VkIG91dHNpZGUgdGhlIHByb2R1Y2VyLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGN1cnJlbnQ8VD4odmFsdWU6IFQpOiBUXG5leHBvcnQgZnVuY3Rpb24gY3VycmVudCh2YWx1ZTogYW55KTogYW55IHtcblx0aWYgKCFpc0RyYWZ0KHZhbHVlKSkgZGllKDIyLCB2YWx1ZSlcblx0cmV0dXJuIGN1cnJlbnRJbXBsKHZhbHVlKVxufVxuXG5mdW5jdGlvbiBjdXJyZW50SW1wbCh2YWx1ZTogYW55KTogYW55IHtcblx0aWYgKCFpc0RyYWZ0YWJsZSh2YWx1ZSkpIHJldHVybiB2YWx1ZVxuXHRjb25zdCBzdGF0ZTogSW1tZXJTdGF0ZSB8IHVuZGVmaW5lZCA9IHZhbHVlW0RSQUZUX1NUQVRFXVxuXHRsZXQgY29weTogYW55XG5cdGNvbnN0IGFyY2hUeXBlID0gZ2V0QXJjaHR5cGUodmFsdWUpXG5cdGlmIChzdGF0ZSkge1xuXHRcdGlmIChcblx0XHRcdCFzdGF0ZS5tb2RpZmllZF8gJiZcblx0XHRcdChzdGF0ZS50eXBlXyA8IDQgfHwgIWdldFBsdWdpbihcIkVTNVwiKS5oYXNDaGFuZ2VzXyhzdGF0ZSBhcyBhbnkpKVxuXHRcdClcblx0XHRcdHJldHVybiBzdGF0ZS5iYXNlX1xuXHRcdC8vIE9wdGltaXphdGlvbjogYXZvaWQgZ2VuZXJhdGluZyBuZXcgZHJhZnRzIGR1cmluZyBjb3B5aW5nXG5cdFx0c3RhdGUuZmluYWxpemVkXyA9IHRydWVcblx0XHRjb3B5ID0gY29weUhlbHBlcih2YWx1ZSwgYXJjaFR5cGUpXG5cdFx0c3RhdGUuZmluYWxpemVkXyA9IGZhbHNlXG5cdH0gZWxzZSB7XG5cdFx0Y29weSA9IGNvcHlIZWxwZXIodmFsdWUsIGFyY2hUeXBlKVxuXHR9XG5cblx0ZWFjaChjb3B5LCAoa2V5LCBjaGlsZFZhbHVlKSA9PiB7XG5cdFx0aWYgKHN0YXRlICYmIGdldChzdGF0ZS5iYXNlXywga2V5KSA9PT0gY2hpbGRWYWx1ZSkgcmV0dXJuIC8vIG5vIG5lZWQgdG8gY29weSBvciBzZWFyY2ggaW4gc29tZXRoaW5nIHRoYXQgZGlkbid0IGNoYW5nZVxuXHRcdHNldChjb3B5LCBrZXksIGN1cnJlbnRJbXBsKGNoaWxkVmFsdWUpKVxuXHR9KVxuXHQvLyBJbiB0aGUgZnV0dXJlLCB3ZSBtaWdodCBjb25zaWRlciBmcmVlemluZyBoZXJlLCBiYXNlZCBvbiB0aGUgY3VycmVudCBzZXR0aW5nc1xuXHRyZXR1cm4gYXJjaFR5cGUgPT09IEFyY2h0eXBlLlNldCA/IG5ldyBTZXQoY29weSkgOiBjb3B5XG59XG5cbmZ1bmN0aW9uIGNvcHlIZWxwZXIodmFsdWU6IGFueSwgYXJjaFR5cGU6IG51bWJlcik6IGFueSB7XG5cdC8vIGNyZWF0ZXMgYSBzaGFsbG93IGNvcHksIGV2ZW4gaWYgaXQgaXMgYSBtYXAgb3Igc2V0XG5cdHN3aXRjaCAoYXJjaFR5cGUpIHtcblx0XHRjYXNlIEFyY2h0eXBlLk1hcDpcblx0XHRcdHJldHVybiBuZXcgTWFwKHZhbHVlKVxuXHRcdGNhc2UgQXJjaHR5cGUuU2V0OlxuXHRcdFx0Ly8gU2V0IHdpbGwgYmUgY2xvbmVkIGFzIGFycmF5IHRlbXBvcmFyaWx5LCBzbyB0aGF0IHdlIGNhbiByZXBsYWNlIGluZGl2aWR1YWwgaXRlbXNcblx0XHRcdHJldHVybiBBcnJheS5mcm9tKHZhbHVlKVxuXHR9XG5cdHJldHVybiBzaGFsbG93Q29weSh2YWx1ZSlcbn1cbiIsImltcG9ydCB7XG5cdEltbWVyU3RhdGUsXG5cdERyYWZ0ZWQsXG5cdEVTNUFycmF5U3RhdGUsXG5cdEVTNU9iamVjdFN0YXRlLFxuXHRlYWNoLFxuXHRoYXMsXG5cdGlzRHJhZnQsXG5cdGxhdGVzdCxcblx0RFJBRlRfU1RBVEUsXG5cdGlzLFxuXHRsb2FkUGx1Z2luLFxuXHRJbW1lclNjb3BlLFxuXHRQcm94eVR5cGUsXG5cdGdldEN1cnJlbnRTY29wZSxcblx0ZGllLFxuXHRtYXJrQ2hhbmdlZCxcblx0b2JqZWN0VHJhcHMsXG5cdG93bktleXMsXG5cdGdldE93blByb3BlcnR5RGVzY3JpcHRvcnNcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxudHlwZSBFUzVTdGF0ZSA9IEVTNUFycmF5U3RhdGUgfCBFUzVPYmplY3RTdGF0ZVxuXG5leHBvcnQgZnVuY3Rpb24gZW5hYmxlRVM1KCkge1xuXHRmdW5jdGlvbiB3aWxsRmluYWxpemVFUzVfKFxuXHRcdHNjb3BlOiBJbW1lclNjb3BlLFxuXHRcdHJlc3VsdDogYW55LFxuXHRcdGlzUmVwbGFjZWQ6IGJvb2xlYW5cblx0KSB7XG5cdFx0aWYgKCFpc1JlcGxhY2VkKSB7XG5cdFx0XHRpZiAoc2NvcGUucGF0Y2hlc18pIHtcblx0XHRcdFx0bWFya0NoYW5nZXNSZWN1cnNpdmVseShzY29wZS5kcmFmdHNfIVswXSlcblx0XHRcdH1cblx0XHRcdC8vIFRoaXMgaXMgZmFzdGVyIHdoZW4gd2UgZG9uJ3QgY2FyZSBhYm91dCB3aGljaCBhdHRyaWJ1dGVzIGNoYW5nZWQuXG5cdFx0XHRtYXJrQ2hhbmdlc1N3ZWVwKHNjb3BlLmRyYWZ0c18pXG5cdFx0fVxuXHRcdC8vIFdoZW4gYSBjaGlsZCBkcmFmdCBpcyByZXR1cm5lZCwgbG9vayBmb3IgY2hhbmdlcy5cblx0XHRlbHNlIGlmIChcblx0XHRcdGlzRHJhZnQocmVzdWx0KSAmJlxuXHRcdFx0KHJlc3VsdFtEUkFGVF9TVEFURV0gYXMgRVM1U3RhdGUpLnNjb3BlXyA9PT0gc2NvcGVcblx0XHQpIHtcblx0XHRcdG1hcmtDaGFuZ2VzU3dlZXAoc2NvcGUuZHJhZnRzXylcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBjcmVhdGVFUzVEcmFmdChpc0FycmF5OiBib29sZWFuLCBiYXNlOiBhbnkpIHtcblx0XHRpZiAoaXNBcnJheSkge1xuXHRcdFx0Y29uc3QgZHJhZnQgPSBuZXcgQXJyYXkoYmFzZS5sZW5ndGgpXG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGJhc2UubGVuZ3RoOyBpKyspXG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkcmFmdCwgXCJcIiArIGksIHByb3h5UHJvcGVydHkoaSwgdHJ1ZSkpXG5cdFx0XHRyZXR1cm4gZHJhZnRcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc3QgZGVzY3JpcHRvcnMgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKGJhc2UpXG5cdFx0XHRkZWxldGUgZGVzY3JpcHRvcnNbRFJBRlRfU1RBVEUgYXMgYW55XVxuXHRcdFx0Y29uc3Qga2V5cyA9IG93bktleXMoZGVzY3JpcHRvcnMpXG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0Y29uc3Qga2V5OiBhbnkgPSBrZXlzW2ldXG5cdFx0XHRcdGRlc2NyaXB0b3JzW2tleV0gPSBwcm94eVByb3BlcnR5KFxuXHRcdFx0XHRcdGtleSxcblx0XHRcdFx0XHRpc0FycmF5IHx8ICEhZGVzY3JpcHRvcnNba2V5XS5lbnVtZXJhYmxlXG5cdFx0XHRcdClcblx0XHRcdH1cblx0XHRcdHJldHVybiBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZihiYXNlKSwgZGVzY3JpcHRvcnMpXG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gY3JlYXRlRVM1UHJveHlfPFQ+KFxuXHRcdGJhc2U6IFQsXG5cdFx0cGFyZW50PzogSW1tZXJTdGF0ZVxuXHQpOiBEcmFmdGVkPFQsIEVTNU9iamVjdFN0YXRlIHwgRVM1QXJyYXlTdGF0ZT4ge1xuXHRcdGNvbnN0IGlzQXJyYXkgPSBBcnJheS5pc0FycmF5KGJhc2UpXG5cdFx0Y29uc3QgZHJhZnQgPSBjcmVhdGVFUzVEcmFmdChpc0FycmF5LCBiYXNlKVxuXG5cdFx0Y29uc3Qgc3RhdGU6IEVTNU9iamVjdFN0YXRlIHwgRVM1QXJyYXlTdGF0ZSA9IHtcblx0XHRcdHR5cGVfOiBpc0FycmF5ID8gUHJveHlUeXBlLkVTNUFycmF5IDogKFByb3h5VHlwZS5FUzVPYmplY3QgYXMgYW55KSxcblx0XHRcdHNjb3BlXzogcGFyZW50ID8gcGFyZW50LnNjb3BlXyA6IGdldEN1cnJlbnRTY29wZSgpLFxuXHRcdFx0bW9kaWZpZWRfOiBmYWxzZSxcblx0XHRcdGZpbmFsaXplZF86IGZhbHNlLFxuXHRcdFx0YXNzaWduZWRfOiB7fSxcblx0XHRcdHBhcmVudF86IHBhcmVudCxcblx0XHRcdC8vIGJhc2UgaXMgdGhlIG9iamVjdCB3ZSBhcmUgZHJhZnRpbmdcblx0XHRcdGJhc2VfOiBiYXNlLFxuXHRcdFx0Ly8gZHJhZnQgaXMgdGhlIGRyYWZ0IG9iamVjdCBpdHNlbGYsIHRoYXQgdHJhcHMgYWxsIHJlYWRzIGFuZCByZWFkcyBmcm9tIGVpdGhlciB0aGUgYmFzZSAoaWYgdW5tb2RpZmllZCkgb3IgY29weSAoaWYgbW9kaWZpZWQpXG5cdFx0XHRkcmFmdF86IGRyYWZ0LFxuXHRcdFx0Y29weV86IG51bGwsXG5cdFx0XHRyZXZva2VkXzogZmFsc2UsXG5cdFx0XHRpc01hbnVhbF86IGZhbHNlXG5cdFx0fVxuXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGRyYWZ0LCBEUkFGVF9TVEFURSwge1xuXHRcdFx0dmFsdWU6IHN0YXRlLFxuXHRcdFx0Ly8gZW51bWVyYWJsZTogZmFsc2UgPC0gdGhlIGRlZmF1bHRcblx0XHRcdHdyaXRhYmxlOiB0cnVlXG5cdFx0fSlcblx0XHRyZXR1cm4gZHJhZnRcblx0fVxuXG5cdC8vIHByb3BlcnR5IGRlc2NyaXB0b3JzIGFyZSByZWN5Y2xlZCB0byBtYWtlIHN1cmUgd2UgZG9uJ3QgY3JlYXRlIGEgZ2V0IGFuZCBzZXQgY2xvc3VyZSBwZXIgcHJvcGVydHksXG5cdC8vIGJ1dCBzaGFyZSB0aGVtIGFsbCBpbnN0ZWFkXG5cdGNvbnN0IGRlc2NyaXB0b3JzOiB7W3Byb3A6IHN0cmluZ106IFByb3BlcnR5RGVzY3JpcHRvcn0gPSB7fVxuXG5cdGZ1bmN0aW9uIHByb3h5UHJvcGVydHkoXG5cdFx0cHJvcDogc3RyaW5nIHwgbnVtYmVyLFxuXHRcdGVudW1lcmFibGU6IGJvb2xlYW5cblx0KTogUHJvcGVydHlEZXNjcmlwdG9yIHtcblx0XHRsZXQgZGVzYyA9IGRlc2NyaXB0b3JzW3Byb3BdXG5cdFx0aWYgKGRlc2MpIHtcblx0XHRcdGRlc2MuZW51bWVyYWJsZSA9IGVudW1lcmFibGVcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGVzY3JpcHRvcnNbcHJvcF0gPSBkZXNjID0ge1xuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdGVudW1lcmFibGUsXG5cdFx0XHRcdGdldCh0aGlzOiBhbnkpIHtcblx0XHRcdFx0XHRjb25zdCBzdGF0ZSA9IHRoaXNbRFJBRlRfU1RBVEVdXG5cdFx0XHRcdFx0aWYgKF9fREVWX18pIGFzc2VydFVucmV2b2tlZChzdGF0ZSlcblx0XHRcdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHRcdFx0cmV0dXJuIG9iamVjdFRyYXBzLmdldChzdGF0ZSwgcHJvcClcblx0XHRcdFx0fSxcblx0XHRcdFx0c2V0KHRoaXM6IGFueSwgdmFsdWUpIHtcblx0XHRcdFx0XHRjb25zdCBzdGF0ZSA9IHRoaXNbRFJBRlRfU1RBVEVdXG5cdFx0XHRcdFx0aWYgKF9fREVWX18pIGFzc2VydFVucmV2b2tlZChzdGF0ZSlcblx0XHRcdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHRcdFx0b2JqZWN0VHJhcHMuc2V0KHN0YXRlLCBwcm9wLCB2YWx1ZSlcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gZGVzY1xuXHR9XG5cblx0Ly8gVGhpcyBsb29rcyBleHBlbnNpdmUsIGJ1dCBvbmx5IHByb3hpZXMgYXJlIHZpc2l0ZWQsIGFuZCBvbmx5IG9iamVjdHMgd2l0aG91dCBrbm93biBjaGFuZ2VzIGFyZSBzY2FubmVkLlxuXHRmdW5jdGlvbiBtYXJrQ2hhbmdlc1N3ZWVwKGRyYWZ0czogRHJhZnRlZDxhbnksIEltbWVyU3RhdGU+W10pIHtcblx0XHQvLyBUaGUgbmF0dXJhbCBvcmRlciBvZiBkcmFmdHMgaW4gdGhlIGBzY29wZWAgYXJyYXkgaXMgYmFzZWQgb24gd2hlbiB0aGV5XG5cdFx0Ly8gd2VyZSBhY2Nlc3NlZC4gQnkgcHJvY2Vzc2luZyBkcmFmdHMgaW4gcmV2ZXJzZSBuYXR1cmFsIG9yZGVyLCB3ZSBoYXZlIGFcblx0XHQvLyBiZXR0ZXIgY2hhbmNlIG9mIHByb2Nlc3NpbmcgbGVhZiBub2RlcyBmaXJzdC4gV2hlbiBhIGxlYWYgbm9kZSBpcyBrbm93biB0b1xuXHRcdC8vIGhhdmUgY2hhbmdlZCwgd2UgY2FuIGF2b2lkIGFueSB0cmF2ZXJzYWwgb2YgaXRzIGFuY2VzdG9yIG5vZGVzLlxuXHRcdGZvciAobGV0IGkgPSBkcmFmdHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0XHRcdGNvbnN0IHN0YXRlOiBFUzVTdGF0ZSA9IGRyYWZ0c1tpXVtEUkFGVF9TVEFURV1cblx0XHRcdGlmICghc3RhdGUubW9kaWZpZWRfKSB7XG5cdFx0XHRcdHN3aXRjaCAoc3RhdGUudHlwZV8pIHtcblx0XHRcdFx0XHRjYXNlIFByb3h5VHlwZS5FUzVBcnJheTpcblx0XHRcdFx0XHRcdGlmIChoYXNBcnJheUNoYW5nZXMoc3RhdGUpKSBtYXJrQ2hhbmdlZChzdGF0ZSlcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Y2FzZSBQcm94eVR5cGUuRVM1T2JqZWN0OlxuXHRcdFx0XHRcdFx0aWYgKGhhc09iamVjdENoYW5nZXMoc3RhdGUpKSBtYXJrQ2hhbmdlZChzdGF0ZSlcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBtYXJrQ2hhbmdlc1JlY3Vyc2l2ZWx5KG9iamVjdDogYW55KSB7XG5cdFx0aWYgKCFvYmplY3QgfHwgdHlwZW9mIG9iamVjdCAhPT0gXCJvYmplY3RcIikgcmV0dXJuXG5cdFx0Y29uc3Qgc3RhdGU6IEVTNVN0YXRlIHwgdW5kZWZpbmVkID0gb2JqZWN0W0RSQUZUX1NUQVRFXVxuXHRcdGlmICghc3RhdGUpIHJldHVyblxuXHRcdGNvbnN0IHtiYXNlXywgZHJhZnRfLCBhc3NpZ25lZF8sIHR5cGVffSA9IHN0YXRlXG5cdFx0aWYgKHR5cGVfID09PSBQcm94eVR5cGUuRVM1T2JqZWN0KSB7XG5cdFx0XHQvLyBMb29rIGZvciBhZGRlZCBrZXlzLlxuXHRcdFx0Ly8gcHJvYmFibHkgdGhlcmUgaXMgYSBmYXN0ZXIgd2F5IHRvIGRldGVjdCBjaGFuZ2VzLCBhcyBzd2VlcCArIHJlY3Vyc2Ugc2VlbXMgdG8gZG8gc29tZVxuXHRcdFx0Ly8gdW5uZWNlc3Nhcnkgd29yay5cblx0XHRcdC8vIGFsc286IHByb2JhYmx5IHdlIGNhbiBzdG9yZSB0aGUgaW5mb3JtYXRpb24gd2UgZGV0ZWN0IGhlcmUsIHRvIHNwZWVkIHVwIHRyZWUgZmluYWxpemF0aW9uIVxuXHRcdFx0ZWFjaChkcmFmdF8sIGtleSA9PiB7XG5cdFx0XHRcdGlmICgoa2V5IGFzIGFueSkgPT09IERSQUZUX1NUQVRFKSByZXR1cm5cblx0XHRcdFx0Ly8gVGhlIGB1bmRlZmluZWRgIGNoZWNrIGlzIGEgZmFzdCBwYXRoIGZvciBwcmUtZXhpc3Rpbmcga2V5cy5cblx0XHRcdFx0aWYgKChiYXNlXyBhcyBhbnkpW2tleV0gPT09IHVuZGVmaW5lZCAmJiAhaGFzKGJhc2VfLCBrZXkpKSB7XG5cdFx0XHRcdFx0YXNzaWduZWRfW2tleV0gPSB0cnVlXG5cdFx0XHRcdFx0bWFya0NoYW5nZWQoc3RhdGUpXG5cdFx0XHRcdH0gZWxzZSBpZiAoIWFzc2lnbmVkX1trZXldKSB7XG5cdFx0XHRcdFx0Ly8gT25seSB1bnRvdWNoZWQgcHJvcGVydGllcyB0cmlnZ2VyIHJlY3Vyc2lvbi5cblx0XHRcdFx0XHRtYXJrQ2hhbmdlc1JlY3Vyc2l2ZWx5KGRyYWZ0X1trZXldKVxuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXHRcdFx0Ly8gTG9vayBmb3IgcmVtb3ZlZCBrZXlzLlxuXHRcdFx0ZWFjaChiYXNlXywga2V5ID0+IHtcblx0XHRcdFx0Ly8gVGhlIGB1bmRlZmluZWRgIGNoZWNrIGlzIGEgZmFzdCBwYXRoIGZvciBwcmUtZXhpc3Rpbmcga2V5cy5cblx0XHRcdFx0aWYgKGRyYWZ0X1trZXldID09PSB1bmRlZmluZWQgJiYgIWhhcyhkcmFmdF8sIGtleSkpIHtcblx0XHRcdFx0XHRhc3NpZ25lZF9ba2V5XSA9IGZhbHNlXG5cdFx0XHRcdFx0bWFya0NoYW5nZWQoc3RhdGUpXG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cdFx0fSBlbHNlIGlmICh0eXBlXyA9PT0gUHJveHlUeXBlLkVTNUFycmF5KSB7XG5cdFx0XHRpZiAoaGFzQXJyYXlDaGFuZ2VzKHN0YXRlIGFzIEVTNUFycmF5U3RhdGUpKSB7XG5cdFx0XHRcdG1hcmtDaGFuZ2VkKHN0YXRlKVxuXHRcdFx0XHRhc3NpZ25lZF8ubGVuZ3RoID0gdHJ1ZVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoZHJhZnRfLmxlbmd0aCA8IGJhc2VfLmxlbmd0aCkge1xuXHRcdFx0XHRmb3IgKGxldCBpID0gZHJhZnRfLmxlbmd0aDsgaSA8IGJhc2VfLmxlbmd0aDsgaSsrKSBhc3NpZ25lZF9baV0gPSBmYWxzZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yIChsZXQgaSA9IGJhc2VfLmxlbmd0aDsgaSA8IGRyYWZ0Xy5sZW5ndGg7IGkrKykgYXNzaWduZWRfW2ldID0gdHJ1ZVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBNaW5pbXVtIGNvdW50IGlzIGVub3VnaCwgdGhlIG90aGVyIHBhcnRzIGhhcyBiZWVuIHByb2Nlc3NlZC5cblx0XHRcdGNvbnN0IG1pbiA9IE1hdGgubWluKGRyYWZ0Xy5sZW5ndGgsIGJhc2VfLmxlbmd0aClcblxuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBtaW47IGkrKykge1xuXHRcdFx0XHQvLyBPbmx5IHVudG91Y2hlZCBpbmRpY2VzIHRyaWdnZXIgcmVjdXJzaW9uLlxuXHRcdFx0XHRpZiAoIWRyYWZ0Xy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuXHRcdFx0XHRcdGFzc2lnbmVkX1tpXSA9IHRydWVcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoYXNzaWduZWRfW2ldID09PSB1bmRlZmluZWQpIG1hcmtDaGFuZ2VzUmVjdXJzaXZlbHkoZHJhZnRfW2ldKVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIGhhc09iamVjdENoYW5nZXMoc3RhdGU6IEVTNU9iamVjdFN0YXRlKSB7XG5cdFx0Y29uc3Qge2Jhc2VfLCBkcmFmdF99ID0gc3RhdGVcblxuXHRcdC8vIFNlYXJjaCBmb3IgYWRkZWQga2V5cyBhbmQgY2hhbmdlZCBrZXlzLiBTdGFydCBhdCB0aGUgYmFjaywgYmVjYXVzZVxuXHRcdC8vIG5vbi1udW1lcmljIGtleXMgYXJlIG9yZGVyZWQgYnkgdGltZSBvZiBkZWZpbml0aW9uIG9uIHRoZSBvYmplY3QuXG5cdFx0Y29uc3Qga2V5cyA9IG93bktleXMoZHJhZnRfKVxuXHRcdGZvciAobGV0IGkgPSBrZXlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHRjb25zdCBrZXk6IGFueSA9IGtleXNbaV1cblx0XHRcdGlmIChrZXkgPT09IERSQUZUX1NUQVRFKSBjb250aW51ZVxuXHRcdFx0Y29uc3QgYmFzZVZhbHVlID0gYmFzZV9ba2V5XVxuXHRcdFx0Ly8gVGhlIGB1bmRlZmluZWRgIGNoZWNrIGlzIGEgZmFzdCBwYXRoIGZvciBwcmUtZXhpc3Rpbmcga2V5cy5cblx0XHRcdGlmIChiYXNlVmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhaGFzKGJhc2VfLCBrZXkpKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlXG5cdFx0XHR9XG5cdFx0XHQvLyBPbmNlIGEgYmFzZSBrZXkgaXMgZGVsZXRlZCwgZnV0dXJlIGNoYW5nZXMgZ28gdW5kZXRlY3RlZCwgYmVjYXVzZSBpdHNcblx0XHRcdC8vIGRlc2NyaXB0b3IgaXMgZXJhc2VkLiBUaGlzIGJyYW5jaCBkZXRlY3RzIGFueSBtaXNzZWQgY2hhbmdlcy5cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRjb25zdCB2YWx1ZSA9IGRyYWZ0X1trZXldXG5cdFx0XHRcdGNvbnN0IHN0YXRlOiBJbW1lclN0YXRlID0gdmFsdWUgJiYgdmFsdWVbRFJBRlRfU1RBVEVdXG5cdFx0XHRcdGlmIChzdGF0ZSA/IHN0YXRlLmJhc2VfICE9PSBiYXNlVmFsdWUgOiAhaXModmFsdWUsIGJhc2VWYWx1ZSkpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQXQgdGhpcyBwb2ludCwgbm8ga2V5cyB3ZXJlIGFkZGVkIG9yIGNoYW5nZWQuXG5cdFx0Ly8gQ29tcGFyZSBrZXkgY291bnQgdG8gZGV0ZXJtaW5lIGlmIGtleXMgd2VyZSBkZWxldGVkLlxuXHRcdGNvbnN0IGJhc2VJc0RyYWZ0ID0gISFiYXNlX1tEUkFGVF9TVEFURSBhcyBhbnldXG5cdFx0cmV0dXJuIGtleXMubGVuZ3RoICE9PSBvd25LZXlzKGJhc2VfKS5sZW5ndGggKyAoYmFzZUlzRHJhZnQgPyAwIDogMSkgLy8gKyAxIHRvIGNvcnJlY3QgZm9yIERSQUZUX1NUQVRFXG5cdH1cblxuXHRmdW5jdGlvbiBoYXNBcnJheUNoYW5nZXMoc3RhdGU6IEVTNUFycmF5U3RhdGUpIHtcblx0XHRjb25zdCB7ZHJhZnRffSA9IHN0YXRlXG5cdFx0aWYgKGRyYWZ0Xy5sZW5ndGggIT09IHN0YXRlLmJhc2VfLmxlbmd0aCkgcmV0dXJuIHRydWVcblx0XHQvLyBTZWUgIzExNlxuXHRcdC8vIElmIHdlIGZpcnN0IHNob3J0ZW4gdGhlIGxlbmd0aCwgb3VyIGFycmF5IGludGVyY2VwdG9ycyB3aWxsIGJlIHJlbW92ZWQuXG5cdFx0Ly8gSWYgYWZ0ZXIgdGhhdCBuZXcgaXRlbXMgYXJlIGFkZGVkLCByZXN1bHQgaW4gdGhlIHNhbWUgb3JpZ2luYWwgbGVuZ3RoLFxuXHRcdC8vIHRob3NlIGxhc3QgaXRlbXMgd2lsbCBoYXZlIG5vIGludGVyY2VwdGluZyBwcm9wZXJ0eS5cblx0XHQvLyBTbyBpZiB0aGVyZSBpcyBubyBvd24gZGVzY3JpcHRvciBvbiB0aGUgbGFzdCBwb3NpdGlvbiwgd2Uga25vdyB0aGF0IGl0ZW1zIHdlcmUgcmVtb3ZlZCBhbmQgYWRkZWRcblx0XHQvLyBOLkIuOiBzcGxpY2UsIHVuc2hpZnQsIGV0YyBvbmx5IHNoaWZ0IHZhbHVlcyBhcm91bmQsIGJ1dCBub3QgcHJvcCBkZXNjcmlwdG9ycywgc28gd2Ugb25seSBoYXZlIHRvIGNoZWNrXG5cdFx0Ly8gdGhlIGxhc3Qgb25lXG5cdFx0Ly8gbGFzdCBkZXNjcmlwdG9yIGNhbiBiZSBub3QgYSB0cmFwLCBpZiB0aGUgYXJyYXkgd2FzIGV4dGVuZGVkXG5cdFx0Y29uc3QgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoXG5cdFx0XHRkcmFmdF8sXG5cdFx0XHRkcmFmdF8ubGVuZ3RoIC0gMVxuXHRcdClcblx0XHQvLyBkZXNjcmlwdG9yIGNhbiBiZSBudWxsLCBidXQgb25seSBmb3IgbmV3bHkgY3JlYXRlZCBzcGFyc2UgYXJyYXlzLCBlZy4gbmV3IEFycmF5KDEwKVxuXHRcdGlmIChkZXNjcmlwdG9yICYmICFkZXNjcmlwdG9yLmdldCkgcmV0dXJuIHRydWVcblx0XHQvLyBpZiB3ZSBtaXNzIGEgcHJvcGVydHksIGl0IGhhcyBiZWVuIGRlbGV0ZWQsIHNvIGFycmF5IHByb2JvYmFseSBjaGFuZ2VkXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBkcmFmdF8ubGVuZ3RoOyBpKyspIHtcblx0XHRcdGlmICghZHJhZnRfLmhhc093blByb3BlcnR5KGkpKSByZXR1cm4gdHJ1ZVxuXHRcdH1cblx0XHQvLyBGb3IgYWxsIG90aGVyIGNhc2VzLCB3ZSBkb24ndCBoYXZlIHRvIGNvbXBhcmUsIGFzIHRoZXkgd291bGQgaGF2ZSBiZWVuIHBpY2tlZCB1cCBieSB0aGUgaW5kZXggc2V0dGVyc1xuXHRcdHJldHVybiBmYWxzZVxuXHR9XG5cblx0ZnVuY3Rpb24gaGFzQ2hhbmdlc18oc3RhdGU6IEVTNVN0YXRlKSB7XG5cdFx0cmV0dXJuIHN0YXRlLnR5cGVfID09PSBQcm94eVR5cGUuRVM1T2JqZWN0XG5cdFx0XHQ/IGhhc09iamVjdENoYW5nZXMoc3RhdGUpXG5cdFx0XHQ6IGhhc0FycmF5Q2hhbmdlcyhzdGF0ZSlcblx0fVxuXG5cdGZ1bmN0aW9uIGFzc2VydFVucmV2b2tlZChzdGF0ZTogYW55IC8qRVM1U3RhdGUgfCBNYXBTdGF0ZSB8IFNldFN0YXRlKi8pIHtcblx0XHRpZiAoc3RhdGUucmV2b2tlZF8pIGRpZSgzLCBKU09OLnN0cmluZ2lmeShsYXRlc3Qoc3RhdGUpKSlcblx0fVxuXG5cdGxvYWRQbHVnaW4oXCJFUzVcIiwge1xuXHRcdGNyZWF0ZUVTNVByb3h5Xyxcblx0XHR3aWxsRmluYWxpemVFUzVfLFxuXHRcdGhhc0NoYW5nZXNfXG5cdH0pXG59XG4iLCJpbXBvcnQge1xuXHRJUHJvZHVjZSxcblx0SVByb2R1Y2VXaXRoUGF0Y2hlcyxcblx0SW1tZXIsXG5cdERyYWZ0LFxuXHRJbW11dGFibGVcbn0gZnJvbSBcIi4vaW50ZXJuYWxcIlxuXG5leHBvcnQge1xuXHREcmFmdCxcblx0SW1tdXRhYmxlLFxuXHRQYXRjaCxcblx0UGF0Y2hMaXN0ZW5lcixcblx0b3JpZ2luYWwsXG5cdGN1cnJlbnQsXG5cdGlzRHJhZnQsXG5cdGlzRHJhZnRhYmxlLFxuXHROT1RISU5HIGFzIG5vdGhpbmcsXG5cdERSQUZUQUJMRSBhcyBpbW1lcmFibGUsXG5cdGZyZWV6ZVxufSBmcm9tIFwiLi9pbnRlcm5hbFwiXG5cbmNvbnN0IGltbWVyID0gbmV3IEltbWVyKClcblxuLyoqXG4gKiBUaGUgYHByb2R1Y2VgIGZ1bmN0aW9uIHRha2VzIGEgdmFsdWUgYW5kIGEgXCJyZWNpcGUgZnVuY3Rpb25cIiAod2hvc2VcbiAqIHJldHVybiB2YWx1ZSBvZnRlbiBkZXBlbmRzIG9uIHRoZSBiYXNlIHN0YXRlKS4gVGhlIHJlY2lwZSBmdW5jdGlvbiBpc1xuICogZnJlZSB0byBtdXRhdGUgaXRzIGZpcnN0IGFyZ3VtZW50IGhvd2V2ZXIgaXQgd2FudHMuIEFsbCBtdXRhdGlvbnMgYXJlXG4gKiBvbmx5IGV2ZXIgYXBwbGllZCB0byBhIF9fY29weV9fIG9mIHRoZSBiYXNlIHN0YXRlLlxuICpcbiAqIFBhc3Mgb25seSBhIGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIFwiY3VycmllZCBwcm9kdWNlclwiIHdoaWNoIHJlbGlldmVzIHlvdVxuICogZnJvbSBwYXNzaW5nIHRoZSByZWNpcGUgZnVuY3Rpb24gZXZlcnkgdGltZS5cbiAqXG4gKiBPbmx5IHBsYWluIG9iamVjdHMgYW5kIGFycmF5cyBhcmUgbWFkZSBtdXRhYmxlLiBBbGwgb3RoZXIgb2JqZWN0cyBhcmVcbiAqIGNvbnNpZGVyZWQgdW5jb3B5YWJsZS5cbiAqXG4gKiBOb3RlOiBUaGlzIGZ1bmN0aW9uIGlzIF9fYm91bmRfXyB0byBpdHMgYEltbWVyYCBpbnN0YW5jZS5cbiAqXG4gKiBAcGFyYW0ge2FueX0gYmFzZSAtIHRoZSBpbml0aWFsIHN0YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcm9kdWNlciAtIGZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXMgYSBwcm94eSBvZiB0aGUgYmFzZSBzdGF0ZSBhcyBmaXJzdCBhcmd1bWVudCBhbmQgd2hpY2ggY2FuIGJlIGZyZWVseSBtb2RpZmllZFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcGF0Y2hMaXN0ZW5lciAtIG9wdGlvbmFsIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2l0aCBhbGwgdGhlIHBhdGNoZXMgcHJvZHVjZWQgaGVyZVxuICogQHJldHVybnMge2FueX0gYSBuZXcgc3RhdGUsIG9yIHRoZSBpbml0aWFsIHN0YXRlIGlmIG5vdGhpbmcgd2FzIG1vZGlmaWVkXG4gKi9cbmV4cG9ydCBjb25zdCBwcm9kdWNlOiBJUHJvZHVjZSA9IGltbWVyLnByb2R1Y2VcbmV4cG9ydCBkZWZhdWx0IHByb2R1Y2VcblxuLyoqXG4gKiBMaWtlIGBwcm9kdWNlYCwgYnV0IGBwcm9kdWNlV2l0aFBhdGNoZXNgIGFsd2F5cyByZXR1cm5zIGEgdHVwbGVcbiAqIFtuZXh0U3RhdGUsIHBhdGNoZXMsIGludmVyc2VQYXRjaGVzXSAoaW5zdGVhZCBvZiBqdXN0IHRoZSBuZXh0IHN0YXRlKVxuICovXG5leHBvcnQgY29uc3QgcHJvZHVjZVdpdGhQYXRjaGVzOiBJUHJvZHVjZVdpdGhQYXRjaGVzID0gaW1tZXIucHJvZHVjZVdpdGhQYXRjaGVzLmJpbmQoXG5cdGltbWVyXG4pXG5cbi8qKlxuICogUGFzcyB0cnVlIHRvIGF1dG9tYXRpY2FsbHkgZnJlZXplIGFsbCBjb3BpZXMgY3JlYXRlZCBieSBJbW1lci5cbiAqXG4gKiBBbHdheXMgZnJlZXplIGJ5IGRlZmF1bHQsIGV2ZW4gaW4gcHJvZHVjdGlvbiBtb2RlXG4gKi9cbmV4cG9ydCBjb25zdCBzZXRBdXRvRnJlZXplID0gaW1tZXIuc2V0QXV0b0ZyZWV6ZS5iaW5kKGltbWVyKVxuXG4vKipcbiAqIFBhc3MgdHJ1ZSB0byB1c2UgdGhlIEVTMjAxNSBgUHJveHlgIGNsYXNzIHdoZW4gY3JlYXRpbmcgZHJhZnRzLCB3aGljaCBpc1xuICogYWx3YXlzIGZhc3RlciB0aGFuIHVzaW5nIEVTNSBwcm94aWVzLlxuICpcbiAqIEJ5IGRlZmF1bHQsIGZlYXR1cmUgZGV0ZWN0aW9uIGlzIHVzZWQsIHNvIGNhbGxpbmcgdGhpcyBpcyByYXJlbHkgbmVjZXNzYXJ5LlxuICovXG5leHBvcnQgY29uc3Qgc2V0VXNlUHJveGllcyA9IGltbWVyLnNldFVzZVByb3hpZXMuYmluZChpbW1lcilcblxuLyoqXG4gKiBBcHBseSBhbiBhcnJheSBvZiBJbW1lciBwYXRjaGVzIHRvIHRoZSBmaXJzdCBhcmd1bWVudC5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGEgcHJvZHVjZXIsIHdoaWNoIG1lYW5zIGNvcHktb24td3JpdGUgaXMgaW4gZWZmZWN0LlxuICovXG5leHBvcnQgY29uc3QgYXBwbHlQYXRjaGVzID0gaW1tZXIuYXBwbHlQYXRjaGVzLmJpbmQoaW1tZXIpXG5cbi8qKlxuICogQ3JlYXRlIGFuIEltbWVyIGRyYWZ0IGZyb20gdGhlIGdpdmVuIGJhc2Ugc3RhdGUsIHdoaWNoIG1heSBiZSBhIGRyYWZ0IGl0c2VsZi5cbiAqIFRoZSBkcmFmdCBjYW4gYmUgbW9kaWZpZWQgdW50aWwgeW91IGZpbmFsaXplIGl0IHdpdGggdGhlIGBmaW5pc2hEcmFmdGAgZnVuY3Rpb24uXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVEcmFmdCA9IGltbWVyLmNyZWF0ZURyYWZ0LmJpbmQoaW1tZXIpXG5cbi8qKlxuICogRmluYWxpemUgYW4gSW1tZXIgZHJhZnQgZnJvbSBhIGBjcmVhdGVEcmFmdGAgY2FsbCwgcmV0dXJuaW5nIHRoZSBiYXNlIHN0YXRlXG4gKiAoaWYgbm8gY2hhbmdlcyB3ZXJlIG1hZGUpIG9yIGEgbW9kaWZpZWQgY29weS4gVGhlIGRyYWZ0IG11c3QgKm5vdCogYmVcbiAqIG11dGF0ZWQgYWZ0ZXJ3YXJkcy5cbiAqXG4gKiBQYXNzIGEgZnVuY3Rpb24gYXMgdGhlIDJuZCBhcmd1bWVudCB0byBnZW5lcmF0ZSBJbW1lciBwYXRjaGVzIGJhc2VkIG9uIHRoZVxuICogY2hhbmdlcyB0aGF0IHdlcmUgbWFkZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGZpbmlzaERyYWZ0ID0gaW1tZXIuZmluaXNoRHJhZnQuYmluZChpbW1lcilcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGFjdHVhbGx5IGEgbm8tb3AsIGJ1dCBjYW4gYmUgdXNlZCB0byBjYXN0IGFuIGltbXV0YWJsZSB0eXBlXG4gKiB0byBhbiBkcmFmdCB0eXBlIGFuZCBtYWtlIFR5cGVTY3JpcHQgaGFwcHlcbiAqXG4gKiBAcGFyYW0gdmFsdWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhc3REcmFmdDxUPih2YWx1ZTogVCk6IERyYWZ0PFQ+IHtcblx0cmV0dXJuIHZhbHVlIGFzIGFueVxufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgYWN0dWFsbHkgYSBuby1vcCwgYnV0IGNhbiBiZSB1c2VkIHRvIGNhc3QgYSBtdXRhYmxlIHR5cGVcbiAqIHRvIGFuIGltbXV0YWJsZSB0eXBlIGFuZCBtYWtlIFR5cGVTY3JpcHQgaGFwcHlcbiAqIEBwYXJhbSB2YWx1ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FzdEltbXV0YWJsZTxUPih2YWx1ZTogVCk6IEltbXV0YWJsZTxUPiB7XG5cdHJldHVybiB2YWx1ZSBhcyBhbnlcbn1cblxuZXhwb3J0IHtJbW1lcn1cblxuZXhwb3J0IHtlbmFibGVFUzV9IGZyb20gXCIuL3BsdWdpbnMvZXM1XCJcbmV4cG9ydCB7ZW5hYmxlUGF0Y2hlc30gZnJvbSBcIi4vcGx1Z2lucy9wYXRjaGVzXCJcbmV4cG9ydCB7ZW5hYmxlTWFwU2V0fSBmcm9tIFwiLi9wbHVnaW5zL21hcHNldFwiXG5leHBvcnQge2VuYWJsZUFsbFBsdWdpbnN9IGZyb20gXCIuL3BsdWdpbnMvYWxsXCJcbiIsIi8vIFNob3VsZCBiZSBubyBpbXBvcnRzIGhlcmUhXG5cbi8vIFNvbWUgdGhpbmdzIHRoYXQgc2hvdWxkIGJlIGV2YWx1YXRlZCBiZWZvcmUgYWxsIGVsc2UuLi5cblxuLy8gV2Ugb25seSB3YW50IHRvIGtub3cgaWYgbm9uLXBvbHlmaWxsZWQgc3ltYm9scyBhcmUgYXZhaWxhYmxlXG5jb25zdCBoYXNTeW1ib2wgPVxuXHR0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBTeW1ib2woXCJ4XCIpID09PSBcInN5bWJvbFwiXG5leHBvcnQgY29uc3QgaGFzTWFwID0gdHlwZW9mIE1hcCAhPT0gXCJ1bmRlZmluZWRcIlxuZXhwb3J0IGNvbnN0IGhhc1NldCA9IHR5cGVvZiBTZXQgIT09IFwidW5kZWZpbmVkXCJcbmV4cG9ydCBjb25zdCBoYXNQcm94aWVzID1cblx0dHlwZW9mIFByb3h5ICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdHR5cGVvZiBQcm94eS5yZXZvY2FibGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0dHlwZW9mIFJlZmxlY3QgIT09IFwidW5kZWZpbmVkXCJcblxuLyoqXG4gKiBUaGUgc2VudGluZWwgdmFsdWUgcmV0dXJuZWQgYnkgcHJvZHVjZXJzIHRvIHJlcGxhY2UgdGhlIGRyYWZ0IHdpdGggdW5kZWZpbmVkLlxuICovXG5leHBvcnQgY29uc3QgTk9USElORzogTm90aGluZyA9IGhhc1N5bWJvbFxuXHQ/IFN5bWJvbC5mb3IoXCJpbW1lci1ub3RoaW5nXCIpXG5cdDogKHtbXCJpbW1lci1ub3RoaW5nXCJdOiB0cnVlfSBhcyBhbnkpXG5cbi8qKlxuICogVG8gbGV0IEltbWVyIHRyZWF0IHlvdXIgY2xhc3MgaW5zdGFuY2VzIGFzIHBsYWluIGltbXV0YWJsZSBvYmplY3RzXG4gKiAoYWxiZWl0IHdpdGggYSBjdXN0b20gcHJvdG90eXBlKSwgeW91IG11c3QgZGVmaW5lIGVpdGhlciBhbiBpbnN0YW5jZSBwcm9wZXJ0eVxuICogb3IgYSBzdGF0aWMgcHJvcGVydHkgb24gZWFjaCBvZiB5b3VyIGN1c3RvbSBjbGFzc2VzLlxuICpcbiAqIE90aGVyd2lzZSwgeW91ciBjbGFzcyBpbnN0YW5jZSB3aWxsIG5ldmVyIGJlIGRyYWZ0ZWQsIHdoaWNoIG1lYW5zIGl0IHdvbid0IGJlXG4gKiBzYWZlIHRvIG11dGF0ZSBpbiBhIHByb2R1Y2UgY2FsbGJhY2suXG4gKi9cbmV4cG9ydCBjb25zdCBEUkFGVEFCTEU6IHVuaXF1ZSBzeW1ib2wgPSBoYXNTeW1ib2xcblx0PyBTeW1ib2wuZm9yKFwiaW1tZXItZHJhZnRhYmxlXCIpXG5cdDogKFwiX18kaW1tZXJfZHJhZnRhYmxlXCIgYXMgYW55KVxuXG5leHBvcnQgY29uc3QgRFJBRlRfU1RBVEU6IHVuaXF1ZSBzeW1ib2wgPSBoYXNTeW1ib2xcblx0PyBTeW1ib2wuZm9yKFwiaW1tZXItc3RhdGVcIilcblx0OiAoXCJfXyRpbW1lcl9zdGF0ZVwiIGFzIGFueSlcblxuLy8gRXZlbiBhIHBvbHlmaWxsZWQgU3ltYm9sIG1pZ2h0IHByb3ZpZGUgU3ltYm9sLml0ZXJhdG9yXG5leHBvcnQgY29uc3QgaXRlcmF0b3JTeW1ib2w6IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPVxuXHQodHlwZW9mIFN5bWJvbCAhPSBcInVuZGVmaW5lZFwiICYmIFN5bWJvbC5pdGVyYXRvcikgfHwgKFwiQEBpdGVyYXRvclwiIGFzIGFueSlcblxuLyoqIFVzZSBhIGNsYXNzIHR5cGUgZm9yIGBub3RoaW5nYCBzbyBpdHMgdHlwZSBpcyB1bmlxdWUgKi9cbmV4cG9ydCBjbGFzcyBOb3RoaW5nIHtcblx0Ly8gVGhpcyBsZXRzIHVzIGRvIGBFeGNsdWRlPFQsIE5vdGhpbmc+YFxuXHQvLyBAdHMtaWdub3JlXG5cdHByaXZhdGUgXyE6IHVuaXF1ZSBzeW1ib2xcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSIsImltcG9ydCBkZWZpbmVQcm9wZXJ0eSBmcm9tIFwiLi9kZWZpbmVQcm9wZXJ0eS5qc1wiO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG4gICAgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgICB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTtcbiAgfVxuXG4gIHJldHVybiBrZXlzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gbnVsbCAhPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0gOiB7fTtcbiAgICBpICUgMiA/IG93bktleXMoT2JqZWN0KHNvdXJjZSksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyJztcblxuLyoqXG4gKiBBZGFwdGVkIGZyb20gUmVhY3Q6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iL21hc3Rlci9wYWNrYWdlcy9zaGFyZWQvZm9ybWF0UHJvZEVycm9yTWVzc2FnZS5qc1xuICpcbiAqIERvIG5vdCByZXF1aXJlIHRoaXMgbW9kdWxlIGRpcmVjdGx5ISBVc2Ugbm9ybWFsIHRocm93IGVycm9yIGNhbGxzLiBUaGVzZSBtZXNzYWdlcyB3aWxsIGJlIHJlcGxhY2VkIHdpdGggZXJyb3IgY29kZXNcbiAqIGR1cmluZyBidWlsZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2RlXG4gKi9cbmZ1bmN0aW9uIGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoY29kZSkge1xuICByZXR1cm4gXCJNaW5pZmllZCBSZWR1eCBlcnJvciAjXCIgKyBjb2RlICsgXCI7IHZpc2l0IGh0dHBzOi8vcmVkdXguanMub3JnL0Vycm9ycz9jb2RlPVwiICsgY29kZSArIFwiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIFwiICsgJ3VzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMuICc7XG59XG5cbi8vIElubGluZWQgdmVyc2lvbiBvZiB0aGUgYHN5bWJvbC1vYnNlcnZhYmxlYCBwb2x5ZmlsbFxudmFyICQkb2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5vYnNlcnZhYmxlIHx8ICdAQG9ic2VydmFibGUnO1xufSkoKTtcblxuLyoqXG4gKiBUaGVzZSBhcmUgcHJpdmF0ZSBhY3Rpb24gdHlwZXMgcmVzZXJ2ZWQgYnkgUmVkdXguXG4gKiBGb3IgYW55IHVua25vd24gYWN0aW9ucywgeW91IG11c3QgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlLlxuICogSWYgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuXG4gKiBEbyBub3QgcmVmZXJlbmNlIHRoZXNlIGFjdGlvbiB0eXBlcyBkaXJlY3RseSBpbiB5b3VyIGNvZGUuXG4gKi9cbnZhciByYW5kb21TdHJpbmcgPSBmdW5jdGlvbiByYW5kb21TdHJpbmcoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKTtcbn07XG5cbnZhciBBY3Rpb25UeXBlcyA9IHtcbiAgSU5JVDogXCJAQHJlZHV4L0lOSVRcIiArIHJhbmRvbVN0cmluZygpLFxuICBSRVBMQUNFOiBcIkBAcmVkdXgvUkVQTEFDRVwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFBST0JFX1VOS05PV05fQUNUSU9OOiBmdW5jdGlvbiBQUk9CRV9VTktOT1dOX0FDVElPTigpIHtcbiAgICByZXR1cm4gXCJAQHJlZHV4L1BST0JFX1VOS05PV05fQUNUSU9OXCIgKyByYW5kb21TdHJpbmcoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gb2JqIFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBhcHBlYXJzIHRvIGJlIGEgcGxhaW4gb2JqZWN0LlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIHZhciBwcm90byA9IG9iajtcblxuICB3aGlsZSAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKSAhPT0gbnVsbCkge1xuICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PT0gcHJvdG87XG59XG5cbi8vIElubGluZWQgLyBzaG9ydGVuZWQgdmVyc2lvbiBvZiBga2luZE9mYCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9qb25zY2hsaW5rZXJ0L2tpbmQtb2ZcbmZ1bmN0aW9uIG1pbmlLaW5kT2YodmFsKSB7XG4gIGlmICh2YWwgPT09IHZvaWQgMCkgcmV0dXJuICd1bmRlZmluZWQnO1xuICBpZiAodmFsID09PSBudWxsKSByZXR1cm4gJ251bGwnO1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG5cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICBjYXNlICdudW1iZXInOlxuICAgIGNhc2UgJ3N5bWJvbCc6XG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAge1xuICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgIH1cbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHJldHVybiAnYXJyYXknO1xuICBpZiAoaXNEYXRlKHZhbCkpIHJldHVybiAnZGF0ZSc7XG4gIGlmIChpc0Vycm9yKHZhbCkpIHJldHVybiAnZXJyb3InO1xuICB2YXIgY29uc3RydWN0b3JOYW1lID0gY3Rvck5hbWUodmFsKTtcblxuICBzd2l0Y2ggKGNvbnN0cnVjdG9yTmFtZSkge1xuICAgIGNhc2UgJ1N5bWJvbCc6XG4gICAgY2FzZSAnUHJvbWlzZSc6XG4gICAgY2FzZSAnV2Vha01hcCc6XG4gICAgY2FzZSAnV2Vha1NldCc6XG4gICAgY2FzZSAnTWFwJzpcbiAgICBjYXNlICdTZXQnOlxuICAgICAgcmV0dXJuIGNvbnN0cnVjdG9yTmFtZTtcbiAgfSAvLyBvdGhlclxuXG5cbiAgcmV0dXJuIHR5cGUuc2xpY2UoOCwgLTEpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXFxzL2csICcnKTtcbn1cblxuZnVuY3Rpb24gY3Rvck5hbWUodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yID09PSAnZnVuY3Rpb24nID8gdmFsLmNvbnN0cnVjdG9yLm5hbWUgOiBudWxsO1xufVxuXG5mdW5jdGlvbiBpc0Vycm9yKHZhbCkge1xuICByZXR1cm4gdmFsIGluc3RhbmNlb2YgRXJyb3IgfHwgdHlwZW9mIHZhbC5tZXNzYWdlID09PSAnc3RyaW5nJyAmJiB2YWwuY29uc3RydWN0b3IgJiYgdHlwZW9mIHZhbC5jb25zdHJ1Y3Rvci5zdGFja1RyYWNlTGltaXQgPT09ICdudW1iZXInO1xufVxuXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIGlmICh2YWwgaW5zdGFuY2VvZiBEYXRlKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIHR5cGVvZiB2YWwudG9EYXRlU3RyaW5nID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWwuZ2V0RGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsLnNldERhdGUgPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGtpbmRPZih2YWwpIHtcbiAgdmFyIHR5cGVPZlZhbCA9IHR5cGVvZiB2YWw7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB0eXBlT2ZWYWwgPSBtaW5pS2luZE9mKHZhbCk7XG4gIH1cblxuICByZXR1cm4gdHlwZU9mVmFsO1xufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkXG4gKlxuICogKipXZSByZWNvbW1lbmQgdXNpbmcgdGhlIGBjb25maWd1cmVTdG9yZWAgbWV0aG9kXG4gKiBvZiB0aGUgYEByZWR1eGpzL3Rvb2xraXRgIHBhY2thZ2UqKiwgd2hpY2ggcmVwbGFjZXMgYGNyZWF0ZVN0b3JlYC5cbiAqXG4gKiBSZWR1eCBUb29sa2l0IGlzIG91ciByZWNvbW1lbmRlZCBhcHByb2FjaCBmb3Igd3JpdGluZyBSZWR1eCBsb2dpYyB0b2RheSxcbiAqIGluY2x1ZGluZyBzdG9yZSBzZXR1cCwgcmVkdWNlcnMsIGRhdGEgZmV0Y2hpbmcsIGFuZCBtb3JlLlxuICpcbiAqICoqRm9yIG1vcmUgZGV0YWlscywgcGxlYXNlIHJlYWQgdGhpcyBSZWR1eCBkb2NzIHBhZ2U6KipcbiAqICoqaHR0cHM6Ly9yZWR1eC5qcy5vcmcvaW50cm9kdWN0aW9uL3doeS1ydGstaXMtcmVkdXgtdG9kYXkqKlxuICpcbiAqIGBjb25maWd1cmVTdG9yZWAgZnJvbSBSZWR1eCBUb29sa2l0IGlzIGFuIGltcHJvdmVkIHZlcnNpb24gb2YgYGNyZWF0ZVN0b3JlYCB0aGF0XG4gKiBzaW1wbGlmaWVzIHNldHVwIGFuZCBoZWxwcyBhdm9pZCBjb21tb24gYnVncy5cbiAqXG4gKiBZb3Ugc2hvdWxkIG5vdCBiZSB1c2luZyB0aGUgYHJlZHV4YCBjb3JlIHBhY2thZ2UgYnkgaXRzZWxmIHRvZGF5LCBleGNlcHQgZm9yIGxlYXJuaW5nIHB1cnBvc2VzLlxuICogVGhlIGBjcmVhdGVTdG9yZWAgbWV0aG9kIGZyb20gdGhlIGNvcmUgYHJlZHV4YCBwYWNrYWdlIHdpbGwgbm90IGJlIHJlbW92ZWQsIGJ1dCB3ZSBlbmNvdXJhZ2VcbiAqIGFsbCB1c2VycyB0byBtaWdyYXRlIHRvIHVzaW5nIFJlZHV4IFRvb2xraXQgZm9yIGFsbCBSZWR1eCBjb2RlLlxuICpcbiAqIElmIHlvdSB3YW50IHRvIHVzZSBgY3JlYXRlU3RvcmVgIHdpdGhvdXQgdGhpcyB2aXN1YWwgZGVwcmVjYXRpb24gd2FybmluZywgdXNlXG4gKiB0aGUgYGxlZ2FjeV9jcmVhdGVTdG9yZWAgaW1wb3J0IGluc3RlYWQ6XG4gKlxuICogYGltcG9ydCB7IGxlZ2FjeV9jcmVhdGVTdG9yZSBhcyBjcmVhdGVTdG9yZX0gZnJvbSAncmVkdXgnYFxuICpcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVTdG9yZShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgZW5oYW5jZXIpIHtcbiAgdmFyIF9yZWYyO1xuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgYXJndW1lbnRzWzNdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMCkgOiAnSXQgbG9va3MgbGlrZSB5b3UgYXJlIHBhc3Npbmcgc2V2ZXJhbCBzdG9yZSBlbmhhbmNlcnMgdG8gJyArICdjcmVhdGVTdG9yZSgpLiBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQuIEluc3RlYWQsIGNvbXBvc2UgdGhlbSAnICsgJ3RvZ2V0aGVyIHRvIGEgc2luZ2xlIGZ1bmN0aW9uLiBTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvdHV0b3JpYWxzL2Z1bmRhbWVudGFscy9wYXJ0LTQtc3RvcmUjY3JlYXRpbmctYS1zdG9yZS13aXRoLWVuaGFuY2VycyBmb3IgYW4gZXhhbXBsZS4nKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAndW5kZWZpbmVkJykge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEpIDogXCJFeHBlY3RlZCB0aGUgZW5oYW5jZXIgdG8gYmUgYSBmdW5jdGlvbi4gSW5zdGVhZCwgcmVjZWl2ZWQ6ICdcIiArIGtpbmRPZihlbmhhbmNlcikgKyBcIidcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgyKSA6IFwiRXhwZWN0ZWQgdGhlIHJvb3QgcmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKHJlZHVjZXIpICsgXCInXCIpO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRSZWR1Y2VyID0gcmVkdWNlcjtcbiAgdmFyIGN1cnJlbnRTdGF0ZSA9IHByZWxvYWRlZFN0YXRlO1xuICB2YXIgY3VycmVudExpc3RlbmVycyA9IFtdO1xuICB2YXIgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnM7XG4gIHZhciBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gIC8qKlxuICAgKiBUaGlzIG1ha2VzIGEgc2hhbGxvdyBjb3B5IG9mIGN1cnJlbnRMaXN0ZW5lcnMgc28gd2UgY2FuIHVzZVxuICAgKiBuZXh0TGlzdGVuZXJzIGFzIGEgdGVtcG9yYXJ5IGxpc3Qgd2hpbGUgZGlzcGF0Y2hpbmcuXG4gICAqXG4gICAqIFRoaXMgcHJldmVudHMgYW55IGJ1Z3MgYXJvdW5kIGNvbnN1bWVycyBjYWxsaW5nXG4gICAqIHN1YnNjcmliZS91bnN1YnNjcmliZSBpbiB0aGUgbWlkZGxlIG9mIGEgZGlzcGF0Y2guXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKSB7XG4gICAgaWYgKG5leHRMaXN0ZW5lcnMgPT09IGN1cnJlbnRMaXN0ZW5lcnMpIHtcbiAgICAgIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzLnNsaWNlKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgc3RhdGUgdHJlZSBtYW5hZ2VkIGJ5IHRoZSBzdG9yZS5cbiAgICpcbiAgICogQHJldHVybnMge2FueX0gVGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBvZiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzKSA6ICdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLmdldFN0YXRlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1RoZSByZWR1Y2VyIGhhcyBhbHJlYWR5IHJlY2VpdmVkIHRoZSBzdGF0ZSBhcyBhbiBhcmd1bWVudC4gJyArICdQYXNzIGl0IGRvd24gZnJvbSB0aGUgdG9wIHJlZHVjZXIgaW5zdGVhZCBvZiByZWFkaW5nIGl0IGZyb20gdGhlIHN0b3JlLicpO1xuICAgIH1cblxuICAgIHJldHVybiBjdXJyZW50U3RhdGU7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgYSBjaGFuZ2UgbGlzdGVuZXIuIEl0IHdpbGwgYmUgY2FsbGVkIGFueSB0aW1lIGFuIGFjdGlvbiBpcyBkaXNwYXRjaGVkLFxuICAgKiBhbmQgc29tZSBwYXJ0IG9mIHRoZSBzdGF0ZSB0cmVlIG1heSBwb3RlbnRpYWxseSBoYXZlIGNoYW5nZWQuIFlvdSBtYXkgdGhlblxuICAgKiBjYWxsIGBnZXRTdGF0ZSgpYCB0byByZWFkIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgaW5zaWRlIHRoZSBjYWxsYmFjay5cbiAgICpcbiAgICogWW91IG1heSBjYWxsIGBkaXNwYXRjaCgpYCBmcm9tIGEgY2hhbmdlIGxpc3RlbmVyLCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAgICogY2F2ZWF0czpcbiAgICpcbiAgICogMS4gVGhlIHN1YnNjcmlwdGlvbnMgYXJlIHNuYXBzaG90dGVkIGp1c3QgYmVmb3JlIGV2ZXJ5IGBkaXNwYXRjaCgpYCBjYWxsLlxuICAgKiBJZiB5b3Ugc3Vic2NyaWJlIG9yIHVuc3Vic2NyaWJlIHdoaWxlIHRoZSBsaXN0ZW5lcnMgYXJlIGJlaW5nIGludm9rZWQsIHRoaXNcbiAgICogd2lsbCBub3QgaGF2ZSBhbnkgZWZmZWN0IG9uIHRoZSBgZGlzcGF0Y2goKWAgdGhhdCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MuXG4gICAqIEhvd2V2ZXIsIHRoZSBuZXh0IGBkaXNwYXRjaCgpYCBjYWxsLCB3aGV0aGVyIG5lc3RlZCBvciBub3QsIHdpbGwgdXNlIGEgbW9yZVxuICAgKiByZWNlbnQgc25hcHNob3Qgb2YgdGhlIHN1YnNjcmlwdGlvbiBsaXN0LlxuICAgKlxuICAgKiAyLiBUaGUgbGlzdGVuZXIgc2hvdWxkIG5vdCBleHBlY3QgdG8gc2VlIGFsbCBzdGF0ZSBjaGFuZ2VzLCBhcyB0aGUgc3RhdGVcbiAgICogbWlnaHQgaGF2ZSBiZWVuIHVwZGF0ZWQgbXVsdGlwbGUgdGltZXMgZHVyaW5nIGEgbmVzdGVkIGBkaXNwYXRjaCgpYCBiZWZvcmVcbiAgICogdGhlIGxpc3RlbmVyIGlzIGNhbGxlZC4gSXQgaXMsIGhvd2V2ZXIsIGd1YXJhbnRlZWQgdGhhdCBhbGwgc3Vic2NyaWJlcnNcbiAgICogcmVnaXN0ZXJlZCBiZWZvcmUgdGhlIGBkaXNwYXRjaCgpYCBzdGFydGVkIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGxhdGVzdFxuICAgKiBzdGF0ZSBieSB0aGUgdGltZSBpdCBleGl0cy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgQSBjYWxsYmFjayB0byBiZSBpbnZva2VkIG9uIGV2ZXJ5IGRpc3BhdGNoLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gdG8gcmVtb3ZlIHRoaXMgY2hhbmdlIGxpc3RlbmVyLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQpIDogXCJFeHBlY3RlZCB0aGUgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbi4gSW5zdGVhZCwgcmVjZWl2ZWQ6ICdcIiArIGtpbmRPZihsaXN0ZW5lcikgKyBcIidcIik7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDUpIDogJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuc3Vic2NyaWJlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ0lmIHlvdSB3b3VsZCBsaWtlIHRvIGJlIG5vdGlmaWVkIGFmdGVyIHRoZSBzdG9yZSBoYXMgYmVlbiB1cGRhdGVkLCBzdWJzY3JpYmUgZnJvbSBhICcgKyAnY29tcG9uZW50IGFuZCBpbnZva2Ugc3RvcmUuZ2V0U3RhdGUoKSBpbiB0aGUgY2FsbGJhY2sgdG8gYWNjZXNzIHRoZSBsYXRlc3Qgc3RhdGUuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS9zdG9yZSNzdWJzY3JpYmVsaXN0ZW5lciBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgIH1cblxuICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNikgOiAnWW91IG1heSBub3QgdW5zdWJzY3JpYmUgZnJvbSBhIHN0b3JlIGxpc3RlbmVyIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpL3N0b3JlI3N1YnNjcmliZWxpc3RlbmVyIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgICB9XG5cbiAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgICAgdmFyIGluZGV4ID0gbmV4dExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgIG5leHRMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIGN1cnJlbnRMaXN0ZW5lcnMgPSBudWxsO1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gYWN0aW9uLiBJdCBpcyB0aGUgb25seSB3YXkgdG8gdHJpZ2dlciBhIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogVGhlIGByZWR1Y2VyYCBmdW5jdGlvbiwgdXNlZCB0byBjcmVhdGUgdGhlIHN0b3JlLCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgKiBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBnaXZlbiBgYWN0aW9uYC4gSXRzIHJldHVybiB2YWx1ZSB3aWxsXG4gICAqIGJlIGNvbnNpZGVyZWQgdGhlICoqbmV4dCoqIHN0YXRlIG9mIHRoZSB0cmVlLCBhbmQgdGhlIGNoYW5nZSBsaXN0ZW5lcnNcbiAgICogd2lsbCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb25seSBzdXBwb3J0cyBwbGFpbiBvYmplY3QgYWN0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICogZGlzcGF0Y2ggYSBQcm9taXNlLCBhbiBPYnNlcnZhYmxlLCBhIHRodW5rLCBvciBzb21ldGhpbmcgZWxzZSwgeW91IG5lZWQgdG9cbiAgICogd3JhcCB5b3VyIHN0b3JlIGNyZWF0aW5nIGZ1bmN0aW9uIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbWlkZGxld2FyZS4gRm9yXG4gICAqIGV4YW1wbGUsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGByZWR1eC10aHVua2AgcGFja2FnZS4gRXZlbiB0aGVcbiAgICogbWlkZGxld2FyZSB3aWxsIGV2ZW50dWFsbHkgZGlzcGF0Y2ggcGxhaW4gb2JqZWN0IGFjdGlvbnMgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY3Rpb24gQSBwbGFpbiBvYmplY3QgcmVwcmVzZW50aW5nIOKAnHdoYXQgY2hhbmdlZOKAnS4gSXQgaXNcbiAgICogYSBnb29kIGlkZWEgdG8ga2VlcCBhY3Rpb25zIHNlcmlhbGl6YWJsZSBzbyB5b3UgY2FuIHJlY29yZCBhbmQgcmVwbGF5IHVzZXJcbiAgICogc2Vzc2lvbnMsIG9yIHVzZSB0aGUgdGltZSB0cmF2ZWxsaW5nIGByZWR1eC1kZXZ0b29sc2AuIEFuIGFjdGlvbiBtdXN0IGhhdmVcbiAgICogYSBgdHlwZWAgcHJvcGVydHkgd2hpY2ggbWF5IG5vdCBiZSBgdW5kZWZpbmVkYC4gSXQgaXMgYSBnb29kIGlkZWEgdG8gdXNlXG4gICAqIHN0cmluZyBjb25zdGFudHMgZm9yIGFjdGlvbiB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gRm9yIGNvbnZlbmllbmNlLCB0aGUgc2FtZSBhY3Rpb24gb2JqZWN0IHlvdSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQsIGlmIHlvdSB1c2UgYSBjdXN0b20gbWlkZGxld2FyZSwgaXQgbWF5IHdyYXAgYGRpc3BhdGNoKClgIHRvXG4gICAqIHJldHVybiBzb21ldGhpbmcgZWxzZSAoZm9yIGV4YW1wbGUsIGEgUHJvbWlzZSB5b3UgY2FuIGF3YWl0KS5cbiAgICovXG5cblxuICBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoYWN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNykgOiBcIkFjdGlvbnMgbXVzdCBiZSBwbGFpbiBvYmplY3RzLiBJbnN0ZWFkLCB0aGUgYWN0dWFsIHR5cGUgd2FzOiAnXCIgKyBraW5kT2YoYWN0aW9uKSArIFwiJy4gWW91IG1heSBuZWVkIHRvIGFkZCBtaWRkbGV3YXJlIHRvIHlvdXIgc3RvcmUgc2V0dXAgdG8gaGFuZGxlIGRpc3BhdGNoaW5nIG90aGVyIHZhbHVlcywgc3VjaCBhcyAncmVkdXgtdGh1bmsnIHRvIGhhbmRsZSBkaXNwYXRjaGluZyBmdW5jdGlvbnMuIFNlZSBodHRwczovL3JlZHV4LmpzLm9yZy90dXRvcmlhbHMvZnVuZGFtZW50YWxzL3BhcnQtNC1zdG9yZSNtaWRkbGV3YXJlIGFuZCBodHRwczovL3JlZHV4LmpzLm9yZy90dXRvcmlhbHMvZnVuZGFtZW50YWxzL3BhcnQtNi1hc3luYy1sb2dpYyN1c2luZy10aGUtcmVkdXgtdGh1bmstbWlkZGxld2FyZSBmb3IgZXhhbXBsZXMuXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYWN0aW9uLnR5cGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg4KSA6ICdBY3Rpb25zIG1heSBub3QgaGF2ZSBhbiB1bmRlZmluZWQgXCJ0eXBlXCIgcHJvcGVydHkuIFlvdSBtYXkgaGF2ZSBtaXNzcGVsbGVkIGFuIGFjdGlvbiB0eXBlIHN0cmluZyBjb25zdGFudC4nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoOSkgOiAnUmVkdWNlcnMgbWF5IG5vdCBkaXNwYXRjaCBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gdHJ1ZTtcbiAgICAgIGN1cnJlbnRTdGF0ZSA9IGN1cnJlbnRSZWR1Y2VyKGN1cnJlbnRTdGF0ZSwgYWN0aW9uKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzID0gbmV4dExpc3RlbmVycztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb247XG4gIH1cbiAgLyoqXG4gICAqIFJlcGxhY2VzIHRoZSByZWR1Y2VyIGN1cnJlbnRseSB1c2VkIGJ5IHRoZSBzdG9yZSB0byBjYWxjdWxhdGUgdGhlIHN0YXRlLlxuICAgKlxuICAgKiBZb3UgbWlnaHQgbmVlZCB0aGlzIGlmIHlvdXIgYXBwIGltcGxlbWVudHMgY29kZSBzcGxpdHRpbmcgYW5kIHlvdSB3YW50IHRvXG4gICAqIGxvYWQgc29tZSBvZiB0aGUgcmVkdWNlcnMgZHluYW1pY2FsbHkuIFlvdSBtaWdodCBhbHNvIG5lZWQgdGhpcyBpZiB5b3VcbiAgICogaW1wbGVtZW50IGEgaG90IHJlbG9hZGluZyBtZWNoYW5pc20gZm9yIFJlZHV4LlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBuZXh0UmVkdWNlciBUaGUgcmVkdWNlciBmb3IgdGhlIHN0b3JlIHRvIHVzZSBpbnN0ZWFkLlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG5cblxuICBmdW5jdGlvbiByZXBsYWNlUmVkdWNlcihuZXh0UmVkdWNlcikge1xuICAgIGlmICh0eXBlb2YgbmV4dFJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEwKSA6IFwiRXhwZWN0ZWQgdGhlIG5leHRSZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uIEluc3RlYWQsIHJlY2VpdmVkOiAnXCIgKyBraW5kT2YobmV4dFJlZHVjZXIpKTtcbiAgICB9XG5cbiAgICBjdXJyZW50UmVkdWNlciA9IG5leHRSZWR1Y2VyOyAvLyBUaGlzIGFjdGlvbiBoYXMgYSBzaW1pbGlhciBlZmZlY3QgdG8gQWN0aW9uVHlwZXMuSU5JVC5cbiAgICAvLyBBbnkgcmVkdWNlcnMgdGhhdCBleGlzdGVkIGluIGJvdGggdGhlIG5ldyBhbmQgb2xkIHJvb3RSZWR1Y2VyXG4gICAgLy8gd2lsbCByZWNlaXZlIHRoZSBwcmV2aW91cyBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgICAvLyB0aGUgbmV3IHN0YXRlIHRyZWUgd2l0aCBhbnkgcmVsZXZhbnQgZGF0YSBmcm9tIHRoZSBvbGQgb25lLlxuXG4gICAgZGlzcGF0Y2goe1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUkVQTEFDRVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBJbnRlcm9wZXJhYmlsaXR5IHBvaW50IGZvciBvYnNlcnZhYmxlL3JlYWN0aXZlIGxpYnJhcmllcy5cbiAgICogQHJldHVybnMge29ic2VydmFibGV9IEEgbWluaW1hbCBvYnNlcnZhYmxlIG9mIHN0YXRlIGNoYW5nZXMuXG4gICAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIG9ic2VydmFibGUgcHJvcG9zYWw6XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9ic2VydmFibGVcbiAgICovXG5cblxuICBmdW5jdGlvbiBvYnNlcnZhYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIG91dGVyU3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBfcmVmID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWluaW1hbCBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXIgQW55IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIG9ic2VydmVyLlxuICAgICAgICogVGhlIG9ic2VydmVyIG9iamVjdCBzaG91bGQgaGF2ZSBhIGBuZXh0YCBtZXRob2QuXG4gICAgICAgKiBAcmV0dXJucyB7c3Vic2NyaXB0aW9ufSBBbiBvYmplY3Qgd2l0aCBhbiBgdW5zdWJzY3JpYmVgIG1ldGhvZCB0aGF0IGNhblxuICAgICAgICogYmUgdXNlZCB0byB1bnN1YnNjcmliZSB0aGUgb2JzZXJ2YWJsZSBmcm9tIHRoZSBzdG9yZSwgYW5kIHByZXZlbnQgZnVydGhlclxuICAgICAgICogZW1pc3Npb24gb2YgdmFsdWVzIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JzZXJ2ZXIgIT09ICdvYmplY3QnIHx8IG9ic2VydmVyID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTEpIDogXCJFeHBlY3RlZCB0aGUgb2JzZXJ2ZXIgdG8gYmUgYW4gb2JqZWN0LiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKG9ic2VydmVyKSArIFwiJ1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9ic2VydmVTdGF0ZSgpIHtcbiAgICAgICAgICBpZiAob2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChnZXRTdGF0ZSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvYnNlcnZlU3RhdGUoKTtcbiAgICAgICAgdmFyIHVuc3Vic2NyaWJlID0gb3V0ZXJTdWJzY3JpYmUob2JzZXJ2ZVN0YXRlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB1bnN1YnNjcmliZTogdW5zdWJzY3JpYmVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCBfcmVmWyQkb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBfcmVmO1xuICB9IC8vIFdoZW4gYSBzdG9yZSBpcyBjcmVhdGVkLCBhbiBcIklOSVRcIiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCBzbyB0aGF0IGV2ZXJ5XG4gIC8vIHJlZHVjZXIgcmV0dXJucyB0aGVpciBpbml0aWFsIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAvLyB0aGUgaW5pdGlhbCBzdGF0ZSB0cmVlLlxuXG5cbiAgZGlzcGF0Y2goe1xuICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgfSk7XG4gIHJldHVybiBfcmVmMiA9IHtcbiAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgIHJlcGxhY2VSZWR1Y2VyOiByZXBsYWNlUmVkdWNlclxuICB9LCBfcmVmMlskJG9ic2VydmFibGVdID0gb2JzZXJ2YWJsZSwgX3JlZjI7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBSZWR1eCBzdG9yZSB0aGF0IGhvbGRzIHRoZSBzdGF0ZSB0cmVlLlxuICpcbiAqICoqV2UgcmVjb21tZW5kIHVzaW5nIGBjb25maWd1cmVTdG9yZWAgZnJvbSB0aGVcbiAqIGBAcmVkdXhqcy90b29sa2l0YCBwYWNrYWdlKiosIHdoaWNoIHJlcGxhY2VzIGBjcmVhdGVTdG9yZWA6XG4gKiAqKmh0dHBzOi8vcmVkdXguanMub3JnL2ludHJvZHVjdGlvbi93aHktcnRrLWlzLXJlZHV4LXRvZGF5KipcbiAqXG4gKiBUaGUgb25seSB3YXkgdG8gY2hhbmdlIHRoZSBkYXRhIGluIHRoZSBzdG9yZSBpcyB0byBjYWxsIGBkaXNwYXRjaCgpYCBvbiBpdC5cbiAqXG4gKiBUaGVyZSBzaG91bGQgb25seSBiZSBhIHNpbmdsZSBzdG9yZSBpbiB5b3VyIGFwcC4gVG8gc3BlY2lmeSBob3cgZGlmZmVyZW50XG4gKiBwYXJ0cyBvZiB0aGUgc3RhdGUgdHJlZSByZXNwb25kIHRvIGFjdGlvbnMsIHlvdSBtYXkgY29tYmluZSBzZXZlcmFsIHJlZHVjZXJzXG4gKiBpbnRvIGEgc2luZ2xlIHJlZHVjZXIgZnVuY3Rpb24gYnkgdXNpbmcgYGNvbWJpbmVSZWR1Y2Vyc2AuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVkdWNlciBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgbmV4dCBzdGF0ZSB0cmVlLCBnaXZlblxuICogdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGFjdGlvbiB0byBoYW5kbGUuXG4gKlxuICogQHBhcmFtIHthbnl9IFtwcmVsb2FkZWRTdGF0ZV0gVGhlIGluaXRpYWwgc3RhdGUuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBoeWRyYXRlIHRoZSBzdGF0ZSBmcm9tIHRoZSBzZXJ2ZXIgaW4gdW5pdmVyc2FsIGFwcHMsIG9yIHRvIHJlc3RvcmUgYVxuICogcHJldmlvdXNseSBzZXJpYWxpemVkIHVzZXIgc2Vzc2lvbi5cbiAqIElmIHlvdSB1c2UgYGNvbWJpbmVSZWR1Y2Vyc2AgdG8gcHJvZHVjZSB0aGUgcm9vdCByZWR1Y2VyIGZ1bmN0aW9uLCB0aGlzIG11c3QgYmVcbiAqIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlIGFzIGBjb21iaW5lUmVkdWNlcnNgIGtleXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2VuaGFuY2VyXSBUaGUgc3RvcmUgZW5oYW5jZXIuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBlbmhhbmNlIHRoZSBzdG9yZSB3aXRoIHRoaXJkLXBhcnR5IGNhcGFiaWxpdGllcyBzdWNoIGFzIG1pZGRsZXdhcmUsXG4gKiB0aW1lIHRyYXZlbCwgcGVyc2lzdGVuY2UsIGV0Yy4gVGhlIG9ubHkgc3RvcmUgZW5oYW5jZXIgdGhhdCBzaGlwcyB3aXRoIFJlZHV4XG4gKiBpcyBgYXBwbHlNaWRkbGV3YXJlKClgLlxuICpcbiAqIEByZXR1cm5zIHtTdG9yZX0gQSBSZWR1eCBzdG9yZSB0aGF0IGxldHMgeW91IHJlYWQgdGhlIHN0YXRlLCBkaXNwYXRjaCBhY3Rpb25zXG4gKiBhbmQgc3Vic2NyaWJlIHRvIGNoYW5nZXMuXG4gKi9cblxudmFyIGxlZ2FjeV9jcmVhdGVTdG9yZSA9IGNyZWF0ZVN0b3JlO1xuXG4vKipcbiAqIFByaW50cyBhIHdhcm5pbmcgaW4gdGhlIGNvbnNvbGUgaWYgaXQgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIFRoZSB3YXJuaW5nIG1lc3NhZ2UuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG5cblxuICB0cnkge1xuICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgaWYgeW91IGVuYWJsZVxuICAgIC8vIFwiYnJlYWsgb24gYWxsIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIGNvbnNvbGUsXG4gICAgLy8gaXQgd291bGQgcGF1c2UgdGhlIGV4ZWN1dGlvbiBhdCB0aGlzIGxpbmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9IGNhdGNoIChlKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG5cbn1cblxuZnVuY3Rpb24gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShpbnB1dFN0YXRlLCByZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgYXJndW1lbnROYW1lID0gYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5JTklUID8gJ3ByZWxvYWRlZFN0YXRlIGFyZ3VtZW50IHBhc3NlZCB0byBjcmVhdGVTdG9yZScgOiAncHJldmlvdXMgc3RhdGUgcmVjZWl2ZWQgYnkgdGhlIHJlZHVjZXInO1xuXG4gIGlmIChyZWR1Y2VyS2V5cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJ1N0b3JlIGRvZXMgbm90IGhhdmUgYSB2YWxpZCByZWR1Y2VyLiBNYWtlIHN1cmUgdGhlIGFyZ3VtZW50IHBhc3NlZCAnICsgJ3RvIGNvbWJpbmVSZWR1Y2VycyBpcyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSByZWR1Y2Vycy4nO1xuICB9XG5cbiAgaWYgKCFpc1BsYWluT2JqZWN0KGlucHV0U3RhdGUpKSB7XG4gICAgcmV0dXJuIFwiVGhlIFwiICsgYXJndW1lbnROYW1lICsgXCIgaGFzIHVuZXhwZWN0ZWQgdHlwZSBvZiBcXFwiXCIgKyBraW5kT2YoaW5wdXRTdGF0ZSkgKyBcIlxcXCIuIEV4cGVjdGVkIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgXCIgKyAoXCJrZXlzOiBcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIlwiKTtcbiAgfVxuXG4gIHZhciB1bmV4cGVjdGVkS2V5cyA9IE9iamVjdC5rZXlzKGlucHV0U3RhdGUpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICFyZWR1Y2Vycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICF1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XTtcbiAgfSk7XG4gIHVuZXhwZWN0ZWRLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldID0gdHJ1ZTtcbiAgfSk7XG4gIGlmIChhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLlJFUExBQ0UpIHJldHVybjtcblxuICBpZiAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBcIlVuZXhwZWN0ZWQgXCIgKyAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMSA/ICdrZXlzJyA6ICdrZXknKSArIFwiIFwiICsgKFwiXFxcIlwiICsgdW5leHBlY3RlZEtleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIgZm91bmQgaW4gXCIgKyBhcmd1bWVudE5hbWUgKyBcIi4gXCIpICsgXCJFeHBlY3RlZCB0byBmaW5kIG9uZSBvZiB0aGUga25vd24gcmVkdWNlciBrZXlzIGluc3RlYWQ6IFwiICsgKFwiXFxcIlwiICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIuIFVuZXhwZWN0ZWQga2V5cyB3aWxsIGJlIGlnbm9yZWQuXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFJlZHVjZXJTaGFwZShyZWR1Y2Vycykge1xuICBPYmplY3Qua2V5cyhyZWR1Y2VycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHJlZHVjZXIgPSByZWR1Y2Vyc1trZXldO1xuICAgIHZhciBpbml0aWFsU3RhdGUgPSByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICAgIH0pO1xuXG4gICAgaWYgKHR5cGVvZiBpbml0aWFsU3RhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMikgOiBcIlRoZSBzbGljZSByZWR1Y2VyIGZvciBrZXkgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZCBkdXJpbmcgaW5pdGlhbGl6YXRpb24uIFwiICsgXCJJZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZSByZWR1Y2VyIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgXCIgKyBcImV4cGxpY2l0bHkgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgXCIgKyBcIm5vdCBiZSB1bmRlZmluZWQuIElmIHlvdSBkb24ndCB3YW50IHRvIHNldCBhIHZhbHVlIGZvciB0aGlzIHJlZHVjZXIsIFwiICsgXCJ5b3UgY2FuIHVzZSBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5QUk9CRV9VTktOT1dOX0FDVElPTigpXG4gICAgfSkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMykgOiBcIlRoZSBzbGljZSByZWR1Y2VyIGZvciBrZXkgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZCB3aGVuIHByb2JlZCB3aXRoIGEgcmFuZG9tIHR5cGUuIFwiICsgKFwiRG9uJ3QgdHJ5IHRvIGhhbmRsZSAnXCIgKyBBY3Rpb25UeXBlcy5JTklUICsgXCInIG9yIG90aGVyIGFjdGlvbnMgaW4gXFxcInJlZHV4LypcXFwiIFwiKSArIFwibmFtZXNwYWNlLiBUaGV5IGFyZSBjb25zaWRlcmVkIHByaXZhdGUuIEluc3RlYWQsIHlvdSBtdXN0IHJldHVybiB0aGUgXCIgKyBcImN1cnJlbnQgc3RhdGUgZm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHVubGVzcyBpdCBpcyB1bmRlZmluZWQsIFwiICsgXCJpbiB3aGljaCBjYXNlIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZSwgcmVnYXJkbGVzcyBvZiB0aGUgXCIgKyBcImFjdGlvbiB0eXBlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgbm90IGJlIHVuZGVmaW5lZCwgYnV0IGNhbiBiZSBudWxsLlwiKTtcbiAgICB9XG4gIH0pO1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBkaWZmZXJlbnQgcmVkdWNlciBmdW5jdGlvbnMsIGludG8gYSBzaW5nbGVcbiAqIHJlZHVjZXIgZnVuY3Rpb24uIEl0IHdpbGwgY2FsbCBldmVyeSBjaGlsZCByZWR1Y2VyLCBhbmQgZ2F0aGVyIHRoZWlyIHJlc3VsdHNcbiAqIGludG8gYSBzaW5nbGUgc3RhdGUgb2JqZWN0LCB3aG9zZSBrZXlzIGNvcnJlc3BvbmQgdG8gdGhlIGtleXMgb2YgdGhlIHBhc3NlZFxuICogcmVkdWNlciBmdW5jdGlvbnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJlZHVjZXJzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgY29ycmVzcG9uZCB0byBkaWZmZXJlbnRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zIHRoYXQgbmVlZCB0byBiZSBjb21iaW5lZCBpbnRvIG9uZS4gT25lIGhhbmR5IHdheSB0byBvYnRhaW5cbiAqIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzIHJlZHVjZXJzYCBzeW50YXguIFRoZSByZWR1Y2VycyBtYXkgbmV2ZXIgcmV0dXJuXG4gKiB1bmRlZmluZWQgZm9yIGFueSBhY3Rpb24uIEluc3RlYWQsIHRoZXkgc2hvdWxkIHJldHVybiB0aGVpciBpbml0aWFsIHN0YXRlXG4gKiBpZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZW0gd2FzIHVuZGVmaW5lZCwgYW5kIHRoZSBjdXJyZW50IHN0YXRlIGZvciBhbnlcbiAqIHVucmVjb2duaXplZCBhY3Rpb24uXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHJlZHVjZXIgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGV2ZXJ5IHJlZHVjZXIgaW5zaWRlIHRoZVxuICogcGFzc2VkIG9iamVjdCwgYW5kIGJ1aWxkcyBhIHN0YXRlIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlLlxuICovXG5cblxuZnVuY3Rpb24gY29tYmluZVJlZHVjZXJzKHJlZHVjZXJzKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGZpbmFsUmVkdWNlcnMgPSB7fTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZHVjZXJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IHJlZHVjZXJLZXlzW2ldO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2FybmluZyhcIk5vIHJlZHVjZXIgcHJvdmlkZWQgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBmaW5hbFJlZHVjZXJzW2tleV0gPSByZWR1Y2Vyc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIHZhciBmaW5hbFJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMoZmluYWxSZWR1Y2Vycyk7IC8vIFRoaXMgaXMgdXNlZCB0byBtYWtlIHN1cmUgd2UgZG9uJ3Qgd2FybiBhYm91dCB0aGUgc2FtZVxuICAvLyBrZXlzIG11bHRpcGxlIHRpbWVzLlxuXG4gIHZhciB1bmV4cGVjdGVkS2V5Q2FjaGU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGUgPSB7fTtcbiAgfVxuXG4gIHZhciBzaGFwZUFzc2VydGlvbkVycm9yO1xuXG4gIHRyeSB7XG4gICAgYXNzZXJ0UmVkdWNlclNoYXBlKGZpbmFsUmVkdWNlcnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgc2hhcGVBc3NlcnRpb25FcnJvciA9IGU7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gY29tYmluYXRpb24oc3RhdGUsIGFjdGlvbikge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IHt9O1xuICAgIH1cblxuICAgIGlmIChzaGFwZUFzc2VydGlvbkVycm9yKSB7XG4gICAgICB0aHJvdyBzaGFwZUFzc2VydGlvbkVycm9yO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgd2FybmluZ01lc3NhZ2UgPSBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKHN0YXRlLCBmaW5hbFJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSk7XG5cbiAgICAgIGlmICh3YXJuaW5nTWVzc2FnZSkge1xuICAgICAgICB3YXJuaW5nKHdhcm5pbmdNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaGFzQ2hhbmdlZCA9IGZhbHNlO1xuICAgIHZhciBuZXh0U3RhdGUgPSB7fTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9rZXkgPSBmaW5hbFJlZHVjZXJLZXlzW19pXTtcbiAgICAgIHZhciByZWR1Y2VyID0gZmluYWxSZWR1Y2Vyc1tfa2V5XTtcbiAgICAgIHZhciBwcmV2aW91c1N0YXRlRm9yS2V5ID0gc3RhdGVbX2tleV07XG4gICAgICB2YXIgbmV4dFN0YXRlRm9yS2V5ID0gcmVkdWNlcihwcmV2aW91c1N0YXRlRm9yS2V5LCBhY3Rpb24pO1xuXG4gICAgICBpZiAodHlwZW9mIG5leHRTdGF0ZUZvcktleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIGFjdGlvblR5cGUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGU7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE0KSA6IFwiV2hlbiBjYWxsZWQgd2l0aCBhbiBhY3Rpb24gb2YgdHlwZSBcIiArIChhY3Rpb25UeXBlID8gXCJcXFwiXCIgKyBTdHJpbmcoYWN0aW9uVHlwZSkgKyBcIlxcXCJcIiA6ICcodW5rbm93biB0eXBlKScpICsgXCIsIHRoZSBzbGljZSByZWR1Y2VyIGZvciBrZXkgXFxcIlwiICsgX2tleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQuIFwiICsgXCJUbyBpZ25vcmUgYW4gYWN0aW9uLCB5b3UgbXVzdCBleHBsaWNpdGx5IHJldHVybiB0aGUgcHJldmlvdXMgc3RhdGUuIFwiICsgXCJJZiB5b3Ugd2FudCB0aGlzIHJlZHVjZXIgdG8gaG9sZCBubyB2YWx1ZSwgeW91IGNhbiByZXR1cm4gbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIik7XG4gICAgICB9XG5cbiAgICAgIG5leHRTdGF0ZVtfa2V5XSA9IG5leHRTdGF0ZUZvcktleTtcbiAgICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IG5leHRTdGF0ZUZvcktleSAhPT0gcHJldmlvdXNTdGF0ZUZvcktleTtcbiAgICB9XG5cbiAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMoc3RhdGUpLmxlbmd0aDtcbiAgICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5leHRTdGF0ZSA6IHN0YXRlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkaXNwYXRjaChhY3Rpb25DcmVhdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb24gY3JlYXRvcnMsIGludG8gYW4gb2JqZWN0IHdpdGggdGhlXG4gKiBzYW1lIGtleXMsIGJ1dCB3aXRoIGV2ZXJ5IGZ1bmN0aW9uIHdyYXBwZWQgaW50byBhIGBkaXNwYXRjaGAgY2FsbCBzbyB0aGV5XG4gKiBtYXkgYmUgaW52b2tlZCBkaXJlY3RseS4gVGhpcyBpcyBqdXN0IGEgY29udmVuaWVuY2UgbWV0aG9kLCBhcyB5b3UgY2FuIGNhbGxcbiAqIGBzdG9yZS5kaXNwYXRjaChNeUFjdGlvbkNyZWF0b3JzLmRvU29tZXRoaW5nKCkpYCB5b3Vyc2VsZiBqdXN0IGZpbmUuXG4gKlxuICogRm9yIGNvbnZlbmllbmNlLCB5b3UgY2FuIGFsc28gcGFzcyBhbiBhY3Rpb24gY3JlYXRvciBhcyB0aGUgZmlyc3QgYXJndW1lbnQsXG4gKiBhbmQgZ2V0IGEgZGlzcGF0Y2ggd3JhcHBlZCBmdW5jdGlvbiBpbiByZXR1cm4uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IGFjdGlvbkNyZWF0b3JzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvblxuICogY3JlYXRvciBmdW5jdGlvbnMuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzYFxuICogc3ludGF4LiBZb3UgbWF5IGFsc28gcGFzcyBhIHNpbmdsZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXNwYXRjaCBUaGUgYGRpc3BhdGNoYCBmdW5jdGlvbiBhdmFpbGFibGUgb24geW91ciBSZWR1eFxuICogc3RvcmUuXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gVGhlIG9iamVjdCBtaW1pY2tpbmcgdGhlIG9yaWdpbmFsIG9iamVjdCwgYnV0IHdpdGhcbiAqIGV2ZXJ5IGFjdGlvbiBjcmVhdG9yIHdyYXBwZWQgaW50byB0aGUgYGRpc3BhdGNoYCBjYWxsLiBJZiB5b3UgcGFzc2VkIGFcbiAqIGZ1bmN0aW9uIGFzIGBhY3Rpb25DcmVhdG9yc2AsIHRoZSByZXR1cm4gdmFsdWUgd2lsbCBhbHNvIGJlIGEgc2luZ2xlXG4gKiBmdW5jdGlvbi5cbiAqL1xuXG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9ycyhhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyAhPT0gJ29iamVjdCcgfHwgYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNikgOiBcImJpbmRBY3Rpb25DcmVhdG9ycyBleHBlY3RlZCBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbiwgYnV0IGluc3RlYWQgcmVjZWl2ZWQ6ICdcIiArIGtpbmRPZihhY3Rpb25DcmVhdG9ycykgKyBcIicuIFwiICsgXCJEaWQgeW91IHdyaXRlIFxcXCJpbXBvcnQgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCIgaW5zdGVhZCBvZiBcXFwiaW1wb3J0ICogYXMgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCI/XCIpO1xuICB9XG5cbiAgdmFyIGJvdW5kQWN0aW9uQ3JlYXRvcnMgPSB7fTtcblxuICBmb3IgKHZhciBrZXkgaW4gYWN0aW9uQ3JlYXRvcnMpIHtcbiAgICB2YXIgYWN0aW9uQ3JlYXRvciA9IGFjdGlvbkNyZWF0b3JzW2tleV07XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGJvdW5kQWN0aW9uQ3JlYXRvcnNba2V5XSA9IGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYm91bmRBY3Rpb25DcmVhdG9ycztcbn1cblxuLyoqXG4gKiBDb21wb3NlcyBzaW5nbGUtYXJndW1lbnQgZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC4gVGhlIHJpZ2h0bW9zdFxuICogZnVuY3Rpb24gY2FuIHRha2UgbXVsdGlwbGUgYXJndW1lbnRzIGFzIGl0IHByb3ZpZGVzIHRoZSBzaWduYXR1cmUgZm9yXG4gKiB0aGUgcmVzdWx0aW5nIGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBmdW5jcyBUaGUgZnVuY3Rpb25zIHRvIGNvbXBvc2UuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gb2J0YWluZWQgYnkgY29tcG9zaW5nIHRoZSBhcmd1bWVudCBmdW5jdGlvbnNcbiAqIGZyb20gcmlnaHQgdG8gbGVmdC4gRm9yIGV4YW1wbGUsIGNvbXBvc2UoZiwgZywgaCkgaXMgaWRlbnRpY2FsIHRvIGRvaW5nXG4gKiAoLi4uYXJncykgPT4gZihnKGgoLi4uYXJncykpKS5cbiAqL1xuZnVuY3Rpb24gY29tcG9zZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGZ1bmNzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICByZXR1cm4gYXJnO1xuICAgIH07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGZ1bmNzWzBdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmNzLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYShiLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0b3JlIGVuaGFuY2VyIHRoYXQgYXBwbGllcyBtaWRkbGV3YXJlIHRvIHRoZSBkaXNwYXRjaCBtZXRob2RcbiAqIG9mIHRoZSBSZWR1eCBzdG9yZS4gVGhpcyBpcyBoYW5keSBmb3IgYSB2YXJpZXR5IG9mIHRhc2tzLCBzdWNoIGFzIGV4cHJlc3NpbmdcbiAqIGFzeW5jaHJvbm91cyBhY3Rpb25zIGluIGEgY29uY2lzZSBtYW5uZXIsIG9yIGxvZ2dpbmcgZXZlcnkgYWN0aW9uIHBheWxvYWQuXG4gKlxuICogU2VlIGByZWR1eC10aHVua2AgcGFja2FnZSBhcyBhbiBleGFtcGxlIG9mIHRoZSBSZWR1eCBtaWRkbGV3YXJlLlxuICpcbiAqIEJlY2F1c2UgbWlkZGxld2FyZSBpcyBwb3RlbnRpYWxseSBhc3luY2hyb25vdXMsIHRoaXMgc2hvdWxkIGJlIHRoZSBmaXJzdFxuICogc3RvcmUgZW5oYW5jZXIgaW4gdGhlIGNvbXBvc2l0aW9uIGNoYWluLlxuICpcbiAqIE5vdGUgdGhhdCBlYWNoIG1pZGRsZXdhcmUgd2lsbCBiZSBnaXZlbiB0aGUgYGRpc3BhdGNoYCBhbmQgYGdldFN0YXRlYCBmdW5jdGlvbnNcbiAqIGFzIG5hbWVkIGFyZ3VtZW50cy5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBtaWRkbGV3YXJlcyBUaGUgbWlkZGxld2FyZSBjaGFpbiB0byBiZSBhcHBsaWVkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHN0b3JlIGVuaGFuY2VyIGFwcGx5aW5nIHRoZSBtaWRkbGV3YXJlLlxuICovXG5cbmZ1bmN0aW9uIGFwcGx5TWlkZGxld2FyZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1pZGRsZXdhcmVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIG1pZGRsZXdhcmVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChjcmVhdGVTdG9yZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RvcmUgPSBjcmVhdGVTdG9yZS5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG5cbiAgICAgIHZhciBfZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTUpIDogJ0Rpc3BhdGNoaW5nIHdoaWxlIGNvbnN0cnVjdGluZyB5b3VyIG1pZGRsZXdhcmUgaXMgbm90IGFsbG93ZWQuICcgKyAnT3RoZXIgbWlkZGxld2FyZSB3b3VsZCBub3QgYmUgYXBwbGllZCB0byB0aGlzIGRpc3BhdGNoLicpO1xuICAgICAgfTtcblxuICAgICAgdmFyIG1pZGRsZXdhcmVBUEkgPSB7XG4gICAgICAgIGdldFN0YXRlOiBzdG9yZS5nZXRTdGF0ZSxcbiAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICAgIHJldHVybiBfZGlzcGF0Y2guYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIGNoYWluID0gbWlkZGxld2FyZXMubWFwKGZ1bmN0aW9uIChtaWRkbGV3YXJlKSB7XG4gICAgICAgIHJldHVybiBtaWRkbGV3YXJlKG1pZGRsZXdhcmVBUEkpO1xuICAgICAgfSk7XG4gICAgICBfZGlzcGF0Y2ggPSBjb21wb3NlLmFwcGx5KHZvaWQgMCwgY2hhaW4pKHN0b3JlLmRpc3BhdGNoKTtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHN0b3JlKSwge30sIHtcbiAgICAgICAgZGlzcGF0Y2g6IF9kaXNwYXRjaFxuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn1cblxuLypcbiAqIFRoaXMgaXMgYSBkdW1teSBmdW5jdGlvbiB0byBjaGVjayBpZiB0aGUgZnVuY3Rpb24gbmFtZSBoYXMgYmVlbiBhbHRlcmVkIGJ5IG1pbmlmaWNhdGlvbi5cbiAqIElmIHRoZSBmdW5jdGlvbiBoYXMgYmVlbiBtaW5pZmllZCBhbmQgTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJywgd2FybiB0aGUgdXNlci5cbiAqL1xuXG5mdW5jdGlvbiBpc0NydXNoZWQoKSB7fVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgaXNDcnVzaGVkLm5hbWUgPT09ICdzdHJpbmcnICYmIGlzQ3J1c2hlZC5uYW1lICE9PSAnaXNDcnVzaGVkJykge1xuICB3YXJuaW5nKCdZb3UgYXJlIGN1cnJlbnRseSB1c2luZyBtaW5pZmllZCBjb2RlIG91dHNpZGUgb2YgTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiLiAnICsgJ1RoaXMgbWVhbnMgdGhhdCB5b3UgYXJlIHJ1bm5pbmcgYSBzbG93ZXIgZGV2ZWxvcG1lbnQgYnVpbGQgb2YgUmVkdXguICcgKyAnWW91IGNhbiB1c2UgbG9vc2UtZW52aWZ5IChodHRwczovL2dpdGh1Yi5jb20vemVydG9zaC9sb29zZS1lbnZpZnkpIGZvciBicm93c2VyaWZ5ICcgKyAnb3Igc2V0dGluZyBtb2RlIHRvIHByb2R1Y3Rpb24gaW4gd2VicGFjayAoaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25jZXB0cy9tb2RlLykgJyArICd0byBlbnN1cmUgeW91IGhhdmUgdGhlIGNvcnJlY3QgY29kZSBmb3IgeW91ciBwcm9kdWN0aW9uIGJ1aWxkLicpO1xufVxuXG5leHBvcnQgeyBBY3Rpb25UeXBlcyBhcyBfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzLCBhcHBseU1pZGRsZXdhcmUsIGJpbmRBY3Rpb25DcmVhdG9ycywgY29tYmluZVJlZHVjZXJzLCBjb21wb3NlLCBjcmVhdGVTdG9yZSwgbGVnYWN5X2NyZWF0ZVN0b3JlIH07XG4iLCIvKiogQSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgYSBwb3RlbnRpYWwgXCJleHRyYSBhcmd1bWVudFwiIHZhbHVlIHRvIGJlIGluamVjdGVkIGxhdGVyLFxyXG4gKiBhbmQgcmV0dXJucyBhbiBpbnN0YW5jZSBvZiB0aGUgdGh1bmsgbWlkZGxld2FyZSB0aGF0IHVzZXMgdGhhdCB2YWx1ZVxyXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVRodW5rTWlkZGxld2FyZShleHRyYUFyZ3VtZW50KSB7XG4gIC8vIFN0YW5kYXJkIFJlZHV4IG1pZGRsZXdhcmUgZGVmaW5pdGlvbiBwYXR0ZXJuOlxuICAvLyBTZWU6IGh0dHBzOi8vcmVkdXguanMub3JnL3R1dG9yaWFscy9mdW5kYW1lbnRhbHMvcGFydC00LXN0b3JlI3dyaXRpbmctY3VzdG9tLW1pZGRsZXdhcmVcbiAgdmFyIG1pZGRsZXdhcmUgPSBmdW5jdGlvbiBtaWRkbGV3YXJlKF9yZWYpIHtcbiAgICB2YXIgZGlzcGF0Y2ggPSBfcmVmLmRpc3BhdGNoLFxuICAgICAgICBnZXRTdGF0ZSA9IF9yZWYuZ2V0U3RhdGU7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICAvLyBUaGUgdGh1bmsgbWlkZGxld2FyZSBsb29rcyBmb3IgYW55IGZ1bmN0aW9ucyB0aGF0IHdlcmUgcGFzc2VkIHRvIGBzdG9yZS5kaXNwYXRjaGAuXG4gICAgICAgIC8vIElmIHRoaXMgXCJhY3Rpb25cIiBpcyByZWFsbHkgYSBmdW5jdGlvbiwgY2FsbCBpdCBhbmQgcmV0dXJuIHRoZSByZXN1bHQuXG4gICAgICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgLy8gSW5qZWN0IHRoZSBzdG9yZSdzIGBkaXNwYXRjaGAgYW5kIGBnZXRTdGF0ZWAgbWV0aG9kcywgYXMgd2VsbCBhcyBhbnkgXCJleHRyYSBhcmdcIlxuICAgICAgICAgIHJldHVybiBhY3Rpb24oZGlzcGF0Y2gsIGdldFN0YXRlLCBleHRyYUFyZ3VtZW50KTtcbiAgICAgICAgfSAvLyBPdGhlcndpc2UsIHBhc3MgdGhlIGFjdGlvbiBkb3duIHRoZSBtaWRkbGV3YXJlIGNoYWluIGFzIHVzdWFsXG5cblxuICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xuXG4gIHJldHVybiBtaWRkbGV3YXJlO1xufVxuXG52YXIgdGh1bmsgPSBjcmVhdGVUaHVua01pZGRsZXdhcmUoKTsgLy8gQXR0YWNoIHRoZSBmYWN0b3J5IGZ1bmN0aW9uIHNvIHVzZXJzIGNhbiBjcmVhdGUgYSBjdXN0b21pemVkIHZlcnNpb25cbi8vIHdpdGggd2hhdGV2ZXIgXCJleHRyYSBhcmdcIiB0aGV5IHdhbnQgdG8gaW5qZWN0IGludG8gdGhlaXIgdGh1bmtzXG5cbnRodW5rLndpdGhFeHRyYUFyZ3VtZW50ID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlO1xuZXhwb3J0IGRlZmF1bHQgdGh1bms7IiwiaW1wb3J0IHR5cGUgeyBBY3Rpb24sIEFjdGlvbkNyZWF0b3IsIFN0b3JlRW5oYW5jZXIgfSBmcm9tICdyZWR1eCdcclxuaW1wb3J0IHsgY29tcG9zZSB9IGZyb20gJ3JlZHV4J1xyXG5cclxuLyoqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgRW5oYW5jZXJPcHRpb25zIHtcclxuICAvKipcclxuICAgKiB0aGUgaW5zdGFuY2UgbmFtZSB0byBiZSBzaG93ZWQgb24gdGhlIG1vbml0b3IgcGFnZS4gRGVmYXVsdCB2YWx1ZSBpcyBgZG9jdW1lbnQudGl0bGVgLlxyXG4gICAqIElmIG5vdCBzcGVjaWZpZWQgYW5kIHRoZXJlJ3Mgbm8gZG9jdW1lbnQgdGl0bGUsIGl0IHdpbGwgY29uc2lzdCBvZiBgdGFiSWRgIGFuZCBgaW5zdGFuY2VJZGAuXHJcbiAgICovXHJcbiAgbmFtZT86IHN0cmluZ1xyXG4gIC8qKlxyXG4gICAqIGFjdGlvbiBjcmVhdG9ycyBmdW5jdGlvbnMgdG8gYmUgYXZhaWxhYmxlIGluIHRoZSBEaXNwYXRjaGVyLlxyXG4gICAqL1xyXG4gIGFjdGlvbkNyZWF0b3JzPzogQWN0aW9uQ3JlYXRvcjxhbnk+W10gfCB7IFtrZXk6IHN0cmluZ106IEFjdGlvbkNyZWF0b3I8YW55PiB9XHJcbiAgLyoqXHJcbiAgICogaWYgbW9yZSB0aGFuIG9uZSBhY3Rpb24gaXMgZGlzcGF0Y2hlZCBpbiB0aGUgaW5kaWNhdGVkIGludGVydmFsLCBhbGwgbmV3IGFjdGlvbnMgd2lsbCBiZSBjb2xsZWN0ZWQgYW5kIHNlbnQgYXQgb25jZS5cclxuICAgKiBJdCBpcyB0aGUgam9pbnQgYmV0d2VlbiBwZXJmb3JtYW5jZSBhbmQgc3BlZWQuIFdoZW4gc2V0IHRvIGAwYCwgYWxsIGFjdGlvbnMgd2lsbCBiZSBzZW50IGluc3RhbnRseS5cclxuICAgKiBTZXQgaXQgdG8gYSBoaWdoZXIgdmFsdWUgd2hlbiBleHBlcmllbmNpbmcgcGVyZiBpc3N1ZXMgKGFsc28gYG1heEFnZWAgdG8gYSBsb3dlciB2YWx1ZSkuXHJcbiAgICpcclxuICAgKiBAZGVmYXVsdCA1MDAgbXMuXHJcbiAgICovXHJcbiAgbGF0ZW5jeT86IG51bWJlclxyXG4gIC8qKlxyXG4gICAqICg+IDEpIC0gbWF4aW11bSBhbGxvd2VkIGFjdGlvbnMgdG8gYmUgc3RvcmVkIGluIHRoZSBoaXN0b3J5IHRyZWUuIFRoZSBvbGRlc3QgYWN0aW9ucyBhcmUgcmVtb3ZlZCBvbmNlIG1heEFnZSBpcyByZWFjaGVkLiBJdCdzIGNyaXRpY2FsIGZvciBwZXJmb3JtYW5jZS5cclxuICAgKlxyXG4gICAqIEBkZWZhdWx0IDUwXHJcbiAgICovXHJcbiAgbWF4QWdlPzogbnVtYmVyXHJcbiAgLyoqXHJcbiAgICogU2VlIGRldGFpbGVkIGRvY3VtZW50YXRpb24gYXQgaHR0cHM6Ly9naXRodWIuY29tL3JlZHV4anMvcmVkdXgtZGV2dG9vbHMvYmxvYi8lNDByZWR1eC1kZXZ0b29scy9leHRlbnNpb24lNDAzLjIuMS9leHRlbnNpb24vZG9jcy9BUEkvQXJndW1lbnRzLm1kI3NlcmlhbGl6ZVxyXG4gICAqL1xyXG4gIHNlcmlhbGl6ZT86XHJcbiAgICB8IGJvb2xlYW5cclxuICAgIHwge1xyXG4gICAgICAgIG9wdGlvbnM/OlxyXG4gICAgICAgICAgfCBib29sZWFuXHJcbiAgICAgICAgICB8IHtcclxuICAgICAgICAgICAgICBkYXRlPzogYm9vbGVhblxyXG4gICAgICAgICAgICAgIHJlZ2V4PzogYm9vbGVhblxyXG4gICAgICAgICAgICAgIHVuZGVmaW5lZD86IGJvb2xlYW5cclxuICAgICAgICAgICAgICBlcnJvcj86IGJvb2xlYW5cclxuICAgICAgICAgICAgICBzeW1ib2w/OiBib29sZWFuXHJcbiAgICAgICAgICAgICAgbWFwPzogYm9vbGVhblxyXG4gICAgICAgICAgICAgIHNldD86IGJvb2xlYW5cclxuICAgICAgICAgICAgICBmdW5jdGlvbj86IGJvb2xlYW4gfCBGdW5jdGlvblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgcmVwbGFjZXI/OiAoa2V5OiBzdHJpbmcsIHZhbHVlOiB1bmtub3duKSA9PiB1bmtub3duXHJcbiAgICAgICAgcmV2aXZlcj86IChrZXk6IHN0cmluZywgdmFsdWU6IHVua25vd24pID0+IHVua25vd25cclxuICAgICAgICBpbW11dGFibGU/OiB1bmtub3duXHJcbiAgICAgICAgcmVmcz86IHVua25vd25bXVxyXG4gICAgICB9XHJcbiAgLyoqXHJcbiAgICogZnVuY3Rpb24gd2hpY2ggdGFrZXMgYGFjdGlvbmAgb2JqZWN0IGFuZCBpZCBudW1iZXIgYXMgYXJndW1lbnRzLCBhbmQgc2hvdWxkIHJldHVybiBgYWN0aW9uYCBvYmplY3QgYmFjay5cclxuICAgKi9cclxuICBhY3Rpb25TYW5pdGl6ZXI/OiA8QSBleHRlbmRzIEFjdGlvbj4oYWN0aW9uOiBBLCBpZDogbnVtYmVyKSA9PiBBXHJcbiAgLyoqXHJcbiAgICogZnVuY3Rpb24gd2hpY2ggdGFrZXMgYHN0YXRlYCBvYmplY3QgYW5kIGluZGV4IGFzIGFyZ3VtZW50cywgYW5kIHNob3VsZCByZXR1cm4gYHN0YXRlYCBvYmplY3QgYmFjay5cclxuICAgKi9cclxuICBzdGF0ZVNhbml0aXplcj86IDxTPihzdGF0ZTogUywgaW5kZXg6IG51bWJlcikgPT4gU1xyXG4gIC8qKlxyXG4gICAqICpzdHJpbmcgb3IgYXJyYXkgb2Ygc3RyaW5ncyBhcyByZWdleCogLSBhY3Rpb25zIHR5cGVzIHRvIGJlIGhpZGRlbiAvIHNob3duIGluIHRoZSBtb25pdG9ycyAod2hpbGUgcGFzc2VkIHRvIHRoZSByZWR1Y2VycykuXHJcbiAgICogSWYgYGFjdGlvbnNXaGl0ZWxpc3RgIHNwZWNpZmllZCwgYGFjdGlvbnNCbGFja2xpc3RgIGlzIGlnbm9yZWQuXHJcbiAgICovXHJcbiAgYWN0aW9uc0JsYWNrbGlzdD86IHN0cmluZyB8IHN0cmluZ1tdXHJcbiAgLyoqXHJcbiAgICogKnN0cmluZyBvciBhcnJheSBvZiBzdHJpbmdzIGFzIHJlZ2V4KiAtIGFjdGlvbnMgdHlwZXMgdG8gYmUgaGlkZGVuIC8gc2hvd24gaW4gdGhlIG1vbml0b3JzICh3aGlsZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXJzKS5cclxuICAgKiBJZiBgYWN0aW9uc1doaXRlbGlzdGAgc3BlY2lmaWVkLCBgYWN0aW9uc0JsYWNrbGlzdGAgaXMgaWdub3JlZC5cclxuICAgKi9cclxuICBhY3Rpb25zV2hpdGVsaXN0Pzogc3RyaW5nIHwgc3RyaW5nW11cclxuICAvKipcclxuICAgKiBjYWxsZWQgZm9yIGV2ZXJ5IGFjdGlvbiBiZWZvcmUgc2VuZGluZywgdGFrZXMgYHN0YXRlYCBhbmQgYGFjdGlvbmAgb2JqZWN0LCBhbmQgcmV0dXJucyBgdHJ1ZWAgaW4gY2FzZSBpdCBhbGxvd3Mgc2VuZGluZyB0aGUgY3VycmVudCBkYXRhIHRvIHRoZSBtb25pdG9yLlxyXG4gICAqIFVzZSBpdCBhcyBhIG1vcmUgYWR2YW5jZWQgdmVyc2lvbiBvZiBgYWN0aW9uc0JsYWNrbGlzdGAvYGFjdGlvbnNXaGl0ZWxpc3RgIHBhcmFtZXRlcnMuXHJcbiAgICovXHJcbiAgcHJlZGljYXRlPzogPFMsIEEgZXh0ZW5kcyBBY3Rpb24+KHN0YXRlOiBTLCBhY3Rpb246IEEpID0+IGJvb2xlYW5cclxuICAvKipcclxuICAgKiBpZiBzcGVjaWZpZWQgYXMgYGZhbHNlYCwgaXQgd2lsbCBub3QgcmVjb3JkIHRoZSBjaGFuZ2VzIHRpbGwgY2xpY2tpbmcgb24gYFN0YXJ0IHJlY29yZGluZ2AgYnV0dG9uLlxyXG4gICAqIEF2YWlsYWJsZSBvbmx5IGZvciBSZWR1eCBlbmhhbmNlciwgZm9yIG90aGVycyB1c2UgYGF1dG9QYXVzZWAuXHJcbiAgICpcclxuICAgKiBAZGVmYXVsdCB0cnVlXHJcbiAgICovXHJcbiAgc2hvdWxkUmVjb3JkQ2hhbmdlcz86IGJvb2xlYW5cclxuICAvKipcclxuICAgKiBpZiBzcGVjaWZpZWQsIHdoZW5ldmVyIGNsaWNraW5nIG9uIGBQYXVzZSByZWNvcmRpbmdgIGJ1dHRvbiBhbmQgdGhlcmUgYXJlIGFjdGlvbnMgaW4gdGhlIGhpc3RvcnkgbG9nLCB3aWxsIGFkZCB0aGlzIGFjdGlvbiB0eXBlLlxyXG4gICAqIElmIG5vdCBzcGVjaWZpZWQsIHdpbGwgY29tbWl0IHdoZW4gcGF1c2VkLiBBdmFpbGFibGUgb25seSBmb3IgUmVkdXggZW5oYW5jZXIuXHJcbiAgICpcclxuICAgKiBAZGVmYXVsdCBcIkBAUEFVU0VEXCJcIlxyXG4gICAqL1xyXG4gIHBhdXNlQWN0aW9uVHlwZT86IHN0cmluZ1xyXG4gIC8qKlxyXG4gICAqIGF1dG8gcGF1c2VzIHdoZW4gdGhlIGV4dGVuc2lvbuKAmXMgd2luZG93IGlzIG5vdCBvcGVuZWQsIGFuZCBzbyBoYXMgemVybyBpbXBhY3Qgb24geW91ciBhcHAgd2hlbiBub3QgaW4gdXNlLlxyXG4gICAqIE5vdCBhdmFpbGFibGUgZm9yIFJlZHV4IGVuaGFuY2VyIChhcyBpdCBhbHJlYWR5IGRvZXMgaXQgYnV0IHN0b3JpbmcgdGhlIGRhdGEgdG8gYmUgc2VudCkuXHJcbiAgICpcclxuICAgKiBAZGVmYXVsdCBmYWxzZVxyXG4gICAqL1xyXG4gIGF1dG9QYXVzZT86IGJvb2xlYW5cclxuICAvKipcclxuICAgKiBpZiBzcGVjaWZpZWQgYXMgYHRydWVgLCBpdCB3aWxsIG5vdCBhbGxvdyBhbnkgbm9uLW1vbml0b3IgYWN0aW9ucyB0byBiZSBkaXNwYXRjaGVkIHRpbGwgY2xpY2tpbmcgb24gYFVubG9jayBjaGFuZ2VzYCBidXR0b24uXHJcbiAgICogQXZhaWxhYmxlIG9ubHkgZm9yIFJlZHV4IGVuaGFuY2VyLlxyXG4gICAqXHJcbiAgICogQGRlZmF1bHQgZmFsc2VcclxuICAgKi9cclxuICBzaG91bGRTdGFydExvY2tlZD86IGJvb2xlYW5cclxuICAvKipcclxuICAgKiBpZiBzZXQgdG8gYGZhbHNlYCwgd2lsbCBub3QgcmVjb21wdXRlIHRoZSBzdGF0ZXMgb24gaG90IHJlbG9hZGluZyAob3Igb24gcmVwbGFjaW5nIHRoZSByZWR1Y2VycykuIEF2YWlsYWJsZSBvbmx5IGZvciBSZWR1eCBlbmhhbmNlci5cclxuICAgKlxyXG4gICAqIEBkZWZhdWx0IHRydWVcclxuICAgKi9cclxuICBzaG91bGRIb3RSZWxvYWQ/OiBib29sZWFuXHJcbiAgLyoqXHJcbiAgICogaWYgc3BlY2lmaWVkIGFzIGB0cnVlYCwgd2hlbmV2ZXIgdGhlcmUncyBhbiBleGNlcHRpb24gaW4gcmVkdWNlcnMsIHRoZSBtb25pdG9ycyB3aWxsIHNob3cgdGhlIGVycm9yIG1lc3NhZ2UsIGFuZCBuZXh0IGFjdGlvbnMgd2lsbCBub3QgYmUgZGlzcGF0Y2hlZC5cclxuICAgKlxyXG4gICAqIEBkZWZhdWx0IGZhbHNlXHJcbiAgICovXHJcbiAgc2hvdWxkQ2F0Y2hFcnJvcnM/OiBib29sZWFuXHJcbiAgLyoqXHJcbiAgICogSWYgeW91IHdhbnQgdG8gcmVzdHJpY3QgdGhlIGV4dGVuc2lvbiwgc3BlY2lmeSB0aGUgZmVhdHVyZXMgeW91IGFsbG93LlxyXG4gICAqIElmIG5vdCBzcGVjaWZpZWQsIGFsbCBvZiB0aGUgZmVhdHVyZXMgYXJlIGVuYWJsZWQuIFdoZW4gc2V0IGFzIGFuIG9iamVjdCwgb25seSB0aG9zZSBpbmNsdWRlZCBhcyBgdHJ1ZWAgd2lsbCBiZSBhbGxvd2VkLlxyXG4gICAqIE5vdGUgdGhhdCBleGNlcHQgYHRydWVgL2BmYWxzZWAsIGBpbXBvcnRgIGFuZCBgZXhwb3J0YCBjYW4gYmUgc2V0IGFzIGBjdXN0b21gICh3aGljaCBpcyBieSBkZWZhdWx0IGZvciBSZWR1eCBlbmhhbmNlciksIG1lYW5pbmcgdGhhdCB0aGUgaW1wb3J0aW5nL2V4cG9ydGluZyBvY2N1cnMgb24gdGhlIGNsaWVudCBzaWRlLlxyXG4gICAqIE90aGVyd2lzZSwgeW91J2xsIGdldC9zZXQgdGhlIGRhdGEgcmlnaHQgZnJvbSB0aGUgbW9uaXRvciBwYXJ0LlxyXG4gICAqL1xyXG4gIGZlYXR1cmVzPzoge1xyXG4gICAgLyoqXHJcbiAgICAgKiBzdGFydC9wYXVzZSByZWNvcmRpbmcgb2YgZGlzcGF0Y2hlZCBhY3Rpb25zXHJcbiAgICAgKi9cclxuICAgIHBhdXNlPzogYm9vbGVhblxyXG4gICAgLyoqXHJcbiAgICAgKiBsb2NrL3VubG9jayBkaXNwYXRjaGluZyBhY3Rpb25zIGFuZCBzaWRlIGVmZmVjdHNcclxuICAgICAqL1xyXG4gICAgbG9jaz86IGJvb2xlYW5cclxuICAgIC8qKlxyXG4gICAgICogcGVyc2lzdCBzdGF0ZXMgb24gcGFnZSByZWxvYWRpbmdcclxuICAgICAqL1xyXG4gICAgcGVyc2lzdD86IGJvb2xlYW5cclxuICAgIC8qKlxyXG4gICAgICogZXhwb3J0IGhpc3Rvcnkgb2YgYWN0aW9ucyBpbiBhIGZpbGVcclxuICAgICAqL1xyXG4gICAgZXhwb3J0PzogYm9vbGVhbiB8ICdjdXN0b20nXHJcbiAgICAvKipcclxuICAgICAqIGltcG9ydCBoaXN0b3J5IG9mIGFjdGlvbnMgZnJvbSBhIGZpbGVcclxuICAgICAqL1xyXG4gICAgaW1wb3J0PzogYm9vbGVhbiB8ICdjdXN0b20nXHJcbiAgICAvKipcclxuICAgICAqIGp1bXAgYmFjayBhbmQgZm9ydGggKHRpbWUgdHJhdmVsbGluZylcclxuICAgICAqL1xyXG4gICAganVtcD86IGJvb2xlYW5cclxuICAgIC8qKlxyXG4gICAgICogc2tpcCAoY2FuY2VsKSBhY3Rpb25zXHJcbiAgICAgKi9cclxuICAgIHNraXA/OiBib29sZWFuXHJcbiAgICAvKipcclxuICAgICAqIGRyYWcgYW5kIGRyb3AgYWN0aW9ucyBpbiB0aGUgaGlzdG9yeSBsaXN0XHJcbiAgICAgKi9cclxuICAgIHJlb3JkZXI/OiBib29sZWFuXHJcbiAgICAvKipcclxuICAgICAqIGRpc3BhdGNoIGN1c3RvbSBhY3Rpb25zIG9yIGFjdGlvbiBjcmVhdG9yc1xyXG4gICAgICovXHJcbiAgICBkaXNwYXRjaD86IGJvb2xlYW5cclxuICAgIC8qKlxyXG4gICAgICogZ2VuZXJhdGUgdGVzdHMgZm9yIHRoZSBzZWxlY3RlZCBhY3Rpb25zXHJcbiAgICAgKi9cclxuICAgIHRlc3Q/OiBib29sZWFuXHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIFNldCB0byB0cnVlIG9yIGEgc3RhY2t0cmFjZS1yZXR1cm5pbmcgZnVuY3Rpb24gdG8gcmVjb3JkIGNhbGwgc3RhY2sgdHJhY2VzIGZvciBkaXNwYXRjaGVkIGFjdGlvbnMuXHJcbiAgICogRGVmYXVsdHMgdG8gZmFsc2UuXHJcbiAgICovXHJcbiAgdHJhY2U/OiBib29sZWFuIHwgKDxBIGV4dGVuZHMgQWN0aW9uPihhY3Rpb246IEEpID0+IHN0cmluZylcclxuICAvKipcclxuICAgKiBUaGUgbWF4aW11bSBudW1iZXIgb2Ygc3RhY2sgdHJhY2UgZW50cmllcyB0byByZWNvcmQgcGVyIGFjdGlvbi4gRGVmYXVsdHMgdG8gMTAuXHJcbiAgICovXHJcbiAgdHJhY2VMaW1pdD86IG51bWJlclxyXG59XHJcblxyXG50eXBlIENvbXBvc2UgPSB0eXBlb2YgY29tcG9zZVxyXG5cclxuaW50ZXJmYWNlIENvbXBvc2VXaXRoRGV2VG9vbHMge1xyXG4gIChvcHRpb25zOiBFbmhhbmNlck9wdGlvbnMpOiBDb21wb3NlXHJcbiAgPFN0b3JlRXh0PiguLi5mdW5jczogU3RvcmVFbmhhbmNlcjxTdG9yZUV4dD5bXSk6IFN0b3JlRW5oYW5jZXI8U3RvcmVFeHQ+XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgY29tcG9zZVdpdGhEZXZUb29sczogQ29tcG9zZVdpdGhEZXZUb29scyA9XHJcbiAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcclxuICAod2luZG93IGFzIGFueSkuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fXHJcbiAgICA/ICh3aW5kb3cgYXMgYW55KS5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX19cclxuICAgIDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdW5kZWZpbmVkXHJcbiAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdvYmplY3QnKSByZXR1cm4gY29tcG9zZVxyXG4gICAgICAgIHJldHVybiBjb21wb3NlLmFwcGx5KG51bGwsIGFyZ3VtZW50cyBhcyBhbnkgYXMgRnVuY3Rpb25bXSlcclxuICAgICAgfVxyXG5cclxuLyoqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCBjb25zdCBkZXZUb29sc0VuaGFuY2VyOiB7XHJcbiAgKG9wdGlvbnM6IEVuaGFuY2VyT3B0aW9ucyk6IFN0b3JlRW5oYW5jZXI8YW55PlxyXG59ID1cclxuICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiAod2luZG93IGFzIGFueSkuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fX1xyXG4gICAgPyAod2luZG93IGFzIGFueSkuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fX1xyXG4gICAgOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChub29wKSB7XHJcbiAgICAgICAgICByZXR1cm4gbm9vcFxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4iLCIvKipcclxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBwYXNzZWQgdmFsdWUgaXMgXCJwbGFpblwiIG9iamVjdCwgaS5lLiBhbiBvYmplY3Qgd2hvc2VcclxuICogcHJvdG90eXBlIGlzIHRoZSByb290IGBPYmplY3QucHJvdG90eXBlYC4gVGhpcyBpbmNsdWRlcyBvYmplY3RzIGNyZWF0ZWRcclxuICogdXNpbmcgb2JqZWN0IGxpdGVyYWxzLCBidXQgbm90IGZvciBpbnN0YW5jZSBmb3IgY2xhc3MgaW5zdGFuY2VzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge2FueX0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXHJcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBhcHBlYXJzIHRvIGJlIGEgcGxhaW4gb2JqZWN0LlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlOiB1bmtub3duKTogdmFsdWUgaXMgb2JqZWN0IHtcclxuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JyB8fCB2YWx1ZSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlXHJcblxyXG4gIGxldCBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWx1ZSlcclxuICBpZiAocHJvdG8gPT09IG51bGwpIHJldHVybiB0cnVlXHJcblxyXG4gIGxldCBiYXNlUHJvdG8gPSBwcm90b1xyXG4gIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YoYmFzZVByb3RvKSAhPT0gbnVsbCkge1xyXG4gICAgYmFzZVByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGJhc2VQcm90bylcclxuICB9XHJcblxyXG4gIHJldHVybiBwcm90byA9PT0gYmFzZVByb3RvXHJcbn1cclxuIiwiaW1wb3J0IHR5cGUgeyBNaWRkbGV3YXJlIH0gZnJvbSAncmVkdXgnXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGltZU1lYXN1cmVVdGlscyhtYXhEZWxheTogbnVtYmVyLCBmbk5hbWU6IHN0cmluZykge1xyXG4gIGxldCBlbGFwc2VkID0gMFxyXG4gIHJldHVybiB7XHJcbiAgICBtZWFzdXJlVGltZTxUPihmbjogKCkgPT4gVCk6IFQge1xyXG4gICAgICBjb25zdCBzdGFydGVkID0gRGF0ZS5ub3coKVxyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiBmbigpXHJcbiAgICAgIH0gZmluYWxseSB7XHJcbiAgICAgICAgY29uc3QgZmluaXNoZWQgPSBEYXRlLm5vdygpXHJcbiAgICAgICAgZWxhcHNlZCArPSBmaW5pc2hlZCAtIHN0YXJ0ZWRcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHdhcm5JZkV4Y2VlZGVkKCkge1xyXG4gICAgICBpZiAoZWxhcHNlZCA+IG1heERlbGF5KSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKGAke2ZuTmFtZX0gdG9vayAke2VsYXBzZWR9bXMsIHdoaWNoIGlzIG1vcmUgdGhhbiB0aGUgd2FybmluZyB0aHJlc2hvbGQgb2YgJHttYXhEZWxheX1tcy4gXHJcbklmIHlvdXIgc3RhdGUgb3IgYWN0aW9ucyBhcmUgdmVyeSBsYXJnZSwgeW91IG1heSB3YW50IHRvIGRpc2FibGUgdGhlIG1pZGRsZXdhcmUgYXMgaXQgbWlnaHQgY2F1c2UgdG9vIG11Y2ggb2YgYSBzbG93ZG93biBpbiBkZXZlbG9wbWVudCBtb2RlLiBTZWUgaHR0cHM6Ly9yZWR1eC10b29sa2l0LmpzLm9yZy9hcGkvZ2V0RGVmYXVsdE1pZGRsZXdhcmUgZm9yIGluc3RydWN0aW9ucy5cclxuSXQgaXMgZGlzYWJsZWQgaW4gcHJvZHVjdGlvbiBidWlsZHMsIHNvIHlvdSBkb24ndCBuZWVkIHRvIHdvcnJ5IGFib3V0IHRoYXQuYClcclxuICAgICAgfVxyXG4gICAgfSxcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTWlkZGxld2FyZUFycmF5PFxyXG4gIE1pZGRsZXdhcmVzIGV4dGVuZHMgTWlkZGxld2FyZTxhbnksIGFueT5bXVxyXG4+IGV4dGVuZHMgQXJyYXk8TWlkZGxld2FyZXNbbnVtYmVyXT4ge1xyXG4gIGNvbnN0cnVjdG9yKC4uLml0ZW1zOiBNaWRkbGV3YXJlcylcclxuICBjb25zdHJ1Y3RvciguLi5hcmdzOiBhbnlbXSkge1xyXG4gICAgc3VwZXIoLi4uYXJncylcclxuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBNaWRkbGV3YXJlQXJyYXkucHJvdG90eXBlKVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldCBbU3ltYm9sLnNwZWNpZXNdKCkge1xyXG4gICAgcmV0dXJuIE1pZGRsZXdhcmVBcnJheSBhcyBhbnlcclxuICB9XHJcblxyXG4gIGNvbmNhdDxBZGRpdGlvbmFsTWlkZGxld2FyZXMgZXh0ZW5kcyBSZWFkb25seUFycmF5PE1pZGRsZXdhcmU8YW55LCBhbnk+Pj4oXHJcbiAgICBpdGVtczogQWRkaXRpb25hbE1pZGRsZXdhcmVzXHJcbiAgKTogTWlkZGxld2FyZUFycmF5PFsuLi5NaWRkbGV3YXJlcywgLi4uQWRkaXRpb25hbE1pZGRsZXdhcmVzXT5cclxuXHJcbiAgY29uY2F0PEFkZGl0aW9uYWxNaWRkbGV3YXJlcyBleHRlbmRzIFJlYWRvbmx5QXJyYXk8TWlkZGxld2FyZTxhbnksIGFueT4+PihcclxuICAgIC4uLml0ZW1zOiBBZGRpdGlvbmFsTWlkZGxld2FyZXNcclxuICApOiBNaWRkbGV3YXJlQXJyYXk8Wy4uLk1pZGRsZXdhcmVzLCAuLi5BZGRpdGlvbmFsTWlkZGxld2FyZXNdPlxyXG4gIGNvbmNhdCguLi5hcnI6IGFueVtdKSB7XHJcbiAgICByZXR1cm4gc3VwZXIuY29uY2F0LmFwcGx5KHRoaXMsIGFycilcclxuICB9XHJcblxyXG4gIHByZXBlbmQ8QWRkaXRpb25hbE1pZGRsZXdhcmVzIGV4dGVuZHMgUmVhZG9ubHlBcnJheTxNaWRkbGV3YXJlPGFueSwgYW55Pj4+KFxyXG4gICAgaXRlbXM6IEFkZGl0aW9uYWxNaWRkbGV3YXJlc1xyXG4gICk6IE1pZGRsZXdhcmVBcnJheTxbLi4uQWRkaXRpb25hbE1pZGRsZXdhcmVzLCAuLi5NaWRkbGV3YXJlc10+XHJcblxyXG4gIHByZXBlbmQ8QWRkaXRpb25hbE1pZGRsZXdhcmVzIGV4dGVuZHMgUmVhZG9ubHlBcnJheTxNaWRkbGV3YXJlPGFueSwgYW55Pj4+KFxyXG4gICAgLi4uaXRlbXM6IEFkZGl0aW9uYWxNaWRkbGV3YXJlc1xyXG4gICk6IE1pZGRsZXdhcmVBcnJheTxbLi4uQWRkaXRpb25hbE1pZGRsZXdhcmVzLCAuLi5NaWRkbGV3YXJlc10+XHJcblxyXG4gIHByZXBlbmQoLi4uYXJyOiBhbnlbXSkge1xyXG4gICAgaWYgKGFyci5sZW5ndGggPT09IDEgJiYgQXJyYXkuaXNBcnJheShhcnJbMF0pKSB7XHJcbiAgICAgIHJldHVybiBuZXcgTWlkZGxld2FyZUFycmF5KC4uLmFyclswXS5jb25jYXQodGhpcykpXHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3IE1pZGRsZXdhcmVBcnJheSguLi5hcnIuY29uY2F0KHRoaXMpKVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgdHlwZSB7IE1pZGRsZXdhcmUsIEFueUFjdGlvbiB9IGZyb20gJ3JlZHV4J1xyXG5pbXBvcnQgdHlwZSB7IFRodW5rTWlkZGxld2FyZSB9IGZyb20gJ3JlZHV4LXRodW5rJ1xyXG5pbXBvcnQgdGh1bmtNaWRkbGV3YXJlIGZyb20gJ3JlZHV4LXRodW5rJ1xyXG5pbXBvcnQgdHlwZSB7IEltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZU9wdGlvbnMgfSBmcm9tICcuL2ltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZSdcclxuLyogUFJPRF9TVEFSVF9SRU1PVkVfVU1EICovXHJcbmltcG9ydCB7IGNyZWF0ZUltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZSB9IGZyb20gJy4vaW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlJ1xyXG4vKiBQUk9EX1NUT1BfUkVNT1ZFX1VNRCAqL1xyXG5cclxuaW1wb3J0IHR5cGUgeyBTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmVPcHRpb25zIH0gZnJvbSAnLi9zZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUnXHJcbmltcG9ydCB7IGNyZWF0ZVNlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZSB9IGZyb20gJy4vc2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlJ1xyXG5pbXBvcnQgdHlwZSB7IEV4Y2x1ZGVGcm9tVHVwbGUgfSBmcm9tICcuL3RzSGVscGVycydcclxuaW1wb3J0IHsgTWlkZGxld2FyZUFycmF5IH0gZnJvbSAnLi91dGlscydcclxuXHJcbmZ1bmN0aW9uIGlzQm9vbGVhbih4OiBhbnkpOiB4IGlzIGJvb2xlYW4ge1xyXG4gIHJldHVybiB0eXBlb2YgeCA9PT0gJ2Jvb2xlYW4nXHJcbn1cclxuXHJcbmludGVyZmFjZSBUaHVua09wdGlvbnM8RSA9IGFueT4ge1xyXG4gIGV4dHJhQXJndW1lbnQ6IEVcclxufVxyXG5cclxuaW50ZXJmYWNlIEdldERlZmF1bHRNaWRkbGV3YXJlT3B0aW9ucyB7XHJcbiAgdGh1bms/OiBib29sZWFuIHwgVGh1bmtPcHRpb25zXHJcbiAgaW1tdXRhYmxlQ2hlY2s/OiBib29sZWFuIHwgSW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlT3B0aW9uc1xyXG4gIHNlcmlhbGl6YWJsZUNoZWNrPzogYm9vbGVhbiB8IFNlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZU9wdGlvbnNcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgVGh1bmtNaWRkbGV3YXJlRm9yPFxyXG4gIFMsXHJcbiAgTyBleHRlbmRzIEdldERlZmF1bHRNaWRkbGV3YXJlT3B0aW9ucyA9IHt9XHJcbj4gPSBPIGV4dGVuZHMge1xyXG4gIHRodW5rOiBmYWxzZVxyXG59XHJcbiAgPyBuZXZlclxyXG4gIDogTyBleHRlbmRzIHsgdGh1bms6IHsgZXh0cmFBcmd1bWVudDogaW5mZXIgRSB9IH1cclxuICA/IFRodW5rTWlkZGxld2FyZTxTLCBBbnlBY3Rpb24sIEU+XHJcbiAgOiBUaHVua01pZGRsZXdhcmU8UywgQW55QWN0aW9uPlxyXG5cclxuZXhwb3J0IHR5cGUgQ3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlPFMgPSBhbnk+ID0gPFxyXG4gIE8gZXh0ZW5kcyBQYXJ0aWFsPEdldERlZmF1bHRNaWRkbGV3YXJlT3B0aW9ucz4gPSB7XHJcbiAgICB0aHVuazogdHJ1ZVxyXG4gICAgaW1tdXRhYmxlQ2hlY2s6IHRydWVcclxuICAgIHNlcmlhbGl6YWJsZUNoZWNrOiB0cnVlXHJcbiAgfVxyXG4+KFxyXG4gIG9wdGlvbnM/OiBPXHJcbikgPT4gTWlkZGxld2FyZUFycmF5PEV4Y2x1ZGVGcm9tVHVwbGU8W1RodW5rTWlkZGxld2FyZUZvcjxTLCBPPl0sIG5ldmVyPj5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjdXJyeUdldERlZmF1bHRNaWRkbGV3YXJlPFxyXG4gIFMgPSBhbnlcclxuPigpOiBDdXJyaWVkR2V0RGVmYXVsdE1pZGRsZXdhcmU8Uz4ge1xyXG4gIHJldHVybiBmdW5jdGlvbiBjdXJyaWVkR2V0RGVmYXVsdE1pZGRsZXdhcmUob3B0aW9ucykge1xyXG4gICAgcmV0dXJuIGdldERlZmF1bHRNaWRkbGV3YXJlKG9wdGlvbnMpXHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhbnkgYXJyYXkgY29udGFpbmluZyB0aGUgZGVmYXVsdCBtaWRkbGV3YXJlIGluc3RhbGxlZCBieVxyXG4gKiBgY29uZmlndXJlU3RvcmUoKWAuIFVzZWZ1bCBpZiB5b3Ugd2FudCB0byBjb25maWd1cmUgeW91ciBzdG9yZSB3aXRoIGEgY3VzdG9tXHJcbiAqIGBtaWRkbGV3YXJlYCBhcnJheSBidXQgc3RpbGwga2VlcCB0aGUgZGVmYXVsdCBzZXQuXHJcbiAqXHJcbiAqIEByZXR1cm4gVGhlIGRlZmF1bHQgbWlkZGxld2FyZSB1c2VkIGJ5IGBjb25maWd1cmVTdG9yZSgpYC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKlxyXG4gKiBAZGVwcmVjYXRlZCBQcmVmZXIgdG8gdXNlIHRoZSBjYWxsYmFjayBub3RhdGlvbiBmb3IgdGhlIGBtaWRkbGV3YXJlYCBvcHRpb24gaW4gYGNvbmZpZ3VyZVN0b3JlYFxyXG4gKiB0byBhY2Nlc3MgYSBwcmUtdHlwZWQgYGdldERlZmF1bHRNaWRkbGV3YXJlYCBpbnN0ZWFkLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRNaWRkbGV3YXJlPFxyXG4gIFMgPSBhbnksXHJcbiAgTyBleHRlbmRzIFBhcnRpYWw8R2V0RGVmYXVsdE1pZGRsZXdhcmVPcHRpb25zPiA9IHtcclxuICAgIHRodW5rOiB0cnVlXHJcbiAgICBpbW11dGFibGVDaGVjazogdHJ1ZVxyXG4gICAgc2VyaWFsaXphYmxlQ2hlY2s6IHRydWVcclxuICB9XHJcbj4oXHJcbiAgb3B0aW9uczogTyA9IHt9IGFzIE9cclxuKTogTWlkZGxld2FyZUFycmF5PEV4Y2x1ZGVGcm9tVHVwbGU8W1RodW5rTWlkZGxld2FyZUZvcjxTLCBPPl0sIG5ldmVyPj4ge1xyXG4gIGNvbnN0IHtcclxuICAgIHRodW5rID0gdHJ1ZSxcclxuICAgIGltbXV0YWJsZUNoZWNrID0gdHJ1ZSxcclxuICAgIHNlcmlhbGl6YWJsZUNoZWNrID0gdHJ1ZSxcclxuICB9ID0gb3B0aW9uc1xyXG5cclxuICBsZXQgbWlkZGxld2FyZUFycmF5ID0gbmV3IE1pZGRsZXdhcmVBcnJheTxNaWRkbGV3YXJlW10+KClcclxuXHJcbiAgaWYgKHRodW5rKSB7XHJcbiAgICBpZiAoaXNCb29sZWFuKHRodW5rKSkge1xyXG4gICAgICBtaWRkbGV3YXJlQXJyYXkucHVzaCh0aHVua01pZGRsZXdhcmUpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBtaWRkbGV3YXJlQXJyYXkucHVzaChcclxuICAgICAgICB0aHVua01pZGRsZXdhcmUud2l0aEV4dHJhQXJndW1lbnQodGh1bmsuZXh0cmFBcmd1bWVudClcclxuICAgICAgKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcclxuICAgIGlmIChpbW11dGFibGVDaGVjaykge1xyXG4gICAgICAvKiBQUk9EX1NUQVJUX1JFTU9WRV9VTUQgKi9cclxuICAgICAgbGV0IGltbXV0YWJsZU9wdGlvbnM6IEltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZU9wdGlvbnMgPSB7fVxyXG5cclxuICAgICAgaWYgKCFpc0Jvb2xlYW4oaW1tdXRhYmxlQ2hlY2spKSB7XHJcbiAgICAgICAgaW1tdXRhYmxlT3B0aW9ucyA9IGltbXV0YWJsZUNoZWNrXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG1pZGRsZXdhcmVBcnJheS51bnNoaWZ0KFxyXG4gICAgICAgIGNyZWF0ZUltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZShpbW11dGFibGVPcHRpb25zKVxyXG4gICAgICApXHJcbiAgICAgIC8qIFBST0RfU1RPUF9SRU1PVkVfVU1EICovXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHNlcmlhbGl6YWJsZUNoZWNrKSB7XHJcbiAgICAgIGxldCBzZXJpYWxpemFibGVPcHRpb25zOiBTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmVPcHRpb25zID0ge31cclxuXHJcbiAgICAgIGlmICghaXNCb29sZWFuKHNlcmlhbGl6YWJsZUNoZWNrKSkge1xyXG4gICAgICAgIHNlcmlhbGl6YWJsZU9wdGlvbnMgPSBzZXJpYWxpemFibGVDaGVja1xyXG4gICAgICB9XHJcblxyXG4gICAgICBtaWRkbGV3YXJlQXJyYXkucHVzaChcclxuICAgICAgICBjcmVhdGVTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUoc2VyaWFsaXphYmxlT3B0aW9ucylcclxuICAgICAgKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG1pZGRsZXdhcmVBcnJheSBhcyBhbnlcclxufVxyXG4iLCJpbXBvcnQgdHlwZSB7IEFjdGlvbiB9IGZyb20gJ3JlZHV4J1xyXG5pbXBvcnQgdHlwZSB7XHJcbiAgSXNVbmtub3duT3JOb25JbmZlcnJhYmxlLFxyXG4gIElmTWF5YmVVbmRlZmluZWQsXHJcbiAgSWZWb2lkLFxyXG4gIElzQW55LFxyXG59IGZyb20gJy4vdHNIZWxwZXJzJ1xyXG5pbXBvcnQgaXNQbGFpbk9iamVjdCBmcm9tICcuL2lzUGxhaW5PYmplY3QnXHJcblxyXG4vKipcclxuICogQW4gYWN0aW9uIHdpdGggYSBzdHJpbmcgdHlwZSBhbmQgYW4gYXNzb2NpYXRlZCBwYXlsb2FkLiBUaGlzIGlzIHRoZVxyXG4gKiB0eXBlIG9mIGFjdGlvbiByZXR1cm5lZCBieSBgY3JlYXRlQWN0aW9uKClgIGFjdGlvbiBjcmVhdG9ycy5cclxuICpcclxuICogQHRlbXBsYXRlIFAgVGhlIHR5cGUgb2YgdGhlIGFjdGlvbidzIHBheWxvYWQuXHJcbiAqIEB0ZW1wbGF0ZSBUIHRoZSB0eXBlIHVzZWQgZm9yIHRoZSBhY3Rpb24gdHlwZS5cclxuICogQHRlbXBsYXRlIE0gVGhlIHR5cGUgb2YgdGhlIGFjdGlvbidzIG1ldGEgKG9wdGlvbmFsKVxyXG4gKiBAdGVtcGxhdGUgRSBUaGUgdHlwZSBvZiB0aGUgYWN0aW9uJ3MgZXJyb3IgKG9wdGlvbmFsKVxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBQYXlsb2FkQWN0aW9uPFxyXG4gIFAgPSB2b2lkLFxyXG4gIFQgZXh0ZW5kcyBzdHJpbmcgPSBzdHJpbmcsXHJcbiAgTSA9IG5ldmVyLFxyXG4gIEUgPSBuZXZlclxyXG4+ID0ge1xyXG4gIHBheWxvYWQ6IFBcclxuICB0eXBlOiBUXHJcbn0gJiAoW01dIGV4dGVuZHMgW25ldmVyXVxyXG4gID8ge31cclxuICA6IHtcclxuICAgICAgbWV0YTogTVxyXG4gICAgfSkgJlxyXG4gIChbRV0gZXh0ZW5kcyBbbmV2ZXJdXHJcbiAgICA/IHt9XHJcbiAgICA6IHtcclxuICAgICAgICBlcnJvcjogRVxyXG4gICAgICB9KVxyXG5cclxuLyoqXHJcbiAqIEEgXCJwcmVwYXJlXCIgbWV0aG9kIHRvIGJlIHVzZWQgYXMgdGhlIHNlY29uZCBwYXJhbWV0ZXIgb2YgYGNyZWF0ZUFjdGlvbmAuXHJcbiAqIFRha2VzIGFueSBudW1iZXIgb2YgYXJndW1lbnRzIGFuZCByZXR1cm5zIGEgRmx1eCBTdGFuZGFyZCBBY3Rpb24gd2l0aG91dFxyXG4gKiB0eXBlICh3aWxsIGJlIGFkZGVkIGxhdGVyKSB0aGF0ICptdXN0KiBjb250YWluIGEgcGF5bG9hZCAobWlnaHQgYmUgdW5kZWZpbmVkKS5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IHR5cGUgUHJlcGFyZUFjdGlvbjxQPiA9XHJcbiAgfCAoKC4uLmFyZ3M6IGFueVtdKSA9PiB7IHBheWxvYWQ6IFAgfSlcclxuICB8ICgoLi4uYXJnczogYW55W10pID0+IHsgcGF5bG9hZDogUDsgbWV0YTogYW55IH0pXHJcbiAgfCAoKC4uLmFyZ3M6IGFueVtdKSA9PiB7IHBheWxvYWQ6IFA7IGVycm9yOiBhbnkgfSlcclxuICB8ICgoLi4uYXJnczogYW55W10pID0+IHsgcGF5bG9hZDogUDsgbWV0YTogYW55OyBlcnJvcjogYW55IH0pXHJcblxyXG4vKipcclxuICogSW50ZXJuYWwgdmVyc2lvbiBvZiBgQWN0aW9uQ3JlYXRvcldpdGhQcmVwYXJlZFBheWxvYWRgLiBOb3QgdG8gYmUgdXNlZCBleHRlcm5hbGx5LlxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmV4cG9ydCB0eXBlIF9BY3Rpb25DcmVhdG9yV2l0aFByZXBhcmVkUGF5bG9hZDxcclxuICBQQSBleHRlbmRzIFByZXBhcmVBY3Rpb248YW55PiB8IHZvaWQsXHJcbiAgVCBleHRlbmRzIHN0cmluZyA9IHN0cmluZ1xyXG4+ID0gUEEgZXh0ZW5kcyBQcmVwYXJlQWN0aW9uPGluZmVyIFA+XHJcbiAgPyBBY3Rpb25DcmVhdG9yV2l0aFByZXBhcmVkUGF5bG9hZDxcclxuICAgICAgUGFyYW1ldGVyczxQQT4sXHJcbiAgICAgIFAsXHJcbiAgICAgIFQsXHJcbiAgICAgIFJldHVyblR5cGU8UEE+IGV4dGVuZHMge1xyXG4gICAgICAgIGVycm9yOiBpbmZlciBFXHJcbiAgICAgIH1cclxuICAgICAgICA/IEVcclxuICAgICAgICA6IG5ldmVyLFxyXG4gICAgICBSZXR1cm5UeXBlPFBBPiBleHRlbmRzIHtcclxuICAgICAgICBtZXRhOiBpbmZlciBNXHJcbiAgICAgIH1cclxuICAgICAgICA/IE1cclxuICAgICAgICA6IG5ldmVyXHJcbiAgICA+XHJcbiAgOiB2b2lkXHJcblxyXG4vKipcclxuICogQmFzaWMgdHlwZSBmb3IgYWxsIGFjdGlvbiBjcmVhdG9ycy5cclxuICpcclxuICogQGluaGVyaXRkb2Mge3JlZHV4I0FjdGlvbkNyZWF0b3J9XHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEJhc2VBY3Rpb25DcmVhdG9yPFAsIFQgZXh0ZW5kcyBzdHJpbmcsIE0gPSBuZXZlciwgRSA9IG5ldmVyPiB7XHJcbiAgdHlwZTogVFxyXG4gIG1hdGNoOiAoYWN0aW9uOiBBY3Rpb248dW5rbm93bj4pID0+IGFjdGlvbiBpcyBQYXlsb2FkQWN0aW9uPFAsIFQsIE0sIEU+XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbiBhY3Rpb24gY3JlYXRvciB0aGF0IHRha2VzIG11bHRpcGxlIGFyZ3VtZW50cyB0aGF0IGFyZSBwYXNzZWRcclxuICogdG8gYSBgUHJlcGFyZUFjdGlvbmAgbWV0aG9kIHRvIGNyZWF0ZSB0aGUgZmluYWwgQWN0aW9uLlxyXG4gKiBAdHlwZVBhcmFtIEFyZ3MgYXJndW1lbnRzIGZvciB0aGUgYWN0aW9uIGNyZWF0b3IgZnVuY3Rpb25cclxuICogQHR5cGVQYXJhbSBQIGBwYXlsb2FkYCB0eXBlXHJcbiAqIEB0eXBlUGFyYW0gVCBgdHlwZWAgbmFtZVxyXG4gKiBAdHlwZVBhcmFtIEUgb3B0aW9uYWwgYGVycm9yYCB0eXBlXHJcbiAqIEB0eXBlUGFyYW0gTSBvcHRpb25hbCBgbWV0YWAgdHlwZVxyXG4gKlxyXG4gKiBAaW5oZXJpdGRvYyB7cmVkdXgjQWN0aW9uQ3JlYXRvcn1cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBBY3Rpb25DcmVhdG9yV2l0aFByZXBhcmVkUGF5bG9hZDxcclxuICBBcmdzIGV4dGVuZHMgdW5rbm93bltdLFxyXG4gIFAsXHJcbiAgVCBleHRlbmRzIHN0cmluZyA9IHN0cmluZyxcclxuICBFID0gbmV2ZXIsXHJcbiAgTSA9IG5ldmVyXHJcbj4gZXh0ZW5kcyBCYXNlQWN0aW9uQ3JlYXRvcjxQLCBULCBNLCBFPiB7XHJcbiAgLyoqXHJcbiAgICogQ2FsbGluZyB0aGlzIHtAbGluayByZWR1eCNBY3Rpb25DcmVhdG9yfSB3aXRoIGBBcmdzYCB3aWxsIHJldHVyblxyXG4gICAqIGFuIEFjdGlvbiB3aXRoIGEgcGF5bG9hZCBvZiB0eXBlIGBQYCBhbmQgKGRlcGVuZGluZyBvbiB0aGUgYFByZXBhcmVBY3Rpb25gXHJcbiAgICogbWV0aG9kIHVzZWQpIGEgYG1ldGFgLSBhbmQgYGVycm9yYCBwcm9wZXJ0eSBvZiB0eXBlcyBgTWAgYW5kIGBFYCByZXNwZWN0aXZlbHkuXHJcbiAgICovXHJcbiAgKC4uLmFyZ3M6IEFyZ3MpOiBQYXlsb2FkQWN0aW9uPFAsIFQsIE0sIEU+XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbiBhY3Rpb24gY3JlYXRvciBvZiB0eXBlIGBUYCB0aGF0IHRha2VzIGFuIG9wdGlvbmFsIHBheWxvYWQgb2YgdHlwZSBgUGAuXHJcbiAqXHJcbiAqIEBpbmhlcml0ZG9jIHtyZWR1eCNBY3Rpb25DcmVhdG9yfVxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEFjdGlvbkNyZWF0b3JXaXRoT3B0aW9uYWxQYXlsb2FkPFAsIFQgZXh0ZW5kcyBzdHJpbmcgPSBzdHJpbmc+XHJcbiAgZXh0ZW5kcyBCYXNlQWN0aW9uQ3JlYXRvcjxQLCBUPiB7XHJcbiAgLyoqXHJcbiAgICogQ2FsbGluZyB0aGlzIHtAbGluayByZWR1eCNBY3Rpb25DcmVhdG9yfSB3aXRoIGFuIGFyZ3VtZW50IHdpbGxcclxuICAgKiByZXR1cm4gYSB7QGxpbmsgUGF5bG9hZEFjdGlvbn0gb2YgdHlwZSBgVGAgd2l0aCBhIHBheWxvYWQgb2YgYFBgLlxyXG4gICAqIENhbGxpbmcgaXQgd2l0aG91dCBhbiBhcmd1bWVudCB3aWxsIHJldHVybiBhIFBheWxvYWRBY3Rpb24gd2l0aCBhIHBheWxvYWQgb2YgYHVuZGVmaW5lZGAuXHJcbiAgICovXHJcbiAgKHBheWxvYWQ/OiBQKTogUGF5bG9hZEFjdGlvbjxQLCBUPlxyXG59XHJcblxyXG4vKipcclxuICogQW4gYWN0aW9uIGNyZWF0b3Igb2YgdHlwZSBgVGAgdGhhdCB0YWtlcyBubyBwYXlsb2FkLlxyXG4gKlxyXG4gKiBAaW5oZXJpdGRvYyB7cmVkdXgjQWN0aW9uQ3JlYXRvcn1cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBBY3Rpb25DcmVhdG9yV2l0aG91dFBheWxvYWQ8VCBleHRlbmRzIHN0cmluZyA9IHN0cmluZz5cclxuICBleHRlbmRzIEJhc2VBY3Rpb25DcmVhdG9yPHVuZGVmaW5lZCwgVD4ge1xyXG4gIC8qKlxyXG4gICAqIENhbGxpbmcgdGhpcyB7QGxpbmsgcmVkdXgjQWN0aW9uQ3JlYXRvcn0gd2lsbFxyXG4gICAqIHJldHVybiBhIHtAbGluayBQYXlsb2FkQWN0aW9ufSBvZiB0eXBlIGBUYCB3aXRoIGEgcGF5bG9hZCBvZiBgdW5kZWZpbmVkYFxyXG4gICAqL1xyXG4gICgpOiBQYXlsb2FkQWN0aW9uPHVuZGVmaW5lZCwgVD5cclxufVxyXG5cclxuLyoqXHJcbiAqIEFuIGFjdGlvbiBjcmVhdG9yIG9mIHR5cGUgYFRgIHRoYXQgcmVxdWlyZXMgYSBwYXlsb2FkIG9mIHR5cGUgUC5cclxuICpcclxuICogQGluaGVyaXRkb2Mge3JlZHV4I0FjdGlvbkNyZWF0b3J9XHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQWN0aW9uQ3JlYXRvcldpdGhQYXlsb2FkPFAsIFQgZXh0ZW5kcyBzdHJpbmcgPSBzdHJpbmc+XHJcbiAgZXh0ZW5kcyBCYXNlQWN0aW9uQ3JlYXRvcjxQLCBUPiB7XHJcbiAgLyoqXHJcbiAgICogQ2FsbGluZyB0aGlzIHtAbGluayByZWR1eCNBY3Rpb25DcmVhdG9yfSB3aXRoIGFuIGFyZ3VtZW50IHdpbGxcclxuICAgKiByZXR1cm4gYSB7QGxpbmsgUGF5bG9hZEFjdGlvbn0gb2YgdHlwZSBgVGAgd2l0aCBhIHBheWxvYWQgb2YgYFBgXHJcbiAgICovXHJcbiAgKHBheWxvYWQ6IFApOiBQYXlsb2FkQWN0aW9uPFAsIFQ+XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbiBhY3Rpb24gY3JlYXRvciBvZiB0eXBlIGBUYCB3aG9zZSBgcGF5bG9hZGAgdHlwZSBjb3VsZCBub3QgYmUgaW5mZXJyZWQuIEFjY2VwdHMgZXZlcnl0aGluZyBhcyBgcGF5bG9hZGAuXHJcbiAqXHJcbiAqIEBpbmhlcml0ZG9jIHtyZWR1eCNBY3Rpb25DcmVhdG9yfVxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEFjdGlvbkNyZWF0b3JXaXRoTm9uSW5mZXJyYWJsZVBheWxvYWQ8XHJcbiAgVCBleHRlbmRzIHN0cmluZyA9IHN0cmluZ1xyXG4+IGV4dGVuZHMgQmFzZUFjdGlvbkNyZWF0b3I8dW5rbm93biwgVD4ge1xyXG4gIC8qKlxyXG4gICAqIENhbGxpbmcgdGhpcyB7QGxpbmsgcmVkdXgjQWN0aW9uQ3JlYXRvcn0gd2l0aCBhbiBhcmd1bWVudCB3aWxsXHJcbiAgICogcmV0dXJuIGEge0BsaW5rIFBheWxvYWRBY3Rpb259IG9mIHR5cGUgYFRgIHdpdGggYSBwYXlsb2FkXHJcbiAgICogb2YgZXhhY3RseSB0aGUgdHlwZSBvZiB0aGUgYXJndW1lbnQuXHJcbiAgICovXHJcbiAgPFBUIGV4dGVuZHMgdW5rbm93bj4ocGF5bG9hZDogUFQpOiBQYXlsb2FkQWN0aW9uPFBULCBUPlxyXG59XHJcblxyXG4vKipcclxuICogQW4gYWN0aW9uIGNyZWF0b3IgdGhhdCBwcm9kdWNlcyBhY3Rpb25zIHdpdGggYSBgcGF5bG9hZGAgYXR0cmlidXRlLlxyXG4gKlxyXG4gKiBAdHlwZVBhcmFtIFAgdGhlIGBwYXlsb2FkYCB0eXBlXHJcbiAqIEB0eXBlUGFyYW0gVCB0aGUgYHR5cGVgIG9mIHRoZSByZXN1bHRpbmcgYWN0aW9uXHJcbiAqIEB0eXBlUGFyYW0gUEEgaWYgdGhlIHJlc3VsdGluZyBhY3Rpb24gaXMgcHJlcHJvY2Vzc2VkIGJ5IGEgYHByZXBhcmVgIG1ldGhvZCwgdGhlIHNpZ25hdHVyZSBvZiBzYWlkIG1ldGhvZC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IHR5cGUgUGF5bG9hZEFjdGlvbkNyZWF0b3I8XHJcbiAgUCA9IHZvaWQsXHJcbiAgVCBleHRlbmRzIHN0cmluZyA9IHN0cmluZyxcclxuICBQQSBleHRlbmRzIFByZXBhcmVBY3Rpb248UD4gfCB2b2lkID0gdm9pZFxyXG4+ID0gSWZQcmVwYXJlQWN0aW9uTWV0aG9kUHJvdmlkZWQ8XHJcbiAgUEEsXHJcbiAgX0FjdGlvbkNyZWF0b3JXaXRoUHJlcGFyZWRQYXlsb2FkPFBBLCBUPixcclxuICAvLyBlbHNlXHJcbiAgSXNBbnk8XHJcbiAgICBQLFxyXG4gICAgQWN0aW9uQ3JlYXRvcldpdGhQYXlsb2FkPGFueSwgVD4sXHJcbiAgICBJc1Vua25vd25Pck5vbkluZmVycmFibGU8XHJcbiAgICAgIFAsXHJcbiAgICAgIEFjdGlvbkNyZWF0b3JXaXRoTm9uSW5mZXJyYWJsZVBheWxvYWQ8VD4sXHJcbiAgICAgIC8vIGVsc2VcclxuICAgICAgSWZWb2lkPFxyXG4gICAgICAgIFAsXHJcbiAgICAgICAgQWN0aW9uQ3JlYXRvcldpdGhvdXRQYXlsb2FkPFQ+LFxyXG4gICAgICAgIC8vIGVsc2VcclxuICAgICAgICBJZk1heWJlVW5kZWZpbmVkPFxyXG4gICAgICAgICAgUCxcclxuICAgICAgICAgIEFjdGlvbkNyZWF0b3JXaXRoT3B0aW9uYWxQYXlsb2FkPFAsIFQ+LFxyXG4gICAgICAgICAgLy8gZWxzZVxyXG4gICAgICAgICAgQWN0aW9uQ3JlYXRvcldpdGhQYXlsb2FkPFAsIFQ+XHJcbiAgICAgICAgPlxyXG4gICAgICA+XHJcbiAgICA+XHJcbiAgPlxyXG4+XHJcblxyXG4vKipcclxuICogQSB1dGlsaXR5IGZ1bmN0aW9uIHRvIGNyZWF0ZSBhbiBhY3Rpb24gY3JlYXRvciBmb3IgdGhlIGdpdmVuIGFjdGlvbiB0eXBlXHJcbiAqIHN0cmluZy4gVGhlIGFjdGlvbiBjcmVhdG9yIGFjY2VwdHMgYSBzaW5nbGUgYXJndW1lbnQsIHdoaWNoIHdpbGwgYmUgaW5jbHVkZWRcclxuICogaW4gdGhlIGFjdGlvbiBvYmplY3QgYXMgYSBmaWVsZCBjYWxsZWQgcGF5bG9hZC4gVGhlIGFjdGlvbiBjcmVhdG9yIGZ1bmN0aW9uXHJcbiAqIHdpbGwgYWxzbyBoYXZlIGl0cyB0b1N0cmluZygpIG92ZXJyaWRlbiBzbyB0aGF0IGl0IHJldHVybnMgdGhlIGFjdGlvbiB0eXBlLFxyXG4gKiBhbGxvd2luZyBpdCB0byBiZSB1c2VkIGluIHJlZHVjZXIgbG9naWMgdGhhdCBpcyBsb29raW5nIGZvciB0aGF0IGFjdGlvbiB0eXBlLlxyXG4gKlxyXG4gKiBAcGFyYW0gdHlwZSBUaGUgYWN0aW9uIHR5cGUgdG8gdXNlIGZvciBjcmVhdGVkIGFjdGlvbnMuXHJcbiAqIEBwYXJhbSBwcmVwYXJlIChvcHRpb25hbCkgYSBtZXRob2QgdGhhdCB0YWtlcyBhbnkgbnVtYmVyIG9mIGFyZ3VtZW50cyBhbmQgcmV0dXJucyB7IHBheWxvYWQgfSBvciB7IHBheWxvYWQsIG1ldGEgfS5cclxuICogICAgICAgICAgICAgICAgSWYgdGhpcyBpcyBnaXZlbiwgdGhlIHJlc3VsdGluZyBhY3Rpb24gY3JlYXRvciB3aWxsIHBhc3MgaXRzIGFyZ3VtZW50cyB0byB0aGlzIG1ldGhvZCB0byBjYWxjdWxhdGUgcGF5bG9hZCAmIG1ldGEuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBY3Rpb248UCA9IHZvaWQsIFQgZXh0ZW5kcyBzdHJpbmcgPSBzdHJpbmc+KFxyXG4gIHR5cGU6IFRcclxuKTogUGF5bG9hZEFjdGlvbkNyZWF0b3I8UCwgVD5cclxuXHJcbi8qKlxyXG4gKiBBIHV0aWxpdHkgZnVuY3Rpb24gdG8gY3JlYXRlIGFuIGFjdGlvbiBjcmVhdG9yIGZvciB0aGUgZ2l2ZW4gYWN0aW9uIHR5cGVcclxuICogc3RyaW5nLiBUaGUgYWN0aW9uIGNyZWF0b3IgYWNjZXB0cyBhIHNpbmdsZSBhcmd1bWVudCwgd2hpY2ggd2lsbCBiZSBpbmNsdWRlZFxyXG4gKiBpbiB0aGUgYWN0aW9uIG9iamVjdCBhcyBhIGZpZWxkIGNhbGxlZCBwYXlsb2FkLiBUaGUgYWN0aW9uIGNyZWF0b3IgZnVuY3Rpb25cclxuICogd2lsbCBhbHNvIGhhdmUgaXRzIHRvU3RyaW5nKCkgb3ZlcnJpZGVuIHNvIHRoYXQgaXQgcmV0dXJucyB0aGUgYWN0aW9uIHR5cGUsXHJcbiAqIGFsbG93aW5nIGl0IHRvIGJlIHVzZWQgaW4gcmVkdWNlciBsb2dpYyB0aGF0IGlzIGxvb2tpbmcgZm9yIHRoYXQgYWN0aW9uIHR5cGUuXHJcbiAqXHJcbiAqIEBwYXJhbSB0eXBlIFRoZSBhY3Rpb24gdHlwZSB0byB1c2UgZm9yIGNyZWF0ZWQgYWN0aW9ucy5cclxuICogQHBhcmFtIHByZXBhcmUgKG9wdGlvbmFsKSBhIG1ldGhvZCB0aGF0IHRha2VzIGFueSBudW1iZXIgb2YgYXJndW1lbnRzIGFuZCByZXR1cm5zIHsgcGF5bG9hZCB9IG9yIHsgcGF5bG9hZCwgbWV0YSB9LlxyXG4gKiAgICAgICAgICAgICAgICBJZiB0aGlzIGlzIGdpdmVuLCB0aGUgcmVzdWx0aW5nIGFjdGlvbiBjcmVhdG9yIHdpbGwgcGFzcyBpdHMgYXJndW1lbnRzIHRvIHRoaXMgbWV0aG9kIHRvIGNhbGN1bGF0ZSBwYXlsb2FkICYgbWV0YS5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUFjdGlvbjxcclxuICBQQSBleHRlbmRzIFByZXBhcmVBY3Rpb248YW55PixcclxuICBUIGV4dGVuZHMgc3RyaW5nID0gc3RyaW5nXHJcbj4oXHJcbiAgdHlwZTogVCxcclxuICBwcmVwYXJlQWN0aW9uOiBQQVxyXG4pOiBQYXlsb2FkQWN0aW9uQ3JlYXRvcjxSZXR1cm5UeXBlPFBBPlsncGF5bG9hZCddLCBULCBQQT5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBY3Rpb24odHlwZTogc3RyaW5nLCBwcmVwYXJlQWN0aW9uPzogRnVuY3Rpb24pOiBhbnkge1xyXG4gIGZ1bmN0aW9uIGFjdGlvbkNyZWF0b3IoLi4uYXJnczogYW55W10pIHtcclxuICAgIGlmIChwcmVwYXJlQWN0aW9uKSB7XHJcbiAgICAgIGxldCBwcmVwYXJlZCA9IHByZXBhcmVBY3Rpb24oLi4uYXJncylcclxuICAgICAgaWYgKCFwcmVwYXJlZCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncHJlcGFyZUFjdGlvbiBkaWQgbm90IHJldHVybiBhbiBvYmplY3QnKVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGUsXHJcbiAgICAgICAgcGF5bG9hZDogcHJlcGFyZWQucGF5bG9hZCxcclxuICAgICAgICAuLi4oJ21ldGEnIGluIHByZXBhcmVkICYmIHsgbWV0YTogcHJlcGFyZWQubWV0YSB9KSxcclxuICAgICAgICAuLi4oJ2Vycm9yJyBpbiBwcmVwYXJlZCAmJiB7IGVycm9yOiBwcmVwYXJlZC5lcnJvciB9KSxcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHsgdHlwZSwgcGF5bG9hZDogYXJnc1swXSB9XHJcbiAgfVxyXG5cclxuICBhY3Rpb25DcmVhdG9yLnRvU3RyaW5nID0gKCkgPT4gYCR7dHlwZX1gXHJcblxyXG4gIGFjdGlvbkNyZWF0b3IudHlwZSA9IHR5cGVcclxuXHJcbiAgYWN0aW9uQ3JlYXRvci5tYXRjaCA9IChhY3Rpb246IEFjdGlvbjx1bmtub3duPik6IGFjdGlvbiBpcyBQYXlsb2FkQWN0aW9uID0+XHJcbiAgICBhY3Rpb24udHlwZSA9PT0gdHlwZVxyXG5cclxuICByZXR1cm4gYWN0aW9uQ3JlYXRvclxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNGU0EoYWN0aW9uOiB1bmtub3duKTogYWN0aW9uIGlzIHtcclxuICB0eXBlOiBzdHJpbmdcclxuICBwYXlsb2FkPzogdW5rbm93blxyXG4gIGVycm9yPzogdW5rbm93blxyXG4gIG1ldGE/OiB1bmtub3duXHJcbn0ge1xyXG4gIHJldHVybiAoXHJcbiAgICBpc1BsYWluT2JqZWN0KGFjdGlvbikgJiZcclxuICAgIHR5cGVvZiAoYWN0aW9uIGFzIGFueSkudHlwZSA9PT0gJ3N0cmluZycgJiZcclxuICAgIE9iamVjdC5rZXlzKGFjdGlvbikuZXZlcnkoaXNWYWxpZEtleSlcclxuICApXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzVmFsaWRLZXkoa2V5OiBzdHJpbmcpIHtcclxuICByZXR1cm4gWyd0eXBlJywgJ3BheWxvYWQnLCAnZXJyb3InLCAnbWV0YSddLmluZGV4T2Yoa2V5KSA+IC0xXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBhY3Rpb24gdHlwZSBvZiB0aGUgYWN0aW9ucyBjcmVhdGVkIGJ5IHRoZSBwYXNzZWRcclxuICogYGNyZWF0ZUFjdGlvbigpYC1nZW5lcmF0ZWQgYWN0aW9uIGNyZWF0b3IgKGFyYml0cmFyeSBhY3Rpb24gY3JlYXRvcnNcclxuICogYXJlIG5vdCBzdXBwb3J0ZWQpLlxyXG4gKlxyXG4gKiBAcGFyYW0gYWN0aW9uIFRoZSBhY3Rpb24gY3JlYXRvciB3aG9zZSBhY3Rpb24gdHlwZSB0byBnZXQuXHJcbiAqIEByZXR1cm5zIFRoZSBhY3Rpb24gdHlwZSB1c2VkIGJ5IHRoZSBhY3Rpb24gY3JlYXRvci5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFR5cGU8VCBleHRlbmRzIHN0cmluZz4oXHJcbiAgYWN0aW9uQ3JlYXRvcjogUGF5bG9hZEFjdGlvbkNyZWF0b3I8YW55LCBUPlxyXG4pOiBUIHtcclxuICByZXR1cm4gYCR7YWN0aW9uQ3JlYXRvcn1gIGFzIFRcclxufVxyXG5cclxuLy8gaGVscGVyIHR5cGVzIGZvciBtb3JlIHJlYWRhYmxlIHR5cGluZ3NcclxuXHJcbnR5cGUgSWZQcmVwYXJlQWN0aW9uTWV0aG9kUHJvdmlkZWQ8XHJcbiAgUEEgZXh0ZW5kcyBQcmVwYXJlQWN0aW9uPGFueT4gfCB2b2lkLFxyXG4gIFRydWUsXHJcbiAgRmFsc2VcclxuPiA9IFBBIGV4dGVuZHMgKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnkgPyBUcnVlIDogRmFsc2VcclxuIiwiaW1wb3J0IHR5cGUgeyBEaXNwYXRjaCwgQW55QWN0aW9uLCBNaWRkbGV3YXJlQVBJIH0gZnJvbSAncmVkdXgnXHJcbmltcG9ydCB0eXBlIHsgVGh1bmtEaXNwYXRjaCB9IGZyb20gJ3JlZHV4LXRodW5rJ1xyXG5pbXBvcnQgeyBjcmVhdGVBY3Rpb24gfSBmcm9tICcuLi9jcmVhdGVBY3Rpb24nXHJcbmltcG9ydCB7IG5hbm9pZCB9IGZyb20gJy4uL25hbm9pZCdcclxuXHJcbmltcG9ydCB0eXBlIHtcclxuICBMaXN0ZW5lck1pZGRsZXdhcmUsXHJcbiAgTGlzdGVuZXJNaWRkbGV3YXJlSW5zdGFuY2UsXHJcbiAgQWRkTGlzdGVuZXJPdmVybG9hZHMsXHJcbiAgQW55TGlzdGVuZXJQcmVkaWNhdGUsXHJcbiAgQ3JlYXRlTGlzdGVuZXJNaWRkbGV3YXJlT3B0aW9ucyxcclxuICBUeXBlZEFkZExpc3RlbmVyLFxyXG4gIFR5cGVkQ3JlYXRlTGlzdGVuZXJFbnRyeSxcclxuICBGYWxsYmFja0FkZExpc3RlbmVyT3B0aW9ucyxcclxuICBMaXN0ZW5lckVudHJ5LFxyXG4gIExpc3RlbmVyRXJyb3JIYW5kbGVyLFxyXG4gIFVuc3Vic2NyaWJlTGlzdGVuZXIsXHJcbiAgVGFrZVBhdHRlcm4sXHJcbiAgTGlzdGVuZXJFcnJvckluZm8sXHJcbiAgRm9ya2VkVGFza0V4ZWN1dG9yLFxyXG4gIEZvcmtlZFRhc2ssXHJcbiAgVHlwZWRSZW1vdmVMaXN0ZW5lcixcclxuICBUYXNrUmVzdWx0LFxyXG4gIEFib3J0U2lnbmFsV2l0aFJlYXNvbixcclxuICBVbnN1YnNjcmliZUxpc3RlbmVyT3B0aW9ucyxcclxufSBmcm9tICcuL3R5cGVzJ1xyXG5pbXBvcnQge1xyXG4gIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24sXHJcbiAgYWRkQWJvcnRTaWduYWxMaXN0ZW5lcixcclxuICBhc3NlcnRGdW5jdGlvbixcclxuICBjYXRjaFJlamVjdGlvbixcclxufSBmcm9tICcuL3V0aWxzJ1xyXG5pbXBvcnQge1xyXG4gIGxpc3RlbmVyQ2FuY2VsbGVkLFxyXG4gIGxpc3RlbmVyQ29tcGxldGVkLFxyXG4gIFRhc2tBYm9ydEVycm9yLFxyXG4gIHRhc2tDYW5jZWxsZWQsXHJcbiAgdGFza0NvbXBsZXRlZCxcclxufSBmcm9tICcuL2V4Y2VwdGlvbnMnXHJcbmltcG9ydCB7XHJcbiAgcnVuVGFzayxcclxuICBwcm9taXNpZnlBYm9ydFNpZ25hbCxcclxuICB2YWxpZGF0ZUFjdGl2ZSxcclxuICBjcmVhdGVQYXVzZSxcclxuICBjcmVhdGVEZWxheSxcclxufSBmcm9tICcuL3Rhc2snXHJcbmV4cG9ydCB7IFRhc2tBYm9ydEVycm9yIH0gZnJvbSAnLi9leGNlcHRpb25zJ1xyXG5leHBvcnQgdHlwZSB7XHJcbiAgTGlzdGVuZXJFZmZlY3QsXHJcbiAgTGlzdGVuZXJNaWRkbGV3YXJlLFxyXG4gIExpc3RlbmVyRWZmZWN0QVBJLFxyXG4gIExpc3RlbmVyTWlkZGxld2FyZUluc3RhbmNlLFxyXG4gIENyZWF0ZUxpc3RlbmVyTWlkZGxld2FyZU9wdGlvbnMsXHJcbiAgTGlzdGVuZXJFcnJvckhhbmRsZXIsXHJcbiAgVHlwZWRTdGFydExpc3RlbmluZyxcclxuICBUeXBlZEFkZExpc3RlbmVyLFxyXG4gIFR5cGVkU3RvcExpc3RlbmluZyxcclxuICBUeXBlZFJlbW92ZUxpc3RlbmVyLFxyXG4gIFVuc3Vic2NyaWJlTGlzdGVuZXIsXHJcbiAgVW5zdWJzY3JpYmVMaXN0ZW5lck9wdGlvbnMsXHJcbiAgRm9ya2VkVGFza0V4ZWN1dG9yLFxyXG4gIEZvcmtlZFRhc2ssXHJcbiAgRm9ya2VkVGFza0FQSSxcclxuICBBc3luY1Rhc2tFeGVjdXRvcixcclxuICBTeW5jVGFza0V4ZWN1dG9yLFxyXG4gIFRhc2tDYW5jZWxsZWQsXHJcbiAgVGFza1JlamVjdGVkLFxyXG4gIFRhc2tSZXNvbHZlZCxcclxuICBUYXNrUmVzdWx0LFxyXG59IGZyb20gJy4vdHlwZXMnXHJcblxyXG4vL092ZXJseS1hZ2dyZXNzaXZlIGJ5dGUtc2hhdmluZ1xyXG5jb25zdCB7IGFzc2lnbiB9ID0gT2JqZWN0XHJcbi8qKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmNvbnN0IElOVEVSTkFMX05JTF9UT0tFTiA9IHt9IGFzIGNvbnN0XHJcblxyXG5jb25zdCBhbG0gPSAnbGlzdGVuZXJNaWRkbGV3YXJlJyBhcyBjb25zdFxyXG5cclxuY29uc3QgY3JlYXRlRm9yayA9IChwYXJlbnRBYm9ydFNpZ25hbDogQWJvcnRTaWduYWxXaXRoUmVhc29uPHVua25vd24+KSA9PiB7XHJcbiAgY29uc3QgbGlua0NvbnRyb2xsZXJzID0gKGNvbnRyb2xsZXI6IEFib3J0Q29udHJvbGxlcikgPT5cclxuICAgIGFkZEFib3J0U2lnbmFsTGlzdGVuZXIocGFyZW50QWJvcnRTaWduYWwsICgpID0+XHJcbiAgICAgIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oY29udHJvbGxlciwgcGFyZW50QWJvcnRTaWduYWwucmVhc29uKVxyXG4gICAgKVxyXG5cclxuICByZXR1cm4gPFQ+KHRhc2tFeGVjdXRvcjogRm9ya2VkVGFza0V4ZWN1dG9yPFQ+KTogRm9ya2VkVGFzazxUPiA9PiB7XHJcbiAgICBhc3NlcnRGdW5jdGlvbih0YXNrRXhlY3V0b3IsICd0YXNrRXhlY3V0b3InKVxyXG4gICAgY29uc3QgY2hpbGRBYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKClcclxuXHJcbiAgICBsaW5rQ29udHJvbGxlcnMoY2hpbGRBYm9ydENvbnRyb2xsZXIpXHJcblxyXG4gICAgY29uc3QgcmVzdWx0ID0gcnVuVGFzazxUPihcclxuICAgICAgYXN5bmMgKCk6IFByb21pc2U8VD4gPT4ge1xyXG4gICAgICAgIHZhbGlkYXRlQWN0aXZlKHBhcmVudEFib3J0U2lnbmFsKVxyXG4gICAgICAgIHZhbGlkYXRlQWN0aXZlKGNoaWxkQWJvcnRDb250cm9sbGVyLnNpZ25hbClcclxuICAgICAgICBjb25zdCByZXN1bHQgPSAoYXdhaXQgdGFza0V4ZWN1dG9yKHtcclxuICAgICAgICAgIHBhdXNlOiBjcmVhdGVQYXVzZShjaGlsZEFib3J0Q29udHJvbGxlci5zaWduYWwpLFxyXG4gICAgICAgICAgZGVsYXk6IGNyZWF0ZURlbGF5KGNoaWxkQWJvcnRDb250cm9sbGVyLnNpZ25hbCksXHJcbiAgICAgICAgICBzaWduYWw6IGNoaWxkQWJvcnRDb250cm9sbGVyLnNpZ25hbCxcclxuICAgICAgICB9KSkgYXMgVFxyXG4gICAgICAgIHZhbGlkYXRlQWN0aXZlKGNoaWxkQWJvcnRDb250cm9sbGVyLnNpZ25hbClcclxuICAgICAgICByZXR1cm4gcmVzdWx0XHJcbiAgICAgIH0sXHJcbiAgICAgICgpID0+IGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oY2hpbGRBYm9ydENvbnRyb2xsZXIsIHRhc2tDb21wbGV0ZWQpXHJcbiAgICApXHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcmVzdWx0OiBjcmVhdGVQYXVzZTxUYXNrUmVzdWx0PFQ+PihwYXJlbnRBYm9ydFNpZ25hbCkocmVzdWx0KSxcclxuICAgICAgY2FuY2VsKCkge1xyXG4gICAgICAgIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oY2hpbGRBYm9ydENvbnRyb2xsZXIsIHRhc2tDYW5jZWxsZWQpXHJcbiAgICAgIH0sXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5jb25zdCBjcmVhdGVUYWtlUGF0dGVybiA9IDxTPihcclxuICBzdGFydExpc3RlbmluZzogQWRkTGlzdGVuZXJPdmVybG9hZHM8XHJcbiAgICBVbnN1YnNjcmliZUxpc3RlbmVyLFxyXG4gICAgUyxcclxuICAgIERpc3BhdGNoPEFueUFjdGlvbj5cclxuICA+LFxyXG4gIHNpZ25hbDogQWJvcnRTaWduYWxcclxuKTogVGFrZVBhdHRlcm48Uz4gPT4ge1xyXG4gIC8qKlxyXG4gICAqIEEgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIExpc3RlbmVyUHJlZGljYXRlIGFuZCBhbiBvcHRpb25hbCB0aW1lb3V0LFxyXG4gICAqIGFuZCByZXNvbHZlcyB3aGVuIGVpdGhlciB0aGUgcHJlZGljYXRlIHJldHVybnMgYHRydWVgIGJhc2VkIG9uIGFuIGFjdGlvblxyXG4gICAqIHN0YXRlIGNvbWJpbmF0aW9uIG9yIHdoZW4gdGhlIHRpbWVvdXQgZXhwaXJlcy5cclxuICAgKiBJZiB0aGUgcGFyZW50IGxpc3RlbmVyIGlzIGNhbmNlbGVkIHdoaWxlIHdhaXRpbmcsIHRoaXMgd2lsbCB0aHJvdyBhXHJcbiAgICogVGFza0Fib3J0RXJyb3IuXHJcbiAgICovXHJcbiAgY29uc3QgdGFrZSA9IGFzeW5jIDxQIGV4dGVuZHMgQW55TGlzdGVuZXJQcmVkaWNhdGU8Uz4+KFxyXG4gICAgcHJlZGljYXRlOiBQLFxyXG4gICAgdGltZW91dDogbnVtYmVyIHwgdW5kZWZpbmVkXHJcbiAgKSA9PiB7XHJcbiAgICB2YWxpZGF0ZUFjdGl2ZShzaWduYWwpXHJcblxyXG4gICAgLy8gUGxhY2Vob2xkZXIgdW5zdWJzY3JpYmUgZnVuY3Rpb24gdW50aWwgdGhlIGxpc3RlbmVyIGlzIGFkZGVkXHJcbiAgICBsZXQgdW5zdWJzY3JpYmU6IFVuc3Vic2NyaWJlTGlzdGVuZXIgPSAoKSA9PiB7fVxyXG5cclxuICAgIGNvbnN0IHR1cGxlUHJvbWlzZSA9IG5ldyBQcm9taXNlPFtBbnlBY3Rpb24sIFMsIFNdPigocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAvLyBJbnNpZGUgdGhlIFByb21pc2UsIHdlIHN5bmNocm9ub3VzbHkgYWRkIHRoZSBsaXN0ZW5lci5cclxuICAgICAgdW5zdWJzY3JpYmUgPSBzdGFydExpc3RlbmluZyh7XHJcbiAgICAgICAgcHJlZGljYXRlOiBwcmVkaWNhdGUgYXMgYW55LFxyXG4gICAgICAgIGVmZmVjdDogKGFjdGlvbiwgbGlzdGVuZXJBcGkpOiB2b2lkID0+IHtcclxuICAgICAgICAgIC8vIE9uZS1zaG90IGxpc3RlbmVyIHRoYXQgY2xlYW5zIHVwIGFzIHNvb24gYXMgdGhlIHByZWRpY2F0ZSBwYXNzZXNcclxuICAgICAgICAgIGxpc3RlbmVyQXBpLnVuc3Vic2NyaWJlKClcclxuICAgICAgICAgIC8vIFJlc29sdmUgdGhlIHByb21pc2Ugd2l0aCB0aGUgc2FtZSBhcmd1bWVudHMgdGhlIHByZWRpY2F0ZSBzYXdcclxuICAgICAgICAgIHJlc29sdmUoW1xyXG4gICAgICAgICAgICBhY3Rpb24sXHJcbiAgICAgICAgICAgIGxpc3RlbmVyQXBpLmdldFN0YXRlKCksXHJcbiAgICAgICAgICAgIGxpc3RlbmVyQXBpLmdldE9yaWdpbmFsU3RhdGUoKSxcclxuICAgICAgICAgIF0pXHJcbiAgICAgICAgfSxcclxuICAgICAgfSlcclxuICAgIH0pXHJcblxyXG4gICAgY29uc3QgcHJvbWlzZXM6IChQcm9taXNlPG51bGw+IHwgUHJvbWlzZTxbQW55QWN0aW9uLCBTLCBTXT4pW10gPSBbXHJcbiAgICAgIHByb21pc2lmeUFib3J0U2lnbmFsKHNpZ25hbCksXHJcbiAgICAgIHR1cGxlUHJvbWlzZSxcclxuICAgIF1cclxuXHJcbiAgICBpZiAodGltZW91dCAhPSBudWxsKSB7XHJcbiAgICAgIHByb21pc2VzLnB1c2goXHJcbiAgICAgICAgbmV3IFByb21pc2U8bnVsbD4oKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgdGltZW91dCwgbnVsbCkpXHJcbiAgICAgIClcclxuICAgIH1cclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBvdXRwdXQgPSBhd2FpdCBQcm9taXNlLnJhY2UocHJvbWlzZXMpXHJcblxyXG4gICAgICB2YWxpZGF0ZUFjdGl2ZShzaWduYWwpXHJcbiAgICAgIHJldHVybiBvdXRwdXRcclxuICAgIH0gZmluYWxseSB7XHJcbiAgICAgIC8vIEFsd2F5cyBjbGVhbiB1cCB0aGUgbGlzdGVuZXJcclxuICAgICAgdW5zdWJzY3JpYmUoKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuICgocHJlZGljYXRlOiBBbnlMaXN0ZW5lclByZWRpY2F0ZTxTPiwgdGltZW91dDogbnVtYmVyIHwgdW5kZWZpbmVkKSA9PlxyXG4gICAgY2F0Y2hSZWplY3Rpb24odGFrZShwcmVkaWNhdGUsIHRpbWVvdXQpKSkgYXMgVGFrZVBhdHRlcm48Uz5cclxufVxyXG5cclxuY29uc3QgZ2V0TGlzdGVuZXJFbnRyeVByb3BzRnJvbSA9IChvcHRpb25zOiBGYWxsYmFja0FkZExpc3RlbmVyT3B0aW9ucykgPT4ge1xyXG4gIGxldCB7IHR5cGUsIGFjdGlvbkNyZWF0b3IsIG1hdGNoZXIsIHByZWRpY2F0ZSwgZWZmZWN0IH0gPSBvcHRpb25zXHJcblxyXG4gIGlmICh0eXBlKSB7XHJcbiAgICBwcmVkaWNhdGUgPSBjcmVhdGVBY3Rpb24odHlwZSkubWF0Y2hcclxuICB9IGVsc2UgaWYgKGFjdGlvbkNyZWF0b3IpIHtcclxuICAgIHR5cGUgPSBhY3Rpb25DcmVhdG9yIS50eXBlXHJcbiAgICBwcmVkaWNhdGUgPSBhY3Rpb25DcmVhdG9yLm1hdGNoXHJcbiAgfSBlbHNlIGlmIChtYXRjaGVyKSB7XHJcbiAgICBwcmVkaWNhdGUgPSBtYXRjaGVyXHJcbiAgfSBlbHNlIGlmIChwcmVkaWNhdGUpIHtcclxuICAgIC8vIHBhc3NcclxuICB9IGVsc2Uge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICAnQ3JlYXRpbmcgb3IgcmVtb3ZpbmcgYSBsaXN0ZW5lciByZXF1aXJlcyBvbmUgb2YgdGhlIGtub3duIGZpZWxkcyBmb3IgbWF0Y2hpbmcgYW4gYWN0aW9uJ1xyXG4gICAgKVxyXG4gIH1cclxuXHJcbiAgYXNzZXJ0RnVuY3Rpb24oZWZmZWN0LCAnb3B0aW9ucy5saXN0ZW5lcicpXHJcblxyXG4gIHJldHVybiB7IHByZWRpY2F0ZSwgdHlwZSwgZWZmZWN0IH1cclxufVxyXG5cclxuLyoqIEFjY2VwdHMgdGhlIHBvc3NpYmxlIG9wdGlvbnMgZm9yIGNyZWF0aW5nIGEgbGlzdGVuZXIsIGFuZCByZXR1cm5zIGEgZm9ybWF0dGVkIGxpc3RlbmVyIGVudHJ5ICovXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVMaXN0ZW5lckVudHJ5OiBUeXBlZENyZWF0ZUxpc3RlbmVyRW50cnk8dW5rbm93bj4gPSAoXHJcbiAgb3B0aW9uczogRmFsbGJhY2tBZGRMaXN0ZW5lck9wdGlvbnNcclxuKSA9PiB7XHJcbiAgY29uc3QgeyB0eXBlLCBwcmVkaWNhdGUsIGVmZmVjdCB9ID0gZ2V0TGlzdGVuZXJFbnRyeVByb3BzRnJvbShvcHRpb25zKVxyXG5cclxuICBjb25zdCBpZCA9IG5hbm9pZCgpXHJcbiAgY29uc3QgZW50cnk6IExpc3RlbmVyRW50cnk8dW5rbm93bj4gPSB7XHJcbiAgICBpZCxcclxuICAgIGVmZmVjdCxcclxuICAgIHR5cGUsXHJcbiAgICBwcmVkaWNhdGUsXHJcbiAgICBwZW5kaW5nOiBuZXcgU2V0PEFib3J0Q29udHJvbGxlcj4oKSxcclxuICAgIHVuc3Vic2NyaWJlOiAoKSA9PiB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5zdWJzY3JpYmUgbm90IGluaXRpYWxpemVkJylcclxuICAgIH0sXHJcbiAgfVxyXG5cclxuICByZXR1cm4gZW50cnlcclxufVxyXG5cclxuY29uc3QgY3JlYXRlQ2xlYXJMaXN0ZW5lck1pZGRsZXdhcmUgPSAoXHJcbiAgbGlzdGVuZXJNYXA6IE1hcDxzdHJpbmcsIExpc3RlbmVyRW50cnk+XHJcbikgPT4ge1xyXG4gIHJldHVybiAoKSA9PiB7XHJcbiAgICBsaXN0ZW5lck1hcC5mb3JFYWNoKGNhbmNlbEFjdGl2ZUxpc3RlbmVycylcclxuXHJcbiAgICBsaXN0ZW5lck1hcC5jbGVhcigpXHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogU2FmZWx5IHJlcG9ydHMgZXJyb3JzIHRvIHRoZSBgZXJyb3JIYW5kbGVyYCBwcm92aWRlZC5cclxuICogRXJyb3JzIHRoYXQgb2NjdXIgaW5zaWRlIGBlcnJvckhhbmRsZXJgIGFyZSBub3RpZmllZCBpbiBhIG5ldyB0YXNrLlxyXG4gKiBJbnNwaXJlZCBieSBbcnhqcyByZXBvcnRVbmhhbmRsZWRFcnJvcl0oaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0aXZlWC9yeGpzL2Jsb2IvNmZhZmNmNTNkYzllNTU3NDM5YjI1ZGViYWVhZGZkMjI0YjI0NWE2Ni9zcmMvaW50ZXJuYWwvdXRpbC9yZXBvcnRVbmhhbmRsZWRFcnJvci50cylcclxuICogQHBhcmFtIGVycm9ySGFuZGxlclxyXG4gKiBAcGFyYW0gZXJyb3JUb05vdGlmeVxyXG4gKi9cclxuY29uc3Qgc2FmZWx5Tm90aWZ5RXJyb3IgPSAoXHJcbiAgZXJyb3JIYW5kbGVyOiBMaXN0ZW5lckVycm9ySGFuZGxlcixcclxuICBlcnJvclRvTm90aWZ5OiB1bmtub3duLFxyXG4gIGVycm9ySW5mbzogTGlzdGVuZXJFcnJvckluZm9cclxuKTogdm9pZCA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIGVycm9ySGFuZGxlcihlcnJvclRvTm90aWZ5LCBlcnJvckluZm8pXHJcbiAgfSBjYXRjaCAoZXJyb3JIYW5kbGVyRXJyb3IpIHtcclxuICAgIC8vIFdlIGNhbm5vdCBsZXQgYW4gZXJyb3IgcmFpc2VkIGhlcmUgYmxvY2sgdGhlIGxpc3RlbmVyIHF1ZXVlLlxyXG4gICAgLy8gVGhlIGVycm9yIHJhaXNlZCBoZXJlIHdpbGwgYmUgcGlja2VkIHVwIGJ5IGB3aW5kb3cub25lcnJvcmAsIGBwcm9jZXNzLm9uKCdlcnJvcicpYCBldGMuLi5cclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICB0aHJvdyBlcnJvckhhbmRsZXJFcnJvclxyXG4gICAgfSwgMClcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgYWRkTGlzdGVuZXIgPSBjcmVhdGVBY3Rpb24oXHJcbiAgYCR7YWxtfS9hZGRgXHJcbikgYXMgVHlwZWRBZGRMaXN0ZW5lcjx1bmtub3duPlxyXG5cclxuLyoqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCBjb25zdCBjbGVhckFsbExpc3RlbmVycyA9IGNyZWF0ZUFjdGlvbihgJHthbG19L3JlbW92ZUFsbGApXHJcblxyXG4vKipcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHJlbW92ZUxpc3RlbmVyID0gY3JlYXRlQWN0aW9uKFxyXG4gIGAke2FsbX0vcmVtb3ZlYFxyXG4pIGFzIFR5cGVkUmVtb3ZlTGlzdGVuZXI8dW5rbm93bj5cclxuXHJcbmNvbnN0IGRlZmF1bHRFcnJvckhhbmRsZXI6IExpc3RlbmVyRXJyb3JIYW5kbGVyID0gKC4uLmFyZ3M6IHVua25vd25bXSkgPT4ge1xyXG4gIGNvbnNvbGUuZXJyb3IoYCR7YWxtfS9lcnJvcmAsIC4uLmFyZ3MpXHJcbn1cclxuXHJcbmNvbnN0IGNhbmNlbEFjdGl2ZUxpc3RlbmVycyA9IChcclxuICBlbnRyeTogTGlzdGVuZXJFbnRyeTx1bmtub3duLCBEaXNwYXRjaDxBbnlBY3Rpb24+PlxyXG4pID0+IHtcclxuICBlbnRyeS5wZW5kaW5nLmZvckVhY2goKGNvbnRyb2xsZXIpID0+IHtcclxuICAgIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oY29udHJvbGxlciwgbGlzdGVuZXJDYW5jZWxsZWQpXHJcbiAgfSlcclxufVxyXG5cclxuLyoqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMaXN0ZW5lck1pZGRsZXdhcmU8XHJcbiAgUyA9IHVua25vd24sXHJcbiAgRCBleHRlbmRzIERpc3BhdGNoPEFueUFjdGlvbj4gPSBUaHVua0Rpc3BhdGNoPFMsIHVua25vd24sIEFueUFjdGlvbj4sXHJcbiAgRXh0cmFBcmd1bWVudCA9IHVua25vd25cclxuPihtaWRkbGV3YXJlT3B0aW9uczogQ3JlYXRlTGlzdGVuZXJNaWRkbGV3YXJlT3B0aW9uczxFeHRyYUFyZ3VtZW50PiA9IHt9KSB7XHJcbiAgY29uc3QgbGlzdGVuZXJNYXAgPSBuZXcgTWFwPHN0cmluZywgTGlzdGVuZXJFbnRyeT4oKVxyXG4gIGNvbnN0IHsgZXh0cmEsIG9uRXJyb3IgPSBkZWZhdWx0RXJyb3JIYW5kbGVyIH0gPSBtaWRkbGV3YXJlT3B0aW9uc1xyXG5cclxuICBhc3NlcnRGdW5jdGlvbihvbkVycm9yLCAnb25FcnJvcicpXHJcblxyXG4gIGNvbnN0IGluc2VydEVudHJ5ID0gKGVudHJ5OiBMaXN0ZW5lckVudHJ5KSA9PiB7XHJcbiAgICBlbnRyeS51bnN1YnNjcmliZSA9ICgpID0+IGxpc3RlbmVyTWFwLmRlbGV0ZShlbnRyeSEuaWQpXHJcblxyXG4gICAgbGlzdGVuZXJNYXAuc2V0KGVudHJ5LmlkLCBlbnRyeSlcclxuICAgIHJldHVybiAoY2FuY2VsT3B0aW9ucz86IFVuc3Vic2NyaWJlTGlzdGVuZXJPcHRpb25zKSA9PiB7XHJcbiAgICAgIGVudHJ5LnVuc3Vic2NyaWJlKClcclxuICAgICAgaWYgKGNhbmNlbE9wdGlvbnM/LmNhbmNlbEFjdGl2ZSkge1xyXG4gICAgICAgIGNhbmNlbEFjdGl2ZUxpc3RlbmVycyhlbnRyeSlcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29uc3QgZmluZExpc3RlbmVyRW50cnkgPSAoXHJcbiAgICBjb21wYXJhdG9yOiAoZW50cnk6IExpc3RlbmVyRW50cnkpID0+IGJvb2xlYW5cclxuICApOiBMaXN0ZW5lckVudHJ5IHwgdW5kZWZpbmVkID0+IHtcclxuICAgIGZvciAoY29uc3QgZW50cnkgb2YgQXJyYXkuZnJvbShsaXN0ZW5lck1hcC52YWx1ZXMoKSkpIHtcclxuICAgICAgaWYgKGNvbXBhcmF0b3IoZW50cnkpKSB7XHJcbiAgICAgICAgcmV0dXJuIGVudHJ5XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdW5kZWZpbmVkXHJcbiAgfVxyXG5cclxuICBjb25zdCBzdGFydExpc3RlbmluZyA9IChvcHRpb25zOiBGYWxsYmFja0FkZExpc3RlbmVyT3B0aW9ucykgPT4ge1xyXG4gICAgbGV0IGVudHJ5ID0gZmluZExpc3RlbmVyRW50cnkoXHJcbiAgICAgIChleGlzdGluZ0VudHJ5KSA9PiBleGlzdGluZ0VudHJ5LmVmZmVjdCA9PT0gb3B0aW9ucy5lZmZlY3RcclxuICAgIClcclxuXHJcbiAgICBpZiAoIWVudHJ5KSB7XHJcbiAgICAgIGVudHJ5ID0gY3JlYXRlTGlzdGVuZXJFbnRyeShvcHRpb25zIGFzIGFueSlcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaW5zZXJ0RW50cnkoZW50cnkpXHJcbiAgfVxyXG5cclxuICBjb25zdCBzdG9wTGlzdGVuaW5nID0gKFxyXG4gICAgb3B0aW9uczogRmFsbGJhY2tBZGRMaXN0ZW5lck9wdGlvbnMgJiBVbnN1YnNjcmliZUxpc3RlbmVyT3B0aW9uc1xyXG4gICk6IGJvb2xlYW4gPT4ge1xyXG4gICAgY29uc3QgeyB0eXBlLCBlZmZlY3QsIHByZWRpY2F0ZSB9ID0gZ2V0TGlzdGVuZXJFbnRyeVByb3BzRnJvbShvcHRpb25zKVxyXG5cclxuICAgIGNvbnN0IGVudHJ5ID0gZmluZExpc3RlbmVyRW50cnkoKGVudHJ5KSA9PiB7XHJcbiAgICAgIGNvbnN0IG1hdGNoUHJlZGljYXRlT3JUeXBlID1cclxuICAgICAgICB0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZydcclxuICAgICAgICAgID8gZW50cnkudHlwZSA9PT0gdHlwZVxyXG4gICAgICAgICAgOiBlbnRyeS5wcmVkaWNhdGUgPT09IHByZWRpY2F0ZVxyXG5cclxuICAgICAgcmV0dXJuIG1hdGNoUHJlZGljYXRlT3JUeXBlICYmIGVudHJ5LmVmZmVjdCA9PT0gZWZmZWN0XHJcbiAgICB9KVxyXG5cclxuICAgIGlmIChlbnRyeSkge1xyXG4gICAgICBlbnRyeS51bnN1YnNjcmliZSgpXHJcbiAgICAgIGlmIChvcHRpb25zLmNhbmNlbEFjdGl2ZSkge1xyXG4gICAgICAgIGNhbmNlbEFjdGl2ZUxpc3RlbmVycyhlbnRyeSlcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAhIWVudHJ5XHJcbiAgfVxyXG5cclxuICBjb25zdCBub3RpZnlMaXN0ZW5lciA9IGFzeW5jIChcclxuICAgIGVudHJ5OiBMaXN0ZW5lckVudHJ5PHVua25vd24sIERpc3BhdGNoPEFueUFjdGlvbj4+LFxyXG4gICAgYWN0aW9uOiBBbnlBY3Rpb24sXHJcbiAgICBhcGk6IE1pZGRsZXdhcmVBUEksXHJcbiAgICBnZXRPcmlnaW5hbFN0YXRlOiAoKSA9PiBTXHJcbiAgKSA9PiB7XHJcbiAgICBjb25zdCBpbnRlcm5hbFRhc2tDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpXHJcbiAgICBjb25zdCB0YWtlID0gY3JlYXRlVGFrZVBhdHRlcm4oXHJcbiAgICAgIHN0YXJ0TGlzdGVuaW5nLFxyXG4gICAgICBpbnRlcm5hbFRhc2tDb250cm9sbGVyLnNpZ25hbFxyXG4gICAgKVxyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIGVudHJ5LnBlbmRpbmcuYWRkKGludGVybmFsVGFza0NvbnRyb2xsZXIpXHJcbiAgICAgIGF3YWl0IFByb21pc2UucmVzb2x2ZShcclxuICAgICAgICBlbnRyeS5lZmZlY3QoXHJcbiAgICAgICAgICBhY3Rpb24sXHJcbiAgICAgICAgICAvLyBVc2UgYXNzaWduKCkgcmF0aGVyIHRoYW4gLi4uIHRvIGF2b2lkIGV4dHJhIGhlbHBlciBmdW5jdGlvbnMgYWRkZWQgdG8gYnVuZGxlXHJcbiAgICAgICAgICBhc3NpZ24oe30sIGFwaSwge1xyXG4gICAgICAgICAgICBnZXRPcmlnaW5hbFN0YXRlLFxyXG4gICAgICAgICAgICBjb25kaXRpb246IChcclxuICAgICAgICAgICAgICBwcmVkaWNhdGU6IEFueUxpc3RlbmVyUHJlZGljYXRlPGFueT4sXHJcbiAgICAgICAgICAgICAgdGltZW91dD86IG51bWJlclxyXG4gICAgICAgICAgICApID0+IHRha2UocHJlZGljYXRlLCB0aW1lb3V0KS50aGVuKEJvb2xlYW4pLFxyXG4gICAgICAgICAgICB0YWtlLFxyXG4gICAgICAgICAgICBkZWxheTogY3JlYXRlRGVsYXkoaW50ZXJuYWxUYXNrQ29udHJvbGxlci5zaWduYWwpLFxyXG4gICAgICAgICAgICBwYXVzZTogY3JlYXRlUGF1c2U8YW55PihpbnRlcm5hbFRhc2tDb250cm9sbGVyLnNpZ25hbCksXHJcbiAgICAgICAgICAgIGV4dHJhLFxyXG4gICAgICAgICAgICBzaWduYWw6IGludGVybmFsVGFza0NvbnRyb2xsZXIuc2lnbmFsLFxyXG4gICAgICAgICAgICBmb3JrOiBjcmVhdGVGb3JrKGludGVybmFsVGFza0NvbnRyb2xsZXIuc2lnbmFsKSxcclxuICAgICAgICAgICAgdW5zdWJzY3JpYmU6IGVudHJ5LnVuc3Vic2NyaWJlLFxyXG4gICAgICAgICAgICBzdWJzY3JpYmU6ICgpID0+IHtcclxuICAgICAgICAgICAgICBsaXN0ZW5lck1hcC5zZXQoZW50cnkuaWQsIGVudHJ5KVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjYW5jZWxBY3RpdmVMaXN0ZW5lcnM6ICgpID0+IHtcclxuICAgICAgICAgICAgICBlbnRyeS5wZW5kaW5nLmZvckVhY2goKGNvbnRyb2xsZXIsIF8sIHNldCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xsZXIgIT09IGludGVybmFsVGFza0NvbnRyb2xsZXIpIHtcclxuICAgICAgICAgICAgICAgICAgYWJvcnRDb250cm9sbGVyV2l0aFJlYXNvbihjb250cm9sbGVyLCBsaXN0ZW5lckNhbmNlbGxlZClcclxuICAgICAgICAgICAgICAgICAgc2V0LmRlbGV0ZShjb250cm9sbGVyKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIClcclxuICAgICAgKVxyXG4gICAgfSBjYXRjaCAobGlzdGVuZXJFcnJvcikge1xyXG4gICAgICBpZiAoIShsaXN0ZW5lckVycm9yIGluc3RhbmNlb2YgVGFza0Fib3J0RXJyb3IpKSB7XHJcbiAgICAgICAgc2FmZWx5Tm90aWZ5RXJyb3Iob25FcnJvciwgbGlzdGVuZXJFcnJvciwge1xyXG4gICAgICAgICAgcmFpc2VkQnk6ICdlZmZlY3QnLFxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgIH0gZmluYWxseSB7XHJcbiAgICAgIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oaW50ZXJuYWxUYXNrQ29udHJvbGxlciwgbGlzdGVuZXJDb21wbGV0ZWQpIC8vIE5vdGlmeSB0aGF0IHRoZSB0YXNrIGhhcyBjb21wbGV0ZWRcclxuICAgICAgZW50cnkucGVuZGluZy5kZWxldGUoaW50ZXJuYWxUYXNrQ29udHJvbGxlcilcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbnN0IGNsZWFyTGlzdGVuZXJNaWRkbGV3YXJlID0gY3JlYXRlQ2xlYXJMaXN0ZW5lck1pZGRsZXdhcmUobGlzdGVuZXJNYXApXHJcblxyXG4gIGNvbnN0IG1pZGRsZXdhcmU6IExpc3RlbmVyTWlkZGxld2FyZTxTLCBELCBFeHRyYUFyZ3VtZW50PiA9XHJcbiAgICAoYXBpKSA9PiAobmV4dCkgPT4gKGFjdGlvbikgPT4ge1xyXG4gICAgICBpZiAoYWRkTGlzdGVuZXIubWF0Y2goYWN0aW9uKSkge1xyXG4gICAgICAgIHJldHVybiBzdGFydExpc3RlbmluZyhhY3Rpb24ucGF5bG9hZClcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGNsZWFyQWxsTGlzdGVuZXJzLm1hdGNoKGFjdGlvbikpIHtcclxuICAgICAgICBjbGVhckxpc3RlbmVyTWlkZGxld2FyZSgpXHJcbiAgICAgICAgcmV0dXJuXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChyZW1vdmVMaXN0ZW5lci5tYXRjaChhY3Rpb24pKSB7XHJcbiAgICAgICAgcmV0dXJuIHN0b3BMaXN0ZW5pbmcoYWN0aW9uLnBheWxvYWQpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIE5lZWQgdG8gZ2V0IHRoaXMgc3RhdGUgX2JlZm9yZV8gdGhlIHJlZHVjZXIgcHJvY2Vzc2VzIHRoZSBhY3Rpb25cclxuICAgICAgbGV0IG9yaWdpbmFsU3RhdGU6IFMgfCB0eXBlb2YgSU5URVJOQUxfTklMX1RPS0VOID0gYXBpLmdldFN0YXRlKClcclxuXHJcbiAgICAgIC8vIGBnZXRPcmlnaW5hbFN0YXRlYCBjYW4gb25seSBiZSBjYWxsZWQgc3luY2hyb25vdXNseS5cclxuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVkdXhqcy9yZWR1eC10b29sa2l0L2Rpc2N1c3Npb25zLzE2NDgjZGlzY3Vzc2lvbmNvbW1lbnQtMTkzMjgyMFxyXG4gICAgICBjb25zdCBnZXRPcmlnaW5hbFN0YXRlID0gKCk6IFMgPT4ge1xyXG4gICAgICAgIGlmIChvcmlnaW5hbFN0YXRlID09PSBJTlRFUk5BTF9OSUxfVE9LRU4pIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgICAgICAgYCR7YWxtfTogZ2V0T3JpZ2luYWxTdGF0ZSBjYW4gb25seSBiZSBjYWxsZWQgc3luY2hyb25vdXNseWBcclxuICAgICAgICAgIClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBvcmlnaW5hbFN0YXRlIGFzIFNcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IHJlc3VsdDogdW5rbm93blxyXG5cclxuICAgICAgdHJ5IHtcclxuICAgICAgICAvLyBBY3R1YWxseSBmb3J3YXJkIHRoZSBhY3Rpb24gdG8gdGhlIHJlZHVjZXIgYmVmb3JlIHdlIGhhbmRsZSBsaXN0ZW5lcnNcclxuICAgICAgICByZXN1bHQgPSBuZXh0KGFjdGlvbilcclxuXHJcbiAgICAgICAgaWYgKGxpc3RlbmVyTWFwLnNpemUgPiAwKSB7XHJcbiAgICAgICAgICBsZXQgY3VycmVudFN0YXRlID0gYXBpLmdldFN0YXRlKClcclxuICAgICAgICAgIC8vIFdvcmsgYXJvdW5kIEVTQnVpbGQrVFMgdHJhbnNwaWxhdGlvbiBpc3N1ZVxyXG4gICAgICAgICAgY29uc3QgbGlzdGVuZXJFbnRyaWVzID0gQXJyYXkuZnJvbShsaXN0ZW5lck1hcC52YWx1ZXMoKSlcclxuICAgICAgICAgIGZvciAobGV0IGVudHJ5IG9mIGxpc3RlbmVyRW50cmllcykge1xyXG4gICAgICAgICAgICBsZXQgcnVuTGlzdGVuZXIgPSBmYWxzZVxyXG5cclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICBydW5MaXN0ZW5lciA9IGVudHJ5LnByZWRpY2F0ZShhY3Rpb24sIGN1cnJlbnRTdGF0ZSwgb3JpZ2luYWxTdGF0ZSlcclxuICAgICAgICAgICAgfSBjYXRjaCAocHJlZGljYXRlRXJyb3IpIHtcclxuICAgICAgICAgICAgICBydW5MaXN0ZW5lciA9IGZhbHNlXHJcblxyXG4gICAgICAgICAgICAgIHNhZmVseU5vdGlmeUVycm9yKG9uRXJyb3IsIHByZWRpY2F0ZUVycm9yLCB7XHJcbiAgICAgICAgICAgICAgICByYWlzZWRCeTogJ3ByZWRpY2F0ZScsXHJcbiAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFydW5MaXN0ZW5lcikge1xyXG4gICAgICAgICAgICAgIGNvbnRpbnVlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG5vdGlmeUxpc3RlbmVyKGVudHJ5LCBhY3Rpb24sIGFwaSwgZ2V0T3JpZ2luYWxTdGF0ZSlcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0gZmluYWxseSB7XHJcbiAgICAgICAgLy8gUmVtb3ZlIGBvcmlnaW5hbFN0YXRlYCBzdG9yZSBmcm9tIHRoaXMgc2NvcGUuXHJcbiAgICAgICAgb3JpZ2luYWxTdGF0ZSA9IElOVEVSTkFMX05JTF9UT0tFTlxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gcmVzdWx0XHJcbiAgICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBtaWRkbGV3YXJlLFxyXG4gICAgc3RhcnRMaXN0ZW5pbmcsXHJcbiAgICBzdG9wTGlzdGVuaW5nLFxyXG4gICAgY2xlYXJMaXN0ZW5lcnM6IGNsZWFyTGlzdGVuZXJNaWRkbGV3YXJlLFxyXG4gIH0gYXMgTGlzdGVuZXJNaWRkbGV3YXJlSW5zdGFuY2U8UywgRCwgRXh0cmFBcmd1bWVudD5cclxufVxyXG4iLCJpbXBvcnQgdHlwZSB7IEFib3J0U2lnbmFsV2l0aFJlYXNvbiB9IGZyb20gJy4vdHlwZXMnXHJcblxyXG5leHBvcnQgY29uc3QgYXNzZXJ0RnVuY3Rpb246IChcclxuICBmdW5jOiB1bmtub3duLFxyXG4gIGV4cGVjdGVkOiBzdHJpbmdcclxuKSA9PiBhc3NlcnRzIGZ1bmMgaXMgKC4uLmFyZ3M6IHVua25vd25bXSkgPT4gdW5rbm93biA9IChcclxuICBmdW5jOiB1bmtub3duLFxyXG4gIGV4cGVjdGVkOiBzdHJpbmdcclxuKSA9PiB7XHJcbiAgaWYgKHR5cGVvZiBmdW5jICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAke2V4cGVjdGVkfSBpcyBub3QgYSBmdW5jdGlvbmApXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3Qgbm9vcCA9ICgpID0+IHt9XHJcblxyXG5leHBvcnQgY29uc3QgY2F0Y2hSZWplY3Rpb24gPSA8VD4oXHJcbiAgcHJvbWlzZTogUHJvbWlzZTxUPixcclxuICBvbkVycm9yID0gbm9vcFxyXG4pOiBQcm9taXNlPFQ+ID0+IHtcclxuICBwcm9taXNlLmNhdGNoKG9uRXJyb3IpXHJcblxyXG4gIHJldHVybiBwcm9taXNlXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBhZGRBYm9ydFNpZ25hbExpc3RlbmVyID0gKFxyXG4gIGFib3J0U2lnbmFsOiBBYm9ydFNpZ25hbCxcclxuICBjYWxsYmFjazogKGV2dDogRXZlbnQpID0+IHZvaWRcclxuKSA9PiB7XHJcbiAgYWJvcnRTaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBjYWxsYmFjaywgeyBvbmNlOiB0cnVlIH0pXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxscyBgYWJvcnRDb250cm9sbGVyLmFib3J0KHJlYXNvbilgIGFuZCBwYXRjaGVzIGBzaWduYWwucmVhc29uYC5cclxuICogaWYgaXQgaXMgbm90IHN1cHBvcnRlZC5cclxuICpcclxuICogQXQgdGhlIHRpbWUgb2Ygd3JpdGluZyBgc2lnbmFsLnJlYXNvbmAgaXMgYXZhaWxhYmxlIGluIEZGIGNocm9tZSwgZWRnZSBub2RlIDE3IGFuZCBkZW5vLlxyXG4gKiBAcGFyYW0gYWJvcnRDb250cm9sbGVyXHJcbiAqIEBwYXJhbSByZWFzb25cclxuICogQHJldHVybnNcclxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQWJvcnRTaWduYWwvcmVhc29uXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgYWJvcnRDb250cm9sbGVyV2l0aFJlYXNvbiA9IDxUPihcclxuICBhYm9ydENvbnRyb2xsZXI6IEFib3J0Q29udHJvbGxlcixcclxuICByZWFzb246IFRcclxuKTogdm9pZCA9PiB7XHJcbiAgdHlwZSBDb25zdW1lcjxUPiA9ICh2YWw6IFQpID0+IHZvaWRcclxuXHJcbiAgY29uc3Qgc2lnbmFsID0gYWJvcnRDb250cm9sbGVyLnNpZ25hbCBhcyBBYm9ydFNpZ25hbFdpdGhSZWFzb248VD5cclxuXHJcbiAgaWYgKHNpZ25hbC5hYm9ydGVkKSB7XHJcbiAgICByZXR1cm5cclxuICB9XHJcblxyXG4gIC8vIFBhdGNoIGByZWFzb25gIGlmIG5lY2Vzc2FyeS5cclxuICAvLyAtIFdlIHVzZSBkZWZpbmVQcm9wZXJ0eSBoZXJlIGJlY2F1c2UgcmVhc29uIGlzIGEgZ2V0dGVyIG9mIGBBYm9ydFNpZ25hbC5fX3Byb3RvX19gLlxyXG4gIC8vIC0gV2UgbmVlZCB0byBwYXRjaCAncmVhc29uJyBiZWZvcmUgY2FsbGluZyBgLmFib3J0KClgIGJlY2F1c2UgbGlzdGVuZXJzIHRvIHRoZSAnYWJvcnQnXHJcbiAgLy8gZXZlbnQgYXJlIGFyZSBub3RpZmllZCBpbW1lZGlhdGVseS5cclxuICBpZiAoISgncmVhc29uJyBpbiBzaWduYWwpKSB7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2lnbmFsLCAncmVhc29uJywge1xyXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICB2YWx1ZTogcmVhc29uLFxyXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIDsoYWJvcnRDb250cm9sbGVyLmFib3J0IGFzIENvbnN1bWVyPHR5cGVvZiByZWFzb24+KShyZWFzb24pXHJcbn1cclxuIiwiaW1wb3J0IHsgZW5hYmxlRVM1IH0gZnJvbSAnaW1tZXInXHJcbmV4cG9ydCAqIGZyb20gJ3JlZHV4J1xyXG5leHBvcnQge1xyXG4gIGRlZmF1bHQgYXMgY3JlYXRlTmV4dFN0YXRlLFxyXG4gIGN1cnJlbnQsXHJcbiAgZnJlZXplLFxyXG4gIG9yaWdpbmFsLFxyXG4gIGlzRHJhZnQsXHJcbn0gZnJvbSAnaW1tZXInXHJcbmV4cG9ydCB0eXBlIHsgRHJhZnQgfSBmcm9tICdpbW1lcidcclxuZXhwb3J0IHsgY3JlYXRlU2VsZWN0b3IgfSBmcm9tICdyZXNlbGVjdCdcclxuZXhwb3J0IHR5cGUge1xyXG4gIFNlbGVjdG9yLFxyXG4gIE91dHB1dFBhcmFtZXRyaWNTZWxlY3RvcixcclxuICBPdXRwdXRTZWxlY3RvcixcclxuICBQYXJhbWV0cmljU2VsZWN0b3IsXHJcbn0gZnJvbSAncmVzZWxlY3QnXHJcbmV4cG9ydCB7IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yIH0gZnJvbSAnLi9jcmVhdGVEcmFmdFNhZmVTZWxlY3RvcidcclxuZXhwb3J0IHR5cGUgeyBUaHVua0FjdGlvbiwgVGh1bmtEaXNwYXRjaCB9IGZyb20gJ3JlZHV4LXRodW5rJ1xyXG5cclxuLy8gV2UgZGVsaWJlcmF0ZWx5IGVuYWJsZSBJbW1lcidzIEVTNSBzdXBwb3J0LCBvbiB0aGUgZ3JvdW5kcyB0aGF0XHJcbi8vIHdlIGFzc3VtZSBSVEsgd2lsbCBiZSB1c2VkIHdpdGggUmVhY3QgTmF0aXZlIGFuZCBvdGhlciBQcm94eS1sZXNzXHJcbi8vIGVudmlyb25tZW50cy4gIEluIGFkZGl0aW9uLCB0aGF0J3MgaG93IEltbWVyIDQgYmVoYXZlZCwgYW5kIHNpbmNlXHJcbi8vIHdlIHdhbnQgdG8gc2hpcCB0aGlzIGluIGFuIFJUSyBtaW5vciwgd2Ugc2hvdWxkIGtlZXAgdGhlIHNhbWUgYmVoYXZpb3IuXHJcbmVuYWJsZUVTNSgpXHJcblxyXG5leHBvcnQge1xyXG4gIC8vIGpzXHJcbiAgY29uZmlndXJlU3RvcmUsXHJcbn0gZnJvbSAnLi9jb25maWd1cmVTdG9yZSdcclxuZXhwb3J0IHR5cGUge1xyXG4gIC8vIHR5cGVzXHJcbiAgQ29uZmlndXJlRW5oYW5jZXJzQ2FsbGJhY2ssXHJcbiAgQ29uZmlndXJlU3RvcmVPcHRpb25zLFxyXG4gIEVuaGFuY2VkU3RvcmUsXHJcbn0gZnJvbSAnLi9jb25maWd1cmVTdG9yZSdcclxuZXhwb3J0IHtcclxuICAvLyBqc1xyXG4gIGNyZWF0ZUFjdGlvbixcclxuICBnZXRUeXBlLFxyXG59IGZyb20gJy4vY3JlYXRlQWN0aW9uJ1xyXG5leHBvcnQgdHlwZSB7XHJcbiAgLy8gdHlwZXNcclxuICBQYXlsb2FkQWN0aW9uLFxyXG4gIFBheWxvYWRBY3Rpb25DcmVhdG9yLFxyXG4gIEFjdGlvbkNyZWF0b3JXaXRoTm9uSW5mZXJyYWJsZVBheWxvYWQsXHJcbiAgQWN0aW9uQ3JlYXRvcldpdGhPcHRpb25hbFBheWxvYWQsXHJcbiAgQWN0aW9uQ3JlYXRvcldpdGhQYXlsb2FkLFxyXG4gIEFjdGlvbkNyZWF0b3JXaXRob3V0UGF5bG9hZCxcclxuICBBY3Rpb25DcmVhdG9yV2l0aFByZXBhcmVkUGF5bG9hZCxcclxuICBQcmVwYXJlQWN0aW9uLFxyXG59IGZyb20gJy4vY3JlYXRlQWN0aW9uJ1xyXG5leHBvcnQge1xyXG4gIC8vIGpzXHJcbiAgY3JlYXRlUmVkdWNlcixcclxufSBmcm9tICcuL2NyZWF0ZVJlZHVjZXInXHJcbmV4cG9ydCB0eXBlIHtcclxuICAvLyB0eXBlc1xyXG4gIEFjdGlvbnMsXHJcbiAgQ2FzZVJlZHVjZXIsXHJcbiAgQ2FzZVJlZHVjZXJzLFxyXG59IGZyb20gJy4vY3JlYXRlUmVkdWNlcidcclxuZXhwb3J0IHtcclxuICAvLyBqc1xyXG4gIGNyZWF0ZVNsaWNlLFxyXG59IGZyb20gJy4vY3JlYXRlU2xpY2UnXHJcblxyXG5leHBvcnQgdHlwZSB7XHJcbiAgLy8gdHlwZXNcclxuICBDcmVhdGVTbGljZU9wdGlvbnMsXHJcbiAgU2xpY2UsXHJcbiAgQ2FzZVJlZHVjZXJBY3Rpb25zLFxyXG4gIFNsaWNlQ2FzZVJlZHVjZXJzLFxyXG4gIFZhbGlkYXRlU2xpY2VDYXNlUmVkdWNlcnMsXHJcbiAgQ2FzZVJlZHVjZXJXaXRoUHJlcGFyZSxcclxuICBTbGljZUFjdGlvbkNyZWF0b3IsXHJcbn0gZnJvbSAnLi9jcmVhdGVTbGljZSdcclxuZXhwb3J0IHtcclxuICAvLyBqc1xyXG4gIGNyZWF0ZUltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZSxcclxuICBpc0ltbXV0YWJsZURlZmF1bHQsXHJcbn0gZnJvbSAnLi9pbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUnXHJcbmV4cG9ydCB0eXBlIHtcclxuICAvLyB0eXBlc1xyXG4gIEltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZU9wdGlvbnMsXHJcbn0gZnJvbSAnLi9pbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUnXHJcbmV4cG9ydCB7XHJcbiAgLy8ganNcclxuICBjcmVhdGVTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUsXHJcbiAgZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlLFxyXG4gIGlzUGxhaW4sXHJcbn0gZnJvbSAnLi9zZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUnXHJcbmV4cG9ydCB0eXBlIHtcclxuICAvLyB0eXBlc1xyXG4gIFNlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZU9wdGlvbnMsXHJcbn0gZnJvbSAnLi9zZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUnXHJcbmV4cG9ydCB7XHJcbiAgLy8ganNcclxuICBnZXREZWZhdWx0TWlkZGxld2FyZSxcclxufSBmcm9tICcuL2dldERlZmF1bHRNaWRkbGV3YXJlJ1xyXG5leHBvcnQgdHlwZSB7XHJcbiAgLy8gdHlwZXNcclxuICBBY3Rpb25SZWR1Y2VyTWFwQnVpbGRlcixcclxufSBmcm9tICcuL21hcEJ1aWxkZXJzJ1xyXG5leHBvcnQgeyBNaWRkbGV3YXJlQXJyYXkgfSBmcm9tICcuL3V0aWxzJ1xyXG5cclxuZXhwb3J0IHsgY3JlYXRlRW50aXR5QWRhcHRlciB9IGZyb20gJy4vZW50aXRpZXMvY3JlYXRlX2FkYXB0ZXInXHJcbmV4cG9ydCB0eXBlIHtcclxuICBEaWN0aW9uYXJ5LFxyXG4gIEVudGl0eVN0YXRlLFxyXG4gIEVudGl0eUFkYXB0ZXIsXHJcbiAgRW50aXR5U2VsZWN0b3JzLFxyXG4gIEVudGl0eVN0YXRlQWRhcHRlcixcclxuICBFbnRpdHlJZCxcclxuICBVcGRhdGUsXHJcbiAgSWRTZWxlY3RvcixcclxuICBDb21wYXJlcixcclxufSBmcm9tICcuL2VudGl0aWVzL21vZGVscydcclxuXHJcbmV4cG9ydCB7XHJcbiAgY3JlYXRlQXN5bmNUaHVuayxcclxuICB1bndyYXBSZXN1bHQsXHJcbiAgbWluaVNlcmlhbGl6ZUVycm9yLFxyXG59IGZyb20gJy4vY3JlYXRlQXN5bmNUaHVuaydcclxuZXhwb3J0IHR5cGUge1xyXG4gIEFzeW5jVGh1bmssXHJcbiAgQXN5bmNUaHVua09wdGlvbnMsXHJcbiAgQXN5bmNUaHVua0FjdGlvbixcclxuICBBc3luY1RodW5rUGF5bG9hZENyZWF0b3JSZXR1cm5WYWx1ZSxcclxuICBBc3luY1RodW5rUGF5bG9hZENyZWF0b3IsXHJcbiAgU2VyaWFsaXplZEVycm9yLFxyXG59IGZyb20gJy4vY3JlYXRlQXN5bmNUaHVuaydcclxuXHJcbmV4cG9ydCB7XHJcbiAgLy8ganNcclxuICBpc0FsbE9mLFxyXG4gIGlzQW55T2YsXHJcbiAgaXNQZW5kaW5nLFxyXG4gIGlzUmVqZWN0ZWQsXHJcbiAgaXNGdWxmaWxsZWQsXHJcbiAgaXNBc3luY1RodW5rQWN0aW9uLFxyXG4gIGlzUmVqZWN0ZWRXaXRoVmFsdWUsXHJcbn0gZnJvbSAnLi9tYXRjaGVycydcclxuZXhwb3J0IHR5cGUge1xyXG4gIC8vIHR5cGVzXHJcbiAgQWN0aW9uTWF0Y2hpbmdBbGxPZixcclxuICBBY3Rpb25NYXRjaGluZ0FueU9mLFxyXG59IGZyb20gJy4vbWF0Y2hlcnMnXHJcblxyXG5leHBvcnQgeyBuYW5vaWQgfSBmcm9tICcuL25hbm9pZCdcclxuXHJcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNQbGFpbk9iamVjdCB9IGZyb20gJy4vaXNQbGFpbk9iamVjdCdcclxuXHJcbmV4cG9ydCB0eXBlIHtcclxuICBMaXN0ZW5lckVmZmVjdCxcclxuICBMaXN0ZW5lck1pZGRsZXdhcmUsXHJcbiAgTGlzdGVuZXJFZmZlY3RBUEksXHJcbiAgTGlzdGVuZXJNaWRkbGV3YXJlSW5zdGFuY2UsXHJcbiAgQ3JlYXRlTGlzdGVuZXJNaWRkbGV3YXJlT3B0aW9ucyxcclxuICBMaXN0ZW5lckVycm9ySGFuZGxlcixcclxuICBUeXBlZFN0YXJ0TGlzdGVuaW5nLFxyXG4gIFR5cGVkQWRkTGlzdGVuZXIsXHJcbiAgVHlwZWRTdG9wTGlzdGVuaW5nLFxyXG4gIFR5cGVkUmVtb3ZlTGlzdGVuZXIsXHJcbiAgVW5zdWJzY3JpYmVMaXN0ZW5lcixcclxuICBVbnN1YnNjcmliZUxpc3RlbmVyT3B0aW9ucyxcclxuICBGb3JrZWRUYXNrRXhlY3V0b3IsXHJcbiAgRm9ya2VkVGFzayxcclxuICBGb3JrZWRUYXNrQVBJLFxyXG4gIEFzeW5jVGFza0V4ZWN1dG9yLFxyXG4gIFN5bmNUYXNrRXhlY3V0b3IsXHJcbiAgVGFza0NhbmNlbGxlZCxcclxuICBUYXNrUmVqZWN0ZWQsXHJcbiAgVGFza1Jlc29sdmVkLFxyXG4gIFRhc2tSZXN1bHQsXHJcbn0gZnJvbSAnLi9saXN0ZW5lck1pZGRsZXdhcmUvaW5kZXgnXHJcblxyXG5leHBvcnQge1xyXG4gIGNyZWF0ZUxpc3RlbmVyTWlkZGxld2FyZSxcclxuICBhZGRMaXN0ZW5lcixcclxuICByZW1vdmVMaXN0ZW5lcixcclxuICBjbGVhckFsbExpc3RlbmVycyxcclxuICBUYXNrQWJvcnRFcnJvcixcclxufSBmcm9tICcuL2xpc3RlbmVyTWlkZGxld2FyZS9pbmRleCdcclxuIiwiaW1wb3J0IHsgY29uZmlndXJlU3RvcmUgfSBmcm9tIFwiQHJlZHV4anMvdG9vbGtpdFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29uZmlndXJlU3RvcmUoe1xyXG4gIHJlZHVjZXI6IHt9XHJcbn0pO1xyXG4iLCJpbXBvcnQgdHlwZSB7XHJcbiAgUmVkdWNlcixcclxuICBSZWR1Y2Vyc01hcE9iamVjdCxcclxuICBNaWRkbGV3YXJlLFxyXG4gIEFjdGlvbixcclxuICBBbnlBY3Rpb24sXHJcbiAgU3RvcmVFbmhhbmNlcixcclxuICBTdG9yZSxcclxuICBEaXNwYXRjaCxcclxuICBQcmVsb2FkZWRTdGF0ZSxcclxuICBDb21iaW5lZFN0YXRlLFxyXG59IGZyb20gJ3JlZHV4J1xyXG5pbXBvcnQgeyBjcmVhdGVTdG9yZSwgY29tcG9zZSwgYXBwbHlNaWRkbGV3YXJlLCBjb21iaW5lUmVkdWNlcnMgfSBmcm9tICdyZWR1eCdcclxuaW1wb3J0IHR5cGUgeyBFbmhhbmNlck9wdGlvbnMgYXMgRGV2VG9vbHNPcHRpb25zIH0gZnJvbSAnLi9kZXZ0b29sc0V4dGVuc2lvbidcclxuaW1wb3J0IHsgY29tcG9zZVdpdGhEZXZUb29scyB9IGZyb20gJy4vZGV2dG9vbHNFeHRlbnNpb24nXHJcblxyXG5pbXBvcnQgaXNQbGFpbk9iamVjdCBmcm9tICcuL2lzUGxhaW5PYmplY3QnXHJcbmltcG9ydCB0eXBlIHtcclxuICBUaHVua01pZGRsZXdhcmVGb3IsXHJcbiAgQ3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlLFxyXG59IGZyb20gJy4vZ2V0RGVmYXVsdE1pZGRsZXdhcmUnXHJcbmltcG9ydCB7IGN1cnJ5R2V0RGVmYXVsdE1pZGRsZXdhcmUgfSBmcm9tICcuL2dldERlZmF1bHRNaWRkbGV3YXJlJ1xyXG5pbXBvcnQgdHlwZSB7IE5vSW5mZXIsIEV4dHJhY3REaXNwYXRjaEV4dGVuc2lvbnMgfSBmcm9tICcuL3RzSGVscGVycydcclxuXHJcbmNvbnN0IElTX1BST0RVQ1RJT04gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nXHJcblxyXG4vKipcclxuICogQ2FsbGJhY2sgZnVuY3Rpb24gdHlwZSwgdG8gYmUgdXNlZCBpbiBgQ29uZmlndXJlU3RvcmVPcHRpb25zLmVuaGFuY2Vyc2BcclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ29uZmlndXJlRW5oYW5jZXJzQ2FsbGJhY2sgPSAoXHJcbiAgZGVmYXVsdEVuaGFuY2VyczogcmVhZG9ubHkgU3RvcmVFbmhhbmNlcltdXHJcbikgPT4gU3RvcmVFbmhhbmNlcltdXHJcblxyXG4vKipcclxuICogT3B0aW9ucyBmb3IgYGNvbmZpZ3VyZVN0b3JlKClgLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIENvbmZpZ3VyZVN0b3JlT3B0aW9uczxcclxuICBTID0gYW55LFxyXG4gIEEgZXh0ZW5kcyBBY3Rpb24gPSBBbnlBY3Rpb24sXHJcbiAgTSBleHRlbmRzIE1pZGRsZXdhcmVzPFM+ID0gTWlkZGxld2FyZXM8Uz5cclxuPiB7XHJcbiAgLyoqXHJcbiAgICogQSBzaW5nbGUgcmVkdWNlciBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgdXNlZCBhcyB0aGUgcm9vdCByZWR1Y2VyLCBvciBhblxyXG4gICAqIG9iamVjdCBvZiBzbGljZSByZWR1Y2VycyB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIGBjb21iaW5lUmVkdWNlcnMoKWAuXHJcbiAgICovXHJcbiAgcmVkdWNlcjogUmVkdWNlcjxTLCBBPiB8IFJlZHVjZXJzTWFwT2JqZWN0PFMsIEE+XHJcblxyXG4gIC8qKlxyXG4gICAqIEFuIGFycmF5IG9mIFJlZHV4IG1pZGRsZXdhcmUgdG8gaW5zdGFsbC4gSWYgbm90IHN1cHBsaWVkLCBkZWZhdWx0cyB0b1xyXG4gICAqIHRoZSBzZXQgb2YgbWlkZGxld2FyZSByZXR1cm5lZCBieSBgZ2V0RGVmYXVsdE1pZGRsZXdhcmUoKWAuXHJcbiAgICogXHJcbiAgICogQGV4YW1wbGUgYG1pZGRsZXdhcmU6IChnRE0pID0+IGdETSgpLmNvbmNhdChsb2dnZXIsIGFwaU1pZGRsZXdhcmUsIHlvdXJDdXN0b21NaWRkbGV3YXJlKWBcclxuICAgKiBAc2VlIGh0dHBzOi8vcmVkdXgtdG9vbGtpdC5qcy5vcmcvYXBpL2dldERlZmF1bHRNaWRkbGV3YXJlI2ludGVuZGVkLXVzYWdlXHJcbiAgICovXHJcbiAgbWlkZGxld2FyZT86ICgoZ2V0RGVmYXVsdE1pZGRsZXdhcmU6IEN1cnJpZWRHZXREZWZhdWx0TWlkZGxld2FyZTxTPikgPT4gTSkgfCBNXHJcblxyXG4gIC8qKlxyXG4gICAqIFdoZXRoZXIgdG8gZW5hYmxlIFJlZHV4IERldlRvb2xzIGludGVncmF0aW9uLiBEZWZhdWx0cyB0byBgdHJ1ZWAuXHJcbiAgICpcclxuICAgKiBBZGRpdGlvbmFsIGNvbmZpZ3VyYXRpb24gY2FuIGJlIGRvbmUgYnkgcGFzc2luZyBSZWR1eCBEZXZUb29scyBvcHRpb25zXHJcbiAgICovXHJcbiAgZGV2VG9vbHM/OiBib29sZWFuIHwgRGV2VG9vbHNPcHRpb25zXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBpbml0aWFsIHN0YXRlLCBzYW1lIGFzIFJlZHV4J3MgY3JlYXRlU3RvcmUuXHJcbiAgICogWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXQgdG8gaHlkcmF0ZSB0aGUgc3RhdGVcclxuICAgKiBmcm9tIHRoZSBzZXJ2ZXIgaW4gdW5pdmVyc2FsIGFwcHMsIG9yIHRvIHJlc3RvcmUgYSBwcmV2aW91c2x5IHNlcmlhbGl6ZWRcclxuICAgKiB1c2VyIHNlc3Npb24uIElmIHlvdSB1c2UgYGNvbWJpbmVSZWR1Y2VycygpYCB0byBwcm9kdWNlIHRoZSByb290IHJlZHVjZXJcclxuICAgKiBmdW5jdGlvbiAoZWl0aGVyIGRpcmVjdGx5IG9yIGluZGlyZWN0bHkgYnkgcGFzc2luZyBhbiBvYmplY3QgYXMgYHJlZHVjZXJgKSxcclxuICAgKiB0aGlzIG11c3QgYmUgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgYXMgdGhlIHJlZHVjZXIgbWFwIGtleXMuXHJcbiAgICovXHJcbiAgLyogXHJcbiAgTm90IDEwMCUgY29ycmVjdCBidXQgdGhlIGJlc3QgYXBwcm94aW1hdGlvbiB3ZSBjYW4gZ2V0OlxyXG4gIC0gaWYgUyBpcyBhIGBDb21iaW5lZFN0YXRlYCBhcHBseWluZyBhIHNlY29uZCBgQ29tYmluZWRTdGF0ZWAgb24gaXQgZG9lcyBub3QgY2hhbmdlIGFueXRoaW5nLlxyXG4gIC0gaWYgaXQgaXMgbm90LCB0aGVyZSBjb3VsZCBiZSB0d28gY2FzZXM6XHJcbiAgICAtIGBSZWR1Y2Vyc01hcE9iamVjdDxTLCBBPmAgaXMgYmVpbmcgcGFzc2VkIGluLiBJbiB0aGlzIGNhc2UsIHdlIHdpbGwgY2FsbCBgY29tYmluZVJlZHVjZXJzYCBvbiBpdCBhbmQgYENvbWJpbmVkU3RhdGU8Uz5gIGlzIGNvcnJlY3RcclxuICAgIC0gYFJlZHVjZXI8UywgQT5gIGlzIGJlaW5nIHBhc3NlZCBpbi4gSW4gdGhpcyBjYXNlLCBhY3R1YWxseSBgQ29tYmluZWRTdGF0ZTxTPmAgaXMgd3JvbmcgYW5kIGBTYCB3b3VsZCBiZSBjb3JyZWN0LlxyXG4gICAgQXMgd2UgY2Fubm90IGRpc3Rpbmd1aXNoIGJldHdlZW4gdGhvc2UgdHdvIGNhc2VzIHdpdGhvdXQgYWRkaW5nIGFub3RoZXIgZ2VuZXJpYyBwYXJhbXRlciwgXHJcbiAgICB3ZSBqdXN0IG1ha2UgdGhlIHByYWdtYXRpYyBhc3N1bXB0aW9uIHRoYXQgdGhlIGxhdHRlciBhbG1vc3QgbmV2ZXIgaGFwcGVucy5cclxuICAqL1xyXG4gIHByZWxvYWRlZFN0YXRlPzogUHJlbG9hZGVkU3RhdGU8Q29tYmluZWRTdGF0ZTxOb0luZmVyPFM+Pj5cclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIHN0b3JlIGVuaGFuY2VycyB0byBhcHBseS4gU2VlIFJlZHV4J3MgYGNyZWF0ZVN0b3JlKClgLlxyXG4gICAqIEFsbCBlbmhhbmNlcnMgd2lsbCBiZSBpbmNsdWRlZCBiZWZvcmUgdGhlIERldlRvb2xzIEV4dGVuc2lvbiBlbmhhbmNlci5cclxuICAgKiBJZiB5b3UgbmVlZCB0byBjdXN0b21pemUgdGhlIG9yZGVyIG9mIGVuaGFuY2Vycywgc3VwcGx5IGEgY2FsbGJhY2tcclxuICAgKiBmdW5jdGlvbiB0aGF0IHdpbGwgcmVjZWl2ZSB0aGUgb3JpZ2luYWwgYXJyYXkgKGllLCBgW2FwcGx5TWlkZGxld2FyZV1gKSxcclxuICAgKiBhbmQgc2hvdWxkIHJldHVybiBhIG5ldyBhcnJheSAoc3VjaCBhcyBgW2FwcGx5TWlkZGxld2FyZSwgb2ZmbGluZV1gKS5cclxuICAgKiBJZiB5b3Ugb25seSBuZWVkIHRvIGFkZCBtaWRkbGV3YXJlLCB5b3UgY2FuIHVzZSB0aGUgYG1pZGRsZXdhcmVgIHBhcmFtZXRlciBpbnN0ZWFkLlxyXG4gICAqL1xyXG4gIGVuaGFuY2Vycz86IFN0b3JlRW5oYW5jZXJbXSB8IENvbmZpZ3VyZUVuaGFuY2Vyc0NhbGxiYWNrXHJcbn1cclxuXHJcbnR5cGUgTWlkZGxld2FyZXM8Uz4gPSBSZWFkb25seUFycmF5PE1pZGRsZXdhcmU8e30sIFM+PlxyXG5cclxuLyoqXHJcbiAqIEEgUmVkdXggc3RvcmUgcmV0dXJuZWQgYnkgYGNvbmZpZ3VyZVN0b3JlKClgLiBTdXBwb3J0cyBkaXNwYXRjaGluZ1xyXG4gKiBzaWRlLWVmZmVjdGZ1bCBfdGh1bmtzXyBpbiBhZGRpdGlvbiB0byBwbGFpbiBhY3Rpb25zLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEVuaGFuY2VkU3RvcmU8XHJcbiAgUyA9IGFueSxcclxuICBBIGV4dGVuZHMgQWN0aW9uID0gQW55QWN0aW9uLFxyXG4gIE0gZXh0ZW5kcyBNaWRkbGV3YXJlczxTPiA9IE1pZGRsZXdhcmVzPFM+XHJcbj4gZXh0ZW5kcyBTdG9yZTxTLCBBPiB7XHJcbiAgLyoqXHJcbiAgICogVGhlIGBkaXNwYXRjaGAgbWV0aG9kIG9mIHlvdXIgc3RvcmUsIGVuaGFuY2VkIGJ5IGFsbCBpdHMgbWlkZGxld2FyZXMuXHJcbiAgICpcclxuICAgKiBAaW5oZXJpdGRvY1xyXG4gICAqL1xyXG4gIGRpc3BhdGNoOiBFeHRyYWN0RGlzcGF0Y2hFeHRlbnNpb25zPE0+ICYgRGlzcGF0Y2g8QT5cclxufVxyXG5cclxuLyoqXHJcbiAqIEEgZnJpZW5kbHkgYWJzdHJhY3Rpb24gb3ZlciB0aGUgc3RhbmRhcmQgUmVkdXggYGNyZWF0ZVN0b3JlKClgIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0gY29uZmlnIFRoZSBzdG9yZSBjb25maWd1cmF0aW9uLlxyXG4gKiBAcmV0dXJucyBBIGNvbmZpZ3VyZWQgUmVkdXggc3RvcmUuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjb25maWd1cmVTdG9yZTxcclxuICBTID0gYW55LFxyXG4gIEEgZXh0ZW5kcyBBY3Rpb24gPSBBbnlBY3Rpb24sXHJcbiAgTSBleHRlbmRzIE1pZGRsZXdhcmVzPFM+ID0gW1RodW5rTWlkZGxld2FyZUZvcjxTPl1cclxuPihvcHRpb25zOiBDb25maWd1cmVTdG9yZU9wdGlvbnM8UywgQSwgTT4pOiBFbmhhbmNlZFN0b3JlPFMsIEEsIE0+IHtcclxuICBjb25zdCBjdXJyaWVkR2V0RGVmYXVsdE1pZGRsZXdhcmUgPSBjdXJyeUdldERlZmF1bHRNaWRkbGV3YXJlPFM+KClcclxuXHJcbiAgY29uc3Qge1xyXG4gICAgcmVkdWNlciA9IHVuZGVmaW5lZCxcclxuICAgIG1pZGRsZXdhcmUgPSBjdXJyaWVkR2V0RGVmYXVsdE1pZGRsZXdhcmUoKSxcclxuICAgIGRldlRvb2xzID0gdHJ1ZSxcclxuICAgIHByZWxvYWRlZFN0YXRlID0gdW5kZWZpbmVkLFxyXG4gICAgZW5oYW5jZXJzID0gdW5kZWZpbmVkLFxyXG4gIH0gPSBvcHRpb25zIHx8IHt9XHJcblxyXG4gIGxldCByb290UmVkdWNlcjogUmVkdWNlcjxTLCBBPlxyXG5cclxuICBpZiAodHlwZW9mIHJlZHVjZXIgPT09ICdmdW5jdGlvbicpIHtcclxuICAgIHJvb3RSZWR1Y2VyID0gcmVkdWNlclxyXG4gIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChyZWR1Y2VyKSkge1xyXG4gICAgcm9vdFJlZHVjZXIgPSBjb21iaW5lUmVkdWNlcnMocmVkdWNlcilcclxuICB9IGVsc2Uge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICAnXCJyZWR1Y2VyXCIgaXMgYSByZXF1aXJlZCBhcmd1bWVudCwgYW5kIG11c3QgYmUgYSBmdW5jdGlvbiBvciBhbiBvYmplY3Qgb2YgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHBhc3NlZCB0byBjb21iaW5lUmVkdWNlcnMnXHJcbiAgICApXHJcbiAgfVxyXG5cclxuICBsZXQgZmluYWxNaWRkbGV3YXJlID0gbWlkZGxld2FyZVxyXG4gIGlmICh0eXBlb2YgZmluYWxNaWRkbGV3YXJlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICBmaW5hbE1pZGRsZXdhcmUgPSBmaW5hbE1pZGRsZXdhcmUoY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlKVxyXG5cclxuICAgIGlmICghSVNfUFJPRFVDVElPTiAmJiAhQXJyYXkuaXNBcnJheShmaW5hbE1pZGRsZXdhcmUpKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgICAnd2hlbiB1c2luZyBhIG1pZGRsZXdhcmUgYnVpbGRlciBmdW5jdGlvbiwgYW4gYXJyYXkgb2YgbWlkZGxld2FyZSBtdXN0IGJlIHJldHVybmVkJ1xyXG4gICAgICApXHJcbiAgICB9XHJcbiAgfVxyXG4gIGlmIChcclxuICAgICFJU19QUk9EVUNUSU9OICYmXHJcbiAgICBmaW5hbE1pZGRsZXdhcmUuc29tZSgoaXRlbTogYW55KSA9PiB0eXBlb2YgaXRlbSAhPT0gJ2Z1bmN0aW9uJylcclxuICApIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgJ2VhY2ggbWlkZGxld2FyZSBwcm92aWRlZCB0byBjb25maWd1cmVTdG9yZSBtdXN0IGJlIGEgZnVuY3Rpb24nXHJcbiAgICApXHJcbiAgfVxyXG5cclxuICBjb25zdCBtaWRkbGV3YXJlRW5oYW5jZXIgPSBhcHBseU1pZGRsZXdhcmUoLi4uZmluYWxNaWRkbGV3YXJlKVxyXG5cclxuICBsZXQgZmluYWxDb21wb3NlID0gY29tcG9zZVxyXG5cclxuICBpZiAoZGV2VG9vbHMpIHtcclxuICAgIGZpbmFsQ29tcG9zZSA9IGNvbXBvc2VXaXRoRGV2VG9vbHMoe1xyXG4gICAgICAvLyBFbmFibGUgY2FwdHVyZSBvZiBzdGFjayB0cmFjZXMgZm9yIGRpc3BhdGNoZWQgUmVkdXggYWN0aW9uc1xyXG4gICAgICB0cmFjZTogIUlTX1BST0RVQ1RJT04sXHJcbiAgICAgIC4uLih0eXBlb2YgZGV2VG9vbHMgPT09ICdvYmplY3QnICYmIGRldlRvb2xzKSxcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBsZXQgc3RvcmVFbmhhbmNlcnM6IFN0b3JlRW5oYW5jZXJbXSA9IFttaWRkbGV3YXJlRW5oYW5jZXJdXHJcblxyXG4gIGlmIChBcnJheS5pc0FycmF5KGVuaGFuY2VycykpIHtcclxuICAgIHN0b3JlRW5oYW5jZXJzID0gW21pZGRsZXdhcmVFbmhhbmNlciwgLi4uZW5oYW5jZXJzXVxyXG4gIH0gZWxzZSBpZiAodHlwZW9mIGVuaGFuY2VycyA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgc3RvcmVFbmhhbmNlcnMgPSBlbmhhbmNlcnMoc3RvcmVFbmhhbmNlcnMpXHJcbiAgfVxyXG5cclxuICBjb25zdCBjb21wb3NlZEVuaGFuY2VyID0gZmluYWxDb21wb3NlKC4uLnN0b3JlRW5oYW5jZXJzKSBhcyBhbnlcclxuXHJcbiAgcmV0dXJuIGNyZWF0ZVN0b3JlKHJvb3RSZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgY29tcG9zZWRFbmhhbmNlcilcclxufVxyXG4iLCJpbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tL2NsaWVudCc7XG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IEFwcCBmcm9tICcuL0FwcCc7XG5pbXBvcnQgcmVwb3J0V2ViVml0YWxzIGZyb20gJy4vcmVwb3J0V2ViVml0YWxzJztcbmltcG9ydCBzdG9yZSBmcm9tIFwiLi9zdG9yZVwiO1xuXG5jb25zdCByb290ID0gUmVhY3RET00uY3JlYXRlUm9vdChcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKSBhcyBIVE1MRWxlbWVudFxuKTtcbnJvb3QucmVuZGVyKFxuICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cbiAgICA8QXBwIC8+XG4gIDwvUHJvdmlkZXI+XG4pO1xuXG4vLyBJZiB5b3Ugd2FudCB0byBzdGFydCBtZWFzdXJpbmcgcGVyZm9ybWFuY2UgaW4geW91ciBhcHAsIHBhc3MgYSBmdW5jdGlvblxuLy8gdG8gbG9nIHJlc3VsdHMgKGZvciBleGFtcGxlOiByZXBvcnRXZWJWaXRhbHMoY29uc29sZS5sb2cpKVxuLy8gb3Igc2VuZCB0byBhbiBhbmFseXRpY3MgZW5kcG9pbnQuIExlYXJuIG1vcmU6IGh0dHBzOi8vYml0Lmx5L0NSQS12aXRhbHNcbnJlcG9ydFdlYlZpdGFscygpO1xuIl0sIm5hbWVzIjpbInJlYWN0SXMiLCJyZXF1aXJlIiwiUkVBQ1RfU1RBVElDUyIsImNoaWxkQ29udGV4dFR5cGVzIiwiY29udGV4dFR5cGUiLCJjb250ZXh0VHlwZXMiLCJkZWZhdWx0UHJvcHMiLCJkaXNwbGF5TmFtZSIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm1peGlucyIsInByb3BUeXBlcyIsInR5cGUiLCJLTk9XTl9TVEFUSUNTIiwibmFtZSIsImxlbmd0aCIsInByb3RvdHlwZSIsImNhbGxlciIsImNhbGxlZSIsImFyZ3VtZW50cyIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsImdldFN0YXRpY3MiLCJjb21wb25lbnQiLCJpc01lbW8iLCJGb3J3YXJkUmVmIiwicmVuZGVyIiwiTWVtbyIsImRlZmluZVByb3BlcnR5IiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldFByb3RvdHlwZU9mIiwib2JqZWN0UHJvdG90eXBlIiwibW9kdWxlIiwiZXhwb3J0cyIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50Iiwia2V5cyIsImNvbmNhdCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiaSIsImtleSIsImRlc2NyaXB0b3IiLCJlIiwiYiIsIlN5bWJvbCIsImZvciIsImMiLCJkIiwiZiIsImciLCJoIiwiayIsImwiLCJtIiwibiIsInAiLCJxIiwiciIsInQiLCJ2IiwidyIsIngiLCJ5IiwieiIsImEiLCJ1IiwiJCR0eXBlb2YiLCJBIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJFbGVtZW50IiwiRnJhZ21lbnQiLCJMYXp5IiwiUG9ydGFsIiwiUHJvZmlsZXIiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJpc0FzeW5jTW9kZSIsImlzQ29uY3VycmVudE1vZGUiLCJpc0NvbnRleHRDb25zdW1lciIsImlzQ29udGV4dFByb3ZpZGVyIiwiaXNFbGVtZW50IiwiaXNGb3J3YXJkUmVmIiwiaXNGcmFnbWVudCIsImlzTGF6eSIsImlzUG9ydGFsIiwiaXNQcm9maWxlciIsImlzU3RyaWN0TW9kZSIsImlzU3VzcGVuc2UiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJ0eXBlT2YiLCJhYSIsImJhIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZGEiLCJTZXQiLCJlYSIsImZhIiwiaGEiLCJhZGQiLCJpYSIsIndpbmRvdyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImphIiwiaGFzT3duUHJvcGVydHkiLCJrYSIsImxhIiwibWEiLCJ0aGlzIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInNhbml0aXplVVJMIiwicmVtb3ZlRW1wdHlTdHJpbmciLCJzcGxpdCIsImZvckVhY2giLCJ0b0xvd2VyQ2FzZSIsInFhIiwicmEiLCJ0b1VwcGVyQ2FzZSIsInNhIiwic2xpY2UiLCJvYSIsImlzTmFOIiwicGEiLCJjYWxsIiwidGVzdCIsIm5hIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJyZXBsYWNlIiwieGxpbmtIcmVmIiwidGEiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsInVhIiwidmEiLCJ3YSIsInhhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJpdGVyYXRvciIsIkphIiwiS2EiLCJhc3NpZ24iLCJMYSIsIkVycm9yIiwic3RhY2siLCJ0cmltIiwibWF0Y2giLCJNYSIsIk5hIiwicHJlcGFyZVN0YWNrVHJhY2UiLCJzZXQiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiaW5jbHVkZXMiLCJPYSIsInRhZyIsIlBhIiwiX2NvbnRleHQiLCJfcGF5bG9hZCIsIl9pbml0IiwiUWEiLCJSYSIsIlNhIiwibm9kZU5hbWUiLCJVYSIsIl92YWx1ZVRyYWNrZXIiLCJjb25zdHJ1Y3RvciIsImdldCIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiVGEiLCJWYSIsImNoZWNrZWQiLCJ2YWx1ZSIsIldhIiwiYWN0aXZlRWxlbWVudCIsImJvZHkiLCJYYSIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiWWEiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiWmEiLCIkYSIsImJiIiwiY2IiLCJvd25lckRvY3VtZW50IiwiZGIiLCJBcnJheSIsImlzQXJyYXkiLCJlYiIsIm9wdGlvbnMiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsImRpc2FibGVkIiwiZmIiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImNoaWxkcmVuIiwiZ2IiLCJoYiIsImliIiwidGV4dENvbnRlbnQiLCJqYiIsImtiIiwibGIiLCJtYiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsInZhbHVlT2YiLCJ0b1N0cmluZyIsImZpcnN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsImFwcGVuZENoaWxkIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIm5iIiwibGFzdENoaWxkIiwibm9kZVR5cGUiLCJub2RlVmFsdWUiLCJvYiIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYXNwZWN0UmF0aW8iLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJwYiIsInFiIiwicmIiLCJzdHlsZSIsImluZGV4T2YiLCJzZXRQcm9wZXJ0eSIsImNoYXJBdCIsInN1YnN0cmluZyIsInNiIiwibWVudWl0ZW0iLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInNvdXJjZSIsInRyYWNrIiwid2JyIiwidGIiLCJ1YiIsImlzIiwidmIiLCJ3YiIsInRhcmdldCIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsInBhcmVudE5vZGUiLCJ4YiIsInliIiwiemIiLCJBYiIsIkJiIiwic3RhdGVOb2RlIiwiQ2IiLCJEYiIsInB1c2giLCJFYiIsIkZiIiwiR2IiLCJIYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJNYiIsImFwcGx5Iiwib25FcnJvciIsIk5iIiwiT2IiLCJQYiIsIlFiIiwiUmIiLCJTYiIsIlViIiwiYWx0ZXJuYXRlIiwicmV0dXJuIiwiZmxhZ3MiLCJWYiIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiV2IiLCJZYiIsImNoaWxkIiwic2libGluZyIsImN1cnJlbnQiLCJYYiIsIlpiIiwiJGIiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwiYWMiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsImJjIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJjYyIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIkIiLCJ1bnN0YWJsZV9ub3ciLCJkYyIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiZWMiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsImZjIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJnYyIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiaGMiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsImljIiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwiamMiLCJrYyIsIm5jIiwiTWF0aCIsImNsejMyIiwib2MiLCJwYyIsImxvZyIsIkxOMiIsInFjIiwicmMiLCJzYyIsInRjIiwicGVuZGluZ0xhbmVzIiwic3VzcGVuZGVkTGFuZXMiLCJwaW5nZWRMYW5lcyIsImVudGFuZ2xlZExhbmVzIiwiZW50YW5nbGVtZW50cyIsInVjIiwid2MiLCJ4YyIsInljIiwiemMiLCJldmVudFRpbWVzIiwiQmMiLCJDIiwiQ2MiLCJEYyIsIkVjIiwiRmMiLCJHYyIsIkhjIiwiSWMiLCJKYyIsIktjIiwiTGMiLCJNYyIsIk5jIiwiTWFwIiwiT2MiLCJQYyIsIlFjIiwiUmMiLCJkZWxldGUiLCJwb2ludGVySWQiLCJTYyIsIm5hdGl2ZUV2ZW50IiwiYmxvY2tlZE9uIiwiZG9tRXZlbnROYW1lIiwiZXZlbnRTeXN0ZW1GbGFncyIsInRhcmdldENvbnRhaW5lcnMiLCJVYyIsIlZjIiwicHJpb3JpdHkiLCJpc0RlaHlkcmF0ZWQiLCJjb250YWluZXJJbmZvIiwiV2MiLCJYYyIsImRpc3BhdGNoRXZlbnQiLCJzaGlmdCIsIlljIiwiWmMiLCIkYyIsImFkIiwiYmQiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsImNkIiwiZGQiLCJ0cmFuc2l0aW9uIiwiZWQiLCJmZCIsImdkIiwiaGQiLCJUYyIsInN0b3BQcm9wYWdhdGlvbiIsImlkIiwiamQiLCJrZCIsImxkIiwibWQiLCJuZCIsImtleUNvZGUiLCJjaGFyQ29kZSIsIm9kIiwicGQiLCJxZCIsIl9yZWFjdE5hbWUiLCJfdGFyZ2V0SW5zdCIsImN1cnJlbnRUYXJnZXQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsInByZXZlbnREZWZhdWx0IiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImlzUGVyc2lzdGVudCIsInZkIiwid2QiLCJ4ZCIsInJkIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiRGF0ZSIsIm5vdyIsImlzVHJ1c3RlZCIsInNkIiwidGQiLCJ2aWV3IiwiZGV0YWlsIiwidWQiLCJ6ZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwiY3RybEtleSIsInNoaWZ0S2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImdldE1vZGlmaWVyU3RhdGUiLCJ5ZCIsImJ1dHRvbiIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJBZCIsIkNkIiwiZGF0YVRyYW5zZmVyIiwiRWQiLCJHZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJIZCIsImNsaXBib2FyZERhdGEiLCJJZCIsIktkIiwiZGF0YSIsIkxkIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIk1kIiwiTmQiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiT2QiLCJQZCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImNvZGUiLCJsb2NhdGlvbiIsInJlcGVhdCIsImxvY2FsZSIsIndoaWNoIiwiUWQiLCJTZCIsIndpZHRoIiwiaGVpZ2h0IiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlVkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIldkIiwiWGQiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIllkIiwiWmQiLCIkZCIsImFlIiwiZG9jdW1lbnRNb2RlIiwiYmUiLCJjZSIsImRlIiwiZWUiLCJmZSIsImdlIiwiaGUiLCJrZSIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsIm51bWJlciIsInBhc3N3b3JkIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsInVybCIsIndlZWsiLCJsZSIsIm1lIiwibmUiLCJldmVudCIsImxpc3RlbmVycyIsIm9lIiwicGUiLCJxZSIsInJlIiwic2UiLCJ0ZSIsInVlIiwidmUiLCJ3ZSIsInhlIiwieWUiLCJvbmlucHV0IiwiemUiLCJkZXRhY2hFdmVudCIsIkFlIiwiQmUiLCJhdHRhY2hFdmVudCIsIkNlIiwiRGUiLCJFZSIsIkdlIiwiSGUiLCJJZSIsIkplIiwibm9kZSIsIm9mZnNldCIsIm5leHRTaWJsaW5nIiwiS2UiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTGUiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJocmVmIiwiTWUiLCJjb250ZW50RWRpdGFibGUiLCJOZSIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJkb2N1bWVudEVsZW1lbnQiLCJzdGFydCIsImVuZCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwibWluIiwiZGVmYXVsdFZpZXciLCJnZXRTZWxlY3Rpb24iLCJleHRlbmQiLCJyYW5nZUNvdW50IiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwiZWxlbWVudCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwiZm9jdXMiLCJPZSIsIlBlIiwiUWUiLCJSZSIsIlNlIiwiVGUiLCJVZSIsIlZlIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiV2UiLCJYZSIsIlllIiwiYW5pbWF0aW9uIiwiWmUiLCIkZSIsImFmIiwiYmYiLCJjZiIsImRmIiwiZWYiLCJmZiIsImdmIiwia2YiLCJsZiIsIm1mIiwiVGIiLCJpbnN0YW5jZSIsImxpc3RlbmVyIiwiRCIsIm5mIiwiaGFzIiwib2YiLCJwZiIsInFmIiwicmFuZG9tIiwicmYiLCJiaW5kIiwiY2FwdHVyZSIsInBhc3NpdmUiLCJKIiwiRiIsInNmIiwidGYiLCJwYXJlbnRXaW5kb3ciLCJ1ZiIsInZmIiwiWiIsInlhIiwiYWIiLCJjYSIsImllIiwiY2hhciIsImplIiwidW5zaGlmdCIsIndmIiwieGYiLCJ5ZiIsInpmIiwiQWYiLCJCZiIsIkNmIiwiRGYiLCJfX2h0bWwiLCJFZiIsInNldFRpbWVvdXQiLCJGZiIsImNsZWFyVGltZW91dCIsIkdmIiwiUHJvbWlzZSIsIklmIiwicXVldWVNaWNyb3Rhc2siLCJyZXNvbHZlIiwidGhlbiIsImNhdGNoIiwiSGYiLCJKZiIsIktmIiwiTGYiLCJwcmV2aW91c1NpYmxpbmciLCJNZiIsIk5mIiwiT2YiLCJQZiIsIlFmIiwiUmYiLCJTZiIsIlRmIiwiRSIsIkciLCJVZiIsIkgiLCJWZiIsIldmIiwiWGYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJZZiIsIlpmIiwiJGYiLCJhZyIsImdldENoaWxkQ29udGV4dCIsImJnIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJjZyIsImRnIiwiZWciLCJmZyIsImdnIiwiaWciLCJqZyIsImtnIiwibGciLCJtZyIsIm5nIiwib2ciLCJwZyIsInFnIiwiX2N1cnJlbnRWYWx1ZSIsInJnIiwiY2hpbGRMYW5lcyIsInNnIiwiZGVwZW5kZW5jaWVzIiwiZmlyc3RDb250ZXh0IiwibGFuZXMiLCJ0ZyIsInVnIiwiY29udGV4dCIsIm1lbW9pemVkVmFsdWUiLCJuZXh0IiwidmciLCJ3ZyIsInhnIiwidXBkYXRlUXVldWUiLCJiYXNlU3RhdGUiLCJmaXJzdEJhc2VVcGRhdGUiLCJsYXN0QmFzZVVwZGF0ZSIsInNoYXJlZCIsInBlbmRpbmciLCJpbnRlcmxlYXZlZCIsImVmZmVjdHMiLCJ5ZyIsInpnIiwiZXZlbnRUaW1lIiwibGFuZSIsInBheWxvYWQiLCJjYWxsYmFjayIsIkFnIiwiQmciLCJDZyIsIkRnIiwiRWciLCJGZyIsIkdnIiwiSGciLCJDb21wb25lbnQiLCJyZWZzIiwiSWciLCJNZyIsImlzTW91bnRlZCIsIl9yZWFjdEludGVybmFscyIsImVucXVldWVTZXRTdGF0ZSIsIkpnIiwiS2ciLCJMZyIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJOZyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiT2ciLCJzdGF0ZSIsInVwZGF0ZXIiLCJQZyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlFnIiwicHJvcHMiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsIlJnIiwiU2ciLCJUZyIsIlVnIiwiVmciLCJXZyIsIlhnIiwiWWciLCJaZyIsIiRnIiwiYWgiLCJiaCIsImNoIiwiZGgiLCJlaCIsIkkiLCJmaCIsImdoIiwiaGgiLCJlbGVtZW50VHlwZSIsImRlbGV0aW9ucyIsImloIiwicGVuZGluZ1Byb3BzIiwib3ZlcmZsb3ciLCJ0cmVlQ29udGV4dCIsInJldHJ5TGFuZSIsImpoIiwibW9kZSIsImtoIiwibGgiLCJtaCIsIm1lbW9pemVkUHJvcHMiLCJuaCIsIm9oIiwicGgiLCJyZWYiLCJfb3duZXIiLCJfc3RyaW5nUmVmIiwicWgiLCJqb2luIiwicmgiLCJzaCIsImluZGV4IiwidGgiLCJ1aCIsInZoIiwiaW1wbGVtZW50YXRpb24iLCJ3aCIsInhoIiwiZG9uZSIsInloIiwiemgiLCJBaCIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJ0YWdOYW1lIiwiR2giLCJIaCIsIkloIiwiSyIsIkpoIiwicmV2ZWFsT3JkZXIiLCJLaCIsIkxoIiwiX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnkiLCJNaCIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJOaCIsIk9oIiwiTCIsIk0iLCJOIiwiUGgiLCJRaCIsIlJoIiwiU2giLCJPIiwiVGgiLCJVaCIsIlZoIiwiV2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImJhc2VRdWV1ZSIsInF1ZXVlIiwiYWkiLCJiaSIsImNpIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImFjdGlvbiIsImhhc0VhZ2VyU3RhdGUiLCJlYWdlclN0YXRlIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJkaXNwYXRjaCIsImRpIiwiZWkiLCJmaSIsImdpIiwiaGkiLCJnZXRTbmFwc2hvdCIsImlpIiwiamkiLCJQIiwia2kiLCJsYXN0RWZmZWN0Iiwic3RvcmVzIiwibGkiLCJtaSIsIm5pIiwiY3JlYXRlIiwiZGVzdHJveSIsImRlcHMiLCJvaSIsInBpIiwicWkiLCJyaSIsInNpIiwidGkiLCJ1aSIsInZpIiwid2kiLCJ4aSIsInlpIiwiemkiLCJBaSIsIkJpIiwiQ2kiLCJEaSIsIkVpIiwiRmkiLCJHaSIsInJlYWRDb250ZXh0IiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlRWZmZWN0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUluc2VydGlvbkVmZmVjdCIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlU3RhdGUiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRGVmZXJyZWRWYWx1ZSIsInVzZVRyYW5zaXRpb24iLCJ1c2VNdXRhYmxlU291cmNlIiwidXNlU3luY0V4dGVybmFsU3RvcmUiLCJ1c2VJZCIsInVuc3RhYmxlX2lzTmV3UmVjb25jaWxlciIsImlkZW50aWZpZXJQcmVmaXgiLCJIaSIsIm1lc3NhZ2UiLCJJaSIsImNvbnNvbGUiLCJlcnJvciIsIlRpIiwiVmkiLCJXaSIsIkppIiwiV2Vha01hcCIsIktpIiwiTGkiLCJNaSIsIk5pIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJPaSIsImNvbXBvbmVudFN0YWNrIiwiUGkiLCJwaW5nQ2FjaGUiLCJRaSIsIlJpIiwiU2kiLCJYaSIsInRhaWxNb2RlIiwidGFpbCIsIlEiLCJzdWJ0cmVlRmxhZ3MiLCJZaSIsInBlbmRpbmdDb250ZXh0IiwiWmkiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIiwib25DbGljayIsIm9uY2xpY2siLCJzaXplIiwiY3JlYXRlRWxlbWVudE5TIiwiYXV0b0ZvY3VzIiwiY3JlYXRlVGV4dE5vZGUiLCJSIiwiJGkiLCJyZW5kZXJpbmciLCJhaiIsInJlbmRlcmluZ1N0YXJ0VGltZSIsImlzQmFja3dhcmRzIiwibGFzdCIsImJqIiwiY2oiLCJkaiIsIlJlYWN0Q3VycmVudE93bmVyIiwiZWoiLCJmaiIsImdqIiwiaGoiLCJpaiIsImpqIiwia2oiLCJsaiIsImJhc2VMYW5lcyIsImNhY2hlUG9vbCIsInRyYW5zaXRpb25zIiwibWoiLCJuaiIsIm9qIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwicGoiLCJxaiIsInJqIiwic2oiLCJ0aiIsInVqIiwidmoiLCJmYWxsYmFjayIsIndqIiwieGoiLCJ5aiIsInpqIiwiX3JlYWN0UmV0cnkiLCJBaiIsIkJqIiwiQ2oiLCJEaiIsIkVqIiwiR2oiLCJIaiIsIlMiLCJJaiIsIldlYWtTZXQiLCJUIiwiSmoiLCJVIiwiS2oiLCJMaiIsIk5qIiwiT2oiLCJQaiIsIlFqIiwiUmoiLCJTaiIsIlRqIiwiaW5zZXJ0QmVmb3JlIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsIlVqIiwiViIsIlZqIiwiV2oiLCJYaiIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJZaiIsIlpqIiwiYWsiLCJiayIsImNrIiwiZGsiLCJkaXNwbGF5IiwiZWsiLCJmayIsImdrIiwiaGsiLCJpayIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwic3JjIiwiVWsiLCJqayIsImNlaWwiLCJrayIsImxrIiwibWsiLCJXIiwiWCIsIlkiLCJuayIsIm9rIiwicGsiLCJxayIsInJrIiwiSW5maW5pdHkiLCJzayIsInRrIiwidWsiLCJ2ayIsIndrIiwieGsiLCJ5ayIsInprIiwiQWsiLCJCayIsIkNrIiwiY2FsbGJhY2tOb2RlIiwiZXhwaXJhdGlvblRpbWVzIiwiZXhwaXJlZExhbmVzIiwidmMiLCJjYWxsYmFja1ByaW9yaXR5IiwiaGciLCJEayIsIkVrIiwiRmsiLCJHayIsIkhrIiwiSWsiLCJKayIsIktrIiwiTGsiLCJNayIsIk5rIiwiZmluaXNoZWRXb3JrIiwiZmluaXNoZWRMYW5lcyIsIk9rIiwidGltZW91dEhhbmRsZSIsIlBrIiwiUWsiLCJSayIsIlNrIiwiVGsiLCJtdXRhYmxlUmVhZExhbmVzIiwiQWMiLCJNaiIsIm9uQ29tbWl0RmliZXJSb290IiwibGMiLCJvblJlY292ZXJhYmxlRXJyb3IiLCJWayIsIm9uUG9zdENvbW1pdEZpYmVyUm9vdCIsIldrIiwiWGsiLCJaayIsImlzUmVhY3RDb21wb25lbnQiLCJwZW5kaW5nQ2hpbGRyZW4iLCIkayIsIm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEiLCJhbCIsImNhY2hlIiwicGVuZGluZ1N1c3BlbnNlQm91bmRhcmllcyIsImJsIiwiY2wiLCJkbCIsImVsIiwiZmwiLCJnbCIsImhsIiwiRmoiLCJZayIsImpsIiwicmVwb3J0RXJyb3IiLCJrbCIsIl9pbnRlcm5hbFJvb3QiLCJsbCIsIm1sIiwibmwiLCJvbCIsInFsIiwicGwiLCJ1bm1vdW50IiwidW5zdGFibGVfc2NoZWR1bGVIeWRyYXRpb24iLCJzcGxpY2UiLCJxdWVyeVNlbGVjdG9yQWxsIiwiSlNPTiIsInN0cmluZ2lmeSIsImZvcm0iLCJybCIsInVzaW5nQ2xpZW50RW50cnlQb2ludCIsIkV2ZW50cyIsInNsIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwidmVyc2lvbiIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJ0bCIsInJlbmRlcmVyQ29uZmlnIiwib3ZlcnJpZGVIb29rU3RhdGUiLCJvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGgiLCJvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGgiLCJvdmVycmlkZVByb3BzIiwib3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGgiLCJvdmVycmlkZVByb3BzUmVuYW1lUGF0aCIsInNldEVycm9ySGFuZGxlciIsInNldFN1c3BlbnNlSGFuZGxlciIsInNjaGVkdWxlVXBkYXRlIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCIsInNjaGVkdWxlUmVmcmVzaCIsInNjaGVkdWxlUm9vdCIsInNldFJlZnJlc2hIYW5kbGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwicmVjb25jaWxlclZlcnNpb24iLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJ1bCIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0IiwiY3JlYXRlUG9ydGFsIiwiY3JlYXRlUm9vdCIsInVuc3RhYmxlX3N0cmljdE1vZGUiLCJmaW5kRE9NTm9kZSIsImZsdXNoU3luYyIsImh5ZHJhdGUiLCJoeWRyYXRlUm9vdCIsImh5ZHJhdGVkU291cmNlcyIsIl9nZXRWZXJzaW9uIiwiX3NvdXJjZSIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiY2hlY2tEQ0UiLCJlcnIiLCJfX3NlbGYiLCJfX3NvdXJjZSIsImpzeCIsImpzeHMiLCJzZXRTdGF0ZSIsImZvcmNlVXBkYXRlIiwiZXNjYXBlIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJkZWZhdWx0IiwiQ2hpbGRyZW4iLCJtYXAiLCJjb3VudCIsInRvQXJyYXkiLCJvbmx5IiwiUHVyZUNvbXBvbmVudCIsImNsb25lRWxlbWVudCIsImNyZWF0ZUNvbnRleHQiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJfZGVmYXVsdFZhbHVlIiwiX2dsb2JhbE5hbWUiLCJjcmVhdGVGYWN0b3J5IiwiY3JlYXRlUmVmIiwiZm9yd2FyZFJlZiIsImlzVmFsaWRFbGVtZW50IiwibGF6eSIsIm1lbW8iLCJzdGFydFRyYW5zaXRpb24iLCJ1bnN0YWJsZV9hY3QiLCJwb3AiLCJzb3J0SW5kZXgiLCJwZXJmb3JtYW5jZSIsInNldEltbWVkaWF0ZSIsInN0YXJ0VGltZSIsImV4cGlyYXRpb25UaW1lIiwicHJpb3JpdHlMZXZlbCIsIm5hdmlnYXRvciIsInNjaGVkdWxpbmciLCJpc0lucHV0UGVuZGluZyIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwidW5zdGFibGVfUHJvZmlsaW5nIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsImZsb29yIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJkZWxheSIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsIm9iakEiLCJvYmpCIiwiY29tcGFyZUNvbnRleHQiLCJyZXQiLCJrZXlzQSIsImtleXNCIiwiYkhhc093blByb3BlcnR5IiwiaWR4IiwidmFsdWVBIiwidmFsdWVCIiwiaW5zdCIsInVzZVN5bmNFeHRlcm5hbFN0b3JlV2l0aFNlbGVjdG9yIiwiaGFzVmFsdWUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImRlZmluaXRpb24iLCJvIiwiY2h1bmtJZCIsImFsbCIsInJlZHVjZSIsInByb21pc2VzIiwibWluaUNzc0YiLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJvYmoiLCJwcm9wIiwiaW5Qcm9ncmVzcyIsImRhdGFXZWJwYWNrUHJlZml4Iiwic2NyaXB0IiwibmVlZEF0dGFjaCIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInMiLCJnZXRBdHRyaWJ1dGUiLCJjaGFyc2V0IiwidGltZW91dCIsIm9uU2NyaXB0Q29tcGxldGUiLCJwcmV2Iiwib25lcnJvciIsIm9ubG9hZCIsImRvbmVGbnMiLCJmbiIsImhlYWQiLCJ0b1N0cmluZ1RhZyIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJjdXJyZW50U2NyaXB0IiwiaW5zdGFsbGVkQ2h1bmtzIiwiaiIsImluc3RhbGxlZENodW5rRGF0YSIsInByb21pc2UiLCJyZWplY3QiLCJlcnJvclR5cGUiLCJyZWFsU3JjIiwicmVxdWVzdCIsIndlYnBhY2tKc29ucENhbGxiYWNrIiwicGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24iLCJjaHVua0lkcyIsIm1vcmVNb2R1bGVzIiwicnVudGltZSIsInNvbWUiLCJjaHVua0xvYWRpbmdHbG9iYWwiLCJzZWxmIiwiYmF0Y2giLCJnZXRCYXRjaCIsIlJlYWN0UmVkdXhDb250ZXh0IiwiUmVhY3QiLCJudWxsTGlzdGVuZXJzIiwibm90aWZ5IiwiY3JlYXRlU3Vic2NyaXB0aW9uIiwic3RvcmUiLCJwYXJlbnRTdWIiLCJ1bnN1YnNjcmliZSIsImhhbmRsZUNoYW5nZVdyYXBwZXIiLCJzdWJzY3JpcHRpb24iLCJvblN0YXRlQ2hhbmdlIiwidHJ5U3Vic2NyaWJlIiwiYWRkTmVzdGVkU3ViIiwic3Vic2NyaWJlIiwiZmlyc3QiLCJjbGVhciIsImlzU3Vic2NyaWJlZCIsImNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbiIsIm5vdGlmeU5lc3RlZFN1YnMiLCJCb29sZWFuIiwidHJ5VW5zdWJzY3JpYmUiLCJnZXRMaXN0ZW5lcnMiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0Iiwic2VydmVyU3RhdGUiLCJjb250ZXh0VmFsdWUiLCJnZXRTZXJ2ZXJTdGF0ZSIsInByZXZpb3VzU3RhdGUiLCJnZXRTdGF0ZSIsIkNvbnRleHQiLCJuZXdCYXRjaCIsIl90YWdnZWRUZW1wbGF0ZUxpdGVyYWwiLCJzdHJpbmdzIiwicmF3IiwiZnJlZXplIiwiZGVmaW5lUHJvcGVydGllcyIsImluaXRpYWxpemVVc2VTZWxlY3RvciIsImluaXRpYWxpemVDb25uZWN0IiwiY2hhckNvZGVBdCIsInByZWZpeCIsInVzZSIsIm1zR3JpZFJvdyIsIm1zR3JpZFJvd1NwYW4iLCJtc0dyaWRDb2x1bW4iLCJtc0dyaWRDb2x1bW5TcGFuIiwiV2Via2l0TGluZUNsYW1wIiwiYXJnIiwicmVhY3RQcm9wc1JlZ2V4IiwibWVtb2l6ZSIsImludGVycG9sYXRpb25zIiwicmVzdWx0IiwibGVuIiwiRU1QVFlfQVJSQVkiLCJFTVBUWV9PQkpFQ1QiLCJpc0Z1bmN0aW9uIiwiZ2V0Q29tcG9uZW50TmFtZSIsImlzU3R5bGVkQ29tcG9uZW50Iiwic3R5bGVkQ29tcG9uZW50SWQiLCJTQ19BVFRSIiwicHJvY2VzcyIsIlJFQUNUX0FQUF9TQ19BVFRSIiwiSVNfQlJPV1NFUiIsIkRJU0FCTEVfU1BFRURZIiwiU0NfRElTQUJMRV9TUEVFRFkiLCJSRUFDVF9BUFBfU0NfRElTQUJMRV9TUEVFRFkiLCJ0aHJvd1N0eWxlZENvbXBvbmVudHNFcnJvciIsIkRlZmF1bHRHcm91cGVkVGFnIiwiZ3JvdXBTaXplcyIsIlVpbnQzMkFycmF5IiwiaW5kZXhPZkdyb3VwIiwiZ3JvdXAiLCJpbnNlcnRSdWxlcyIsInJ1bGVzIiwib2xkQnVmZmVyIiwib2xkU2l6ZSIsIm5ld1NpemUiLCJ0aHJvd1N0eWxlZEVycm9yIiwicnVsZUluZGV4IiwiaW5zZXJ0UnVsZSIsImNsZWFyR3JvdXAiLCJzdGFydEluZGV4IiwiZW5kSW5kZXgiLCJkZWxldGVSdWxlIiwiZ2V0R3JvdXAiLCJjc3MiLCJnZXRSdWxlIiwiZ3JvdXBJRFJlZ2lzdGVyIiwicmV2ZXJzZVJlZ2lzdGVyIiwibmV4dEZyZWVHcm91cCIsImdldEdyb3VwRm9ySWQiLCJnZXRJZEZvckdyb3VwIiwic2V0R3JvdXBGb3JJZCIsIlNFTEVDVE9SIiwiTUFSS0VSX1JFIiwiUmVnRXhwIiwicmVoeWRyYXRlTmFtZXNGcm9tQ29udGVudCIsInNoZWV0IiwiY29udGVudCIsIm5hbWVzIiwicmVnaXN0ZXJOYW1lIiwicmVoeWRyYXRlU2hlZXRGcm9tVGFnIiwicGFydHMiLCJwYXJ0IiwibWFya2VyIiwicGFyc2VJbnQiLCJnZXRUYWciLCJnZXROb25jZSIsIl9fd2VicGFja19ub25jZV9fIiwibWFrZVN0eWxlVGFnIiwicGFyZW50IiwicHJldlN0eWxlIiwiY2hpbGROb2RlcyIsImhhc0F0dHJpYnV0ZSIsIl9fVkVSU0lPTl9fIiwibm9uY2UiLCJDU1NPTVRhZyIsInN0eWxlU2hlZXRzIiwib3duZXJOb2RlIiwicnVsZSIsIl9lcnJvciIsImNzc1J1bGVzIiwiY3NzVGV4dCIsIlRleHRUYWciLCJub2RlcyIsInJlZk5vZGUiLCJWaXJ0dWFsVGFnIiwiX3RhcmdldCIsIlNIT1VMRF9SRUhZRFJBVEUiLCJkZWZhdWx0T3B0aW9ucyIsImlzU2VydmVyIiwidXNlQ1NTT01JbmplY3Rpb24iLCJTdHlsZVNoZWV0IiwiZ2xvYmFsU3R5bGVzIiwiZ3MiLCJzZXJ2ZXIiLCJyZWdpc3RlcklkIiwicmVjb25zdHJ1Y3RXaXRoT3B0aW9ucyIsIndpdGhOYW1lcyIsImFsbG9jYXRlR1NJbnN0YW5jZSIsImhhc05hbWVGb3JJZCIsImdyb3VwTmFtZXMiLCJjbGVhck5hbWVzIiwiY2xlYXJSdWxlcyIsImNsZWFyVGFnIiwic2VsZWN0b3IiLCJBRF9SRVBMQUNFUl9SIiwiZ2V0QWxwaGFiZXRpY0NoYXIiLCJnZW5lcmF0ZUFscGhhYmV0aWNOYW1lIiwiYWJzIiwicGhhc2giLCJoYXNoIiwiaXNTdGF0aWNSdWxlcyIsIlNFRUQiLCJDb21wb25lbnRTdHlsZSIsImNvbXBvbmVudElkIiwiYmFzZVN0eWxlIiwic3RhdGljUnVsZXNJZCIsImlzU3RhdGljIiwiTk9ERV9FTlYiLCJiYXNlSGFzaCIsImdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzIiwiZXhlY3V0aW9uQ29udGV4dCIsInN0eWxlU2hlZXQiLCJzdHlsaXMiLCJjc3NTdGF0aWMiLCJmbGF0dGVuIiwiZ2VuZXJhdGVOYW1lIiwiY3NzU3RhdGljRm9ybWF0dGVkIiwiZHluYW1pY0hhc2giLCJwYXJ0UnVsZSIsInBhcnRDaHVuayIsInBhcnRTdHJpbmciLCJjc3NGb3JtYXR0ZWQiLCJDT01NRU5UX1JFR0VYIiwiQ09NUExFWF9TRUxFQ1RPUl9QUkVGSVgiLCJjcmVhdGVTdHlsaXNJbnN0YW5jZSIsIl9jb21wb25lbnRJZCIsIl9zZWxlY3RvciIsIl9zZWxlY3RvclJlZ2V4cCIsIl9jb25zZWN1dGl2ZVNlbGZSZWZSZWdFeHAiLCJwbHVnaW5zIiwiU3R5bGlzIiwicGFyc2luZ1J1bGVzIiwicGFyc2VSdWxlc1BsdWdpbiIsInRvU2hlZXQiLCJibG9jayIsInNlbGVjdG9ycyIsInBhcmVudHMiLCJsaW5lIiwiY29sdW1uIiwibnMiLCJkZXB0aCIsImF0IiwiZGVsaW1pdGVyIiwic2VsZlJlZmVyZW5jZVJlcGxhY2VyIiwic3RyaW5nIiwic3RyaW5naWZ5UnVsZXMiLCJmbGF0Q1NTIiwiY3NzU3RyIiwiXyIsImxhc3RJbmRleE9mIiwicGFyc2VkUnVsZXMiLCJhY2MiLCJwbHVnaW4iLCJTdHlsZVNoZWV0Q29udGV4dCIsIlN0eWxpc0NvbnRleHQiLCJtYXN0ZXJTaGVldCIsIm1hc3RlclN0eWxpcyIsInVzZVN0eWxlU2hlZXQiLCJ1c2VTdHlsaXMiLCJTdHlsZVNoZWV0TWFuYWdlciIsInN0eWxpc1BsdWdpbnMiLCJzZXRQbHVnaW5zIiwiY29udGV4dFN0eWxlU2hlZXQiLCJkaXNhYmxlQ1NTT01JbmplY3Rpb24iLCJkaXNhYmxlVmVuZG9yUHJlZml4ZXMiLCJzaGFsbG93ZXF1YWwiLCJLZXlmcmFtZXMiLCJzdHlsaXNJbnN0YW5jZSIsInJlc29sdmVkTmFtZSIsIl90aGlzIiwiZ2V0TmFtZSIsInVwcGVyY2FzZUNoZWNrIiwidXBwZXJjYXNlUGF0dGVybiIsIm1zUGF0dGVybiIsInByZWZpeEFuZExvd2VyQ2FzZSIsImh5cGhlbmF0ZVN0eWxlTmFtZSIsImlzRmFsc2lzaCIsImNodW5rIiwicnVsZVNldCIsImlzUGxhaW5PYmplY3QiLCJvYmpUb0Nzc0FycmF5IiwicHJldktleSIsImlzQ3NzIiwiaHlwaGVuYXRlIiwidW5pdGxlc3MiLCJhZGRUYWciLCJzdHlsZXMiLCJpbnRlcmxlYXZlIiwib3JpZ2luYWxDb25zb2xlRXJyb3IiLCJwcm92aWRlZFRoZW1lIiwidGhlbWUiLCJlc2NhcGVSZWdleCIsImRhc2hlc0F0RW5kcyIsInN0ciIsImlzVGFnIiwiaXNPYmplY3QiLCJ2YWwiLCJpc1ZhbGlkS2V5IiwibWl4aW4iLCJtaXhpbkRlZXAiLCJyZXN0IiwiVGhlbWVDb250ZXh0IiwiaWRlbnRpZmllcnMiLCJjcmVhdGVTdHlsZWRDb21wb25lbnQiLCJpc1RhcmdldFN0eWxlZENvbXAiLCJpc0NvbXBvc2l0ZUNvbXBvbmVudCIsImF0dHJzIiwicGFyZW50Q29tcG9uZW50SWQiLCJnZW5lcmF0ZUNvbXBvbmVudElkIiwiZmluYWxBdHRycyIsImZpbHRlciIsInNob3VsZEZvcndhcmRQcm9wIiwiZmlsdGVyRm4iLCJlbGVtZW50VG9CZUNyZWF0ZWQiLCJXcmFwcGVkU3R5bGVkQ29tcG9uZW50IiwiY29tcG9uZW50U3R5bGUiLCJmb3J3YXJkZWRDb21wb25lbnQiLCJmb3J3YXJkZWRSZWYiLCJjb21wb25lbnRBdHRycyIsImZvbGRlZENvbXBvbmVudElkcyIsInJlc29sdmVkQXR0cnMiLCJhdHRyRGVmIiwicmVzb2x2ZWRBdHRyRGVmIiwiZGV0ZXJtaW5lVGhlbWUiLCJnZW5lcmF0ZWRDbGFzc05hbWUiLCJ3YXJuVG9vTWFueUNsYXNzZXMiLCJyZWZUb0ZvcndhcmQiLCIkYXMiLCJhcyIsImlzVGFyZ2V0VGFnIiwiY29tcHV0ZWRQcm9wcyIsInByb3BzRm9yRWxlbWVudCIsInZhbGlkQXR0ciIsImNsYXNzTmFtZSIsIndpdGhDb21wb25lbnQiLCJwcmV2aW91c0NvbXBvbmVudElkIiwib3B0aW9uc1RvQ29weSIsIm5ld0NvbXBvbmVudElkIiwiX2ZvbGRlZERlZmF1bHRQcm9wcyIsIm1lcmdlIiwiaG9pc3QiLCJzdHlsZWQiLCJjb25zdHJ1Y3RXaXRoT3B0aW9ucyIsImNvbXBvbmVudENvbnN0cnVjdG9yIiwidGVtcGxhdGVGdW5jdGlvbiIsIndpdGhDb25maWciLCJjb25maWciLCJTdHlsZWRDb21wb25lbnQiLCJkb21FbGVtZW50IiwiR2xvYmFsU3R5bGUiLCJjcmVhdGVTdHlsZXMiLCJyZW1vdmVTdHlsZXMiLCJyZW5kZXJTdHlsZXMiLCJTZXJ2ZXJTdHlsZVNoZWV0IiwiX2VtaXRTaGVldENTUyIsIlNDX0FUVFJfVkVSU0lPTiIsImdldFN0eWxlVGFncyIsInNlYWxlZCIsImdldFN0eWxlRWxlbWVudCIsInNlYWwiLCJjb2xsZWN0U3R5bGVzIiwiaW50ZXJsZWF2ZVdpdGhOb2RlU3RyZWFtIiwiU2lkZU5hdmJhckNvbnRhaW5lciIsIlNpZGVOYXZJdGVtIiwiU2lkZU5hdmJhciIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwid3JpdGFibGUiLCJHbG9iYWxEYXRhIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJzcGVlY2hUZXh0IiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiZ2V0R2xvYmFsRGF0YSIsInVzZXJEYXRhIiwiZ2xvYmFsRGF0YSIsIlRleHRBcmVhQ29udGFpbmVyIiwiVGV4dEFyZWEiLCJQYW5lbFRleHRhcmVhIiwib25DaGFuZ2UiLCJjdXJyZW50U3BlZWNoVGV4dCIsInBsYWNlaG9sZGVyIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJhcnIiLCJhcnIyIiwiX2kiLCJfcyIsIl9lIiwiX2FyciIsIl9uIiwiX2QiLCJtaW5MZW4iLCJmcm9tIiwiX3R5cGVvZiIsIl9yZWdlbmVyYXRvclJ1bnRpbWUiLCJPcCIsImhhc093biIsIiRTeW1ib2wiLCJpdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJkZWZpbmUiLCJ3cmFwIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiX2ludm9rZSIsIm1ldGhvZCIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsIkNvbnRpbnVlU2VudGluZWwiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsInJlY29yZCIsInRyeUNhdGNoIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0UHJvdG8iLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsInZhbHVlcyIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsIlByb21pc2VJbXBsIiwiaW52b2tlIiwiX19hd2FpdCIsInVud3JhcHBlZCIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiaW5mbyIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsImVudHJ5IiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsIml0ZXJhYmxlIiwiaXRlcmF0b3JNZXRob2QiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsIm1hcmsiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImF3cmFwIiwiYXN5bmMiLCJpdGVyIiwib2JqZWN0IiwicmV2ZXJzZSIsInNraXBUZW1wUmVzZXQiLCJzdG9wIiwicm9vdFJlY29yZCIsInJ2YWwiLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJnZW4iLCJfbmV4dCIsIl90aHJvdyIsImhvc3RNc2dMaXN0ZW5lcnMiLCJob3N0VXRpbHMiLCJtc2ciLCJjaHJvbWUiLCJ3ZWJ2aWV3IiwiYWRkSG9zdE1lc3NhZ2VMaXN0ZW5lciIsInJlbW92ZUhvc3RNZXNzYWdlTGlzdGVuZXIiLCJpeCIsIm9uSG9zdE1lc3NhZ2UiLCJhcmdzIiwib2JzZXJ2ZXJzIiwiZ2V0Vm9pY2VzIiwiaG9zdE9iamVjdHMiLCJpbnRlcm9wIiwidm9pY2VzIiwicGFyc2UiLCJFdmVudCIsIlBsYXlTdGF0ZUVudW0iLCJUb29sYmFyQ29udGFpbmVyIiwiVG9vbEl0ZW0iLCJUb29sQnV0dG9uIiwic3RyaW5naWZ5SG9zdENvbW1hbmQiLCJjbWROYW1lIiwiY21kQXJncyIsImNtZCIsIkNvbW1hbmROYW1lIiwiQ29tbWFuZEFyZ3VtZW50cyIsIlBhbmVsVG9vbGJhciIsImtVbmtub3duIiwicGxheVN0YXRlIiwic2V0UGxheVN0YXRlIiwic2V0Vm9pY2VzIiwiY3VyVm9pY2UiLCJzZXRDdXJWb2ljZSIsIm9uUGxheVN0YXRlQ2hhbmdlZCIsIkFyZ3VtZW50cyIsImtQbGF5aW5nIiwia1BhdXNlZCIsImtDb21wbGV0ZWQiLCJzcGVlY2hTeW50aGVzaXMiLCJTdGF0dXMiLCJQYW5lbENvbnRhaW5lciIsIlBhbmVsIiwiVmVyYm9zZUNvbnRhaW5lciIsIlZlcmJvc2VMYXlvdXQiLCJSb290Q29udGFpbmVyIiwiUGFsZXR0ZSIsIkFwcENvbnRhaW5lciIsIm9uUGVyZkVudHJ5IiwiZ2V0Q0xTIiwiZ2V0RklEIiwiZ2V0RkNQIiwiZ2V0TENQIiwiZ2V0VFRGQiIsImRpZSIsImlzRHJhZnQiLCJEUkFGVF9TVEFURSIsImlzRHJhZnRhYmxlIiwicHJvdG8iLCJDdG9yIiwib2JqZWN0Q3RvclN0cmluZyIsIkRSQUZUQUJMRSIsImlzTWFwIiwiaXNTZXQiLCJlYWNoIiwiZW51bWVyYWJsZU9ubHkiLCJnZXRBcmNodHlwZSIsIm93bktleXMiLCJ0aGluZyIsInR5cGVfIiwicHJvcE9yT2xkVmFsdWUiLCJoYXNNYXAiLCJoYXNTZXQiLCJsYXRlc3QiLCJjb3B5XyIsImJhc2VfIiwic2hhbGxvd0NvcHkiLCJkZXNjcmlwdG9ycyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZXNjIiwiZGVlcCIsImlzRnJvemVuIiwiZG9udE11dGF0ZUZyb3plbkNvbGxlY3Rpb25zIiwiZ2V0UGx1Z2luIiwicGx1Z2luS2V5IiwibG9hZFBsdWdpbiIsImdldEN1cnJlbnRTY29wZSIsImN1cnJlbnRTY29wZSIsInVzZVBhdGNoZXNJblNjb3BlIiwic2NvcGUiLCJwYXRjaExpc3RlbmVyIiwicGF0Y2hlc18iLCJpbnZlcnNlUGF0Y2hlc18iLCJwYXRjaExpc3RlbmVyXyIsInJldm9rZVNjb3BlIiwibGVhdmVTY29wZSIsImRyYWZ0c18iLCJyZXZva2VEcmFmdCIsInBhcmVudF8iLCJlbnRlclNjb3BlIiwiaW1tZXIiLCJpbW1lcl8iLCJjYW5BdXRvRnJlZXplXyIsInVuZmluYWxpemVkRHJhZnRzXyIsImRyYWZ0IiwicmV2b2tlXyIsInJldm9rZWRfIiwicHJvY2Vzc1Jlc3VsdCIsImJhc2VEcmFmdCIsImlzUmVwbGFjZWQiLCJ1c2VQcm94aWVzXyIsIndpbGxGaW5hbGl6ZUVTNV8iLCJtb2RpZmllZF8iLCJmaW5hbGl6ZSIsIm1heWJlRnJlZXplIiwiZ2VuZXJhdGVSZXBsYWNlbWVudFBhdGNoZXNfIiwiTk9USElORyIsInJvb3RTY29wZSIsInBhdGgiLCJjaGlsZFZhbHVlIiwiZmluYWxpemVQcm9wZXJ0eSIsInNjb3BlXyIsImZpbmFsaXplZF8iLCJkcmFmdF8iLCJnZW5lcmF0ZVBhdGNoZXNfIiwicGFyZW50U3RhdGUiLCJ0YXJnZXRPYmplY3QiLCJyb290UGF0aCIsInJlcyIsImFzc2lnbmVkXyIsImF1dG9GcmVlemVfIiwicGVlayIsImdldERlc2NyaXB0b3JGcm9tUHJvdG8iLCJtYXJrQ2hhbmdlZCIsInByZXBhcmVDb3B5IiwiY3JlYXRlUHJveHkiLCJwcm94eU1hcF8iLCJwcm94eVNldF8iLCJpc01hbnVhbF8iLCJ0cmFwcyIsIm9iamVjdFRyYXBzIiwiYXJyYXlUcmFwcyIsIlByb3h5IiwicmV2b2NhYmxlIiwicmV2b2tlIiwicHJveHkiLCJjcmVhdGVFUzVQcm94eV8iLCJjdXJyZW50SW1wbCIsImNvcHkiLCJhcmNoVHlwZSIsImhhc0NoYW5nZXNfIiwiY29weUhlbHBlciIsImVuYWJsZUVTNSIsInByb3h5UHJvcGVydHkiLCJtYXJrQ2hhbmdlc1N3ZWVwIiwiZHJhZnRzIiwiaGFzQXJyYXlDaGFuZ2VzIiwiaGFzT2JqZWN0Q2hhbmdlcyIsImJhc2VWYWx1ZSIsImJhc2VJc0RyYWZ0IiwibWFya0NoYW5nZXNSZWN1cnNpdmVseSIsImhhc1N5bWJvbCIsImhhc1Byb3hpZXMiLCJfZGVzYyRnZXQiLCJjdXJyZW50U3RhdGUiLCJkZWxldGVQcm9wZXJ0eSIsIm93bmVyIiwiSW1tZXIiLCJyZWNpcGUiLCJkZWZhdWx0QmFzZSIsInByb2R1Y2UiLCJfdGhpczIiLCJoYXNFcnJvciIsImlwIiwiYXJnMSIsImFyZzIiLCJwcm9kdWNlV2l0aFBhdGNoZXMiLCJwYXRjaGVzIiwiaW52ZXJzZVBhdGNoZXMiLCJuZXh0U3RhdGUiLCJ1c2VQcm94aWVzIiwic2V0VXNlUHJveGllcyIsImF1dG9GcmVlemUiLCJzZXRBdXRvRnJlZXplIiwiY3JlYXRlRHJhZnQiLCJmaW5pc2hEcmFmdCIsImFwcGx5UGF0Y2hlcyIsInBhdGNoIiwib3AiLCJhcHBseVBhdGNoZXNJbXBsIiwiYXBwbHlQYXRjaGVzXyIsIl9kZWZpbmVQcm9wZXJ0eSIsInN5bWJvbHMiLCJzeW0iLCJfb2JqZWN0U3ByZWFkMiIsImZvcm1hdFByb2RFcnJvck1lc3NhZ2UiLCIkJG9ic2VydmFibGUiLCJvYnNlcnZhYmxlIiwicmFuZG9tU3RyaW5nIiwiQWN0aW9uVHlwZXMiLCJJTklUIiwiUkVQTEFDRSIsIlBST0JFX1VOS05PV05fQUNUSU9OIiwiY3JlYXRlU3RvcmUiLCJyZWR1Y2VyIiwicHJlbG9hZGVkU3RhdGUiLCJlbmhhbmNlciIsIl9yZWYyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwicmVwbGFjZVJlZHVjZXIiLCJuZXh0UmVkdWNlciIsIl9yZWYiLCJvdXRlclN1YnNjcmliZSIsIm9ic2VydmVyIiwib2JzZXJ2ZVN0YXRlIiwiY29tYmluZVJlZHVjZXJzIiwicmVkdWNlcnMiLCJyZWR1Y2VyS2V5cyIsImZpbmFsUmVkdWNlcnMiLCJzaGFwZUFzc2VydGlvbkVycm9yIiwiZmluYWxSZWR1Y2VyS2V5cyIsImFzc2VydFJlZHVjZXJTaGFwZSIsImhhc0NoYW5nZWQiLCJfa2V5IiwicHJldmlvdXNTdGF0ZUZvcktleSIsIm5leHRTdGF0ZUZvcktleSIsImNvbXBvc2UiLCJfbGVuIiwiZnVuY3MiLCJhcHBseU1pZGRsZXdhcmUiLCJtaWRkbGV3YXJlcyIsIl9kaXNwYXRjaCIsIm1pZGRsZXdhcmVBUEkiLCJjaGFpbiIsIm1pZGRsZXdhcmUiLCJfb2JqZWN0U3ByZWFkIiwiY3JlYXRlVGh1bmtNaWRkbGV3YXJlIiwiZXh0cmFBcmd1bWVudCIsInRodW5rIiwid2l0aEV4dHJhQXJndW1lbnQiLCJjb21wb3NlV2l0aERldlRvb2xzIiwiX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fIiwiX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyIsImJhc2VQcm90byIsIk1pZGRsZXdhcmVBcnJheSIsIl9fZXh0ZW5kcyIsInNwZWNpZXMiLCJfc3VwZXIiLCJjdXJyeUdldERlZmF1bHRNaWRkbGV3YXJlIiwiX2MiLCJtaWRkbGV3YXJlQXJyYXkiLCJpc0Jvb2xlYW4iLCJ0aHVua01pZGRsZXdhcmUiLCJnZXREZWZhdWx0TWlkZGxld2FyZSIsImNyZWF0ZUFjdGlvbiIsInByZXBhcmVBY3Rpb24iLCJhY3Rpb25DcmVhdG9yIiwicHJlcGFyZWQiLCJfX3NwcmVhZFZhbHVlcyIsImFsbSIsInJvb3RSZWR1Y2VyIiwiY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlIiwiX2YiLCJkZXZUb29scyIsIl9nIiwiX2giLCJlbmhhbmNlcnMiLCJmaW5hbE1pZGRsZXdhcmUiLCJtaWRkbGV3YXJlRW5oYW5jZXIiLCJmaW5hbENvbXBvc2UiLCJjb21wb3NlMiIsInRyYWNlIiwic3RvcmVFbmhhbmNlcnMiLCJSZWFjdERPTSIsImdldEVsZW1lbnRCeUlkIiwicmVwb3J0V2ViVml0YWxzIl0sInNvdXJjZVJvb3QiOiIifQ==